{
  "collection": {
    "info": {
      "_postman_id": "4bd78d4a-8f35-432a-a4e9-9e5a47c7c93c",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "1575115c-2183-48e7-95fd-eb20b0329bba",
        "name": "Clear Cache",
        "item": [
          {
            "id": "2751e60b-d5c9-4eeb-8a24-6e564e6b45d6",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "07eac1b5-3887-4ab3-8e43-2e5fa4c4e92e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "819dd363-803c-4e04-9772-8650e511810d"
                }
              }
            ]
          },
          {
            "id": "b643a42a-6d43-4878-b819-6861a4c9b54b",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b801c22d-5aac-4121-841f-3dc58e2d56d3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c7ad4d56-c132-4a62-bf8f-f6376da426c2"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "13883299-30c3-4bc4-aef3-4b27950120d0",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "18646789-5dc2-42fa-8a40-9b32d89c14ab",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8bf71ebd-397a-4b8b-a60f-ed8253673b11",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3c316b13-9e85-47dc-b6cd-1ce26bccf13e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "83efc050-4a1c-4b39-a385-a7911f8c7511"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "48dbd7bb-b706-4d28-b1fa-43d733a4691a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e525d65c-29ba-4d21-9023-bf7f4697a781"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4607c95a-6979-4834-8d57-65f44245aba9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a6c8aa53-655d-4262-84ea-9378b2b89dcb"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a47f4e0b-0d89-42f4-a534-4351cc652fae",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "8be55518-52d1-47cc-9dcd-cfc39c968080"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1677cdc9-1f2f-439a-bae0-38b61cd64dc4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e0b840ee-b040-4c27-80fd-4e2b2d37afb4"
            }
          }
        ]
      },
      {
        "id": "f6bc95e7-f2b3-40d0-b0e7-9cc2954484ab",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "94c36540-f2cf-42ee-8a27-d4ef04dd1138",
            "name": "Negative Testing",
            "item": [
              {
                "id": "23b1549c-8cc9-4b0a-9daf-9dd776ffd5f8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7282ebbf-a793-4235-bd48-9a433439594d",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bac95689-9ec1-44a8-b6a4-147ff8d3148d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "171005b6-d16b-4996-bd8f-382df0af7f07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40ffc781-85e5-4d73-957d-9e7abc4eeb1e",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "907fd3a9-8316-4f78-b94d-7847dd045c20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0bbe4a92-3498-4928-9ab3-393b66a9a7e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "272b4c3c-59b0-4486-8466-e39df0864d7e",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9af16ab-9e47-4fbe-9eea-90aee3a27b21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8e42c665-57ba-4104-ade0-4091811cf6d6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "18f1ecfe-6578-44f1-b082-e6a1b7ab5dec",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a3e5222e-99f6-490a-9648-3cf0f52de221",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "452420af-c104-46b8-9383-c7d4e1fa350b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "87292fbd-c113-46df-9f36-6ec17ce48229"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1e9dd20-ac49-4d82-9101-6033e0e81331",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b81dd23-fd4e-4e5c-bfb0-0a0afd80b49a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "edd258df-bb62-48f4-ba71-65604491ca64",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d556bfeb-c3e0-40d4-97f2-f74dc2c180dd",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a08eda7d-6be2-4020-ab1d-6fd9dfd7f4de",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "5043b16a-1e87-4b3f-befd-b30394e79eb1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "15f7285a-5d72-454c-a944-c8b071bf1959",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "24e49622-233d-42cc-b48f-d2fa4cbb97c8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b7a7c78f-5c7a-4d57-9339-fa60b1a32254",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "024eb168-420c-485f-810b-bdd39dab7a26"
            }
          }
        ]
      },
      {
        "id": "4717e41d-bcb3-461c-8493-88ab8a131715",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "1f5262f4-737b-4da1-bd68-e747124f3353",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5a0c2c1f-e314-4068-a282-c58c1394e18a",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "3b718299-7736-45f4-bf19-7666650526da",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aebc04f-877e-4267-bc81-2f03c145c7a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae6ab98e-bc27-416e-ab07-fb830f30c5c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80f6005c-803c-44a2-8776-ae90998db0b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7137d74d-e1b5-4d62-8e25-fe148fba2bdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94d3da8c-e9ee-47dd-bf0b-e33a255ece99",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c473190-4602-4467-9efc-3ea885ea3ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d0cfbdd-870e-4659-9074-4d4586aa0343"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "707f24fc-d2ce-40f9-91cf-422a251b9039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d7fd9026-39a7-42ce-b3fd-6d90e9359fdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0be3853-596c-415f-95ae-e61d512b4bd6",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3240145e-0702-45d4-8757-8211671b8301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "882729eb-37c8-47ee-a768-ae23b7613bb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d43e51e-a9af-4009-847d-f98b1a85f405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b3d8a4d5-fab6-40f5-a92c-0a5dfd535c0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fa74e6d-57d3-4cff-a776-1d8a59377ad7",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a286088a-d9ca-49e5-a97e-9a5437823cab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "789b1a4f-cdb9-4b34-88ba-20f2d82be57b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64a7d7ae-63e9-4591-ba5e-2ebfd5b626c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "75be9b0d-6f7c-488d-821d-810c937e897f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05a0b2df-6a61-4c7b-80e6-fcee1326eeb1",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a710a7e7-487d-4b78-af7e-71c51be6c15c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47726c18-6eaf-45b5-8bff-a60479d5581b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "765b2e0b-487b-4e9e-bed9-104d1807afd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "918906ca-0838-4c8e-a3b9-9cfffcb4c742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf36179b-84fb-48fc-8557-2411b2700477",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11ec6177-83e0-4e16-bdb5-57fab7f28ea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd5147ee-925b-4757-b200-8fe8c4b23bbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "087b57e6-ba3d-44ca-a84a-0bdb6b5f2c0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4473f142-2519-4dcf-9ef9-cbd0412e6072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d98731f9-b9d1-46b8-aae5-84e09b781881",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fad2b22-f5fb-4fc6-943e-b19bea3e47c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1c07ea0-6648-4485-9eae-2970f2782d35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "861b3ca3-9557-453f-9f50-2db46f8bac97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "87bb02fd-e75f-46a5-a670-5407b16564af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c537aab-2fb2-4016-91fb-d9d60a4bcd98",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "329a9623-7795-4e26-9567-da4e0ea66259",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e70e1d8e-e6d8-4b58-93ff-785129b0c593"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb8d3475-43c4-4b66-970d-74a7fb2cf5f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ef961b20-2b66-4d59-9440-28e16d2a3fe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2077dc7e-c28c-413b-874a-1c3871d7a278",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d24022f5-6dfd-482a-ac7a-09392eb385fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f62a8e82-8b74-4f78-9e05-b733a126cf04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "230eb66b-8e7e-4cda-95c9-0799583eaf68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0dee124a-c5b4-4b90-aa6a-d438333bd552"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0e13c8f-3ebe-4b6d-bce4-ef9f6e017e3f",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3dd2363-2c56-4485-9b06-e0ad67eba9e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "133879f1-3615-4ec6-9b23-2252f4f2f927"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3c13b40-f831-4535-befd-7f8b24b3f1ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3a283861-5328-4598-b62f-f77aae8a7a95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cc50c9b-aa09-4620-91a0-38d019377c01",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64ea7e5f-af87-4e29-92be-c7c8bff6c83c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22d872ec-cabe-45f0-b750-4cfdabab8ec2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8875019-fb34-41c5-845d-8073ee388a0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8a1bf936-5780-4bca-87e4-71a4c033a6bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a6a6d79-46e9-41ee-be1b-34f27f6104b7",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5e5a88e-e7d1-4389-a939-e4fa2a117315",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5de674e-cd69-4993-9285-ba398571c2c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4862b1ec-0005-426c-9b47-9519c66304b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c2110986-a6d1-417b-8431-0d9c1ab4cb08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e007b3d4-cbf6-4a0e-a624-08012b8786fa",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e3c1f6c-5792-476c-babc-6573ac9c127d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "551188ba-02ef-4469-b546-c17000524352"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34c1093c-92cb-4e78-9593-34b02cd50377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c9257f00-813e-4fd2-877a-f10bbd03e9fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e36146dc-08ac-4578-9a99-1666bca37af6",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97527af3-bbf6-4517-bc84-8a218c4477e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f2f8f2d-b37f-4900-9cca-a5d2e83dec93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efc99301-f105-4230-9368-7163d3442596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "78c152fc-a7ab-48d6-b3d6-8fca815539c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f53794d-bd10-4b5a-9b26-88fa720a8a79",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d1a43bf-eae7-4dbc-ab41-9b3addab0109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27fea9ef-6193-4fd3-93ec-155964e0c06a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f8fdd2e-58f1-4c02-9aee-1bb5ca2ebd4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "69fab9cf-f048-4abb-9fe7-3f7284be84f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59e9e1b2-11b2-4c6f-98bf-b8d330c4cefa",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baeaca75-2863-42b2-87fe-5f88ca5da7ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "623b9233-5e27-4414-bd44-4606f27107c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb746fcb-e583-48c1-878f-ead519e20db8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bedf844b-d047-4fdd-944f-64775073cf03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4de8aa5-ed88-4c5e-8f53-97b256b315fe",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d848b21-a7f7-43b9-89ac-776f5a8ba2ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4c7198c-9df7-4e70-8821-00b38dde3427"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4e2734f-f90e-4061-86cb-fbb60ab38e5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "47326745-279a-43b0-b90a-85bc9e6510f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "657b2f5b-00b4-482b-a42f-b361712061a9",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c3e3f2a-a52e-4fa3-b97c-2471d22db89a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b74ab736-a0f6-4c61-a564-b60b0ae44c76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b0dac66-93ce-4dad-b51d-7adee85ec028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b0f0519-0c49-43c7-b69a-fa5cfdf9cb62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "814fb148-cd71-4eaf-aa60-d988c8bfa39f",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e82a6dd3-7025-48a8-ad82-d0d0e995e5c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79541560-70f0-4ccd-8dea-1324f55e5036"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "650fd6ba-99da-44ce-bfc7-ac9947b568de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "87c04e4d-4185-4bda-9364-0844af210d19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5adcd97f-e75e-4658-84aa-91a751d083e2",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e133ef6-e527-4a26-9c94-171fbbc01747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78fa7fdb-402c-483b-898a-9101343ed7d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "030821e1-228a-4ea6-85bf-58570f40739a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3e65506-f2f4-41e4-b2e2-a90808c0d894"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d6d965b-0713-4496-b9ff-d06fc6f49cc3",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe1c61d1-0a85-4787-8494-d7dedcb10dcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "892d0e7a-9eff-4ec2-a64e-43010f7e750d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f3b02ae-17c9-43b5-b1f4-cdf948353157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "30c907ca-c29d-490b-9c47-2168f523c5df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8d5be3b-37bf-41a5-9bac-5179e00fdd9f",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "205236e2-716c-4e53-8778-9e6e89b99c00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e26db9dc-e29a-468a-9a31-26a6d1526062"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c708fd7c-1357-4961-908d-789196d8387f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c37cc9b0-93a9-4fc3-b69a-e31ba625b5c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f55d0784-9fa2-4b70-90e9-1c05660db81b",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f08d9b38-7930-43c9-966d-d224e5d55057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cbfdbf0-cdd3-4371-906d-2156622b74db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18b26560-dfef-4e71-ade2-3a64be9402f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1aaf628d-f668-44d9-84df-6b2076e8ea42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bd7346c-8627-4e3f-8160-a293a7403981",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9279ca50-a44f-4617-99ca-5f6940a20250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ce4d6b7-100d-465f-aa3a-424e11247bf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bfb6a25-303e-46d7-a6b1-d958f0380dfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8a8af92-42ec-4532-80b9-de6a932fc742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39980381-bc98-40b1-a3ba-7461aaec6226",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebd7ad13-35d4-4529-822d-eba679c3c95b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cda015a3-33c0-4440-83ad-cbbfded6219c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6f0b23a-6850-4ab7-ba44-df8a6da99f57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "521201b4-f01e-43ac-9006-9021da415e0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "565abde1-e34b-4169-9f41-7662a1a1a5a0",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eff8515-0363-49d2-9234-842fcd3bded7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21fce2f1-e1e8-45d6-97b7-7a6ccd8687fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c334ad5-6202-4f40-8695-625eae2ea045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d19ee0c3-021c-42bb-a8e4-c63747601355"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3639185a-3c80-4a0f-92d3-f0ae0976ab43",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3825941-7351-4545-8398-a715e78aaffd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6870217-9bbd-4652-86c5-36948e18e63c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "352068e2-9826-44c1-9cc2-0aa2aa7276a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6cd116cb-e4a9-4883-be8b-4dd4b510b6e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f186fb95-93c7-407b-a04d-40d36fb1cebd",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2518e78-c8f3-47d5-aadd-a4f6b6407d96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be11bf34-a57e-41e0-889a-464caa7d4aae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c48888a-8040-4a1c-9b42-28ff41164b9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "61d11d38-95f0-4ed4-aca9-bce14c07275c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69661d63-381f-43e4-9aba-55f4c325943c",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4917343b-2ea9-419b-a97b-d78916af82ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "924eebc9-6bbf-4b72-84e3-282d920536cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b5c796b-eb5b-4f49-a115-41e7abb3dbfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "44fdd2e4-7e51-4d7a-a80e-4e3c3585a8d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72334240-836f-4a00-a6a0-1a1979cc1ebf",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24d839c3-f7be-42c4-976c-38cf72aaffcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76e8c4fa-4e4a-4d8a-a7dc-ae1dd2b7273a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f09765d5-b7ca-4b59-b16c-517c689f6b4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "61029280-bec1-4b39-a6c0-0878b27292c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05f5b03b-4658-4007-9e53-7d05c13d5a6b",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f345bd4-4fd1-4d9b-83ed-a473f7e592bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b25b5020-2f3e-4ff6-b270-53019bbe8f15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed0352d5-2368-4e99-9879-aeb7207c58c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "523ed749-cb77-49a8-8587-92de75e7e8e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0e2ba9d-71d2-47b1-b122-625a2105680a",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f7f21bf-7ede-46f6-aa1e-6470c3566a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b87cbbd-e76d-4bfb-af2e-cfdb9e614179"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a747c56-ee41-4611-b64c-76ddbc33d05c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a93b043f-30a1-4182-a479-077420f5b37f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2420399b-88da-4f3f-8488-cc7124ac33bd",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af6d3b92-de4d-434d-b1b3-a98f8d50ff02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54c94c7c-6aaf-4367-b148-5829b177056d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e94d8f32-c5aa-4322-ac1c-d9aab787c9d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f15e067-5879-4837-b05c-5b6dfadeee84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc4b883f-ec13-42a7-9e54-b5ec3e6391df",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5b94e33-b83c-4fd0-8235-26d3d992ba7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f27df8c-517a-40f8-9160-04c78c446b97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4d4e986-ad47-48d3-a5e6-ab3fe38b2149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a786afb-430a-45ab-a969-b3b783100170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd2e092f-09df-42e7-b1ee-273c1f008cab",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44a9dbc7-c207-44e8-af5e-4968783e497c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a13a4e2-3000-49a5-bc5c-d9af7783c25c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fe118de-183b-4efb-8eae-84ea42a79aa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "52baeb3b-09fc-4f1e-af65-816b909c647a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7908e12f-bceb-41d8-ba24-ab7e1128f2c7",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "198f8d8a-4049-42b2-a2fb-7fffc7833cd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "979d0006-d6c0-491e-a7c2-99ecfe8a348c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57c341aa-2e54-457a-90f2-4417a93fbb02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b5ab90ba-de85-41ea-815c-37419e035685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a04221b-4575-4c55-b6ef-3bd5b836805e",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f58e315d-bf30-49a6-885c-d078502fb1d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a82ae3a-699d-4165-b6d9-4efbb10939dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6106acf5-735d-4705-8628-c96e4a419681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb880ace-83bd-4741-978d-a8514e8e8be5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "066e4483-0701-46e8-9245-8aee75034287",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5b8bcf8-d9d4-4b78-b215-236d2f366247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3bf1f87-d18f-44fa-8aa4-34f2ecca9cd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b453130-3a03-4a6e-a034-35ddf6ee63b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "49cc8f3c-060f-4fba-afff-8cda2695651d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21f04748-7d79-460c-b0e5-a8e8ae778027",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a796590a-aa40-4d90-a555-213b04ede499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8ed6279-ecd3-4bfd-a0a3-eb761400613f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "211503f2-7014-4cb2-abbf-9580f36f53f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0af289bf-7a42-4fbf-ab3e-706fbd186f5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bae3b19a-5f1a-4807-bb9e-690b0943f810",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a80fe87a-d977-4e8b-bb71-96d33e314358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f3fde90-7145-4558-b35a-f45eea273e83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89f9a8d0-351e-4400-9975-1b5ca14c08d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2bff8141-1dc2-4a59-99e0-43743852b024"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eb39271-7afe-4cfe-9478-041bd2ae8030",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a1c7f92-fe5e-48f8-8a4b-8f6663ba9ab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b85dd9f0-4df0-4ccd-90b1-93a8155b5aa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fb2c7dd-fa16-4a42-9dbb-42b4caeb3b32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff9845f4-e0f8-4604-9d00-33c2cf97580c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e674998d-8dd4-41b9-a0a7-cb3a5fca57f4",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eacdcff6-14f3-4496-8f0b-71d277201fbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41236822-f6c4-4478-8442-9a211a7cbdbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8989fce3-3e53-4948-b1e5-f5a0c8af63e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "55369750-ac34-446f-b0e1-a988d5b276a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a681be1-7190-4331-9547-0027e935104e",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eb5dfb6-88b1-40f7-9608-f1d0548b3127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73c663fd-db91-46ca-9830-d8627ed17b33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c828a7a5-5172-41c5-b05d-29bac483e91c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7bba55be-333d-46e4-ac51-c7a3edc32f4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "186dbb34-8756-48d1-80b1-fb666994fadf",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c2c9efc-0fee-4d7c-bcfd-c3d7481e8dfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f521900b-96a6-4932-954b-2b36220739ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "211d1e5b-7a76-4f63-9092-cf18202a240e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "7781fb52-cfb9-4268-8d52-039d9e3d5448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e1c2dc8-2f90-4018-9861-3219ac07a5da",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26c7f69e-4f31-40c4-aea8-e83e085a060f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2f19f05-6696-4235-9680-69830e1326b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5fee5b2-ad23-4782-9a68-78022a648571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "76e1bc27-5d46-4dcd-a3fc-d2451244a0a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78d7a415-f8de-4ce6-94f8-0db6ea2b236d",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce35fddb-2cbf-431c-936f-872ca43cbba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b993fe7a-5549-451e-90c8-d1f062b8e4ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "258907a6-260b-4e90-a5f2-5cc0894d39d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b411e5c6-cf7b-47a9-8c9e-273a3808713b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99a5dd5f-5759-4249-bad8-e9e04b4f47e5",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e259356f-a00f-4555-af66-52930c5234c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "067ae568-346f-4dfc-87b7-65d6107ca7c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21b28f6d-cda9-4d56-859d-00187f6616b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "31394639-4ae2-449c-a2b5-30774afb81cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14b12cb7-1a33-4355-89a5-056077b880d1",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9300179-1599-4701-a531-1d045a9e26ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "632bd014-8ed0-4966-9a83-d2924f8a4d93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fa3a0d3-4d69-4f60-a69b-3c4e233539cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cdbb32ec-c0bd-43b6-a815-a6c31991e3ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d645c0fb-7a7f-4ee7-94a3-c1ffba5022e4",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "265d8ec2-1013-4e2f-ae99-11bcb407cc7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e790688f-0405-4973-b643-3983e49be93b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c226a890-cfbc-4069-aa71-5887d20d8510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec8bd78a-fb18-420f-bd7d-8f96bb3af145"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ea5932b-1e5e-40b6-8294-baafd4351c00",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7fa21d5-1723-4ae0-a121-1698bd84ce9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aea9dcec-279f-46d3-949e-3f3eea88456d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9edab50-d929-4259-9c6a-a79d1fd21741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "312e9eef-0b61-4d41-a0ee-9b4aa5870de8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "625d3581-8f65-410e-9d97-68f980b9166d",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc16ce8b-cdc9-4048-89f2-9a321116eb53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c8eb683-d6c9-4b3d-b9cc-3df21f2ced99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4865d11c-7c6d-4bb0-8959-15592b2cf34d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "4cc6c780-413d-4ee6-925d-253601722bfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c0e7181-4a85-49a1-9c12-6d18c57c115a",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49cdb6c6-966f-4362-9cf2-0e328b7ed716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "140c74f0-917f-4031-8684-3268a7709e7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dece309-1117-4e9b-9183-57eb5df44e5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "50f4d7f1-beb0-400b-bff5-736f48acb610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11286240-6abd-49c8-84c0-7d3dc2b177e6",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88b622cf-ec54-4f0a-95d4-eb164b0c296e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd3938aa-e6d9-4f66-8e03-57e048f22857"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8bd257e-ba6c-4498-a924-4ff0cb3d31d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e89221e-b513-4fb3-a173-35ad943080e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5385ef61-9596-4537-b8b8-7bae7a40b887",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aac93ca-431c-4d96-be9f-8c1f492f8a33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e4ade0b-37e8-4001-9bec-03fecefae93f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f07e7ce2-f33d-496e-8786-aa6a1f9ee2de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "439c1608-c3a9-4b39-8a64-8232823ff742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0110780-99d6-4637-9b60-f7c3691dab37",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "533f7edd-71e4-49e4-a801-8a7daa3f4dd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30d8092a-3898-4f65-a253-a3795dd0d671"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9e49508-445f-4fb4-9856-ce3be4ce8b8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9455b65-340f-4bea-a2cc-4c4a9a133794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b2c2b10-8f4b-4d22-b61c-1163494d5c20",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6554b06b-9fdb-4021-97dd-b0bc97d3deb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "178b1f7f-0203-4909-94ec-fb361d55963f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b974be59-e808-4017-8550-e7318474c388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "89dd1fcf-854a-46a0-991f-af94dfbd4ddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "909d7d6e-282e-4a7f-9d85-e5f63c200785",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ac8f77d-630b-4d8e-87a5-d570fbd14036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "160e6b2d-9df8-49f3-91bb-eb9270c7a28f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8078c910-fb3c-4355-bbdf-5ea16b620f5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7636f3b0-48c6-4aa6-8f42-aa4849c1f579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ab706fd-11c7-4f4c-a746-e4cb293d01ea",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85db7e36-9a3b-4066-be5b-718b9e559a64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b29d0966-88eb-496d-948a-1deb4f00315b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59763c50-ec27-4b96-89ab-ae7496e97e8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "83e74e12-09a7-417e-a335-bdfd639fefdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6185ad97-a89c-4d8c-8503-186f9a4ddffc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5d0ac15-302e-4b42-b9ca-9d86efa6dbf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73e797a9-c183-4422-874e-f35a113504a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdc3b70f-c365-4332-9b9d-061974f56140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2b2e870-3f21-4332-a536-c8eee33c311e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4be0c1d6-f0bb-4e19-9834-41a72cc4e3de",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3b13666-e20c-4294-be5e-a8516eb3f1e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2083097-8774-4171-8fbc-a8483a3e9b77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dd65d2d-210d-47c6-a2ff-cf7824ae4aa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0ed9a10f-3291-4e65-b306-5c596bec2c00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5342ad0-9c7a-4fed-b49b-bc0172964188",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaec8530-ef6d-4c10-9e85-48d859bbe43f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb69f762-1906-415a-a2bf-16e08e27c772"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f94c181-d435-41ea-916b-77830004cae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6aa8fabe-e9fc-418e-afc5-0ddaf6de6356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4512508b-dde9-4cb7-9427-2cd7186d5fb4",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42ddabdf-2c0f-4e04-9e97-3f4117e4b246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06c170ab-ccf8-45cd-9a43-43a520998944"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55e3e38f-27e9-4e82-a9b7-e84d15a17392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "631b7a57-5ed0-4e97-b5d9-9dda0490ad1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31133421-f1e8-4e41-b576-784f9e3f9e7e",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd649430-b662-44f2-a9b6-8a8cf12c2835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f46b3683-d069-469e-9cd8-44ccd4787cc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc746894-0a3e-42e9-97a3-5c9bb2c95c34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "aac3007c-c368-41b1-8790-78989ca47bae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee7776ba-4f02-489e-8296-d40f753ee128",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52102ca7-2af0-4751-9c98-5f86ec35381c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3691d4a-333c-4fd6-8f18-1e5327412ea2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d675ab39-17e0-4e39-9079-19c616b271fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "675ffdf0-e3a7-4e47-b1af-a3c5c1ce8f7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26eefeb0-1d24-4537-b6f7-a2a8d9f93547",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "996235f1-5749-4e6f-be52-71949a16a86a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6ec9a74-9cfc-467d-a643-8d2ec9fa65d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4425b3d7-b067-4173-82ec-df5b684ff524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a23815a-8257-46a5-8a10-9f7d83ea66ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86020507-27a7-4eb7-8af5-8c9100459600",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52fbe1b6-a0f9-4031-8d3f-8e0ba780ee23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49bde1b9-fd80-4307-9c95-86e8cef79b4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e99e85b6-7a7e-4e3d-8e98-d8f9c1b224d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "681fd89e-37f5-4807-ad95-84fa3aa93d6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7921f84f-ba12-46f7-bf63-58d27e557b4c",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4cb049b-4a92-47e3-bddd-23bef0321435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa353a6a-2887-4aee-9dc4-968299af6631"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5b0beaa-f962-48e5-97f0-0e4f62ca66a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "58aa2812-006d-457d-87ec-200ae64c37e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6e5dd5a-94ba-452f-b4d8-fdec4b54d3d1",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "706d7834-a628-4709-aa89-8462ba8cdb02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d36963be-2b79-425f-8931-3f4f6eaba317"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da114109-04f3-4b68-b5cd-66a4a28451e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "15367401-65d6-4552-8b16-b558d0223ec2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "251fdaa8-46f4-449f-992a-333bc285c528",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6e81b93-3e39-4fe0-8cd5-6ff0ddd6e542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffb19496-bb94-461c-8e38-b38fff6b299b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc9d62dd-e2ea-4c80-8622-2979ec011e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "390c5829-1c07-476e-9e6e-7160fb205471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "512ca860-0d4f-4a84-a991-456f8c1ae8d6",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0164916a-9a80-4985-9234-684dd6097491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d386bbe-6de7-4299-bdf6-d122f9722292"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d441ed1e-04ec-4013-b35a-25c3346c83f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5687f609-fe2c-478d-b53c-acf0d86b56bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6acce830-b677-4468-b112-99a91957ae00",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27498e52-9cae-4ec1-871b-16bf650bcad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86f04011-d8c2-4a96-ae84-2f00ee748cf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a0be657-4f52-4b86-8bff-ccfcc1655b19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "720bd424-3df6-4f41-9c54-ed037013f52c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d04c911-6040-49f8-8c85-970b66c45afb",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a880fe5-de80-4af2-a57e-fb8de6dbabb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b247479-0c13-47ce-b376-4c57b646b375"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fd56771-91ed-402b-95c7-5fb1bb3c78f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "161b7014-c81b-4346-8706-8a6cf5ddb7c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab1bd3ef-ee43-4273-b225-b3a9135bd9ad",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "860941bd-d11c-4f90-806a-b0a6803cd8bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41b96e6a-f51b-4396-9a01-2f46368bace3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c877f59b-a7cb-4ede-9346-4467184389f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4241321b-1a81-4b24-963e-f6bf418367a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bfe5b84-d114-4106-aae1-8bc81356a61d",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08ab9016-b753-4a37-be29-a08e1b23b643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a523bd8-dada-4cda-8c1d-25ef593c6f3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "622d01be-3b64-4e6a-953b-e0782d7fa1c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8731d616-41c3-4a1c-877f-8f8bfd51eb3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1c1640b-aef4-4bee-a35e-b1c04fb98d5e",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f0d437c-7af4-4353-9fcf-8a4b72d0b83e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43e91ab5-42d4-409a-b7f4-e651c8ddab21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6d24d00-bd73-4547-8753-a48ebfb05c05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "aad538d0-9bdd-4f81-96a1-f90de5943203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b7b3d13-35ec-442f-8a62-b90f95e07a4d",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa7839f9-2dd4-4b6e-a764-804cb647ec6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75e811b2-03c4-463f-9b35-0c3988c4f400"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6682dbf6-9217-4dd8-baa2-3e2e7d001047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd94e3f5-4558-4242-955e-9da804f5bca5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99181e55-c7c1-4fbd-99f7-37a0f62740f9",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e91093a4-ffba-478f-b735-9936915db8b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9c2c0c4-eaf3-4d2a-82c4-609b08d34537"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa3e437a-0af8-430c-b0aa-d0ec03b59aba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e4decd7-624c-4571-ac3e-12e3287a5d9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00449d3d-f494-401a-82d8-053772681688",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b44da8ca-dbd6-45a6-a078-708a0e003125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cc9583f-e68c-4cbe-a6bd-366a61137d3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3c3801f-82e9-428e-8c26-235c78c99d85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3af3026-823d-46f1-b0c3-d7f1af7d0c73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66499a53-ec76-4dc2-85ef-a9d3043b1078",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc8caf5a-e056-49f4-8ae7-9c05b7439436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f2c79b1-6593-4655-be08-cdf98582a7d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7387d6f3-7dc2-4eb4-9c10-5d28f7a8d5f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe18a686-4312-4527-ac32-8aac91b8eacf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d6213ce-3d57-403d-b4b5-5b3cd1093c8d",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42d16e77-4f89-4c6b-840e-8b84579bc7f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "beae1941-858b-41a6-a0d3-cfe4081eedc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a05dcc5-f386-4b47-9f77-30b96f3f92d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bbde343e-9f45-482c-8fa8-c66c5aba558c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bc45383-e6a7-4763-b09e-3afeacc2b783",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f648fe5f-0a4c-450a-a087-909d9cc6e7cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65996380-7b72-4fe8-bff3-367ebe14a14a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0d11598-0ad9-459d-a525-66c38cf78235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c24601bb-18ef-4f75-8ea9-01ab1ce86dd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50533c45-6feb-4815-9ac8-18b8bf796700",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3a6c4fb-0a75-4833-a7ef-b481261c4d08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "377e7b28-9cbb-42ac-a9c6-37a2852a6238"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aabcd02-cf4e-48d3-96a2-39263c48b6c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ec83c97-e6c1-4155-8df7-fa7e89b87d8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fa59258-2bc9-46f1-88ec-ff1b81b59abd",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5e14984-89e5-4494-8d7c-987f9791d777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37b03973-bd19-4465-9ef5-52b922310121"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73f256f9-9906-4370-aba7-4e741a0000da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a4b05b7-c418-448c-9fd6-d7bc542780df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88f0f0e6-1ca2-47e4-86aa-aceb25aaaa13",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16aeff0b-8c10-420d-b689-a3e5366bc7be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "684b4209-a569-470c-bee4-8895d4f71e67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46cc8a97-1b15-43be-9878-fd94d152cff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6b9ff16-9f16-4f9d-9aec-3c5f21f42773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "348cb90a-b109-438e-a91c-758502faa9fe",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17f6eb74-4cdd-4a68-8b18-52f144b1ed9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9114a7ed-6430-430c-9bf7-a55aba175571"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "def4ba21-91fe-4f00-90a8-222e7e3ae79f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e902c863-e429-4f0b-89fe-99ca6475f5fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "936c307b-3f5f-4001-9e8d-1ca84cb35b7e",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c945253d-4544-4b7d-b671-845e08ede666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3549c57c-a700-467a-b929-a10c7a264aec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "001bc8ae-03c2-40c1-8dbc-633c6e1f9129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cf9e88ed-9f5f-4016-92d0-20de237a3566"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ef7f43-686f-4544-be18-4f34e2ff589c",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0797e7e-4a86-437c-9fdb-1abf46a24052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63bfa3d5-a076-4925-84bf-69b58de8ea3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4883d3fb-1cd1-4906-8beb-851ea317066d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c67b1425-0508-4f79-96c0-92f48ca07748"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb40fab9-0607-4f25-9c33-28fea1a8473e",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff3c06bc-df38-4037-a2be-01100dcaf93e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbc447ac-aa1e-4f27-b1c5-86e740f6323b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c3254db-5da7-4d8f-a3ac-3a0d5ffae8c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f38406c9-6176-4cb6-810e-d391766a8bc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f9aacf5-b862-492d-a823-8b67bb23f258",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86c66f26-eb38-418f-b1b7-b58975afcb5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b41f610-3259-425e-8351-d41cc8ea1e54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9852ed97-0004-4e3e-ba21-d1681a71584b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "db8692c6-8609-4f5d-ae3a-c15ed9a46e37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45500b1e-5fdd-4cb6-b5c0-cd192cb71ccb",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1261f12-f983-4b9d-b2de-01e7240e399a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6566c1f3-459a-463b-b775-ae15eb438792"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8c384c7-d037-4870-8a26-1b73b8466ae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0bcfcb9c-2fbf-4cf3-b795-901be7ce693e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f9b355c-d724-4df3-b1ca-9d266d23b486",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81bb002a-739f-482e-9c33-9ecbd68bc1d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce1cb7d0-8a3c-4b7b-87f5-a9625a8dc529"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fe056de-9aa3-4ea0-b144-c9aa4980d873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3010bd3a-b60d-4898-b363-179c23eb5bf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e508d899-1606-45b5-bda2-f024ec3c5fa6",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84ca10c7-ffb0-47ff-b877-2ac61224cd38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "23498100-faa7-416c-94b5-5be199977b28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2523d4e4-4de9-4083-a311-fc2ef72e4001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "800b6006-6777-48a8-8f82-58a23a04dcfc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "afb60f90-f4ac-4ff0-ab68-1b32e73923c1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d23a6913-8051-4529-a568-5ec1a868d306",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "668ad54b-a7a6-4aef-b6f7-07793d726df8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f376b570-058f-4dde-a40e-093a795f0f57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a40360e4-5f98-4123-aa30-c2ef08aa2e61",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2babb7e1-ab69-465d-95cc-605065392831"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "51d90de8-e86e-4480-b021-0f2e84aa11e3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "94df0a7b-7fb7-4690-9534-10be8342d4c7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b18c3d0c-16c9-4da2-ab14-b057711f4f24",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dade3005-5b39-4f7a-8fc4-d90c4d420c81"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "35238a33-3311-43ac-88da-7dad4f682fbe",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9df53914-16cb-448c-b06f-627df9b38e57"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6eec3b99-5cf3-4639-b173-04135fc30bcf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "797a088c-d8ab-408e-8f3b-d69d590548ee"
                }
              }
            ]
          },
          {
            "id": "a91da250-b0b3-4152-b758-2b178b43e532",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9d58e9d1-ffd6-4c60-bf21-d821505638cf",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "94bf4727-c922-4ed9-a2c4-375d94fd292b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d567e74a-8d1f-4fe3-bb22-c895082d2d18"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4ca1f6ab-18f7-4b1b-a5eb-4a50d0ae4e5f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2b2ad014-0b15-44ad-9f8b-f1f3975a3b08"
                    }
                  }
                ]
              },
              {
                "id": "a818ceb4-8702-432c-ac5d-57c9960e9d6c",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8cfb301e-fd73-41b2-a03b-4b2d8e582c3d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "828a7ec8-5118-4a8a-9a88-94c7dc679dac"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6bc3d3ba-1520-4e0c-ad09-a48e52193e2b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "045646ee-3331-4431-9201-8073ec91df69"
                    }
                  }
                ]
              },
              {
                "id": "40c9bf32-f1ad-458e-b423-1a18c260cb97",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "13ef1def-ec31-4cdc-b5ba-2bda425ecc2e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ff5069ae-caff-4135-a684-61201a27799b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e8649937-5545-4f34-bdd7-5a7ae3797d86",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d120d005-9ab1-4ad3-8955-70a59c8f8279"
                    }
                  }
                ]
              },
              {
                "id": "17dc483b-3088-4193-a42a-37d9a05fe2de",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8528e4ea-8a73-40d6-b4dc-139abe24ec0a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "08398f5f-9d51-4a0d-a8b8-f80621edcd4c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c5521a5f-08e3-4b06-af34-66fa9d63ff29",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "32e28fd6-1476-4f7d-a6c2-03a5ecd14561"
                    }
                  }
                ]
              },
              {
                "id": "ca65370c-de4e-4e51-a8f0-b387a1b46db1",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "11b54c8b-a859-4dc7-9a3e-4998bb0d17d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b9af0468-ac0b-4028-b441-77535dd81141"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a7b19fd8-7d49-4920-982d-ac4aa0906671",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "9178641f-b042-4a05-a803-5694fcd1d1df"
                    }
                  }
                ]
              },
              {
                "id": "c7adabe0-d524-4199-a7a2-421efb8b7363",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "082357a5-d0f5-45a4-b2e4-b0c55c8d2cac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8b79e1df-0943-4ec0-83d5-f93b2b13e74e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b58ed33b-4150-4f15-b945-0d93da890f1e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2b169787-606c-4611-ae7b-12020f8f7faa"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c5cfdcdf-a1da-4c90-9a79-bab45c6d0fa6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4517f109-035e-4959-93a0-265451dcdecc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bd1088b5-068e-4569-9357-5c64fd18db9f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "42c1d902-6d81-4ea5-97ac-635c9011fcfe"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e62974fe-2c18-4117-9597-da7ca4d7bfc3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "57d3b851-d2f6-42b4-85e7-1b61ae9d6820"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a77f024e-8795-47da-96c7-052a28866f72",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "020888a4-4b35-43fb-8374-b2c5fc12fd0f"
            }
          }
        ]
      },
      {
        "id": "40769cbc-c0d4-45d5-9fb6-6592d5688e70",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "ce979a3c-0aff-4005-9471-7d82ef636795",
            "name": "Negative Testing",
            "item": [
              {
                "id": "aa219f2d-4d03-46c7-b1e6-a5dd3245c479",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "16a81b94-1188-4db0-945a-85a16d7f1f9b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04de3c3e-1b3f-4b7c-acc2-7a79db9489ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3eeb5704-a390-41e8-b7d0-9a468f173bfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6327cb1-c2da-4a6f-8892-6d547e57804c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd58740e-dd71-4997-b8de-05f94807fbd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "717220e3-8e4b-4f63-96b1-665b68d6912c",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e12afa9-2b0e-47e1-8ebe-2b57615f266d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70de4f96-6b49-4bfa-a527-9af591c6e4d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08e53846-ce90-4f72-8f08-a28dc911b166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "db7e734c-6b93-4b65-82a2-ec70952f9093"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13351c4a-9322-49a7-a1b7-ff3d06220f5e",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cca37e7f-6a90-4218-998f-f4757f3b88e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac7fb0bf-3e8f-4eff-bdbc-2f7734730272"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1793419-0b12-4c96-a0f9-6f4c68db7f38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b240219e-f4eb-4428-b1dc-9c6603766a85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f295c905-3fe5-4674-aaf0-43afd0c26a7c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b5094e8-2e47-4404-90e2-34b870c49397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e540faf4-0cc1-4c97-9afe-0000ffb8b437"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afec4a93-0343-4252-8784-dd7a08eeca43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b63750e-a4c7-464d-9e78-b42d42ed2722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7efa9d4b-4625-47e8-ab1a-798d46f35fab",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa8bf15-e6b7-4b2f-8d52-f972274bc6c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2c4a725-0853-4a28-a062-a44beddceb26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b41196fe-946f-4c6e-9d31-d3534145aa75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "065c4dbf-d546-408e-9a2f-f6ef16c16262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5b1f09e-e170-414d-9bb1-4a4c900be532",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5e31cb5-3bac-4b9a-a980-fe7fff6803eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07e99f13-4249-45e6-af44-f34dc0be904b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5131c059-f67a-45f4-bf31-2b94323c9a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0dc5c768-9bc7-4fb4-9a89-e644e8bae8aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a22e9ac-1e05-4c8e-8c06-d51ac2fbba02",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6b7f8c8-eb78-42eb-bc17-e3f96fca762f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f964acf0-b259-4e42-94a7-2060b7c65657"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "becd6cf1-e0f1-4cca-818d-3f91b1799e7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fd0065d-63c7-49d2-981c-eac52a775633"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05327c9e-02c4-4c02-8e27-7c07f42a5e32",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34c61cfa-a625-4e81-9d5c-697047f0d442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae9f3388-4265-4a4b-b32f-4c35c7120b3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efa9ae1d-73af-47a4-868f-84666528cf8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9be545f7-11c6-45de-82ea-7f6f180d1d60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aa69545-dd2c-48e3-bbec-f36def19bbbd",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f721b30a-e834-49ed-9949-a0e0b95b6d14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e42536ac-13a4-4b96-8160-df76b4a3d033"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "573c62be-e7b7-4c3c-90f0-48f1f27f4d70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b71f3e35-8e97-4b35-88f5-d18f4ce722bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "506d3b0e-810f-4b31-90f1-23183f0a77cb",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2a5fcdf-2e3b-4fd6-9ba4-173e420c89d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abfb7828-b02f-46ea-97cc-23320b573b36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "382f93fd-062c-455a-a974-c977d3baece7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "96bca8fd-089f-47a7-9878-0798ac17b97b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fa83a8a-57a5-4ca0-acc1-28b34d9b596f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a384b1d5-977d-4437-8468-2b4296380a8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc39e015-b93d-4f0c-afc2-052cf762ce99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6596c9d-4045-48c3-8dcb-fbe456cf4170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a850b68a-525d-4959-bd23-e050ccd9b36a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e1cf4ea-7b40-45d4-a7a2-e892e636a6e9",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71bd88fb-a735-4a85-a9b2-65e3124b7af5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f240176-9328-4d46-8c08-ad5c401e5baa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d26338ac-3634-4da5-89f6-fff63b9778af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ba82ac3b-2086-43b6-8cba-f399021238ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eedc5896-1ee7-4feb-921a-fe203a9946ae",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b0e4c70-f990-41bf-8ffb-80a6d54f277c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b4ffda1-ddaf-4025-a503-f306c7ca7075"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1bb1c94-ded1-450f-8bc5-08ce2a90327e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1d475a1-a6f8-4ba9-8902-9dc7e92f471f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8745c385-d4ad-4712-ab63-d353ac44ce89",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4588d3e6-34b0-495f-baf8-89a2064f17a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee0c46ad-200b-4843-843f-0e5c43171d44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c403e449-38a0-4600-ab74-8d75c5b36210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "739a575a-2afc-404c-abfa-357cb80d14ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdfd6c15-d15a-4612-965f-14d635bcc962",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8505cfe2-8aa1-46ee-8cf5-d1d77d4de5d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bfa8243-876c-4353-be6c-3c8100977c51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22c5f543-b044-4691-bc25-4b4701aeddda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "144f9d80-fb25-46da-82ef-732a6d701f96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be7ba6c5-c184-43df-9b5a-eb3d574a9136",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08c40c9e-5075-45d8-bbee-666e4f6f282e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2d6bf80-0af6-43a9-b3d0-5b5affed604f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "637dbc6d-9faf-4652-adba-ce68d606c8ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "3444e120-3454-4d94-9d80-7d12dec898f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f42421d2-f462-4aaa-ae8f-4768fd91e4bf",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a94227f-587a-4a5e-866b-6f3f530216f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c96fc6be-6c97-4e49-91dd-3010abf4d94f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8cf4397-e833-46b6-a1eb-09ecdfe29ada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "7209728d-9609-4002-a68f-f46cbc21bf49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c66da22f-46b1-4f95-bd54-ee8d96f153c5",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "473e4ba4-8dc4-410a-a7e2-f0bf3e0243de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b92e52d1-e8f3-43ca-acb3-c87044fd7807"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a331570b-4a41-48de-9bff-f1ca01b714af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "39b78016-4530-4d2d-9453-67d913a6ea4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5360410-c37a-48e7-b977-3c29d43715a8",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc15a64d-083c-4d41-b23c-0d3f3ff515eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b83d130-6e0a-4b53-be8c-c8eafbcd75fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e1f873d-3753-4e53-ad5f-ee16041ce1c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "256675f6-ea00-4b72-8983-b7a0985aaecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c3c1658-48d1-43b7-ae82-34d88bb26f6c",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b156de4-6094-4041-bc9d-4f373a8d722a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15b5f913-be81-44c4-b124-3b8ff423834e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77018c43-f831-46bb-a457-c70dfa642b3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "556aafa6-a991-40dc-b044-d4146e258272"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4799d62f-0a87-4a81-bb02-600f9adbe126",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f760838-e510-4134-9ab0-ce40a59a73c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab73b7ca-e056-41c0-aa78-680901042770"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbd46244-e5a8-459a-a1d6-6f8bac737b23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cab2ffb9-2865-46ab-9396-0b4563d4094c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bc0028c-f957-4df6-9f7e-e21d0bfd37e1",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "192c715c-69a3-432c-bf68-e8cb622a49eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5b2976d-ee95-4ffd-a995-61e5cb0e38a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b17885c-f104-48a4-a5a3-dd6110ee996a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a0aa0cc-5ff3-46cf-a16a-b790a19195a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "042d8e20-5845-4c74-bf50-419e4ce25ddb",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e8f98f2-648f-46ed-a3f1-58e455826012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "581ae4ce-16a9-4c1c-a671-2b8292376cec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3c341ff-17ba-492e-993e-3d0667b7a5eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1af9747-101a-4d2b-8b0d-c9c11c610ff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d41bba31-f39f-4cd4-be9c-e9efcbf63c03",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a40b920c-a153-4589-9e48-d8300cb92db7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7dde96f-3b8f-4afe-af4c-6b349b45553c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17200785-4f70-4272-ba0e-e7a340d0d6ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf52c464-7bcf-4745-b56a-b48203824b50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5189db55-0497-4128-b01d-d28c41e5cc7f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51801be4-7570-4f72-b4df-ff7482236a21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd568f84-7a70-442c-998b-545e0b9e2bac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d02854b-b39b-4cb8-a34c-5dc4c5cc3557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "364fef24-ff51-42f3-8720-93fe33b23e14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9140eb3b-2c2c-46c1-af25-8a4f7c5ae4f8",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63258883-c4ee-4f57-9d37-99c6f2a86c11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd2f24aa-aa9d-4087-af16-c7bbc000149f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05a0a973-fd17-4ab0-b400-cb75684d8972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f93bd57-7b51-4f48-999d-0fd7a36646d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baee60bf-67ef-455d-95f4-deba8b529e17",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7cd76a7-c24d-4947-b13d-28082848d82b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1fe67df-1dc2-4230-a14b-ce297c3c063a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d460ec7-5f47-4870-812d-7caa9c0b173b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb82c00f-d29c-4b67-a12d-c2f3a0cd9d83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de7388f2-a830-4c06-bda8-823005cdfe26",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9da9f20e-09a8-48d5-a6a3-d6bb6c5220a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "301be8b9-cd65-45cf-ae17-2d5716329fe4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "064828fa-3ee4-4676-82e8-4fec9c16c25a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc00fc4c-cda0-4315-bb79-3259798deff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de36103f-2412-4ca9-b220-e752fb1a26b3",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1974877-85ab-4340-a72f-bd5bdb8426f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e962c21-b5e6-45ae-9738-549c21e484ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83775484-91ff-4ca6-923c-b8c98b2b5821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2bb44e0-06eb-4a9e-812a-c0ebbdce8304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f191376b-1134-4708-bd9f-f6246ef5ea03",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac8e53cc-0709-40cf-8080-f403239662ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67b0ce32-1baf-4aac-9855-2fc17b091b4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb1e0a05-a6d4-4040-83d7-30089dcba64b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7adabff6-5bc9-4b3a-ae62-fa015def5f51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1649dfa4-17b7-42ac-b87e-a06102e0d2cd",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9717c512-29f1-42ae-a64b-0f6d8121afd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5d62e3f-3d8b-4cb6-ac8c-54753d4f1f66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "474674eb-694b-4ab1-9e74-c2bff82e1bbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c22d559-a09d-492b-94c1-91e816e9efad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9801a32c-0d2a-47a3-8c04-e7f2f531b710",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b26d8ca-1192-4f33-a39a-ffd9b1787823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad680b62-5d2d-463a-aa52-189b70c1314f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "603c036b-3c58-43da-a134-4505bf06eca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "10c833c6-f138-41e4-a46a-55b07bcb3e43"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fb06624e-1457-48cc-a289-86ad3800ec33",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3e544ae6-0d55-4772-8cf2-015b64d35c18",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bcc9f3c-32e9-4a77-852b-7adc1ce92580",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "baf6da8f-7df7-4b96-b498-41f903df339a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3b39c45-0242-4d04-b3ee-58087515029b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1cefa441-6a23-4cd0-bf88-64954571113a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0c040319-db2f-464e-ac91-43e91d963c13",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7ab4f49c-937d-4118-a526-864c8fb2ef65"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d10c7eff-6d72-4c19-a6c3-ff534f43d946",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ae9beb08-2d35-4683-99f7-716a7a92896f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6ea247cf-1a96-402f-86ef-a61f2bb9daa8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "fa048c58-15cc-46fc-98e9-69450e07d0c2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f1b87532-0cef-49eb-89ba-0e532fa51fbe",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "912a442f-d68d-41a5-97aa-3bac887ba863"
            }
          }
        ]
      },
      {
        "id": "db50eccc-f511-4ebd-9cd4-48941862dc24",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "10dc8ca8-387f-44d0-a69d-59abea5016dd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "319c9beb-da0c-4a4e-8efe-def49a91b2ec",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "58e4269b-5dab-4f71-87d5-3bd7a3734e2b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e1f5705-69d5-43b3-9563-578ca0f4cd30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99dd1967-8448-4d99-bc06-fc1d1d044c56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "012529f3-7686-4e4e-a491-dec44d3bddf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "8775a1b2-62dc-44ac-80f3-630ed2f374d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23631963-eb00-4e1c-95ac-f3f02e969bf2",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13cafcc5-bd3e-450e-866c-993180c8fbd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bb05b11-8622-452b-9423-b194d63a9070"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70776193-506e-43d7-9bac-20e6e6239eee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa29ef7f-ee62-4a2e-8961-492c55a41dbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36248428-43b7-4ac3-b3d1-d944b1f00ec6",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90a24561-afa6-43a2-9172-13a11c1d8e1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2580edc6-bb9a-473f-8e1d-4b2bed738e00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a924cc1-4c9a-4ce3-ab35-7abbdc2580e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d090d203-fbde-4706-9269-254bb72ab824"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb199486-32e1-4acd-b1db-a4d547685245",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9708546b-d3bd-4b2f-98aa-320e4618f103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c6700bc-e3e6-4e47-bf12-0fd60c2b437c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c41eb40e-f276-4f26-a0f9-e0f7eb437473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b76f0782-695b-40d0-883e-349594e7d7bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03876201-8c52-4e59-90e7-142c2d751095",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "959daa5d-8bba-4b21-90e2-2d49c0c5201c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bffdd81b-bb6c-4726-82eb-d123ba1e38c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5f8343e-2597-4bec-a325-2b687df87ec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe9538bd-503c-413e-9d81-1463be2e5dde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31042454-37e7-4272-8e22-1b10c56cf86d",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbcd51f8-0965-4416-8ee1-3ed5b8ea9b3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4bc199d-cb81-4088-bbc1-34ccae096aa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ab9ec62-f616-4567-9986-9a747b64cf3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a89e8ccb-fe75-4342-abb2-7bf5093ced6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5e58489-5cb7-4645-bc55-500cdc11da71",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8f97293-d656-48a0-bed2-8a31446b4036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cc98e7a-1b0f-4e34-9a25-943974058d04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "789473cd-9e35-4374-abd9-d7d71acd3d58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f67fa6e3-13f5-4a61-b5b2-9224aa478252"
                        }
                      }
                    ]
                  },
                  {
                    "id": "469be732-3947-4563-bb04-fb3ac50b9288",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d9c7231-aa68-45ce-b4ab-c74117ec01bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45d3cd20-60b4-45ca-9abc-be6347227d2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9edd6c02-3f3f-4ca4-ba26-d1cba301a1b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "be0d0221-460c-49ce-8161-12d781441c65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebef9684-146a-403e-ac83-9a95a56dbd1b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85b525cb-f233-4401-ac76-5f61a652cbbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0caf986c-e65b-4c30-bdfa-7dd330894813"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30845a9e-8105-4d36-b118-9fa3ae0a0e52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c36c2347-a604-47f1-9293-1f2f9bbd5da9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f6bf87f-feae-4c61-b060-a9c8f0659de0",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba9d9467-59a1-45e6-8b2f-93d37bd8d9a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f497424-c6bf-479e-8f5a-caceae3c4d52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ca1934c-985c-42f8-90f5-73553da11a33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3060c0ec-9765-4a0c-97f8-59b4016289c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ac91a55-0e4d-42f2-b4b0-22b56768981f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c4eaa2a-21a6-4fd2-84ba-d88ce217125e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c11173d9-2187-43a7-ad93-6923bffdec64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cddba7dd-f1d0-4ca6-baa0-2c2de2875792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "472ffe60-611f-4a84-8e8c-c0847edafd57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "026416b0-5ac9-4e03-9fe5-ddfca01ed079",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e40f095-12ba-4605-a9ab-10daad476063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e511172-99f9-4808-a23f-18ce0ee20faa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33fcde86-7ec5-407f-8706-d6fe4407ca1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "86194684-3135-4c0d-bf6d-3768a101f9a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2b60067-72fa-48e6-b775-9b244326cfc0",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26caeffb-74ca-4dc2-b568-0874a0bb5be1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a47ab8b-302f-4909-a1c6-90b0448d10eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cfa9c84-0355-4e33-92b3-889e15c78ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "68c3f8be-b591-48c3-8130-7fcf869b6da4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b37a689-dd7c-4e37-bb57-0fa3333bb1f7",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6231f02c-2bb1-4543-994b-b93a2990fb0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9422a820-7ebc-4228-b768-c98f99ede76c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc6fd79b-d23a-4596-b9e6-03cd1e88e13b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8a9a4f4-7157-4c73-8471-45832504ecc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d80b10a-1a83-49f2-8083-5862d719989d",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5eba1e8-4835-47f0-8dc2-03a5d63829c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52c8c37e-2145-4e23-91d8-3afa479d2fb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "679af04d-ecba-4d4c-9dd9-9af104bee981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "408e99e6-092a-4578-ac4d-140d481a99fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7c0e94c-ee25-4933-b3bf-d9e2529f4bf6",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f5d1c69-f5bb-4891-b02f-0ac6eb2a2ac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9779ede-4d56-4921-94f5-6942aae8d2fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "997d4456-239b-40ba-8879-bd5fe5991dca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "6524eece-4f62-4c41-aa61-18f1953c9375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f03ab621-fc72-4c2e-b9cc-7e6057b70adf",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46de68a9-cab1-4690-97cd-a0f93bd6ab47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7141a098-de7c-4cab-8e3e-2f6a0fab717b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fccbdc2e-9b3a-42a1-89ec-20d24df44cfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "316ee316-c26f-41ce-aab3-118c135d082c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3912f92-f9c9-4f4c-9f0e-3dadeef171e1",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2ccf6c9-5d68-46e6-915d-1513e5467e06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e56c9a12-dceb-4332-88a0-564ae25989eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a205abcd-776f-4aa8-a1a9-77e09d044ad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "34e5fbc5-d84e-4b5e-8496-601b85123bee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45c3f130-044a-4928-b798-badf630467f6",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9ccafc3-f7e4-432c-8c0c-168d1ea82d28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66d9eb37-2f7f-45d6-8e66-b61333b3d930"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bf2dae4-1857-46f2-8e48-e67dfde7a3b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b1b7915-a1ed-4e29-b88b-8b16898caa41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99e84753-aa99-4e6d-a4d7-39ae8e63caf6",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f4b402d-c440-4d45-b141-00596d308507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c97a436a-9f4b-492c-8265-045915471956"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a78d0838-9f6f-4455-a711-77249e8b7699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "075b53e9-3b3c-4cd5-b355-f07e281d4c98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5089ffe0-1702-4b53-8f71-bf48e11e7a85",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e46b6648-f9b2-415f-948e-6640012b358e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36a25606-fbe4-4165-806c-76b963556313"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db3040b2-fd51-4823-beda-a3ddb8dcadd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0546e94d-72e9-472c-86b0-ce413ccb8c98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "193feb8b-637e-44ba-a456-4dd7c9119f57",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cd13fea-c4a2-4f75-9847-1fb773040cb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cd7c69f-5532-46db-8580-6d10a533af89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f899cd9-8cd3-4056-b83d-0e1878b68451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc36a710-12ee-460a-909f-eca073e952b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75be7b59-daa6-4597-8f27-fc9bb70b481b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bcf11b4-1d2a-4935-b803-142d1676aea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fba3c3bd-6913-48a4-bad8-63e02d9b5394"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db002d3a-b6f4-428b-9810-ff4da1d35fbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5eeddbc-e387-4cdd-a11a-d1b1615a0a0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b22b103c-47c0-4324-9fda-20ba5099fcc1",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f443647c-5189-4c88-9ea3-d5e7ff747766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3083d2cf-02ea-45ac-8b83-db08f0a6cf39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7186701-4e37-47bc-9085-2608f51639d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "222661d3-11fa-4915-9738-adc47f3f315c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d0f703f-243d-4785-a33a-8cec5fa5e25e",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eda4c6b-b98e-463c-820c-294bcf9f231a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "569d9a8f-fa42-4ba0-8196-ff1eaca9c136"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4c7fb05-4266-4395-8549-fd1299602d63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "560e8e6f-0131-4d36-bf96-21733b5b457a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54ba74dd-5a6f-467e-8629-52610d405ed2",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a816967-b075-4dc8-a4d7-6956e04fd6a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4bfbc18-ca0d-4f58-8f80-856982f14230"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e108ab92-6d6e-4987-b0a2-a40184951e43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6542ea2d-8269-41e1-a6fc-9622fff5eb57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5fe2e56-0510-4669-91a7-c72ca9b46bcd",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "745e11f1-a4ca-465a-b683-555843365cf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b924c6e7-e418-4206-999d-ba037c55c96c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a356c77-7995-4499-8947-696f18f47826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "088b1eef-12a4-4465-9ca4-34c1244d218c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "899b64ae-f39d-419d-b120-4f366e13ad17",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a21d7229-b3e3-45a0-a6a6-39e8e791c5eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8aa23fbc-e090-4a84-9a77-82cb7282f3a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df3b49cc-ad9f-4c62-9941-511fd70fa15d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b6a35c5-0f63-413e-a7ce-578c726ff5ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f430ddac-1d93-443e-a3d6-564d635c6f7d",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a6a8e5d-5cfb-4d49-a0f4-039b6899e468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7fe6b5f-3f6d-4d81-a1ba-1f2b821f5ee8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36c03d80-37bd-420c-8e01-c73b09918a50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b873ff5f-779f-43ba-9dc4-46c115e7bd3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4949b9b-f426-42d7-bc28-7e3dfe7ce684",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b26e69d-9a9e-40a4-9bb5-be4faf257df5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10f2f08d-6a4a-4fbb-a02d-b5d33da360b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c114d248-a520-451c-bccb-fdae530f5be1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0813d0b2-ba74-4387-be19-08bc2bfa742b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cf778d8-9c17-491e-93a1-ea38d86076fa",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "454e3125-80d8-47e1-8941-7772006f1c3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee7b4fb5-2e8c-4c53-8f4e-b6fc37bcf9ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bbfece8-e7a5-4a7b-893d-d9a09b34aeac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "36f344ca-bf07-43fd-8fd9-01199ad45782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e0eff06-2421-4faf-8e37-62f40e9c7f2a",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96d4be7d-85ff-4f2c-824c-db771177096c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2243af26-9da7-4d2d-bd8d-eecebe29c45e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3461c71b-71b3-4480-83fe-acab3e036514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7583a5e-ce6b-4453-9081-18ef06413abe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "908d8773-fc65-4a25-bff5-cc79f09b3445",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da692f3c-f5be-4a0e-ae59-d4b702c8304d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0181b144-476c-4b67-961c-ee63e673f321"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c37fd4e8-7bd6-4912-92a3-f85f98e1d146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f10f057e-2908-4ca6-9954-0c8729338a5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a490c54c-e5b7-4b94-9fa7-eb1f4b59537a",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e67ff9df-54f9-49dd-855c-b71cd154cf59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42481c79-79e0-4f6e-9d04-1d2ebb2edacd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d913ce2d-acd2-4d97-850a-32ac7876d9ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07b22a00-261d-4453-8c66-30616f461735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cccbcb38-607f-4ffc-8d60-a6c836e238dc",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85bb521b-9d0a-4ee4-9ec4-3498a62d375b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3690508-d6d8-4c0e-8f6f-850f99802443"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0fb0b0a-c2ab-4a04-9377-b70ec9466b00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1429d400-a639-4a32-9c63-a8255e73d75e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9632fb05-57d7-4ee9-a772-63467d8653d4",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7647d9b7-a99c-4f92-9287-a92ace324282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3cfa426-f575-40b6-9d79-c3bdaa453393"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5d01b65-8649-489c-a513-6714e68b66a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40b8c593-8f2d-4b0f-b524-49b181cb7818"
                        }
                      }
                    ]
                  },
                  {
                    "id": "881488ab-45ec-4fe8-920e-c3ced11b1f0f",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7e0a620-6a46-48f8-ad51-97098ad53f5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2400e427-e1db-46cc-ab5c-b074b1521d18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be020c31-8692-47b7-8901-1f82cb7358f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "80cf5ace-5763-4e8a-b4cc-6e19a6feb668"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bd8131d8-4f13-4bde-95c4-a83e1456da40",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5d9935a7-08b0-42d6-89cf-36ad9a656687",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f28a9d65-d0de-4b8b-b82a-e3307d632969",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "8eadffa3-6d05-441c-a580-d12c37da2c70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72ba33d6-13b5-4fad-b98f-4eac3ec5d70a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eb3f9282-7335-4d28-ab3d-c0e133a4c735"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d086c84d-518c-491a-b21b-a88b4474c05f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3fd1622d-49aa-4436-aea6-b05d7baca4f8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "98863b5a-70fa-4277-b1af-4514b9292e2d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0acb9c25-df38-4122-a728-407b7d201a16"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "977e528f-d893-4e27-b249-3488ca03389c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b7a8ddc8-a301-469a-b01b-f1eb1a8abdc7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "838382ba-fa82-40d8-a287-2b0ba6e81f80",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7f13938b-1b77-404b-a800-ab9c425c7570"
            }
          }
        ]
      },
      {
        "id": "588c26fa-a08a-4812-9e09-d00e99a1ad0b",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "c3132d86-647d-440c-a24e-5c0596034c61",
            "name": "Negative Testing",
            "item": [
              {
                "id": "49131a64-9024-4fc8-bcbd-7eac16a75c3c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "fb33ec49-86e3-495b-959c-d1d89e35711a",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f163ab94-c84f-4379-9971-ca8a35f892ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad6d9c62-f705-4757-96fd-5e2bfc9146be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c443ddf-333f-4a5e-9584-aee12d746cc0",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3621747e-b307-4e21-b184-dae84b00c532",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a256cc6e-d514-4a01-b988-1875afd862ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e723ab4-ee2b-47dc-a6ff-0606c3555720",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "341a272e-bf31-4c43-b048-ed8e9061e09d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84342629-5970-4d33-bf36-7b32c188f415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a13dca2-3da6-46be-8e23-edc2baa08a26",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72a33b90-b985-4fa5-b8a7-5a4c4476be25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cb3b7d9-e9e2-4c3c-8145-6827479f167c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3b30815-2a71-47e4-af99-2c1a3339afe6",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6af24851-8f54-45d0-a5fb-c52ec8c0390c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7a4fb69-1429-4b98-8e62-7c5998bb4a3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7d2987b-517e-47f9-9d2e-e5b2bf890b5d",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6d00e1c-90c0-491a-872b-96522fd69f51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75a56283-d26d-441d-9e2d-e6da4018cd59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9a72c38-17c8-4c26-bea8-84f95e7658b8",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "102c7b5b-7632-4d96-bbf9-4cfff6d77057",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "834e5167-87ef-445e-892e-fa22202f74b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c6709ff-8518-4683-aed8-ae24daae8458",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a5842ae-96f8-493c-9c6c-895a62b97d41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c808041-3c68-46fc-9b3a-78766318b7b7",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f23060ab-ad9e-4b55-8375-2c14d6e1400f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7407d7aa-4412-43e0-8568-c53f8216bc3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7421edb8-6f75-477f-aab5-88ad9ad44429",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a67a44f4-4c9b-4903-a3d6-e1eea610dbc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "407cfc7d-354e-4108-9148-03cd5cc3e403",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59e042aa-8e1d-48a4-aea3-6cab42ff0a5f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12eed680-c7af-4354-8998-b568511e167e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7d64a24-6cde-4d55-a3ee-64c8d87d7edf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb6b58ae-3091-4226-a2fd-8a11312fd8de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cba8fccd-6ffa-4c37-8cde-68d5f4648e11",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ce8f440-e83e-4602-a2e8-c789114b50b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd2c2bdb-de1c-4ad1-b7a1-0b3c22fbefff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89249ebc-66b6-47e1-99ef-d514ef50a22f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e845c926-fc0d-47a6-b764-9151c9131887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58f86884-6c7c-48ea-800f-24b6f34a5b7a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf0e6fd8-ca14-405b-ab89-6fa173011564",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78f02c19-cb4e-433f-93e4-1681e1c866d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "337daa44-eed5-49b3-8909-23134450b554",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8847e043-ec6b-4e31-b03c-31ac4fa1425d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba350ef1-9f33-4b48-83ca-2e53f2279b77",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ebd5b47-8df1-40f1-820a-82a609c7ac78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcdeb4d4-9f4b-495a-8872-3103e3b7c75f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a88ca9a6-f400-4384-b186-526c22f7c387",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc9f8ba8-1604-42b1-b936-94790a400f95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccf0c999-eda4-4301-9198-1db2a531bbd4",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0b18e83-40cd-45da-8b45-40f202496225",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "003206a4-8588-4155-87fe-f4900502dfbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63be727c-4205-4326-9a54-aa40539f4f0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a14c3fad-aa17-45cf-8c58-c53c3aeb4d49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64576cb3-ed00-4437-aeeb-a7eb5473a989",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed41490e-4319-4e26-b684-46f22cf842ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16e3699b-c3c4-4ba6-839d-e59b9dfcc035"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b995881e-4db5-4a6e-91d0-a08516bf0b18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8b478ca-3d3e-454b-9c18-b2cc8be86608"
                        }
                      }
                    ]
                  },
                  {
                    "id": "886d13c2-97fc-470a-99ee-e9fd445f987b",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42a38aec-7506-4999-9af2-4030b26759ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1c6ab4d-7894-4d5a-9726-cc6850537a9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "248ccdb6-e98e-4599-b264-2328c4002bc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8b12923-6308-4a2c-b7d6-d8ccf833c4e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c07e12c-5bbb-474c-aeaf-57e9a6c596d4",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed1e1bb3-09cb-4226-8c38-fb1f992a557a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d980cc3-eeea-4b6f-969a-1ac31b98e8cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4c08b11-2e3a-4d3a-bf8d-6d0f66b964e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d3cf808-d230-49c7-9ca9-a6628d1c9de0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71fbb207-6f6a-4890-ab7f-0679a5f84cfb",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1614aee1-751a-412f-a02d-338fb12add8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "207b5bd0-b71c-44a3-bf88-1c47f8a5b08a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f1d3ed2-cd0f-4596-a367-26d9038ddf53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff6645cc-3ba0-4e67-9b12-1802b88ca81c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8630f0e4-6909-48d6-8271-5066ae304d09",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7f980ba-9e7e-42e2-9c15-52164dbcf78b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37ed97e0-e960-431d-a769-e77b3b3dc070"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a20156d-d2be-4f54-b7a3-d9d78ce4cbba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7e005cc-5dbf-4d8d-8bce-fb6d3f552fd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60e1a5b8-69d9-462e-a003-2c397ffabcaf",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea72d413-af81-417f-82f7-e952f3ae28dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93742b2b-2e3f-44d0-9695-1c9c2e16044d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddd32dc2-3400-4b15-8b31-bad5e6c3dcae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b7f6785-2993-44e0-a392-0577d8bf69d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbd0f1eb-119a-404e-8d7a-06f3745c427c",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31343592-8d7b-4e07-9175-956712d3a4f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b73c715-3c78-42fd-886b-2c5d4ebbb4aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e37ae6d-d898-456d-bf88-2e893b501adb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6050f7c-f7f1-4506-97d0-d9ed00b58cc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82501c80-67c7-4ca9-8675-b63cfa1d72fa",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcfbb456-da6c-41c6-b860-a4e13331fb51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b38283c8-b8da-4032-b5d9-dc79fa01e16f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "966c626f-26e1-458f-8132-dfdb65c51289",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21dbafca-fce7-4f21-90ca-29f7e0fba954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cddd36b1-d789-4c3e-8a3e-4e10420e30c6",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38153f30-afa2-46f8-a0d0-a700f47b537d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa742617-e274-4444-92d6-5e402cf3add5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a451b826-ffcc-4a02-9834-93af5fdd6825",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1463c56-abcf-4573-ade9-1d06ccc712ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e9567b5-74ba-4162-9475-dd71d880222c",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7018c4a6-f72b-43bc-991f-f43ada455e36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f875ca35-f0eb-4e73-83f4-e4db8eba0484"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75ad2e5f-852e-4a2b-bfe9-e211e5cfe92c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c22771d9-8f5f-42ef-8933-ef8aaa765c6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c8b5003-2674-4642-9e47-b2ede3c005db",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae1cfbf4-af79-4a1e-b9b2-560744af0876",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f590896b-7df3-45d1-ad84-a5906f1adba0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b67334f-7658-46d2-a43b-4d577a1e2a82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d913aa59-58b5-4ce1-9b69-9a04b42fb1f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af1a7103-3c8d-4eef-9459-eecb3f54cd2f",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e797a90-1fc4-4707-bb36-4ed2a2417c0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d90f4cee-9445-4aec-922f-1187ca5832b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc4d10a1-43c4-4aa8-8856-bd891a7dc977",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ee3cf24-4d07-4d80-8836-61b9506c6657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a090d13e-8afb-48d7-ad07-4f0ae08bc41b",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af1d72ca-cb9d-474a-aee3-70f6b9671863",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0744ce3-2724-4a14-b7d9-649f4888234b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2605f2b7-ddf9-4ca3-829e-f86ea4f5ca03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "980e4d4a-4438-4b69-a42a-1a288b87004a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e69a21b-fc6f-4db3-ac11-25c82b1702ba",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df8e3081-f34b-4d6e-9b76-b107e0b7c10f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "947ff518-a838-4344-bbb5-e6718fc7290b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79b079c2-9ea0-4169-8ef4-b65bbd5c0deb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2323d23d-ce0d-4b79-9cd2-0aefb5aa74fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ad3843c-7314-44b7-b446-1e7fff54ad47",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2125709-5e24-4c5a-a4f1-59e6ab517ffe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70591e91-5030-48ce-b58a-39a421ceb9bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e22f452c-4380-48ed-bc52-0e204210e9d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b58eed67-9c3e-4818-bb53-e57d6cfea3db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "975e8af1-f928-4416-b4a9-b077502ad11c",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "240fc674-ca32-435a-b3f1-7452cd0c792c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6fd49f54-efe9-4bde-a265-643a7db0ed9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43521861-f283-433c-9a92-95630e5a0f52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6d63200-8a09-49bb-b1d1-e3fad4f31cde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7943ca6e-fe8e-4785-99fc-6485adb3b5e1",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "928fec0e-9b37-44ef-a351-c7fc5787564d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5cbe4121-c0ac-4b2d-9819-ac3920a95ba8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25dc0ca4-0055-4fdc-9d8e-5b8f101865a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac1614ab-cec3-47da-ad02-a836dc470b6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ccd77c5-db3f-4ea4-afe0-c466f7af15f4",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a5bf3ff-9522-4ec6-a5d9-134de174e5c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21f9b0da-fc22-4043-9b5b-e1137431c2ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "940eb735-6730-4f54-909c-dddb8f3695ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9a10aa3-1a1c-417d-bbcc-02990a4a1e04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ed5a55b-f4a3-4590-a1aa-d92c085001d0",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d907119-9174-4c73-924f-b8b215bbdc7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3924f63d-bf91-4644-828d-e18ed1f7057f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dced0f1-9ed7-4b49-84a4-32d2bf03dc5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "962b671f-3824-4852-8125-b9804cc76e83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "327b6501-5db5-41b0-8d1e-2dd870af3d45",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a3d5fdc-d91c-48b2-b36f-60377371d2f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25968321-f206-452a-96cf-942bf937f5e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74d1ea2b-475f-4b36-bc54-f3a8976fce3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98a1dfef-a841-49b8-bebc-3fd419d70f7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2a82775-67d6-4229-978e-8b18f183607b",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68b42498-0c3c-4ea0-a69d-32c4de2d8a1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f47caa56-7a76-48eb-ac7e-caa32d1ebd6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ccf0aab-8b98-48a3-b337-213a01e034a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e982465b-adc4-4a65-a2b9-cb2f0528d3ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58e26bf5-2756-4831-bfe8-dfcd14cf79cf",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fc5bcc9-c2d7-4eaa-82d1-c867a455273c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af5fa7bc-d4e4-48b9-aba4-a12200ecb9f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f2b47e8-84a2-45f4-97e7-67598fc9af33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a7f115e-5591-4dfd-95a8-d5160353768d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6704777-005a-4581-a82a-d622c278f0f9",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8b73953-9385-4d15-84f0-b73289361b2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9df43034-8c74-4899-ba90-fe28c4e7fc27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca36481f-e95d-45ed-a84d-6b7023637183",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38a9f4f8-43f7-4166-b890-f36345663898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc4bef5e-83a0-486e-9a89-c10f3f4fd338",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1145d152-b11c-4858-93d0-b2422acc9cae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f9f939e-2a81-4c4f-a5b4-c02d3e98129a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f12dd2e-95c0-4fdf-9bff-93682865c730",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6e2c0cb-b75d-4d38-88d6-24e9b8652eff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ef4ca74-2ede-4b96-98a6-ebea5d315ac9",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "275e6f86-8460-4d98-8095-9eff58d7fbff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5fa0216-35de-439a-811c-8f9d36a0a2e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cb8fd63-9bdf-4800-97a8-e4e7f095cc54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fd79929-f3a9-4957-a7c0-b8bf015a6c75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "384267bf-415b-44fa-bd8f-d31da776b7a3",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d38fc551-5386-4fe2-977b-1782e7771df6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa7a504c-26bc-4204-bb31-3d9d87fc1460"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "805f28b8-b07f-4114-a819-e12d8166af4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9779394a-3c23-4003-9dbf-14b858c83a16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e36cd90b-7a33-43a3-ba36-0e70c62da70d",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37d004bf-5c04-4fff-9206-8b2409544ff6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b205cf8-83f2-4fd4-b607-fa348fc78bdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa6f64f5-32f6-4b2a-87ef-72b1d6669ee4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35b15b1c-9c5f-4263-b9d4-36c0a6114e9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "375f7f45-4f7c-44d5-97fc-428133a2c44a",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59b83d22-1d6f-4476-bc3e-81c9554dd587",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0b7912e-ba8c-4348-94f7-d2e240b96e48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11d9c820-76ac-43d8-9bd1-38e5c1163cd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c328128-abc8-48b6-b139-8777fa580fca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "674bc727-c047-483a-b77b-4a293b359161",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "622ab31c-27ef-4719-aaa3-b31d883bb3a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53f10b5d-0e9e-454a-b654-c7584c401815"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "818e73d5-cfdb-48c4-b462-8ad9d5508045",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c02cdd83-e5b4-45b7-9d0c-a353c8ff0506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab8b9be4-acca-4e87-8447-75d2bf240818",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efe73711-b774-4bb8-b931-736d5cb1643a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c52c8ea8-9cce-4b37-b3f2-990f47aa534e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a757947-a9ae-4b71-a79c-2fa754f1ac66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bff255dd-2145-464c-84be-bb7b883f3a23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acd011c9-63c5-4ce8-a576-d513c102b96d",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d65cfec7-a362-41b8-995b-cbad6d8eefb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "638e0ae0-cc58-4d79-b2d2-91f3e90bed03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0fe2d26-9985-4039-b672-a40d6effad21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec37c7cc-14fc-4ac1-9f62-eb1498241d90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98e651d7-5da1-48cf-bb31-35047cf978a1",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20004749-dbaf-4b79-a1f4-cdb325813952",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34a88019-4d0e-4387-93f7-95039ae0227c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6542e2f-0269-4c13-9ab5-bfe57e1df942",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce8485af-a403-40df-84d9-9e0efba50e35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e5d0647-0fc7-47da-a3d0-97840e6f04e5",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca9f4a67-8018-4e62-a70a-c65a3b4d91fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0807f189-f902-4ba3-94c3-9b1eaf244ee8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e4ddc14-0a84-4d2c-a552-7452ab4db66f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21049546-075b-431b-87ec-1ecd3da24dcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5a88e7d-258e-4f68-80b7-f8aedc5983a3",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9522d032-b152-4327-8cc0-07ad861d637e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1beb118b-9098-47b2-a400-befdcc52c06d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "723a07e4-403e-42b3-b950-d0c9985ed91d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89f68a51-beeb-40a9-a48c-feba054f412b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c085a6dd-7454-45a4-a5be-0b8102cf5384",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a29f0c3d-a076-4eaf-9140-9ddb4e88d0d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5750564-6a2c-4846-8858-d721afed0980"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "410afb06-e48d-4e72-a984-d463208dddb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90d46a79-eab5-484d-9e1f-9c9801b60077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faf371c0-80a6-49a7-b9a9-47e118b3ca6e",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76c5e0f3-8f5a-4784-8232-d61a76eb165f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cf4bf31-71a1-4a3b-9822-f9d0405e1f0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e926a00-fb8b-4741-a519-bdb82aaa3ce9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9da518b5-9b31-48ae-92fb-8d55c2b790a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29b6fb13-cd8c-4a76-b185-c0b75541e52b",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9b98005-2208-4f3b-a322-f0523a6318c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ce95272-ee3e-47d7-99e5-108df4b65f33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "091e56ee-4d66-435f-bed7-071131e2cb08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b30f9c25-cf80-4259-a24e-95e0b207afa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c22b81f-0315-4899-b084-2cef5a85510a",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae6356d5-84e6-486a-819a-b0cd997ca7d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2912f35b-79c7-4bf3-8b48-af357bbcb7e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b57d2174-8a56-409a-879b-1f6e4165817c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff0a7d1a-ad39-498e-90b1-0020365b5820"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01cb5973-5d9f-4a74-a4a6-d208a94296f7",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6b33444-cfe9-4d93-8360-679cfb55a88e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acc522e7-3bec-4f4a-8487-3625c2dfbb87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1076abd1-3f89-4369-94e8-2f8d797dd196",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3abbfbe2-0498-4815-afb4-64280bf92b89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e436bb9-727e-4e3e-9389-c0f951bfe773",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2cb7046-04a7-42dc-8c0e-8a9e149fe4a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b364811-bc46-4f0f-b879-078b7c2adbd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb189bc3-9177-40e9-b254-07413554dfec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85d32080-150f-45b6-b9cb-06570e358bf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "571898de-7170-4adb-aee1-24bf999af540",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e905f985-65ac-4378-8fbd-57319ba5daa4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "143229f6-45d0-4e90-94d3-f8722294fc86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b200ce5-da29-4243-969c-3b0ea729da1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "992d7973-56dc-4ebf-8ff1-81d8b241652d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "340ea5cc-d4d0-46cc-84b3-6794f0f89c23",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3de35e8-3ea4-46b1-943a-b843966360d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33fd9747-133f-455a-8ded-caeb12d821a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5431c3f7-c3f4-4237-901d-3fbcf178754b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4458278f-c4f9-4e5f-b493-03e918a5f366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cabea296-fe22-4944-b7ca-fec305f05036",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1950024d-ba2b-49c9-a23f-e00b85034306",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e8b4bae-ee4e-49c6-81f1-90a54c48abaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6a1259b-7d41-44f2-ad8a-b4be1080f8da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a95244a4-64e0-43ae-a7a1-d0ff6ec7bc0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cd8b6e3-aad3-4601-9e97-249316007943",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9c7c97a-316a-4c03-8ecd-a115bdf18d2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ff154bc-ce29-4e12-87d5-0db31e0b3b6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "099c9b96-04b1-49b3-873b-858df53333a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dcc5be1-6979-472b-adc3-c0bb7a5eb3bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "468aaa65-fa83-4825-a320-17a307ee7d98",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea2e40f4-20c0-4f7a-8e5e-69072ad68229",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdd4f4f9-160f-47ec-930f-d268f9c583ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50a17288-cf09-4a09-b612-4cbb66c632b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3446c535-6b76-4f21-8a1f-6a612608a628"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2635e6e1-6d1b-4be8-8976-8869b0cf2903",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8148c615-815a-4a69-b75f-49beb300bcd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "779183e2-6982-4a67-9aad-e2a9a5cb859f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28699c52-5ef1-4dec-b45c-1328941168b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "408e8e87-0c7d-4248-b82c-f620067ff24c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6bfa2e7-acd2-4eff-8673-12a0fc7f8283",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5553dc70-b89c-49c1-bf0d-3ebf3616a609",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc90d248-8531-488f-a5c0-9e88c55bc14a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a420d29-da89-403b-a3c1-025ae2adc745",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20dea3d0-e2bd-4192-81aa-a7e008ad9e70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afa95397-419f-4405-ac43-014d4929e87f",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8885c829-79ae-4992-8089-106138231af8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a38309c-2bff-4372-9764-8953d238a2e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac399efd-1b43-4b7c-9092-ad79a8302548",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbc41c1c-236e-4ce3-a9f0-ba747759b1a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bc96f72-8379-4f8b-bd9f-e5f7145fd31f",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c574094b-8aeb-4f00-97f4-36da03f4ec8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf4f0f6a-1dc9-411f-a53a-938d2ac03901"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c210097d-38e7-4c74-9e90-7d007c53f7fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b528b20b-aa22-4288-9e07-3b9f63ab7656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d051387-dfb0-4c2e-b81c-4beca4b15b39",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d7c8d99-dd3c-42fe-960f-f8e694902791",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4dfdb36-aee0-4909-9475-a2291b403266"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9caa3d41-f513-40fb-8813-e1a9fa760dfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cfa2909-2b94-4453-9351-b753267ebb98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aaeda13-26a4-4946-a126-0a6c77221a8c",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fdb7be9-39c1-4a89-9a24-effcb308322b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2a7e743-8690-4be0-a0d7-4bf758897cb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50d4ba8e-93e1-4421-9ed2-fb50628e4a20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a43fdab-6960-439f-983b-5fb4d0802787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "533d0ff7-dc91-47e7-9ba2-5249ad1c17f8",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "728a9969-8992-4ffd-bb13-9b4e5e256a55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d7c3c37-e887-4226-9d54-1e6e6078dca6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41b58d96-d5ad-47fd-aa2e-22e06b9aabb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "203bc924-c73d-4b2e-b487-0b99c05047ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91c5a2d4-6202-4930-9993-5c6ea723fe46",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03f339f9-d081-4860-9b54-508ea104c7b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c992683-390f-465a-9bfc-8c6e4644b7a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "153b00ae-7992-47aa-81ce-00d107785064",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e0aa979-d82e-4182-8c33-5a40964c9404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dc0ed77-04cf-4bac-9c3c-c989f4aacbbd",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "943f5e2b-6859-464d-bb65-7b4c4ecdd37c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83055acb-0362-4a57-a33d-437b58adfc56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e7a72e1-12e9-450b-ace2-1e7303eedd06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2756b3ca-940d-4376-899f-ef38447558f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0b14cb4-9146-4232-aead-a737086bfc93",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11190808-2e48-489c-b7d2-c61f5ccd5160",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f206c04-96c9-4cf3-9eea-4b4c0becf017"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c41ee42-bb3e-4d0b-ac0a-2293a60f8ac3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fada5a98-b321-4ffa-8ecb-667d926c24f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a8b4db3-1dc5-40eb-8526-310bf0e8774c",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f5ba7d7-6f3d-4ec3-b026-ad2f01b16364",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1aa725c-6ffc-4faa-87b8-d541b8daa6f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba1edf4a-c55d-4e68-b278-b26ec068c788",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f938868-e1e7-4f07-9f60-d5ab08dcb69d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b064384-adcf-4eb6-83c3-821bc67ad8af",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c62d76a-5148-49d1-b94a-5c76078d2560",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b5b4b89-f081-4ee4-b5c1-2be8b8d97f5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0463c73-1a84-4549-8223-176814eddaf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3609ee8-d77c-45e3-95ac-7640ebbca387"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6be9d180-62b9-4a42-a263-bc612d110f79",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d37d7bba-1e54-4749-a387-b16531acd4d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d363fb13-b8f6-49c1-bbde-9cae5dce7343"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0349c84-8d56-40c5-ab8a-2f328647e627",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b58cfdd-3a1a-460c-8752-11747e9120ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "576f5e28-32db-428f-abaf-9ebdf8c8e2f3",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee9642f4-2085-40f7-b76c-1bb897e10061",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d2a999d-5d87-4c9b-9a99-45bea48bcb48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50c58dbc-0af9-4990-b6e0-3bd5f0434eba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a55b86c-348e-4a18-b718-2012cf212d34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f6e264e-ebc8-4d15-91b9-d9a2b3c4d60c",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2fdd40c-8ef8-4fb4-883f-e9846cce7f95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "970493e3-0977-4e3f-8322-aaacf6925b30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "615e1a0e-1a3d-40de-a3c5-7542439912b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62b2d618-a3ee-4959-ad6e-7c3182b015e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2531f5f-18aa-40bc-a97a-725da3da2dda",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b78565c-7d26-4fd9-b2d8-f7feb55e6daf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09c15d24-fc89-434c-a6c6-517403e9f38b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e18c905-b0af-44cb-987d-63786753c3c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79ef2442-040f-4500-9d2d-5df309b1ae10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4157e6a-121e-4766-97c2-87a65e942730",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "220172f7-e55b-4d3b-aede-3b2008813384",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8924e580-9e75-447b-8f45-df2b21a247fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2e026b2-0deb-44b0-8fdf-eac427cd875d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ece52f7f-7af3-408b-a061-ce39a06e0c43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9945b77c-43b8-41cc-a563-a9e29fc39018",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a850db56-cbd3-4e7e-8b7c-c9808b0bbe95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a36f974c-0291-4ced-b815-9c6b05fa65fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cdb26d8-ac02-46f7-997d-6b41d4550218",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "111bcf32-496a-4679-8d7a-8997e1b98eda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6209932-ae36-417d-a970-d11e50b1a7b0",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b1b33e9-b7e6-4833-9fa8-6cafd3224f80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "777413bc-d9eb-4d1c-adc6-a481136f36cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "872aca68-7338-47e9-8937-3ebec3be51a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c47ebb6-89a8-4cc8-84f6-8df0b0534187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a0e79db-4927-4473-a2ba-5bd14aaaa6e6",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78a9847e-21e6-4f08-a537-cfa263107efa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "acc3cd7c-7d93-4457-b380-a19c1c8aefc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67c6ae91-231f-4073-9a75-a1308972cec2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d9391ec-1537-4ba8-8eb3-9f09f6654a73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe69f1b4-02a9-44b3-8b4d-3dbdcf10d3b5",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a4c6ceb-24f7-45d1-a0e0-28674a789a26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "088de4cd-d01f-4377-bba0-574c5aaec3d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8be5cf97-54f8-48e2-98e3-3cb09f67e0d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab930ca9-859d-418c-a2c5-6e3646feee8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6048ac43-2da7-4a1e-93d4-ffd044ac4e60",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ffd7a7e-97f7-4eba-87c7-6af2b4e230db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad5abd0c-564c-406a-8f63-064a5413af2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33f7eb1e-2285-4901-bd9c-1444de6aa432",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b81012d-724d-454a-a673-d91808a76be5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5917e473-f124-4e54-85b7-4f63fbe1880b",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90de751b-6b30-4611-afc7-4aa7f6b202b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39c0650b-5a56-4141-b25c-34064413fdb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f595b469-da14-43a6-8677-d13c45153157",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c2958cc-a1f4-48c1-9a71-2a8c99ac7e3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96b9e103-9a53-459a-9934-fb23b0df64b8",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ca6b703-08ea-4291-9a8d-cbe527886220",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96b25f96-5a38-4dc9-9d46-9a1bc9fb2da3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53ae5eae-5791-4d22-bf6c-a52ff344a395",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a4eb811-3057-4e04-818f-ce7f07caf531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "641ee5c5-0934-4a5a-85f8-1f6be30ca1c3",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23d62ffb-b819-4863-9d07-c90c9245c957",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e17b7877-047b-4049-b733-edff5c015899"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "020da838-1690-438c-bd8f-4fd0af71456a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "272bf8da-b69a-4c08-abd4-aaba8e2be0fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80d8c8bc-640f-47bd-9743-ea5c56aecffb",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4741c77c-4948-4b98-83d2-40e4fa06816a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a36f1eb9-594f-43f0-891e-a3a515f64d19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "178642c7-5960-4ccc-bc9d-feca73e39942",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e47b223-637c-4d58-a12d-8e133836591e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "165cac4f-c703-4cee-948b-bfbc2a1a5f51",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71ccd747-bc98-49a2-a8bd-a941bc4b4ce9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32021a12-2d2f-4bcd-afc2-f1ec12dcdff1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e33b7db-e656-458f-8934-e85cb516c6d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd36b96c-bc6f-4c90-8304-3f74f5a86a4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4629aff7-c32c-4662-a8be-db6107a18e21",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b686423-87c5-4ed5-8207-764e676dfb50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ff6fad8-7d1e-4638-b9b9-20c595e4a87f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fa96730-3c57-4142-a0ae-d76ecd0ac624",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd63fa57-bcfd-4c03-b545-9424b064e4b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cf069a7-d844-4077-8c7d-61758a8e656e",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd18191d-8193-47bd-b2d6-27b55bf8acb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "211dade0-e43f-4fb2-a355-bacf8033a6ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5112343-5916-4a3c-9e78-280b84810398",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb7c1298-9139-4971-8a84-5a3212879b6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af3e4b75-ec15-4c92-a36b-1e5857103b75",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37b22add-d991-4548-a8f3-abc7248d866e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1216d63-bf74-4e2d-b51f-0c57ebc4227f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52482202-d790-4e8f-9d83-dec873db9a6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb5bffe4-dbfb-4c23-abea-ba0b189caa74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b433801-c850-4b87-b102-999268d200c2",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eec54726-a467-40b4-a2c9-34bdb6ec9578",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87154e66-b5a1-47f3-86c7-9896d8c4d3c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78865891-15c2-425a-9fe6-1ac2fcf66008",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f912e1d-7da6-42a7-b565-481ad58b3cde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1432252d-a94d-4123-a0fe-096876de9628",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1cf306f-aa08-4743-b819-72fad02c45d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a26c2704-e1cc-4c1f-b679-b13fe7f69760"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff528ba6-ad16-4abf-9e52-6756d9ffa125",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ce68e27-11f3-4426-ba45-2ed22c6980f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "193eb1ae-7791-4d5d-9b0f-369f991d876d",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cde40c0-b045-4930-8285-ffafdbce7da9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c34148b8-e7a9-49c6-8582-cdc63bd14415"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae94dbea-d287-4fda-a1e8-6778a4ac5482",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c313b889-2edf-427b-a9ce-cfab8abd11aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a8dc533-452e-48fe-b6bc-480c3c4dca14",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c057168-4346-4a03-9925-3da1b7015404",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9da29785-f6c9-42f7-be30-5cfed778cd05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9e4d6b9-54ef-447d-9755-42ac0a331b8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e6ba7e4-55ef-4685-85d2-2f485cd50a04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec839870-7f0e-4fe4-8f5d-5a4f0d4d9e3e",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bae9084-2d40-4329-9beb-f31b4768df13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1dd66082-d81e-4802-a790-6cf2fb9c7dde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "004ebb8a-ce8b-4273-ad41-e789d1b14fc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "513a6531-9876-4e62-9129-e2f2ff1231b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e7222e5-d05c-47a2-8816-8779fcf4a854",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e70d533-62c8-4a0e-b665-4d6604c4b604",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62257b54-bafd-4521-95d7-468995869668"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4e2a67b-515e-4d99-9daf-7f77889a7742",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42f5f9de-8ac0-414c-a417-063f81da9ea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "192d185b-dd7b-4190-98c9-942f12fc2dbe",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f7331d0-be42-4cbe-b2a6-9c19ab857043",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "057ca9f8-be1f-46db-b044-986b91c091f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12f5e2da-aabb-4705-9062-2df7cef03a1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a547ba1c-7d3b-4b98-a574-aa9cdc936cf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "771f66b6-a69f-45ea-b0d3-a0451eb6f01b",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eea42277-5a06-4ae9-ad9a-fc52d9d45ef9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76efb4a0-9457-4de3-8ef7-527c09d7df83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b34b8184-fc95-480a-a8ec-54de9394dc40",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f11f652-ac0e-42f9-b5de-4fc5eb20a051"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf329247-bfb5-40ad-8844-e92430de38df",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c90bb806-8e24-4daf-b1c8-877a16b4eb01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7d46adc-9085-4cce-9293-09e10f2849a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d86e76c-7324-4004-9edb-60b87bb0ef65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d18291b3-31b5-429c-907e-3867eb099f71"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "21808e06-933d-456d-a377-590b96c6b6e8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7e8b85f7-7798-4cd2-b1b4-e75009e32f15"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "43156009-25bd-4be1-9e2b-5a3a228ba280",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5d20c38b-d808-4386-a332-ba05c4c66d0d"
                    }
                  }
                ]
              },
              {
                "id": "d247335b-85fb-4648-847e-db68ed47f010",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "98f2a5d3-9a73-475c-82f1-403669d639ad",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f59ce7a-b08f-4154-ae4d-a974413b35c0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "0722c1a3-2cfd-49c2-8f0f-d23e4ec7de8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4d37c72-645a-47e6-b89e-ad37377e9e72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "678a73dd-6368-4798-a784-163e129132c1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bef11f71-9e89-4bf9-a708-73d1fca08b79",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6909e029-8d3f-49cb-a027-3e5fffcbf7ea"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3ad51e50-3403-41ac-8dac-7df15b0afe49",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3e1df89b-e5c5-42f4-8f43-f5547d64169f"
                    }
                  }
                ]
              },
              {
                "id": "68c5513c-c51f-410b-8164-0e8e6037aded",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "253f7c97-3efc-4263-a85c-3ee73f0dfafd",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6af8c66-f495-4b17-b438-39c38631527a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "7818f621-669b-454a-9c42-c8dc44a6d5f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5de552e-66c4-490a-bda1-928f2ce4a036",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49c5b492-11c6-41c4-946a-3e41874fb6d7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "534e77c6-60d7-43b0-b400-563d33acaebb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "63896ba1-7397-47af-adc7-4b15d7bcdfe1",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "52136c34-a22c-470c-b968-e93781428c51",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "3dc1b931-f68a-43c4-a8a4-1346f2e76415"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e8ea51c8-e0a8-45c3-ac33-9d670a9808b4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3226fefb-e8ed-4e4b-9657-0ce575d5a140"
                    }
                  }
                ]
              },
              {
                "id": "9190c714-35bd-49e6-90dd-f95625cd4bbb",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "09c414d8-982f-4fa7-ac8a-6876b1cb6065",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2e680505-a6c0-4927-955e-eb5bb9860be1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1384f901-7747-4f36-a58a-c28bb64dd601",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e4e7aca8-f4df-4ff4-ba48-f11807950738"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9592cf27-c8ab-4226-829e-6653d419e4b8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "796a70bf-4128-4c95-8676-163bb7e55f35"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "872d49f3-d2f2-4b8f-8da4-7b05381aaf24",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a4133d3d-abfa-47ed-9ec5-957768dd4972"
            }
          }
        ]
      },
      {
        "id": "ce960227-12d8-4ae0-9980-b216e896e643",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "c71539db-5b3c-4c29-b83b-85de763a7e26",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5b92a64c-68a7-464a-ba3c-42bf3a28bf61",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "af60cba5-0a71-492e-ab1d-1db4491e8ea1",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "804d8b4d-6c97-4054-9ae9-552fd6a21198",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "45ded4cc-a3f2-4e58-bec5-0c7a09788387"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a10aa6d-c787-4400-8a0b-252fbf2e4167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2c6257b2-59ca-4942-b7c0-62b89fcda34f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f9ec1eb6-b40f-4e4b-b7c3-cb4ad115b027",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1e5960f2-0634-4593-9c64-e0b370504bc9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ee37f9a8-9896-455c-8c67-482570c39628",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c7854765-845c-44e8-bb92-71a99fe37cf7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "136d8d93-c1db-4f62-99b6-bcc84605c93d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "26897eac-aef3-4a8c-b1bd-3b5b02b70217"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fb1f7213-7199-47fe-87a8-f9409a7cf5cb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8b471a44-45d8-4a69-95a7-f3537fe2f57b"
            }
          }
        ]
      },
      {
        "id": "c13924ad-5e1f-4806-97ea-19b886ac851e",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "1ad0cbb7-f08f-4393-8e9f-dab3f98acc80",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1557da2b-c062-4554-a66f-db58ed7b7991",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3e112ddf-35a5-49d1-8fb2-451f2998999d",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c102e9ee-b455-421c-aa0c-a83a6437b718",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c00ee37d-1c0c-415c-b6ce-a7f2271b7d9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81c1236f-5f1c-471a-959d-f6c948a35fce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7a89b7f6-1066-401c-8b07-7f58645aac9a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "137957f2-999a-4da0-b26d-1221195f1eba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7bb4d138-17d3-4735-9e44-0b17f579f90f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "53fc2696-1bf2-49e2-a177-895cff9afc3f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "899780c2-7845-4d84-8355-5c48959fdeeb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1a05b7f0-6c47-46fc-824d-2772770a91dc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a324ced1-234b-4f0d-90a9-f0986204a497"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2af1b37a-df2b-4362-bc79-921d3d4046d8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "df0bf02b-8ab2-4271-96bb-4568bc1e4d30"
            }
          }
        ]
      },
      {
        "id": "abf486a4-982e-42ba-96d4-801717361b26",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "fb1c841e-1208-4935-97be-5cfdecb02adc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "df651109-4abf-41cd-afdb-706e955b8c6b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "85094f72-861c-4b48-a9ab-c7054e081388",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b13c3838-d428-40fd-b55f-df2a68abcda5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d685bce9-d94e-426c-8619-b0c69fed540f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a07b6b2-d437-4556-b533-0e24f501bebc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "75c19443-639b-46b4-b28b-80858f17555e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "97b02059-f127-4b98-b37e-fb05cb4ef370",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c01e5843-1571-4093-9f92-f45298d1cee3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6e2599f5-91a8-497d-92af-ec366b2efbeb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d7efadcb-3adb-46d7-8e2c-1437a4eacf33"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "07bb5a08-a72e-43a5-a78e-0ab2de54bf05",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0ee2c724-1363-4819-92fd-fd7ab6f430df"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f65a49d0-2720-4d34-9f31-09d901a54da6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b432a680-087a-44e9-b0d9-00fafc7a3669"
            }
          }
        ]
      },
      {
        "id": "9ae47591-ebd2-4d1c-a3ed-f7fe12db144d",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9c1d7f7e-e7cc-414d-8630-11a3007448ea",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fc58f09b-c47c-46c1-a1e5-51154aa11e2f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "87c7ab41-c48a-44bd-9198-0838f52522ff",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6e3a639b-e66d-4087-8312-bd8573ac5062",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b7d04e50-feae-4006-9ae2-ae6247e1504e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 571,
        "pending": 0,
        "failed": 316
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 71.61267605633807,
      "responseMin": 14,
      "responseMax": 1651,
      "responseSd": 95.313481938903,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1689468830095,
      "completed": 1689468864124
    },
    "executions": [
      {
        "id": "2751e60b-d5c9-4eeb-8a24-6e564e6b45d6",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "60e2d2d8-3889-4901-96ca-9ccbbde8b92f",
          "httpRequestId": "adcb75ce-f531-4a75-bb48-6173be94490b"
        },
        "item": {
          "id": "2751e60b-d5c9-4eeb-8a24-6e564e6b45d6",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "836619db-5d13-43d0-81b1-1ee75f0ae5c9",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 0
        }
      },
      {
        "id": "b643a42a-6d43-4878-b819-6861a4c9b54b",
        "cursor": {
          "ref": "889bf144-f261-4ca7-948e-da7c7135e274",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "cb06e376-edea-4052-89b8-fda2c4c108e0"
        },
        "item": {
          "id": "b643a42a-6d43-4878-b819-6861a4c9b54b",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "b6f7ba1c-ca97-46eb-ab47-76c2adf390c3",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 0
        }
      },
      {
        "id": "8bf71ebd-397a-4b8b-a60f-ed8253673b11",
        "cursor": {
          "ref": "bb91c944-27a8-40df-9ba7-60d4be5942bc",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "e001eb26-e7d2-4ddc-a6e7-398fa3350181"
        },
        "item": {
          "id": "8bf71ebd-397a-4b8b-a60f-ed8253673b11",
          "name": "did_json"
        },
        "response": {
          "id": "e783374f-fc51-4364-b3e5-3f1cd3b33503",
          "status": "OK",
          "code": 200,
          "responseTime": 226,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7282ebbf-a793-4235-bd48-9a433439594d",
        "cursor": {
          "ref": "29b09f2d-97c8-4682-b066-4e53c3225529",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7494116f-98ae-479e-b7c1-774c711b1926"
        },
        "item": {
          "id": "7282ebbf-a793-4235-bd48-9a433439594d",
          "name": "did:invalid"
        },
        "response": {
          "id": "de3bf6de-eece-4507-8e74-47fb0a9f0d80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7282ebbf-a793-4235-bd48-9a433439594d",
        "cursor": {
          "ref": "29b09f2d-97c8-4682-b066-4e53c3225529",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7494116f-98ae-479e-b7c1-774c711b1926"
        },
        "item": {
          "id": "7282ebbf-a793-4235-bd48-9a433439594d",
          "name": "did:invalid"
        },
        "response": {
          "id": "de3bf6de-eece-4507-8e74-47fb0a9f0d80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40ffc781-85e5-4d73-957d-9e7abc4eeb1e",
        "cursor": {
          "ref": "a69b26e9-571b-4ab7-a03c-5a4338a34721",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "291b6a20-5d96-456e-871b-97029b95e6fd"
        },
        "item": {
          "id": "40ffc781-85e5-4d73-957d-9e7abc4eeb1e",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "34f09de9-8ee7-4244-a0c6-66d1172dde94",
          "status": "Not Found",
          "code": 404,
          "responseTime": 117,
          "responseSize": 2
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "272b4c3c-59b0-4486-8466-e39df0864d7e",
        "cursor": {
          "ref": "603b7131-501d-4d32-a71f-d68ed6208b69",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "ada32c73-b907-4c3f-9371-2ac585d443ad"
        },
        "item": {
          "id": "272b4c3c-59b0-4486-8466-e39df0864d7e",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "cfb7a45d-f742-4d3d-9726-010ce51e3bbe",
          "status": "Not Found",
          "code": 404,
          "responseTime": 65,
          "responseSize": 2
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "a3e5222e-99f6-490a-9648-3cf0f52de221",
        "cursor": {
          "ref": "beb6a978-eada-4d14-878a-31f881a9413d",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "cdaccce2-2d1e-404e-832f-36aa9cef0476"
        },
        "item": {
          "id": "a3e5222e-99f6-490a-9648-3cf0f52de221",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "6fd659ae-95c3-44f9-b946-3a12446a6463",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d556bfeb-c3e0-40d4-97f2-f74dc2c180dd",
        "cursor": {
          "ref": "777095ad-bf72-49f9-ba8e-d2c9d95789b9",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c1da0e10-b800-4b51-af2a-d73dc51bbca9"
        },
        "item": {
          "id": "d556bfeb-c3e0-40d4-97f2-f74dc2c180dd",
          "name": "identifiers"
        },
        "response": {
          "id": "88cb06ab-78a1-4041-9931-b3aaf1a8a3aa",
          "status": "OK",
          "code": 200,
          "responseTime": 112,
          "responseSize": 1137
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.didDocument should have required property 'service'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.didDocument should have required property 'service'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "3b718299-7736-45f4-bf19-7666650526da",
        "cursor": {
          "ref": "91d16724-7520-420f-b095-9b0012da5e0a",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "e9f2f898-b8ed-4710-a7ae-0d2ed34e810e"
        },
        "item": {
          "id": "3b718299-7736-45f4-bf19-7666650526da",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b440f39c-12bc-44be-aa99-16a869b11006",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "94d3da8c-e9ee-47dd-bf0b-e33a255ece99",
        "cursor": {
          "ref": "3b789b08-d5bc-4111-9c87-17abf303524d",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f75cd491-74b0-4ce6-953a-2c47b1f48253"
        },
        "item": {
          "id": "94d3da8c-e9ee-47dd-bf0b-e33a255ece99",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c5b65580-af40-4ba9-b79d-f4e878c7da64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "f0be3853-596c-415f-95ae-e61d512b4bd6",
        "cursor": {
          "ref": "142351c4-48d4-4f3d-bc48-9fba6c6fae94",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "661832d5-96ba-494e-b8a2-19cf835b736f"
        },
        "item": {
          "id": "f0be3853-596c-415f-95ae-e61d512b4bd6",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "e40a4df8-9485-4295-a458-1af5fb5aa5ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "4fa74e6d-57d3-4cff-a776-1d8a59377ad7",
        "cursor": {
          "ref": "31eff49c-b9d5-41db-9608-0fa715be8494",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "3b2f84e5-6922-45d2-9f7d-1c6012ad6237"
        },
        "item": {
          "id": "4fa74e6d-57d3-4cff-a776-1d8a59377ad7",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "903d747f-460c-4c1d-a608-39ba0e579b17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "05a0b2df-6a61-4c7b-80e6-fcee1326eeb1",
        "cursor": {
          "ref": "3834d45a-cd25-4130-9f70-ac23747fc2c4",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "86c4cd8c-7564-47c2-ba9d-e1ad8e77bb64"
        },
        "item": {
          "id": "05a0b2df-6a61-4c7b-80e6-fcee1326eeb1",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "4872ccf3-fb87-4ce6-bd56-a63b8508ff19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "cf36179b-84fb-48fc-8557-2411b2700477",
        "cursor": {
          "ref": "9ca84666-c05f-4894-b1ea-9c2118a9289c",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "5d28c72f-835f-4ff2-b91a-e7b1c639c0f5"
        },
        "item": {
          "id": "cf36179b-84fb-48fc-8557-2411b2700477",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "a7c6c9b5-d330-4449-8a3f-194dee9bc70f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "d98731f9-b9d1-46b8-aae5-84e09b781881",
        "cursor": {
          "ref": "65079aa6-cdad-49cf-81a9-5d21ab2b9c19",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "fe1d8025-2f18-4d4f-99b3-ec99fbda88bc"
        },
        "item": {
          "id": "d98731f9-b9d1-46b8-aae5-84e09b781881",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "e6313ca6-e13f-4e21-a33e-46471c98d6ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 215
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "9c537aab-2fb2-4016-91fb-d9d60a4bcd98",
        "cursor": {
          "ref": "2e0dd259-20ba-45ea-aa75-b3c0fffd773d",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "f50c9fe9-1e64-4264-868a-6f9cdf377cf2"
        },
        "item": {
          "id": "9c537aab-2fb2-4016-91fb-d9d60a4bcd98",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "812140eb-4bad-411c-a2de-d19323dd72bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "2077dc7e-c28c-413b-874a-1c3871d7a278",
        "cursor": {
          "ref": "77377944-a3b6-4300-b58f-92e5099d9c95",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "9b317b48-1ae0-4aa7-95cc-70c47c19fc76"
        },
        "item": {
          "id": "2077dc7e-c28c-413b-874a-1c3871d7a278",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "7ec3f562-2ef5-4d38-9a8b-7cf9f7b03d03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "b0e13c8f-3ebe-4b6d-bce4-ef9f6e017e3f",
        "cursor": {
          "ref": "0e434a68-0c58-4dd2-a4bf-6931ac7d03d4",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f0bdd1d6-d051-49bd-92c2-d80f4713c701"
        },
        "item": {
          "id": "b0e13c8f-3ebe-4b6d-bce4-ef9f6e017e3f",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "9946cb6c-5bb9-4d9d-8026-1e86a129240c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "7cc50c9b-aa09-4620-91a0-38d019377c01",
        "cursor": {
          "ref": "8746b5f6-dd53-470c-94bd-4d75c225ef30",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "d8441db5-34c8-4f19-8c0b-8d35b1a81f23"
        },
        "item": {
          "id": "7cc50c9b-aa09-4620-91a0-38d019377c01",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "96cd7837-7660-4b2e-9601-5b71947353bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "0a6a6d79-46e9-41ee-be1b-34f27f6104b7",
        "cursor": {
          "ref": "d2a637ed-7717-42e8-8706-2f5daf4314c2",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "6d9a4003-91a6-4b56-aa41-b2a1c5b6643d"
        },
        "item": {
          "id": "0a6a6d79-46e9-41ee-be1b-34f27f6104b7",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "8b9e4e36-c486-4851-9ba0-d7da69dcaa5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "e007b3d4-cbf6-4a0e-a624-08012b8786fa",
        "cursor": {
          "ref": "b961e20c-de38-4c69-b353-a9ee9db7afd0",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c65f89ed-8f1c-421f-93c3-ae5988387900"
        },
        "item": {
          "id": "e007b3d4-cbf6-4a0e-a624-08012b8786fa",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "b9e44910-98a5-4343-b19e-cfe002e17e89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "e36146dc-08ac-4578-9a99-1666bca37af6",
        "cursor": {
          "ref": "8b14cb4a-87b8-4134-a9e8-a4bdc35397a6",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "80369954-a060-4310-b213-40567976509a"
        },
        "item": {
          "id": "e36146dc-08ac-4578-9a99-1666bca37af6",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "f0344d01-f8dd-4184-b2f4-1fa89546bf54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "5f53794d-bd10-4b5a-9b26-88fa720a8a79",
        "cursor": {
          "ref": "e7c15c12-54d9-4572-9e35-81bbc52b55a6",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "cac142c9-ce9c-4b4c-bd01-ed7bca31ca31"
        },
        "item": {
          "id": "5f53794d-bd10-4b5a-9b26-88fa720a8a79",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "7665f459-447e-4fbb-9af1-0d6d475dfb1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "59e9e1b2-11b2-4c6f-98bf-b8d330c4cefa",
        "cursor": {
          "ref": "81e29d50-7361-40fc-a966-fdcfd1ce62e3",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "d2781628-0342-458c-9976-b5543ee48819"
        },
        "item": {
          "id": "59e9e1b2-11b2-4c6f-98bf-b8d330c4cefa",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "91251fe0-9de8-42b2-865b-44bf64c16594",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "b4de8aa5-ed88-4c5e-8f53-97b256b315fe",
        "cursor": {
          "ref": "10f3f9c0-d143-4883-976d-64e58d1114ed",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "ff883d51-b827-4996-9482-37195f07cb93"
        },
        "item": {
          "id": "b4de8aa5-ed88-4c5e-8f53-97b256b315fe",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "5dbde51e-e1a2-4ee1-84ba-e40058aed97b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "657b2f5b-00b4-482b-a42f-b361712061a9",
        "cursor": {
          "ref": "aa78f3ec-7370-47a1-8b14-0a6fe610a53b",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "a0b468f8-16f1-4f6f-ab1a-93156b220264"
        },
        "item": {
          "id": "657b2f5b-00b4-482b-a42f-b361712061a9",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a22fb14b-8af1-49a5-921b-94e5267669f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "814fb148-cd71-4eaf-aa60-d988c8bfa39f",
        "cursor": {
          "ref": "346f0bbd-23ab-4c85-adaa-335646833327",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "fcf91607-ac68-4338-a2f6-b9c457b32a7c"
        },
        "item": {
          "id": "814fb148-cd71-4eaf-aa60-d988c8bfa39f",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "36b17e26-cbe8-4005-81e5-b0cec1557791",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "5adcd97f-e75e-4658-84aa-91a751d083e2",
        "cursor": {
          "ref": "4cd8d580-a2a9-45be-be96-ea687d8089a6",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c2fb6538-a232-46a4-8ddc-519352b75f01"
        },
        "item": {
          "id": "5adcd97f-e75e-4658-84aa-91a751d083e2",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "1cb5f7ea-d0e6-488a-9279-4c6687c6f8c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "4d6d965b-0713-4496-b9ff-d06fc6f49cc3",
        "cursor": {
          "ref": "0900ff78-3b15-4a64-a4ce-a74013eb21c7",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "c88f0685-f7ce-4f56-b164-2bd3f685239d"
        },
        "item": {
          "id": "4d6d965b-0713-4496-b9ff-d06fc6f49cc3",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "79ea55e4-0e20-4dd5-8fe0-250f4d80eaaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "c8d5be3b-37bf-41a5-9bac-5179e00fdd9f",
        "cursor": {
          "ref": "0e9ee68c-e229-46f4-b781-ead4b58aaef8",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "18b1cb3c-fab2-4d6c-80be-490579f473a8"
        },
        "item": {
          "id": "c8d5be3b-37bf-41a5-9bac-5179e00fdd9f",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "f090ddae-f852-4bfc-8b92-cdc14e094130",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "f55d0784-9fa2-4b70-90e9-1c05660db81b",
        "cursor": {
          "ref": "a646c6fa-8a03-4b63-b8dd-04dc14dc048c",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "5174dc7c-5888-450e-948c-09db4e8f3bdd"
        },
        "item": {
          "id": "f55d0784-9fa2-4b70-90e9-1c05660db81b",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "b08fe63a-c42f-4516-80cc-78b136745ce6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "6bd7346c-8627-4e3f-8160-a293a7403981",
        "cursor": {
          "ref": "ac88339a-98dc-4669-a460-6a58eb456b75",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "ff2c1b49-e07f-4771-bfae-00d8b95de6b5"
        },
        "item": {
          "id": "6bd7346c-8627-4e3f-8160-a293a7403981",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "c94e9386-0657-48cc-a889-0387dc5bf1a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "39980381-bc98-40b1-a3ba-7461aaec6226",
        "cursor": {
          "ref": "ea4cc58d-b619-4756-9b79-5950a9abacda",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "eadd3eea-e064-48e3-b5d4-76b67fdac244"
        },
        "item": {
          "id": "39980381-bc98-40b1-a3ba-7461aaec6226",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "1e806dd3-7500-427f-9b49-39ff3f5b5103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 158,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "565abde1-e34b-4169-9f41-7662a1a1a5a0",
        "cursor": {
          "ref": "dc2e4371-28a1-4125-a0f6-499ebaff3aaa",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "50b0a566-ede7-4db8-bfbd-6813ecc74a58"
        },
        "item": {
          "id": "565abde1-e34b-4169-9f41-7662a1a1a5a0",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "07735f23-888f-40cf-be4f-4a83e7344719",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "3639185a-3c80-4a0f-92d3-f0ae0976ab43",
        "cursor": {
          "ref": "3e29d02f-38d4-46b5-bb80-b3af05944d7f",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "95e5a8fe-65c8-458f-a8ce-c61e4f93f755"
        },
        "item": {
          "id": "3639185a-3c80-4a0f-92d3-f0ae0976ab43",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "6a2f1076-457b-40cd-a9e6-14d77be02d28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "f186fb95-93c7-407b-a04d-40d36fb1cebd",
        "cursor": {
          "ref": "0e0f40ad-9ad4-4f82-a525-e0d3bc7ea933",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d0ae7c7c-0817-46df-b3ce-53d3b2f13a37"
        },
        "item": {
          "id": "f186fb95-93c7-407b-a04d-40d36fb1cebd",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "7e79696e-062b-454c-a039-af30d4dca783",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "69661d63-381f-43e4-9aba-55f4c325943c",
        "cursor": {
          "ref": "7b656f8d-6c76-459a-8980-228806e9612a",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "0841d2cc-4acb-470d-a984-020d7d896964"
        },
        "item": {
          "id": "69661d63-381f-43e4-9aba-55f4c325943c",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "09e267ec-15b0-4d91-b47e-ac4340154156",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "72334240-836f-4a00-a6a0-1a1979cc1ebf",
        "cursor": {
          "ref": "15da6396-c450-4118-aca3-f5d15905c0f3",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "2abccbee-e730-4c88-b514-98232fde5060"
        },
        "item": {
          "id": "72334240-836f-4a00-a6a0-1a1979cc1ebf",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "a63cf16c-44eb-441c-a058-520bb4e0ecfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "05f5b03b-4658-4007-9e53-7d05c13d5a6b",
        "cursor": {
          "ref": "8a753aff-bbf5-46ca-81ea-472263271eb4",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "63c835b8-4c28-4e87-b48c-693d1cb8376b"
        },
        "item": {
          "id": "05f5b03b-4658-4007-9e53-7d05c13d5a6b",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "15fd1db3-09ca-438f-ad3d-106aff360b8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "f0e2ba9d-71d2-47b1-b122-625a2105680a",
        "cursor": {
          "ref": "603c661d-6fcc-4c7c-970a-207243519942",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "c11d518f-aac1-474d-869f-d98595acae25"
        },
        "item": {
          "id": "f0e2ba9d-71d2-47b1-b122-625a2105680a",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "a9a1ef8b-17c8-4bc8-bac2-010ff1ccb4e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "2420399b-88da-4f3f-8488-cc7124ac33bd",
        "cursor": {
          "ref": "6b972f9a-e752-4fdb-930a-3f73173a2173",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "2ecc71e1-b48c-40e3-8238-e8e72ce34a69"
        },
        "item": {
          "id": "2420399b-88da-4f3f-8488-cc7124ac33bd",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "35de89cc-996e-4f8e-917f-5e82fc097759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "fc4b883f-ec13-42a7-9e54-b5ec3e6391df",
        "cursor": {
          "ref": "65da9204-8adc-4106-b40b-2b42b56d34f9",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "3654681d-a0f8-4732-a8d0-3d2058227b9c"
        },
        "item": {
          "id": "fc4b883f-ec13-42a7-9e54-b5ec3e6391df",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "fc040c6d-3335-485b-9e93-239e0dfdbcfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "dd2e092f-09df-42e7-b1ee-273c1f008cab",
        "cursor": {
          "ref": "847dc502-cd89-42e6-a8e1-a1b7b881a714",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c5eee9b8-8ba0-4ee4-aca7-b8a146ea0e6e"
        },
        "item": {
          "id": "dd2e092f-09df-42e7-b1ee-273c1f008cab",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "2bf85856-e36b-421c-930a-d89b18187121",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "7908e12f-bceb-41d8-ba24-ab7e1128f2c7",
        "cursor": {
          "ref": "00e226c1-5434-4164-88b9-d9b5dab8a42d",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "f4698dcb-dca0-4c36-b2c6-ce08d8b0f302"
        },
        "item": {
          "id": "7908e12f-bceb-41d8-ba24-ab7e1128f2c7",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "f9398a39-b09d-42fc-9540-a7e428b35ee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "0a04221b-4575-4c55-b6ef-3bd5b836805e",
        "cursor": {
          "ref": "ce56ed45-9715-40f0-a7a4-88f6d2aec6f0",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f067ea35-1056-4a40-a266-f88ff1a87aa1"
        },
        "item": {
          "id": "0a04221b-4575-4c55-b6ef-3bd5b836805e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "72fc94f1-8e16-4a96-9290-0005b7f63c4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "066e4483-0701-46e8-9245-8aee75034287",
        "cursor": {
          "ref": "9827c413-2fba-4dc0-8c78-f4066abfa51c",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a19fc428-a71d-4277-a152-4c4089e4d808"
        },
        "item": {
          "id": "066e4483-0701-46e8-9245-8aee75034287",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "45d36032-c2c8-4120-9688-bb138a5ea043",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "21f04748-7d79-460c-b0e5-a8e8ae778027",
        "cursor": {
          "ref": "eb4dfda2-0112-444b-bacf-ec0ba49a6400",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "d12ab066-53b9-47a0-8251-1c06faa1d7b6"
        },
        "item": {
          "id": "21f04748-7d79-460c-b0e5-a8e8ae778027",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "cdba10b3-4670-48f2-8bc2-f0705c3332ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "bae3b19a-5f1a-4807-bb9e-690b0943f810",
        "cursor": {
          "ref": "974343cc-426d-42a4-a6e9-d0685d2e7c49",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "51f2bc88-8c94-4a6e-ba60-a0239642c79b"
        },
        "item": {
          "id": "bae3b19a-5f1a-4807-bb9e-690b0943f810",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "c220670e-219d-4968-b2bd-7f03b393bf1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "5eb39271-7afe-4cfe-9478-041bd2ae8030",
        "cursor": {
          "ref": "d650ea3d-c629-4de8-87c5-bf59ec2a46c8",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "8c79b3d9-f77c-442e-bec2-532ea19f7022"
        },
        "item": {
          "id": "5eb39271-7afe-4cfe-9478-041bd2ae8030",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "ee38bc76-9bcb-45a2-aa8d-acea014b05a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "e674998d-8dd4-41b9-a0a7-cb3a5fca57f4",
        "cursor": {
          "ref": "f019860a-d8f1-4daa-9934-344fa96be927",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "03609422-35cc-4693-a626-0278935fad29"
        },
        "item": {
          "id": "e674998d-8dd4-41b9-a0a7-cb3a5fca57f4",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "9e397e74-ab32-49ed-8817-e8dd4054c147",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "0a681be1-7190-4331-9547-0027e935104e",
        "cursor": {
          "ref": "0db3ebd1-18ec-476d-b478-207aeb93554a",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "e2542f79-cad1-447b-a27d-2cabc183095f"
        },
        "item": {
          "id": "0a681be1-7190-4331-9547-0027e935104e",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f1976355-35f0-44b4-ac57-adee3f63f327",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "186dbb34-8756-48d1-80b1-fb666994fadf",
        "cursor": {
          "ref": "d85767ce-3935-47a3-b240-a0307c9d0388",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "87b6588c-3baf-4c01-b948-d0158fe8738e"
        },
        "item": {
          "id": "186dbb34-8756-48d1-80b1-fb666994fadf",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d7b4e84c-4b3d-47ee-bef3-ac3aba199869",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "7e1c2dc8-2f90-4018-9861-3219ac07a5da",
        "cursor": {
          "ref": "54a61360-63ea-4eb7-9b57-897b8d5f668f",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "82f0cfdf-9406-4fe2-8693-96e5ac449a93"
        },
        "item": {
          "id": "7e1c2dc8-2f90-4018-9861-3219ac07a5da",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "f70b34dc-1fd9-4a9b-ac20-514b5bd5f4c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "78d7a415-f8de-4ce6-94f8-0db6ea2b236d",
        "cursor": {
          "ref": "8bace084-28a9-4a87-8964-d0f0acda2c87",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "18e06b9e-08de-4e6b-9f05-d5daac9c4bcb"
        },
        "item": {
          "id": "78d7a415-f8de-4ce6-94f8-0db6ea2b236d",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "1f2e75c1-1f3c-43d2-ba8d-d4fd57a40e71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "99a5dd5f-5759-4249-bad8-e9e04b4f47e5",
        "cursor": {
          "ref": "c604991e-81c4-4bb8-b37e-e308465a5626",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "d733d34b-8927-48bd-9c81-66357478808e"
        },
        "item": {
          "id": "99a5dd5f-5759-4249-bad8-e9e04b4f47e5",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "6498dbe2-9cf2-4d77-aa09-ce8417f5d4f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "14b12cb7-1a33-4355-89a5-056077b880d1",
        "cursor": {
          "ref": "a53ee1fb-6792-46a7-bfcc-f738e22cac70",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "25022b68-d7d1-4a84-81ba-43a570ff80f1"
        },
        "item": {
          "id": "14b12cb7-1a33-4355-89a5-056077b880d1",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "c96ab077-1b84-4e71-9390-344949ccab56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "d645c0fb-7a7f-4ee7-94a3-c1ffba5022e4",
        "cursor": {
          "ref": "e8a314cd-4255-4141-b807-0bbf13303991",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "5df6cd75-84eb-445b-961b-55404e39b7e5"
        },
        "item": {
          "id": "d645c0fb-7a7f-4ee7-94a3-c1ffba5022e4",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "e4cb4f71-c4cc-443a-ba79-2ddfdb0d952d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "5ea5932b-1e5e-40b6-8294-baafd4351c00",
        "cursor": {
          "ref": "1ef6f685-46e7-41b7-b352-754d1f0715ea",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "1f83f2c2-9564-4de9-a0ce-883bccd1f15e"
        },
        "item": {
          "id": "5ea5932b-1e5e-40b6-8294-baafd4351c00",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "8e286df1-e027-47a3-8abd-f9cff7583bec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "625d3581-8f65-410e-9d97-68f980b9166d",
        "cursor": {
          "ref": "abf5ea81-bc97-4ff7-8020-ce6245e32041",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "17cf378e-1d67-4620-a946-6f00547e4492"
        },
        "item": {
          "id": "625d3581-8f65-410e-9d97-68f980b9166d",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "67fc90b1-c3b1-4d7f-96ad-ceb3e717249e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "7c0e7181-4a85-49a1-9c12-6d18c57c115a",
        "cursor": {
          "ref": "2cc76d8b-36fc-4206-a885-b0b60b518df4",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "dfcc2c91-2bf7-4d8c-896f-34f5749002d4"
        },
        "item": {
          "id": "7c0e7181-4a85-49a1-9c12-6d18c57c115a",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "af0a0c28-5891-44a3-abcd-d2125122dcc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "11286240-6abd-49c8-84c0-7d3dc2b177e6",
        "cursor": {
          "ref": "0f0cf689-c9a5-4cfd-b2be-edd055f699ee",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "c423b138-c022-489d-929f-9687330645c4"
        },
        "item": {
          "id": "11286240-6abd-49c8-84c0-7d3dc2b177e6",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "0a99de0d-ff80-466a-9885-1f91fdad44ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "5385ef61-9596-4537-b8b8-7bae7a40b887",
        "cursor": {
          "ref": "cd45e73e-82a1-4fa3-b643-bea97604cc56",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "b41d2141-8f4a-4a77-b95d-1ad7a687a6ff"
        },
        "item": {
          "id": "5385ef61-9596-4537-b8b8-7bae7a40b887",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "8b277eb5-3597-41b8-84c5-3aec55c3a505",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "a0110780-99d6-4637-9b60-f7c3691dab37",
        "cursor": {
          "ref": "31e63da5-c3b6-4613-ad4e-ce395a767b05",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "50f951bf-267c-4b9e-95b6-eeb58ec18362"
        },
        "item": {
          "id": "a0110780-99d6-4637-9b60-f7c3691dab37",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "06980913-b389-4fdb-8e54-582d2b70cd89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "1b2c2b10-8f4b-4d22-b61c-1163494d5c20",
        "cursor": {
          "ref": "a91ee82e-017e-4bfc-8aa8-2395708f188c",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "b424c098-f4ba-4d35-a18c-14b4cce4d573"
        },
        "item": {
          "id": "1b2c2b10-8f4b-4d22-b61c-1163494d5c20",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "e3829843-2dee-472b-9948-f12ddba2943c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "909d7d6e-282e-4a7f-9d85-e5f63c200785",
        "cursor": {
          "ref": "ca49caba-e0f0-4db6-a094-29d0642c9dba",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "ae6e9c9c-f486-436c-9f98-2263b0d4d6d5"
        },
        "item": {
          "id": "909d7d6e-282e-4a7f-9d85-e5f63c200785",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "4e9f11ba-3b23-4931-8175-14d6a441a282",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "0ab706fd-11c7-4f4c-a746-e4cb293d01ea",
        "cursor": {
          "ref": "72a7f663-2134-4306-ab83-c75045c1f9bf",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "8587b0a8-72f9-49bb-ae1a-6d91ec71efd8"
        },
        "item": {
          "id": "0ab706fd-11c7-4f4c-a746-e4cb293d01ea",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "2b35c656-ca93-46e1-bde0-45afa32076dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "6185ad97-a89c-4d8c-8503-186f9a4ddffc",
        "cursor": {
          "ref": "f84e5ff5-5558-4240-9b3f-4eb35f9c6e2c",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "ddd0c4bb-ebb1-4eab-b717-f3eaa48899f2"
        },
        "item": {
          "id": "6185ad97-a89c-4d8c-8503-186f9a4ddffc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "9ef2c8e2-c3bb-42b5-8ed8-510be551a1db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "4be0c1d6-f0bb-4e19-9834-41a72cc4e3de",
        "cursor": {
          "ref": "dbd5d692-bab6-437c-86cb-19f598345eb8",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "cebc782d-cac0-41ba-835c-89a9b03b2885"
        },
        "item": {
          "id": "4be0c1d6-f0bb-4e19-9834-41a72cc4e3de",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "b08d63b6-5d4f-4ae5-874a-b816355168e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "e5342ad0-9c7a-4fed-b49b-bc0172964188",
        "cursor": {
          "ref": "5fb2f6f5-0ba0-46ee-9852-e656fbfe2f1b",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "b4ee1c31-dafe-4924-a45e-5ce5bc211e02"
        },
        "item": {
          "id": "e5342ad0-9c7a-4fed-b49b-bc0172964188",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "d1a5d36e-9509-4de4-8fc1-28836c8ef69d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "4512508b-dde9-4cb7-9427-2cd7186d5fb4",
        "cursor": {
          "ref": "6d97bcc7-4d30-4a48-b361-1b819e3717b1",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "b2053f65-91b8-4637-ad96-248c3222bd2c"
        },
        "item": {
          "id": "4512508b-dde9-4cb7-9427-2cd7186d5fb4",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "291e688e-7698-4823-8e88-5b10b64685e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "31133421-f1e8-4e41-b576-784f9e3f9e7e",
        "cursor": {
          "ref": "46732ad1-7d0b-4cc2-961e-52ed7ecd274f",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "2aadd378-6ce2-46e2-b2db-8c5c7aa80495"
        },
        "item": {
          "id": "31133421-f1e8-4e41-b576-784f9e3f9e7e",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "c22caaa3-f5ce-4327-9572-5d2938cc6a98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "ee7776ba-4f02-489e-8296-d40f753ee128",
        "cursor": {
          "ref": "4df589d1-8d60-4e6d-8487-383def009ad7",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "d1dd9cb4-da0b-4da9-8d63-8bfcb32d3f2d"
        },
        "item": {
          "id": "ee7776ba-4f02-489e-8296-d40f753ee128",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "978dd3b5-15fd-4c91-8d47-3af08939d567",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "26eefeb0-1d24-4537-b6f7-a2a8d9f93547",
        "cursor": {
          "ref": "bf1df5ae-fb89-4cba-932c-5cd35d7ec23d",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "3c3e57aa-2829-49c7-a86c-707918649b0e"
        },
        "item": {
          "id": "26eefeb0-1d24-4537-b6f7-a2a8d9f93547",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "9f059711-8511-49f9-b58a-55323d85c9e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "86020507-27a7-4eb7-8af5-8c9100459600",
        "cursor": {
          "ref": "980eeec7-8007-4ef9-b057-091976acf977",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "ffc70816-57b6-4ff4-b887-3d5caa75191c"
        },
        "item": {
          "id": "86020507-27a7-4eb7-8af5-8c9100459600",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "22690be9-7982-4b49-8d86-687285123573",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "7921f84f-ba12-46f7-bf63-58d27e557b4c",
        "cursor": {
          "ref": "a8078861-4ff9-4890-8f13-a83a2aa2fdc4",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "f3146b30-5a6a-44b6-8430-2c2e725fed98"
        },
        "item": {
          "id": "7921f84f-ba12-46f7-bf63-58d27e557b4c",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "c2584c19-7386-41e6-a8ca-98dd3175c466",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "e6e5dd5a-94ba-452f-b4d8-fdec4b54d3d1",
        "cursor": {
          "ref": "a1eca099-c6c2-4c89-b622-7df712525c4f",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "985373cc-82fd-4a70-be08-7ee29e983920"
        },
        "item": {
          "id": "e6e5dd5a-94ba-452f-b4d8-fdec4b54d3d1",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "ce6642c0-ecdc-4d33-bd44-430777fd1a57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "251fdaa8-46f4-449f-992a-333bc285c528",
        "cursor": {
          "ref": "3e6ef3c6-ca9f-4dee-8e7d-23b3a3996558",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "3dda48e7-3b67-4600-8a91-24cb85dc339f"
        },
        "item": {
          "id": "251fdaa8-46f4-449f-992a-333bc285c528",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "ad50a447-0ebc-4eac-947a-a72fe83d39aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "512ca860-0d4f-4a84-a991-456f8c1ae8d6",
        "cursor": {
          "ref": "a1d387fc-9cbb-4e17-8499-f012c08ee80e",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "240be600-12f8-4934-ac85-8b3431a0fd33"
        },
        "item": {
          "id": "512ca860-0d4f-4a84-a991-456f8c1ae8d6",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "40f85a46-3222-4d9c-b0c0-f186fb8bbfe8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "6acce830-b677-4468-b112-99a91957ae00",
        "cursor": {
          "ref": "f6549915-1f52-424a-bc15-100f3bb1288b",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "3c504139-ac88-4367-97f1-3c0c40af5001"
        },
        "item": {
          "id": "6acce830-b677-4468-b112-99a91957ae00",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "e305d03b-aead-4de1-937f-51e2df2fa840",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "5d04c911-6040-49f8-8c85-970b66c45afb",
        "cursor": {
          "ref": "dea14941-2788-44ff-8b8a-245a7ccc476e",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "8a3c0862-299b-414c-9cbc-273af8258a37"
        },
        "item": {
          "id": "5d04c911-6040-49f8-8c85-970b66c45afb",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "32214622-5791-4d34-8b31-ffcb9523aa6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "ab1bd3ef-ee43-4273-b225-b3a9135bd9ad",
        "cursor": {
          "ref": "6502ea72-dbb4-4bba-9ed4-7b6d57c8717d",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "f4a4931b-31f9-4dc1-b9fb-85e1ecbde4ac"
        },
        "item": {
          "id": "ab1bd3ef-ee43-4273-b225-b3a9135bd9ad",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "564ef675-1d53-48af-bca6-a79aad43f5b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "6bfe5b84-d114-4106-aae1-8bc81356a61d",
        "cursor": {
          "ref": "98fc131a-358d-4817-8124-3e578a5dd558",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "7493d78b-ed65-448a-b14a-2d9b72a03b0e"
        },
        "item": {
          "id": "6bfe5b84-d114-4106-aae1-8bc81356a61d",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "f3ba948c-7cb6-48fd-87ac-965727490e35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "e1c1640b-aef4-4bee-a35e-b1c04fb98d5e",
        "cursor": {
          "ref": "58cb484e-83f5-4aac-862a-ac5a78f4f917",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "af925d9f-d5ed-43af-aa8c-6a041774ba7e"
        },
        "item": {
          "id": "e1c1640b-aef4-4bee-a35e-b1c04fb98d5e",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "148a5809-66d6-4a24-a44c-4716d5a20682",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "0b7b3d13-35ec-442f-8a62-b90f95e07a4d",
        "cursor": {
          "ref": "569e8499-cdee-4808-9066-79ef6bda27c7",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "c84f0a33-c285-43d0-923a-f257df953bb6"
        },
        "item": {
          "id": "0b7b3d13-35ec-442f-8a62-b90f95e07a4d",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "1c2b804e-8f88-4b92-97f8-bf07fb3331f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "99181e55-c7c1-4fbd-99f7-37a0f62740f9",
        "cursor": {
          "ref": "57507490-0010-48c6-b244-bbabd59e7480",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "d77178dc-6aed-4991-bb74-041fb7b94e5a"
        },
        "item": {
          "id": "99181e55-c7c1-4fbd-99f7-37a0f62740f9",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "9d9d8161-dcc0-4146-931b-b925ede9dc07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "00449d3d-f494-401a-82d8-053772681688",
        "cursor": {
          "ref": "7f5446d3-3c29-4c7a-9e62-c7962479c1bd",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "a24dac25-0086-4f41-856f-990bc3cdea82"
        },
        "item": {
          "id": "00449d3d-f494-401a-82d8-053772681688",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "90a4ed6b-3df4-48c1-b164-cbf98d4ea269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "66499a53-ec76-4dc2-85ef-a9d3043b1078",
        "cursor": {
          "ref": "95419a94-7da6-49f9-a136-c82eec96a6f6",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "b0a7c0d3-23ef-4bb4-b9a5-8de6e8c4cc4a"
        },
        "item": {
          "id": "66499a53-ec76-4dc2-85ef-a9d3043b1078",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "93f6e41c-71ac-4a27-9a51-49485d6e1b24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "6d6213ce-3d57-403d-b4b5-5b3cd1093c8d",
        "cursor": {
          "ref": "88466385-8fc5-4d78-b52b-fae8a3e22951",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "22eec98d-6521-4de8-bdcc-5c4067e3db6a"
        },
        "item": {
          "id": "6d6213ce-3d57-403d-b4b5-5b3cd1093c8d",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "4f3fa152-d0f2-470e-a3fe-10f5fbff68d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "4bc45383-e6a7-4763-b09e-3afeacc2b783",
        "cursor": {
          "ref": "1e094677-d71f-4046-a7b1-13f19c33e12a",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "ea9c61c5-f674-476f-bb38-628df61ccb72"
        },
        "item": {
          "id": "4bc45383-e6a7-4763-b09e-3afeacc2b783",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "92fd4c24-622c-44ab-ab2f-f6a7094052c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "50533c45-6feb-4815-9ac8-18b8bf796700",
        "cursor": {
          "ref": "7f7aa33e-e7be-4cc4-baa3-500bd3c4dced",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "f673a7a0-6fbe-42c7-a2ef-7a04bb39f5f1"
        },
        "item": {
          "id": "50533c45-6feb-4815-9ac8-18b8bf796700",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "bfc9a148-d64f-45d8-b2a7-206a6cd37245",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 195
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "4fa59258-2bc9-46f1-88ec-ff1b81b59abd",
        "cursor": {
          "ref": "925a6226-a62f-406f-85cc-0b86ef247cb5",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "a579f0a6-4023-44f8-87dd-56eabf3d0653"
        },
        "item": {
          "id": "4fa59258-2bc9-46f1-88ec-ff1b81b59abd",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "6f069380-2054-444e-8d73-7ffceddaf242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 195
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "88f0f0e6-1ca2-47e4-86aa-aceb25aaaa13",
        "cursor": {
          "ref": "61dba442-7669-46f1-8387-cce2043fc1d3",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "6f358620-7d69-437f-86ff-28df40f8fed7"
        },
        "item": {
          "id": "88f0f0e6-1ca2-47e4-86aa-aceb25aaaa13",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "16b4b6e0-888f-41b1-afbd-a23ef6e6e121",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "348cb90a-b109-438e-a91c-758502faa9fe",
        "cursor": {
          "ref": "856eb26f-0c7a-48eb-bc1d-1e8c412ae252",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "25ac98bf-ca6a-4335-b147-a5b497e4f8f9"
        },
        "item": {
          "id": "348cb90a-b109-438e-a91c-758502faa9fe",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "5318275d-dc2d-4aaf-946f-251a206fd3dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 195
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "936c307b-3f5f-4001-9e8d-1ca84cb35b7e",
        "cursor": {
          "ref": "b7241015-a756-4a0b-b6c2-de112f97ac10",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "1f5c7fc6-bd40-4b81-99d6-f0c93e587e2b"
        },
        "item": {
          "id": "936c307b-3f5f-4001-9e8d-1ca84cb35b7e",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "40d75579-d15e-4b64-94e8-aee73c470ff5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "05ef7f43-686f-4544-be18-4f34e2ff589c",
        "cursor": {
          "ref": "756a7e91-5122-4755-a79b-379413994762",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "62696a06-3f20-4ca1-92e5-4f4d21c1cb2d"
        },
        "item": {
          "id": "05ef7f43-686f-4544-be18-4f34e2ff589c",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "f6f6d9ed-8fa1-4044-930e-c65a6e80dce7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "bb40fab9-0607-4f25-9c33-28fea1a8473e",
        "cursor": {
          "ref": "f05d2faf-b45f-4dcf-91b4-37393a1ecf41",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "ed72c147-0fec-4101-bd50-49c434fbf679"
        },
        "item": {
          "id": "bb40fab9-0607-4f25-9c33-28fea1a8473e",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "90e80405-9c99-48a1-98c7-03bed1a5d352",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "4f9aacf5-b862-492d-a823-8b67bb23f258",
        "cursor": {
          "ref": "62f7e7ba-8d0a-482f-90bb-351b4a5eea4c",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "3ab44473-887c-400d-8edb-ed1eab81ea6f"
        },
        "item": {
          "id": "4f9aacf5-b862-492d-a823-8b67bb23f258",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "b45e77f7-5682-409a-86a1-aa8b020cb2f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "45500b1e-5fdd-4cb6-b5c0-cd192cb71ccb",
        "cursor": {
          "ref": "d21da128-ba25-4bc3-a578-bebedebd15db",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "36e8053c-3f28-4049-9ab7-6fb014ff992c"
        },
        "item": {
          "id": "45500b1e-5fdd-4cb6-b5c0-cd192cb71ccb",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "56b35584-8618-4358-910a-a0ed53220657",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "0f9b355c-d724-4df3-b1ca-9d266d23b486",
        "cursor": {
          "ref": "dfb4712c-d18d-4983-bee1-56129ebfdc32",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "aa123a98-2058-4fbb-b84e-7b84f4ed4c99"
        },
        "item": {
          "id": "0f9b355c-d724-4df3-b1ca-9d266d23b486",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "caa242f5-f5af-4a6b-978d-97b24bf665d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "e508d899-1606-45b5-bda2-f024ec3c5fa6",
        "cursor": {
          "ref": "af562515-b3f0-4e52-9f7a-ee57900d6fc6",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "218aba65-4fad-4b68-81c6-70b0aa419a51"
        },
        "item": {
          "id": "e508d899-1606-45b5-bda2-f024ec3c5fa6",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "7c07b484-746b-42fa-8751-6cae840f40fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "d23a6913-8051-4529-a568-5ec1a868d306",
        "cursor": {
          "ref": "5e25711d-239c-4d0b-b206-d03c56c8bcbb",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "27a7bd6d-4490-4031-9175-96588107eee3"
        },
        "item": {
          "id": "d23a6913-8051-4529-a568-5ec1a868d306",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "21cde754-47d1-4dd8-9d4f-7e744b230f16",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d58e9d1-ffd6-4c60-bf21-d821505638cf",
        "cursor": {
          "ref": "cad1fc32-bcb2-48d7-be6d-c33da35f770f",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "7550013c-f0c5-4a65-87ba-64d94b34487b"
        },
        "item": {
          "id": "9d58e9d1-ffd6-4c60-bf21-d821505638cf",
          "name": "credentials_issue"
        },
        "response": {
          "id": "c63869e9-b137-474b-96ac-642e6ef64ce8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:102)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:102)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:102)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:102)"
            }
          }
        ]
      },
      {
        "id": "a818ceb4-8702-432c-ac5d-57c9960e9d6c",
        "cursor": {
          "ref": "87dd5766-2dc0-44d1-98a2-30c0ee763650",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "d67d973d-4135-4a7b-9e25-47bb4f6418fc"
        },
        "item": {
          "id": "a818ceb4-8702-432c-ac5d-57c9960e9d6c",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "0092d0ce-503e-473b-938d-8b560ed86ed7",
          "status": "Created",
          "code": 201,
          "responseTime": 1651,
          "responseSize": 749
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should be object",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should be object\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:103)"
            }
          }
        ]
      },
      {
        "id": "40c9bf32-f1ad-458e-b423-1a18c260cb97",
        "cursor": {
          "ref": "942b2cbf-c74b-4baa-857c-16470edb7228",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "72c66061-9c20-4cb9-85cc-7e0869e4fde5"
        },
        "item": {
          "id": "40c9bf32-f1ad-458e-b423-1a18c260cb97",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "60aaddcc-b4ea-4495-a176-48f720d2463a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "17dc483b-3088-4193-a42a-37d9a05fe2de",
        "cursor": {
          "ref": "f10ada8a-544d-4f82-bf16-a553936bad8e",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "c7e9a922-bd80-4d71-8b62-0b0ca20352c9"
        },
        "item": {
          "id": "17dc483b-3088-4193-a42a-37d9a05fe2de",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "02473597-229f-45b3-8faf-93c72eb9d232",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "ca65370c-de4e-4e51-a8f0-b387a1b46db1",
        "cursor": {
          "ref": "8718b99d-a915-4b42-bb77-fb535168033b",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "774c9ada-6dd0-47fa-b59c-02715ab9451e"
        },
        "item": {
          "id": "ca65370c-de4e-4e51-a8f0-b387a1b46db1",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "b583a79a-20bb-4b49-9b6b-192abc76b813",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "c7adabe0-d524-4199-a7a2-421efb8b7363",
        "cursor": {
          "ref": "97f34546-d7e0-47cb-a153-dd8e3298ae20",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "b2f41eac-4de0-48c5-91f3-40a44a453d02"
        },
        "item": {
          "id": "c7adabe0-d524-4199-a7a2-421efb8b7363",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "7fe6a6a8-bb6a-4764-80e8-fcc179602aaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "16a81b94-1188-4db0-945a-85a16d7f1f9b",
        "cursor": {
          "ref": "35eb9e5c-fe0f-4590-962e-e42a652b97e1",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "5d28cdcc-3a61-4449-ad7c-ab4656e47cca"
        },
        "item": {
          "id": "16a81b94-1188-4db0-945a-85a16d7f1f9b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a37ccf66-28d6-4f40-ace1-ddb7895900f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "717220e3-8e4b-4f63-96b1-665b68d6912c",
        "cursor": {
          "ref": "e8877c3a-c7f6-4ae5-ab10-f6bcf1066c89",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "dc731c42-ee99-4b63-9153-7fa1560bb95e"
        },
        "item": {
          "id": "717220e3-8e4b-4f63-96b1-665b68d6912c",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "28c977f4-34de-48c8-ad36-35ed6743392a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "13351c4a-9322-49a7-a1b7-ff3d06220f5e",
        "cursor": {
          "ref": "4b13cc5f-169f-41a2-9b0d-7edcc25507b3",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "97ab3920-bab2-47e5-9c09-291aceb1e5d1"
        },
        "item": {
          "id": "13351c4a-9322-49a7-a1b7-ff3d06220f5e",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "9e234af6-c8cb-48ae-9055-27bd42e78772",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "f295c905-3fe5-4674-aaf0-43afd0c26a7c",
        "cursor": {
          "ref": "485474ef-4583-45fd-9097-d19881548ee8",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "996723eb-b2ba-4952-9c89-e7fa7ee71dea"
        },
        "item": {
          "id": "f295c905-3fe5-4674-aaf0-43afd0c26a7c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "b91dcaf9-30c8-44e7-a606-31c2ba8dd4e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "7efa9d4b-4625-47e8-ab1a-798d46f35fab",
        "cursor": {
          "ref": "09943ccd-aa1d-4678-91fa-e4ac75c34c7f",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "534bb377-742c-4d31-90ea-ed2a1b7516dd"
        },
        "item": {
          "id": "7efa9d4b-4625-47e8-ab1a-798d46f35fab",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "8ce27cd4-aad5-47f6-b1a8-64eaab9dc85f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "c5b1f09e-e170-414d-9bb1-4a4c900be532",
        "cursor": {
          "ref": "da55227f-65f8-4efb-be26-bfff8eb3443b",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "011db974-0965-482c-aefc-d75b55dbe164"
        },
        "item": {
          "id": "c5b1f09e-e170-414d-9bb1-4a4c900be532",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "808cb89e-2863-44fd-bd4b-1178b8005ac5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "1a22e9ac-1e05-4c8e-8c06-d51ac2fbba02",
        "cursor": {
          "ref": "2b61e068-f678-47de-af0b-3d482281a6a4",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "74f307e6-5d19-446b-98c1-7731e6c870b6"
        },
        "item": {
          "id": "1a22e9ac-1e05-4c8e-8c06-d51ac2fbba02",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "093be319-f9a6-4824-8891-774cd9367a49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 140
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "05327c9e-02c4-4c02-8e27-7c07f42a5e32",
        "cursor": {
          "ref": "b7aa6642-4e3f-4d48-a62c-b307caa922ef",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "dea94a62-4d23-4e35-bbe6-9c5453c0122b"
        },
        "item": {
          "id": "05327c9e-02c4-4c02-8e27-7c07f42a5e32",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "6876daf4-3f09-482d-97c9-3841f64a0f4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "3aa69545-dd2c-48e3-bbec-f36def19bbbd",
        "cursor": {
          "ref": "dba2be52-1e0e-4920-a4c8-78d0e70cab86",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "67e50c6f-31f3-4165-9100-3cf1de673328"
        },
        "item": {
          "id": "3aa69545-dd2c-48e3-bbec-f36def19bbbd",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d541d1fd-0464-444c-924c-ce88d69f2119",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "506d3b0e-810f-4b31-90f1-23183f0a77cb",
        "cursor": {
          "ref": "ad2cf52c-0c34-427c-b178-84780eff4edb",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "b6ba6b39-f624-43f4-9b19-518e92a61c38"
        },
        "item": {
          "id": "506d3b0e-810f-4b31-90f1-23183f0a77cb",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "3affaa8d-0bfa-46a0-8f62-731eaa7dc36f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "0fa83a8a-57a5-4ca0-acc1-28b34d9b596f",
        "cursor": {
          "ref": "dedcfe67-bb88-4054-b19a-2c7e6278f63b",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "1a4fbe57-2ee3-4306-a857-db36a600ef5f"
        },
        "item": {
          "id": "0fa83a8a-57a5-4ca0-acc1-28b34d9b596f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "7a4f107a-aa0e-4088-a5e9-28c868da7c04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "7e1cf4ea-7b40-45d4-a7a2-e892e636a6e9",
        "cursor": {
          "ref": "03f843b3-93e7-4de3-b021-059a152eb010",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "37fe7acd-11a7-4038-a48a-a9e0a50b6b1e"
        },
        "item": {
          "id": "7e1cf4ea-7b40-45d4-a7a2-e892e636a6e9",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "6d9d754d-2492-4b7f-a4ef-90b52e0be5ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "eedc5896-1ee7-4feb-921a-fe203a9946ae",
        "cursor": {
          "ref": "4f39bd88-3ea4-4177-a7fb-dd974dcdd255",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "8492a94d-2ccf-40d4-9ef4-f38aac39ecd6"
        },
        "item": {
          "id": "eedc5896-1ee7-4feb-921a-fe203a9946ae",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "2242f0bf-64fa-46e5-868c-19bf6498e8a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "8745c385-d4ad-4712-ab63-d353ac44ce89",
        "cursor": {
          "ref": "d9e06cf4-9339-441a-be05-66388eee56d3",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "49dcf302-0fba-4e7d-8f06-b850a38c1a98"
        },
        "item": {
          "id": "8745c385-d4ad-4712-ab63-d353ac44ce89",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "83af8fb0-db3c-42c7-b67a-af44e88b62c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "bdfd6c15-d15a-4612-965f-14d635bcc962",
        "cursor": {
          "ref": "e82b5f2e-58b9-4640-8229-2a2d2c36e056",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "badff310-70c5-42d1-8b17-8ac0a19af81b"
        },
        "item": {
          "id": "bdfd6c15-d15a-4612-965f-14d635bcc962",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "03da215a-846a-464e-a9b2-4bb3bde32950",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "be7ba6c5-c184-43df-9b5a-eb3d574a9136",
        "cursor": {
          "ref": "788f9a70-8b86-4604-8c7d-dc8ad6cc5605",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "d62e7f2d-40f9-4092-a80f-cad9b14022a1"
        },
        "item": {
          "id": "be7ba6c5-c184-43df-9b5a-eb3d574a9136",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a425d84e-5d2b-47c8-aa80-f4a4ca9cf2b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "f42421d2-f462-4aaa-ae8f-4768fd91e4bf",
        "cursor": {
          "ref": "d4951b01-4613-4d47-a9d9-a9950159263d",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "c64f8b7c-14d3-4bc1-89f3-4011bf93fda6"
        },
        "item": {
          "id": "f42421d2-f462-4aaa-ae8f-4768fd91e4bf",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "1dc2f305-f1e5-4723-8640-d0ae5b893771",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "c66da22f-46b1-4f95-bd54-ee8d96f153c5",
        "cursor": {
          "ref": "6b0ab772-fbce-4c68-ada4-a1e8b01d2707",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "189f8a27-29ed-4580-aa99-715cce34d038"
        },
        "item": {
          "id": "c66da22f-46b1-4f95-bd54-ee8d96f153c5",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "246698e0-3b66-449c-ae7d-5e06d0916b29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "f5360410-c37a-48e7-b977-3c29d43715a8",
        "cursor": {
          "ref": "68147a7b-0050-47c3-836e-175b45ab0593",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "09d7d1e9-69c2-4ee9-9185-72d77f42fb1d"
        },
        "item": {
          "id": "f5360410-c37a-48e7-b977-3c29d43715a8",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "9ae12458-c0d3-44b3-999e-94795d97750c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "4c3c1658-48d1-43b7-ae82-34d88bb26f6c",
        "cursor": {
          "ref": "1de384a2-cdb2-415f-bf8f-8d046faa806d",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "b83c7c42-64b8-463d-a67b-5f77eae7a738"
        },
        "item": {
          "id": "4c3c1658-48d1-43b7-ae82-34d88bb26f6c",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "ced53f10-6e65-4854-b928-e6b3173e1fc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "4799d62f-0a87-4a81-bb02-600f9adbe126",
        "cursor": {
          "ref": "9eddaf49-a0e1-4dae-bcb2-b517831b1da1",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "96bd3264-e4d8-4117-9e0e-86bd65dd59c0"
        },
        "item": {
          "id": "4799d62f-0a87-4a81-bb02-600f9adbe126",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "7ce7c0f6-e345-41ad-913d-c262cb7d081d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "0bc0028c-f957-4df6-9f7e-e21d0bfd37e1",
        "cursor": {
          "ref": "7092d961-dea2-4e95-8a42-619fa851b88e",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "75f921b3-a42d-4d8c-8b6d-a5f57c407891"
        },
        "item": {
          "id": "0bc0028c-f957-4df6-9f7e-e21d0bfd37e1",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "876ce7fc-fda4-4128-ba92-8e7c6cd06871",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "042d8e20-5845-4c74-bf50-419e4ce25ddb",
        "cursor": {
          "ref": "92624e98-cd05-4fd1-ab14-279c8ceb3159",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "c1ee37cd-6c42-4bd4-a73f-c33236f788a2"
        },
        "item": {
          "id": "042d8e20-5845-4c74-bf50-419e4ce25ddb",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "fcda547b-da41-4ddf-9a68-d9e6d2008474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "d41bba31-f39f-4cd4-be9c-e9efcbf63c03",
        "cursor": {
          "ref": "06e8e385-923b-46de-a53e-fa64368987cf",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "5777524c-62fe-4504-9df6-65ad535ba2ae"
        },
        "item": {
          "id": "d41bba31-f39f-4cd4-be9c-e9efcbf63c03",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "cc804cb9-e988-4576-87cc-1f2120834195",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "5189db55-0497-4128-b01d-d28c41e5cc7f",
        "cursor": {
          "ref": "342dbade-5840-4404-82bd-a14e5a0c6129",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "ec6c0ffb-fd40-4f56-a58e-55c0a386db26"
        },
        "item": {
          "id": "5189db55-0497-4128-b01d-d28c41e5cc7f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "9169f2cc-f7a7-4714-ac31-cf0cc38ec2dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "9140eb3b-2c2c-46c1-af25-8a4f7c5ae4f8",
        "cursor": {
          "ref": "5a278cbf-e6b3-40e6-bef1-8c4389b9c81b",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "332421bf-666a-45be-bc00-e24c000ff964"
        },
        "item": {
          "id": "9140eb3b-2c2c-46c1-af25-8a4f7c5ae4f8",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "8750f650-d452-478c-8c38-d0918be3ca72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "baee60bf-67ef-455d-95f4-deba8b529e17",
        "cursor": {
          "ref": "44d52084-04e5-4e05-8f21-915ddb0e01c4",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "7fb79180-2c35-4d7f-a5d0-e3187455652f"
        },
        "item": {
          "id": "baee60bf-67ef-455d-95f4-deba8b529e17",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "e06c6718-13fc-4e85-9b17-22e67ea8dda3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "de7388f2-a830-4c06-bda8-823005cdfe26",
        "cursor": {
          "ref": "d3965b4d-53cf-46a4-9246-f34a58e8cdcb",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "b104d585-d629-4d95-9189-a79ee1cd57d2"
        },
        "item": {
          "id": "de7388f2-a830-4c06-bda8-823005cdfe26",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a72ca7a1-e394-49ac-b962-eb3324b923d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "de36103f-2412-4ca9-b220-e752fb1a26b3",
        "cursor": {
          "ref": "64e829d1-6c54-43a1-ab67-9c7a3437fee1",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "54da5c33-3932-4a5a-bc50-b210699055a1"
        },
        "item": {
          "id": "de36103f-2412-4ca9-b220-e752fb1a26b3",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "7043e6f1-c2f8-4b19-b698-8e414ded2ec1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "f191376b-1134-4708-bd9f-f6246ef5ea03",
        "cursor": {
          "ref": "13131f9b-b7b4-44e3-8600-2bad064209aa",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "d5c1f5e3-df7f-47e7-a0d4-58a83d0092de"
        },
        "item": {
          "id": "f191376b-1134-4708-bd9f-f6246ef5ea03",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "04a95fca-6042-44d9-abb4-2a6fb427b467",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "1649dfa4-17b7-42ac-b87e-a06102e0d2cd",
        "cursor": {
          "ref": "e8c4ff13-6a95-4717-88a9-719add442fea",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "d2eb2b7f-72dd-4a08-9ca4-d8c5dff16c9d"
        },
        "item": {
          "id": "1649dfa4-17b7-42ac-b87e-a06102e0d2cd",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "064e50a6-f01a-49eb-aabf-68fb75294bc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "9801a32c-0d2a-47a3-8c04-e7f2f531b710",
        "cursor": {
          "ref": "1264ab8a-4cc4-4a97-b791-c31559a06c55",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "237915e8-fe59-49d7-9938-e7d1fb587fa6"
        },
        "item": {
          "id": "9801a32c-0d2a-47a3-8c04-e7f2f531b710",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "93c4bef9-629b-4bc7-a342-edc1b2186a07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "3e544ae6-0d55-4772-8cf2-015b64d35c18",
        "cursor": {
          "ref": "dd2c232c-abf7-4997-9baf-483fe4df29ce",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "dfe78c7e-947d-4a6f-b765-d4006b49eca6"
        },
        "item": {
          "id": "3e544ae6-0d55-4772-8cf2-015b64d35c18",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "a2808186-511b-4d32-983c-00420f5d8217",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58e4269b-5dab-4f71-87d5-3bd7a3734e2b",
        "cursor": {
          "ref": "fce2f89c-b073-4dda-9e98-287b75c1a974",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "f01e46e7-5876-400b-8c6d-18b62ade4e44"
        },
        "item": {
          "id": "58e4269b-5dab-4f71-87d5-3bd7a3734e2b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "44d4450e-1ca8-453d-be39-e3784df7dfa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "23631963-eb00-4e1c-95ac-f3f02e969bf2",
        "cursor": {
          "ref": "a4212f6b-e3dd-4f3f-b2e7-43a681b5850d",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "4c2b7aa5-b367-4e9c-8c89-14ee4b52959c"
        },
        "item": {
          "id": "23631963-eb00-4e1c-95ac-f3f02e969bf2",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "bddf2c38-9b5d-44f6-9132-6e3253784490",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "36248428-43b7-4ac3-b3d1-d944b1f00ec6",
        "cursor": {
          "ref": "9233bee9-f043-4d29-b146-10665e680a00",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "75df3ed8-811a-4e69-bfba-e2299979997c"
        },
        "item": {
          "id": "36248428-43b7-4ac3-b3d1-d944b1f00ec6",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "2031de04-5014-453a-a9c0-df3a42717f25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "eb199486-32e1-4acd-b1db-a4d547685245",
        "cursor": {
          "ref": "4227f9b5-a9ab-4862-931b-6947715ef48a",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "210a0e98-16c0-4a6f-8eef-e4842b8991f3"
        },
        "item": {
          "id": "eb199486-32e1-4acd-b1db-a4d547685245",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "4f802fb4-1ba9-4b9b-8db1-47cd2f93420a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "03876201-8c52-4e59-90e7-142c2d751095",
        "cursor": {
          "ref": "50466f2f-18cf-4416-bfa1-b6db5989d8d4",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "7d48dcdf-c56f-4108-a18f-7f30bf7d2b38"
        },
        "item": {
          "id": "03876201-8c52-4e59-90e7-142c2d751095",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "0c514c5a-6496-412c-a32a-1c96598908a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "31042454-37e7-4272-8e22-1b10c56cf86d",
        "cursor": {
          "ref": "b03b723b-6a18-4efe-9604-79fb8afdfb78",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "f9501e1f-b34d-4d46-b8cc-7e18e835a910"
        },
        "item": {
          "id": "31042454-37e7-4272-8e22-1b10c56cf86d",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "6202c9d3-aa71-4171-80de-6bdb98b46730",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "f5e58489-5cb7-4645-bc55-500cdc11da71",
        "cursor": {
          "ref": "fa561506-11c0-4f83-a07d-be50dac7c5d1",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "b67750c7-dd6a-4840-9bc5-16950b94b0d3"
        },
        "item": {
          "id": "f5e58489-5cb7-4645-bc55-500cdc11da71",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "54079763-c283-4d53-9b87-e32a981535d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 140
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "469be732-3947-4563-bb04-fb3ac50b9288",
        "cursor": {
          "ref": "20965e26-b652-4910-9fa6-160ec73056e0",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "28b1e4a0-a65f-4933-8a17-a255830fcbf3"
        },
        "item": {
          "id": "469be732-3947-4563-bb04-fb3ac50b9288",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "b9844281-a55b-4c46-9815-2e22ebd91350",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "ebef9684-146a-403e-ac83-9a95a56dbd1b",
        "cursor": {
          "ref": "d65078ca-ae08-477c-afd4-57497e75d63b",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "07874e67-7764-4d63-a54d-df3f9fcd3e18"
        },
        "item": {
          "id": "ebef9684-146a-403e-ac83-9a95a56dbd1b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "47e488ce-1f9e-4724-945f-7d8a994aa74c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "6f6bf87f-feae-4c61-b060-a9c8f0659de0",
        "cursor": {
          "ref": "8a7823b9-3ca4-4c2a-bb36-9bea0a553295",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "c80591c2-cb2e-4f2e-a40f-fae0f9a57e5c"
        },
        "item": {
          "id": "6f6bf87f-feae-4c61-b060-a9c8f0659de0",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "a9d84b6a-1279-4af8-a336-7047367cf159",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "0ac91a55-0e4d-42f2-b4b0-22b56768981f",
        "cursor": {
          "ref": "60376514-d387-41b4-b239-f1fd031b0fc7",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "cfc3bda2-d662-4f6a-9a22-ad7230bd8188"
        },
        "item": {
          "id": "0ac91a55-0e4d-42f2-b4b0-22b56768981f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "0011bb91-b844-4955-a272-03665aef2dc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "026416b0-5ac9-4e03-9fe5-ddfca01ed079",
        "cursor": {
          "ref": "d32ca1fa-ba51-40ed-97a9-97cee0e29118",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "4d717d8b-e98c-4815-8a2f-da961f31bb71"
        },
        "item": {
          "id": "026416b0-5ac9-4e03-9fe5-ddfca01ed079",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "84389358-3854-4d39-9b52-78226b6a713e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "d2b60067-72fa-48e6-b775-9b244326cfc0",
        "cursor": {
          "ref": "0f3a3f43-4db4-41b5-9821-08bf51700ae2",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "2405ca71-3136-4692-8e6e-5da58f93fbc2"
        },
        "item": {
          "id": "d2b60067-72fa-48e6-b775-9b244326cfc0",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "a7bcbf53-a75d-45e5-a839-8858db717581",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "1b37a689-dd7c-4e37-bb57-0fa3333bb1f7",
        "cursor": {
          "ref": "274a8cbb-9a23-422c-b0f1-6370019bf42b",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "e254651b-1a58-459c-b419-5be9a90d2089"
        },
        "item": {
          "id": "1b37a689-dd7c-4e37-bb57-0fa3333bb1f7",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "e48549e3-8b4b-48a3-bdd5-ff3b1c41cc80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "0d80b10a-1a83-49f2-8083-5862d719989d",
        "cursor": {
          "ref": "94809b29-24e3-451d-ba5f-b086bbc22f7f",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "ec05b2e9-5e9a-4e34-bc99-5a7bee4936c9"
        },
        "item": {
          "id": "0d80b10a-1a83-49f2-8083-5862d719989d",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "b4ec3047-3799-4caa-9ae8-88dfeca0b8a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "d7c0e94c-ee25-4933-b3bf-d9e2529f4bf6",
        "cursor": {
          "ref": "69a2e5bb-0412-498d-85fa-d3207527b3a3",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "4b028426-0a9d-494f-a7b3-5a45dd976bb0"
        },
        "item": {
          "id": "d7c0e94c-ee25-4933-b3bf-d9e2529f4bf6",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "96efef46-112e-41eb-a4e7-53533f57bb62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "f03ab621-fc72-4c2e-b9cc-7e6057b70adf",
        "cursor": {
          "ref": "28cd6194-c79e-460b-8d9b-570c1175f611",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "c57a6aa7-8cba-420d-93a9-050792624fad"
        },
        "item": {
          "id": "f03ab621-fc72-4c2e-b9cc-7e6057b70adf",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e1fd99b2-9419-46d0-96c5-7286dab73dcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "a3912f92-f9c9-4f4c-9f0e-3dadeef171e1",
        "cursor": {
          "ref": "6d4c90f5-f021-4c90-bfc3-ab0b7138a04f",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "6d84d0c4-5670-4448-889b-a2a47cf5bd1d"
        },
        "item": {
          "id": "a3912f92-f9c9-4f4c-9f0e-3dadeef171e1",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "a23e2563-65e7-441c-92c3-6c3e78fb0e87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "45c3f130-044a-4928-b798-badf630467f6",
        "cursor": {
          "ref": "d1c438a5-db3d-4dee-8f1c-706dce9b18cf",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "5b00872c-09fd-487b-aba6-e2debb975e3b"
        },
        "item": {
          "id": "45c3f130-044a-4928-b798-badf630467f6",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "159486d8-4d66-4f49-a6be-b39d918f0d37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "99e84753-aa99-4e6d-a4d7-39ae8e63caf6",
        "cursor": {
          "ref": "bf7ed6d7-98b1-4987-bbc5-85f181cce6e2",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "c2682001-3a8e-4b04-8f03-3711b8511fc1"
        },
        "item": {
          "id": "99e84753-aa99-4e6d-a4d7-39ae8e63caf6",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "492aff83-6178-4eb8-aeec-7d729e677cbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "5089ffe0-1702-4b53-8f71-bf48e11e7a85",
        "cursor": {
          "ref": "f0cfa31f-d9a1-4f4f-b8ee-0e86021045b7",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "3cd0359c-e01f-40fe-ba4f-f04db1c2783f"
        },
        "item": {
          "id": "5089ffe0-1702-4b53-8f71-bf48e11e7a85",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "2035aaae-181b-446e-a0c0-a20870ed0f68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "193feb8b-637e-44ba-a456-4dd7c9119f57",
        "cursor": {
          "ref": "9392b7cc-b41f-4897-977f-6b4278e6c905",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "818d2418-e2e8-460f-b6ed-e6270d597952"
        },
        "item": {
          "id": "193feb8b-637e-44ba-a456-4dd7c9119f57",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "1c119358-d0bb-45a0-82e6-389cf28e222b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "75be7b59-daa6-4597-8f27-fc9bb70b481b",
        "cursor": {
          "ref": "e3867017-4af2-4c85-8303-e288995e45e5",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "cf009eec-a1b2-4f2f-a28a-4066ad712b7e"
        },
        "item": {
          "id": "75be7b59-daa6-4597-8f27-fc9bb70b481b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "1a86eb9f-1f61-487f-8b29-3763aae89560",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "b22b103c-47c0-4324-9fda-20ba5099fcc1",
        "cursor": {
          "ref": "f0b6c6d0-89f6-4369-9b19-d4f8dc6f7c25",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "9684bc36-3854-435e-acbc-3263eb6701bc"
        },
        "item": {
          "id": "b22b103c-47c0-4324-9fda-20ba5099fcc1",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "fa80ee2c-d629-4d18-8672-e927d04f6021",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "3d0f703f-243d-4785-a33a-8cec5fa5e25e",
        "cursor": {
          "ref": "61bcb955-27af-4c4b-84ab-3abfc79e28d7",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "45bdc50c-c07f-4bc8-88c1-79bda1a463ba"
        },
        "item": {
          "id": "3d0f703f-243d-4785-a33a-8cec5fa5e25e",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ad798f28-d088-4789-86b6-df3a289379e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "54ba74dd-5a6f-467e-8629-52610d405ed2",
        "cursor": {
          "ref": "6605c872-f51d-4ec7-bcb4-8d9a054902bd",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "f4da4a6c-1737-43b4-b49f-8876b587a782"
        },
        "item": {
          "id": "54ba74dd-5a6f-467e-8629-52610d405ed2",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "9ff185af-f2ed-486e-8799-1d257f4ed6d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "b5fe2e56-0510-4669-91a7-c72ca9b46bcd",
        "cursor": {
          "ref": "952d1f2c-a89a-4e57-bccd-4a06b1bc9fc9",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "397edddd-b748-4b90-bed9-8a951f146b56"
        },
        "item": {
          "id": "b5fe2e56-0510-4669-91a7-c72ca9b46bcd",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "816fac26-e798-4eec-93b9-8aeb72126724",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "899b64ae-f39d-419d-b120-4f366e13ad17",
        "cursor": {
          "ref": "a8ca51e4-3ef1-4a3d-aad8-a68d4a5f373e",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "0d2746bf-a602-47c7-8140-5df31cca58fe"
        },
        "item": {
          "id": "899b64ae-f39d-419d-b120-4f366e13ad17",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "4182244e-df60-4cc2-9a97-879d64e3a26c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "f430ddac-1d93-443e-a3d6-564d635c6f7d",
        "cursor": {
          "ref": "845d8448-ac7b-4380-85bb-d3005f2926d5",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "02ea2305-d545-4762-9571-c20d851e6ee4"
        },
        "item": {
          "id": "f430ddac-1d93-443e-a3d6-564d635c6f7d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b411629c-3b46-4ae5-8c4c-89f271d15745",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "f4949b9b-f426-42d7-bc28-7e3dfe7ce684",
        "cursor": {
          "ref": "4d670174-7099-4f64-a670-8059cc236f5b",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "8a461273-a552-484f-9ed7-094e60b0b6c4"
        },
        "item": {
          "id": "f4949b9b-f426-42d7-bc28-7e3dfe7ce684",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "7845e021-e173-4a04-a7f6-6021b9cf8d9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "9cf778d8-9c17-491e-93a1-ea38d86076fa",
        "cursor": {
          "ref": "b1883276-0ddd-4e10-b301-5826466ff8d7",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "156de3e7-086b-41ce-b4f1-8136551e4bb9"
        },
        "item": {
          "id": "9cf778d8-9c17-491e-93a1-ea38d86076fa",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "d4d09aa1-06d3-4b2d-8d58-0612d9981df3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "2e0eff06-2421-4faf-8e37-62f40e9c7f2a",
        "cursor": {
          "ref": "c12daad1-a961-40f2-85f6-627ee1037d17",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "788d0c55-23d6-4bbe-a311-fbae546be8cc"
        },
        "item": {
          "id": "2e0eff06-2421-4faf-8e37-62f40e9c7f2a",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "0c39a2c6-eff6-4421-8a42-2e573aa8af9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "908d8773-fc65-4a25-bff5-cc79f09b3445",
        "cursor": {
          "ref": "858a065a-b816-457f-b973-ffda73f68ff6",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "160e45d3-6f7c-4d4b-b8c8-97b33a00afca"
        },
        "item": {
          "id": "908d8773-fc65-4a25-bff5-cc79f09b3445",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "708b03bc-00de-42ea-aed0-1a16b34ac795",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "a490c54c-e5b7-4b94-9fa7-eb1f4b59537a",
        "cursor": {
          "ref": "3e635fae-d151-4f02-ace4-9305c7ada696",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "45c478a9-824c-4e37-b926-3cd88653946d"
        },
        "item": {
          "id": "a490c54c-e5b7-4b94-9fa7-eb1f4b59537a",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "4ce30a6d-ef1d-41c5-b53e-197dfdd18602",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "cccbcb38-607f-4ffc-8d60-a6c836e238dc",
        "cursor": {
          "ref": "4958192c-81c1-4ac0-ba18-9b525a26122d",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "448aaa67-e2e7-41ab-a4bd-71f297861a37"
        },
        "item": {
          "id": "cccbcb38-607f-4ffc-8d60-a6c836e238dc",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "ad380ff3-2fcb-4e2f-b411-3d7d6d975f78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "9632fb05-57d7-4ee9-a772-63467d8653d4",
        "cursor": {
          "ref": "a96b2a67-67a4-43f1-b619-fd00f997b2c9",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "2b75ef3c-3093-4e98-855e-ec7bceb9dc83"
        },
        "item": {
          "id": "9632fb05-57d7-4ee9-a772-63467d8653d4",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "6ca24d80-6bf3-47e6-aa04-d5435a2953f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "881488ab-45ec-4fe8-920e-c3ced11b1f0f",
        "cursor": {
          "ref": "e922a14c-3c0e-44b1-a433-e69ca90d741b",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "57dffc22-ad97-44f6-ac12-9ac5ab47c618"
        },
        "item": {
          "id": "881488ab-45ec-4fe8-920e-c3ced11b1f0f",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "1f45a1e7-a860-47b9-a8ad-9ac4ad88aabd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "5d9935a7-08b0-42d6-89cf-36ad9a656687",
        "cursor": {
          "ref": "361881b0-74d5-4338-b5ff-f0ee2c5ebdb6",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "fa3d93a0-ee4b-429f-bae4-17ce84d8bc98"
        },
        "item": {
          "id": "5d9935a7-08b0-42d6-89cf-36ad9a656687",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "0743b89e-0f74-4a6a-b9e3-177b0a6bfa0d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb33ec49-86e3-495b-959c-d1d89e35711a",
        "cursor": {
          "ref": "fbb588dc-94c3-47b4-a244-f205da635620",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "a9af3b0f-e0d5-412a-86f3-8f1a0f886774"
        },
        "item": {
          "id": "fb33ec49-86e3-495b-959c-d1d89e35711a",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "f2a6885f-5b65-4aa1-b449-615110c10640",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "4c443ddf-333f-4a5e-9584-aee12d746cc0",
        "cursor": {
          "ref": "24f66e42-e85c-487c-a3a4-8391643f1242",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "4a780db2-b532-4bbd-a504-98ef0d621706"
        },
        "item": {
          "id": "4c443ddf-333f-4a5e-9584-aee12d746cc0",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "91ee36c0-6923-4814-9391-1e70085e98a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "0e723ab4-ee2b-47dc-a6ff-0606c3555720",
        "cursor": {
          "ref": "c39a3489-e691-4717-b723-2c668f183086",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "ecf6a363-a3ca-4871-879d-26201c5ff5bc"
        },
        "item": {
          "id": "0e723ab4-ee2b-47dc-a6ff-0606c3555720",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "8aae7ecb-9e30-4688-8930-6d8e5cc43aba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "8a13dca2-3da6-46be-8e23-edc2baa08a26",
        "cursor": {
          "ref": "c872c002-5d5d-42bd-8f9e-9dc250ea34ce",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "1fa73005-e746-4d3e-af90-93fa6657c8c5"
        },
        "item": {
          "id": "8a13dca2-3da6-46be-8e23-edc2baa08a26",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "63ccbd93-2432-4fee-87ae-70c82ded5f5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "e3b30815-2a71-47e4-af99-2c1a3339afe6",
        "cursor": {
          "ref": "018db13b-f492-41a6-9bd6-51360f7c6938",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "23e2a0a3-908f-4f2a-8e4d-71eefc5a75d4"
        },
        "item": {
          "id": "e3b30815-2a71-47e4-af99-2c1a3339afe6",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "b7aa8def-9536-4139-8fab-e617e8f166b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "d7d2987b-517e-47f9-9d2e-e5b2bf890b5d",
        "cursor": {
          "ref": "a9ab407c-4497-4af5-a780-3da328baed7e",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "913620ad-2a11-42a4-b72e-78f3720b94af"
        },
        "item": {
          "id": "d7d2987b-517e-47f9-9d2e-e5b2bf890b5d",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "7d7d47b9-89aa-4cb2-8554-9280b81e6579",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "e9a72c38-17c8-4c26-bea8-84f95e7658b8",
        "cursor": {
          "ref": "80626aa0-6845-473d-9b9a-4afece150055",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "f84789ef-0961-4a40-b463-62433566a119"
        },
        "item": {
          "id": "e9a72c38-17c8-4c26-bea8-84f95e7658b8",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "25e3b6e3-189b-442d-ade9-07065c93f6a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "3c808041-3c68-46fc-9b3a-78766318b7b7",
        "cursor": {
          "ref": "3fd3ee99-285b-4931-b090-643465474878",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "5482ab44-fc09-4bd1-8f5d-108234191617"
        },
        "item": {
          "id": "3c808041-3c68-46fc-9b3a-78766318b7b7",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "e5aba04d-f4f5-4208-8318-098ae1678b05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "407cfc7d-354e-4108-9148-03cd5cc3e403",
        "cursor": {
          "ref": "3cac6fca-8e54-4f77-bef1-3a1116b26835",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "f443fbb4-4818-4ece-9772-23259f059458"
        },
        "item": {
          "id": "407cfc7d-354e-4108-9148-03cd5cc3e403",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "9353acd1-fa3f-4165-aaf6-e684d2c46396",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "cba8fccd-6ffa-4c37-8cde-68d5f4648e11",
        "cursor": {
          "ref": "66711f80-b920-4818-a8fe-df2e8db5bd31",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "3087f3cf-1425-4114-8ada-7fc3650b57f3"
        },
        "item": {
          "id": "cba8fccd-6ffa-4c37-8cde-68d5f4648e11",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "eb142216-1c30-4ba7-8544-b1c900fe9e28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "58f86884-6c7c-48ea-800f-24b6f34a5b7a",
        "cursor": {
          "ref": "07a8f6e7-30c7-4bd9-b2f5-90a3ce1322ae",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "13e29812-d218-461b-84b3-c73b52cff226"
        },
        "item": {
          "id": "58f86884-6c7c-48ea-800f-24b6f34a5b7a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "0fc1e0db-4fe3-4317-ac47-8d11c45c79e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "ba350ef1-9f33-4b48-83ca-2e53f2279b77",
        "cursor": {
          "ref": "6fc99cd9-3cc7-434e-8b20-2de1682d9a30",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "962444aa-bbce-46a9-a0c4-27a92c591209"
        },
        "item": {
          "id": "ba350ef1-9f33-4b48-83ca-2e53f2279b77",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "9e369038-7be1-40ed-8c86-16d2d8bf3cc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "ccf0c999-eda4-4301-9198-1db2a531bbd4",
        "cursor": {
          "ref": "b774634a-8343-4ff7-8525-33491e429b75",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "c88e656e-54a4-4fe5-a562-1c30fe33ba91"
        },
        "item": {
          "id": "ccf0c999-eda4-4301-9198-1db2a531bbd4",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "ad730bef-9318-49a9-844f-9b3c9201cb8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "64576cb3-ed00-4437-aeeb-a7eb5473a989",
        "cursor": {
          "ref": "342779f9-78af-4562-a6e5-5db963da0e48",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "5a1867a7-36da-48b1-b4ba-01005b189935"
        },
        "item": {
          "id": "64576cb3-ed00-4437-aeeb-a7eb5473a989",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "9f4d0d7b-4e23-4848-8839-4fa0acce73b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "886d13c2-97fc-470a-99ee-e9fd445f987b",
        "cursor": {
          "ref": "c0cea2f5-858b-42b3-840e-a12f4bc42744",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "9988032c-f218-4810-abdf-8f4e538934a0"
        },
        "item": {
          "id": "886d13c2-97fc-470a-99ee-e9fd445f987b",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "1a503b08-e045-4689-a30a-523e3f521b21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "6c07e12c-5bbb-474c-aeaf-57e9a6c596d4",
        "cursor": {
          "ref": "7a16b497-29b7-47b9-8715-02c52492cfcc",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "caa89ab3-ea1b-4fa5-8b19-c045b48b79f5"
        },
        "item": {
          "id": "6c07e12c-5bbb-474c-aeaf-57e9a6c596d4",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "7b9f5a22-ffb8-41db-9acd-c2b7556bd2ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "71fbb207-6f6a-4890-ab7f-0679a5f84cfb",
        "cursor": {
          "ref": "1efd3eb3-c043-4f61-8498-5ea3c829af8c",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "070e3a44-2b42-4263-9c56-0e7974d179a4"
        },
        "item": {
          "id": "71fbb207-6f6a-4890-ab7f-0679a5f84cfb",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "bf8046ef-018e-46c2-a921-ad1624e0593d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "8630f0e4-6909-48d6-8271-5066ae304d09",
        "cursor": {
          "ref": "19a3d470-9e55-4033-9149-de78a441aab5",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "2feca62c-b8a8-4d03-8c35-8e7731265738"
        },
        "item": {
          "id": "8630f0e4-6909-48d6-8271-5066ae304d09",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "4ba9191a-bf21-4d10-9bae-f89f5455a683",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "60e1a5b8-69d9-462e-a003-2c397ffabcaf",
        "cursor": {
          "ref": "b6f12f78-900c-4114-b072-259ca72d98fc",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "2832df2a-7772-4bae-ad41-6e31a5d1a735"
        },
        "item": {
          "id": "60e1a5b8-69d9-462e-a003-2c397ffabcaf",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "e254c43a-e9b9-4759-a47b-1759b8ff2a57",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "bbd0f1eb-119a-404e-8d7a-06f3745c427c",
        "cursor": {
          "ref": "0120e06f-01b4-462f-8ed7-6bfad03ecc9d",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "7c6e58d6-8948-4674-9581-7e5a97f5a3ae"
        },
        "item": {
          "id": "bbd0f1eb-119a-404e-8d7a-06f3745c427c",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "beec63db-d2d5-4a52-b4c0-6dc83fa0e900",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "82501c80-67c7-4ca9-8675-b63cfa1d72fa",
        "cursor": {
          "ref": "36c40ef3-e21d-4202-91be-7dcf167c6130",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "07ad2c61-2f86-4150-96ad-f3c1c2e2de71"
        },
        "item": {
          "id": "82501c80-67c7-4ca9-8675-b63cfa1d72fa",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "54b6aea7-f866-4dfd-b862-89fb523e756c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 98
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "cddd36b1-d789-4c3e-8a3e-4e10420e30c6",
        "cursor": {
          "ref": "7e43fbcb-e978-4a59-aeee-4faa982940dc",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "c77b4ed6-4510-4272-be62-5d39025ddd23"
        },
        "item": {
          "id": "cddd36b1-d789-4c3e-8a3e-4e10420e30c6",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "dea2f39e-d994-4232-bf80-78e93a4da7a5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "0e9567b5-74ba-4162-9475-dd71d880222c",
        "cursor": {
          "ref": "607b9187-5d12-4cde-812b-ad8a92332246",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "d70de50c-e972-40fb-8fc7-b15f23a83bf4"
        },
        "item": {
          "id": "0e9567b5-74ba-4162-9475-dd71d880222c",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "6c9c78e6-1079-484a-a663-aa0fa8812ba4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "0c8b5003-2674-4642-9e47-b2ede3c005db",
        "cursor": {
          "ref": "d7b2b146-177b-451f-a75c-b02f2b2e002e",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "893667c5-9207-446e-97d5-abc113decf33"
        },
        "item": {
          "id": "0c8b5003-2674-4642-9e47-b2ede3c005db",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "454fde01-ebde-4933-9710-b73d98c91034",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "af1a7103-3c8d-4eef-9459-eecb3f54cd2f",
        "cursor": {
          "ref": "b7ebb854-6572-48d1-8267-662c8c002ad5",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "af5cfd9f-fa0a-49bc-b680-243172714443"
        },
        "item": {
          "id": "af1a7103-3c8d-4eef-9459-eecb3f54cd2f",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "0a8b6845-77ca-459a-98f4-e740fedafa18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "a090d13e-8afb-48d7-ad07-4f0ae08bc41b",
        "cursor": {
          "ref": "e0db5342-5ded-4f85-b297-c63e6bf78f07",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "e0109793-73e9-4a18-b9c9-66a39c4b68b3"
        },
        "item": {
          "id": "a090d13e-8afb-48d7-ad07-4f0ae08bc41b",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "f87b9244-4a01-426c-81c1-b4caabe60706",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "5e69a21b-fc6f-4db3-ac11-25c82b1702ba",
        "cursor": {
          "ref": "a70935b0-1622-4ed0-a078-d949c75df5ed",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "60c953d7-f167-4681-90a5-16742db6a730"
        },
        "item": {
          "id": "5e69a21b-fc6f-4db3-ac11-25c82b1702ba",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "01456956-28be-4f9d-94ec-e70b6acb0194",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "3ad3843c-7314-44b7-b446-1e7fff54ad47",
        "cursor": {
          "ref": "59b4c882-cc68-46e5-8fcd-101a32f18e14",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "af8cb6fb-9c4d-4963-b0c1-ef7313610cab"
        },
        "item": {
          "id": "3ad3843c-7314-44b7-b446-1e7fff54ad47",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "0b4b089c-8cc5-4f42-a7ba-281e2dfcc516",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "975e8af1-f928-4416-b4a9-b077502ad11c",
        "cursor": {
          "ref": "6e4dee67-f63c-406a-90a3-7e9d8cd6999c",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "887c5c56-e70f-422b-a3ba-76837ac59607"
        },
        "item": {
          "id": "975e8af1-f928-4416-b4a9-b077502ad11c",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "da239286-9eec-46a1-a1a9-5e30c12b7a62",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "7943ca6e-fe8e-4785-99fc-6485adb3b5e1",
        "cursor": {
          "ref": "a1f98b91-e26a-4553-ae13-3ff0c6542fee",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "a1f387fb-76e6-4732-a2c3-a341f6078b4f"
        },
        "item": {
          "id": "7943ca6e-fe8e-4785-99fc-6485adb3b5e1",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "8421ce01-3feb-473e-9c41-875615374d3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "9ccd77c5-db3f-4ea4-afe0-c466f7af15f4",
        "cursor": {
          "ref": "e3b875a8-bcc5-4912-b116-b5338185b53e",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "4d0cf0fa-211e-4365-841b-597bf0fa00a7"
        },
        "item": {
          "id": "9ccd77c5-db3f-4ea4-afe0-c466f7af15f4",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "b2ef6862-9a32-4182-b5cc-cd93dc73c9ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "4ed5a55b-f4a3-4590-a1aa-d92c085001d0",
        "cursor": {
          "ref": "2426f046-f66b-4267-9f54-97103ce4ce92",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "54df5e3f-2996-4c63-b623-2a4235e36747"
        },
        "item": {
          "id": "4ed5a55b-f4a3-4590-a1aa-d92c085001d0",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "dc9778ff-ccf5-495c-9ca5-f5907303cdd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "327b6501-5db5-41b0-8d1e-2dd870af3d45",
        "cursor": {
          "ref": "dc82274f-5dd9-4102-bef1-8fb5a1d3e15c",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "32d8537f-5f14-487c-b81a-a24ec9712638"
        },
        "item": {
          "id": "327b6501-5db5-41b0-8d1e-2dd870af3d45",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "b477c03b-74f8-426b-be45-e5707c407f47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "c2a82775-67d6-4229-978e-8b18f183607b",
        "cursor": {
          "ref": "693fb357-f92a-4f78-b7e4-1b0ad1594d53",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "5f8eb266-a2f3-4f83-b621-3d605e0695c9"
        },
        "item": {
          "id": "c2a82775-67d6-4229-978e-8b18f183607b",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "57eb101d-84f3-4822-9ebe-f114292fbd72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "58e26bf5-2756-4831-bfe8-dfcd14cf79cf",
        "cursor": {
          "ref": "c3a6a062-a853-4495-80a2-3df8a6a4701c",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "89000c52-b4b2-4918-b661-e8bc60ba40fc"
        },
        "item": {
          "id": "58e26bf5-2756-4831-bfe8-dfcd14cf79cf",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "23e7aef1-3661-4b22-aeea-c7d97f8b5038",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "b6704777-005a-4581-a82a-d622c278f0f9",
        "cursor": {
          "ref": "74d41c2f-17bc-4733-b9ee-ccb1d96ed6cb",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "238e615b-b6d2-437a-84fc-ebccc2f5ae61"
        },
        "item": {
          "id": "b6704777-005a-4581-a82a-d622c278f0f9",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "d66df434-af65-46fc-8a52-74ab274af5f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "dc4bef5e-83a0-486e-9a89-c10f3f4fd338",
        "cursor": {
          "ref": "76010065-9fd5-424a-a50e-902ee991229a",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "2485c04e-b485-4060-be60-5a07897a8676"
        },
        "item": {
          "id": "dc4bef5e-83a0-486e-9a89-c10f3f4fd338",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "b31fae2b-ac40-445c-a9a4-fe16347bde45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "3ef4ca74-2ede-4b96-98a6-ebea5d315ac9",
        "cursor": {
          "ref": "5e4ee6da-e031-4252-868e-52412f0bc9d2",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "ecc69636-879b-4509-b5af-1539f23214fb"
        },
        "item": {
          "id": "3ef4ca74-2ede-4b96-98a6-ebea5d315ac9",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "07a9366a-e192-416c-9162-a0b8f0245ffd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "384267bf-415b-44fa-bd8f-d31da776b7a3",
        "cursor": {
          "ref": "9eaf7d9d-1bf9-492d-9b6c-4e8d6d1fd57b",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "c820f09b-f8af-4e75-831b-3e6b22bd38fc"
        },
        "item": {
          "id": "384267bf-415b-44fa-bd8f-d31da776b7a3",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "f20651e1-8a25-4df8-9ff1-8e56ab0bceea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "e36cd90b-7a33-43a3-ba36-0e70c62da70d",
        "cursor": {
          "ref": "7c8abdc4-157c-4dd2-bb9a-9beb702b2c77",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "2af8475b-b2e7-4999-bdb7-e0a7ab2fa8a7"
        },
        "item": {
          "id": "e36cd90b-7a33-43a3-ba36-0e70c62da70d",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "e685771b-b585-4cb8-95b9-b5f53e144fe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "375f7f45-4f7c-44d5-97fc-428133a2c44a",
        "cursor": {
          "ref": "591a4599-1647-43a0-91a2-c231dae0b099",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "0f16e40b-a22d-416e-8594-5cee200f52b5"
        },
        "item": {
          "id": "375f7f45-4f7c-44d5-97fc-428133a2c44a",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "5d52711f-5970-4920-855e-6aecb05aea93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "674bc727-c047-483a-b77b-4a293b359161",
        "cursor": {
          "ref": "b82bd7f7-a132-4c86-9395-80900748b847",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "57249958-32d8-4a36-9dda-9bd3f11596d7"
        },
        "item": {
          "id": "674bc727-c047-483a-b77b-4a293b359161",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "82248438-e8e8-482a-8783-63112f48e81e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "ab8b9be4-acca-4e87-8447-75d2bf240818",
        "cursor": {
          "ref": "0ef08374-71d2-4ebb-a207-846d2625ddbb",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "06a5b16b-ddf9-4d2a-a85e-1cab9278de17"
        },
        "item": {
          "id": "ab8b9be4-acca-4e87-8447-75d2bf240818",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "704bdcd1-d258-4cb3-ba35-33018f1d9493",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "acd011c9-63c5-4ce8-a576-d513c102b96d",
        "cursor": {
          "ref": "92e85023-567f-4d3e-825c-b2579c1e2da5",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "08cf8023-04bf-4365-a1e7-6bb53cac9c24"
        },
        "item": {
          "id": "acd011c9-63c5-4ce8-a576-d513c102b96d",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "195eb402-35a9-46bd-9b7c-84fc0fccbe4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "98e651d7-5da1-48cf-bb31-35047cf978a1",
        "cursor": {
          "ref": "344d9aa9-8a8a-4c9e-9eda-90b9050d4f2a",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "d9b95ae8-1bbf-4be3-a070-554385d9f409"
        },
        "item": {
          "id": "98e651d7-5da1-48cf-bb31-35047cf978a1",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "2e54e29e-b0f2-4234-b340-b02bbe0b982b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "7e5d0647-0fc7-47da-a3d0-97840e6f04e5",
        "cursor": {
          "ref": "1207dfc6-09e6-4e32-9f4c-cb397c09b699",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "44d2ddaa-2b60-47a5-9d67-74b13860dab7"
        },
        "item": {
          "id": "7e5d0647-0fc7-47da-a3d0-97840e6f04e5",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "fcfb6f92-6f2e-4778-93ff-52dcc0e511b2",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "f5a88e7d-258e-4f68-80b7-f8aedc5983a3",
        "cursor": {
          "ref": "07e1638c-93da-4110-9d97-bb6863998682",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "0a682ca5-6de3-4ae4-ba13-1530a7359109"
        },
        "item": {
          "id": "f5a88e7d-258e-4f68-80b7-f8aedc5983a3",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "a6155781-54c2-43d9-886c-46a756c9866a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "c085a6dd-7454-45a4-a5be-0b8102cf5384",
        "cursor": {
          "ref": "1de31f81-aa87-4c3e-8926-f5957004fc02",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "97a68ebc-2767-4ea1-9e83-d7c072163d08"
        },
        "item": {
          "id": "c085a6dd-7454-45a4-a5be-0b8102cf5384",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "9d9406a0-f65d-4f3b-a6f2-de6dc6a82dcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "faf371c0-80a6-49a7-b9a9-47e118b3ca6e",
        "cursor": {
          "ref": "5b452889-724a-4793-8def-2450cb682890",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "42a6318b-4389-498f-92b3-9717623afb8b"
        },
        "item": {
          "id": "faf371c0-80a6-49a7-b9a9-47e118b3ca6e",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "4402f74c-51f5-4dba-821b-0547310b17f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "29b6fb13-cd8c-4a76-b185-c0b75541e52b",
        "cursor": {
          "ref": "7da8b557-d16d-4cd9-9b7e-c838dc9ad75f",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "274ec91a-2da5-4fae-8dc0-63e7be189d21"
        },
        "item": {
          "id": "29b6fb13-cd8c-4a76-b185-c0b75541e52b",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "1bf1c104-de05-4001-9f20-5524c73f27c2",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "1c22b81f-0315-4899-b084-2cef5a85510a",
        "cursor": {
          "ref": "75cd3437-0879-46d7-b4bc-d2fe0ff7e1aa",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "e642f9e8-77a4-4bb5-b32d-1b6dea45007c"
        },
        "item": {
          "id": "1c22b81f-0315-4899-b084-2cef5a85510a",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "0d9af7b7-a1bc-4193-a45b-7fc71a3e55ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "01cb5973-5d9f-4a74-a4a6-d208a94296f7",
        "cursor": {
          "ref": "0ae594ec-64ee-401c-9ae3-8617c5109ff4",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "8edf8b8d-c4de-4a26-aa2d-81c098599475"
        },
        "item": {
          "id": "01cb5973-5d9f-4a74-a4a6-d208a94296f7",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "3a9b1de6-c0a4-410b-a316-ce8360906419",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "6e436bb9-727e-4e3e-9389-c0f951bfe773",
        "cursor": {
          "ref": "0c4ff3ca-0c4d-4d3a-8b9d-5d2648f43c91",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "3bcc6ac1-0db2-44b6-85b5-ea9fc43b05c3"
        },
        "item": {
          "id": "6e436bb9-727e-4e3e-9389-c0f951bfe773",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "2f74e500-2ef7-4188-b102-d02a8c2a415c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "571898de-7170-4adb-aee1-24bf999af540",
        "cursor": {
          "ref": "87f353bc-aca3-4af8-a9bc-7c8da58c45b4",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "4671fbe9-355f-47ab-82b8-a540bc7469b9"
        },
        "item": {
          "id": "571898de-7170-4adb-aee1-24bf999af540",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "7baa6bbe-354e-48c9-b235-b04ee6c0a1d9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "340ea5cc-d4d0-46cc-84b3-6794f0f89c23",
        "cursor": {
          "ref": "5ef9e494-620d-4f41-b20b-6f06d7c228ec",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "a3bb5f98-9a19-42d7-86fc-8d1a955c0e83"
        },
        "item": {
          "id": "340ea5cc-d4d0-46cc-84b3-6794f0f89c23",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "ed6891e2-322c-4efd-a84f-3538b61e581c",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 94
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "cabea296-fe22-4944-b7ca-fec305f05036",
        "cursor": {
          "ref": "86e7d467-c7be-407f-be20-bc8e424df312",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "470b51a4-a962-47a6-8eed-3222eea0e832"
        },
        "item": {
          "id": "cabea296-fe22-4944-b7ca-fec305f05036",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "b5b8a73a-89cc-4179-a6fd-f3273b5fe348",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "7cd8b6e3-aad3-4601-9e97-249316007943",
        "cursor": {
          "ref": "ddefcc45-619e-4cf8-83d4-8efd7d03fdd5",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "9c22fef5-c381-4427-86f3-ed22c9614b72"
        },
        "item": {
          "id": "7cd8b6e3-aad3-4601-9e97-249316007943",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "544c9564-a917-469c-bd60-f697c3b9d389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "468aaa65-fa83-4825-a320-17a307ee7d98",
        "cursor": {
          "ref": "3db885b5-49ae-4904-b632-399379280191",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "186fcc62-d8e9-4a72-9c2c-bc7065621dab"
        },
        "item": {
          "id": "468aaa65-fa83-4825-a320-17a307ee7d98",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "88faaf6e-df75-4e17-a4d7-71568ef0a090",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "2635e6e1-6d1b-4be8-8976-8869b0cf2903",
        "cursor": {
          "ref": "aeeb8785-656d-4107-92b6-0b593b0346a9",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "affbbb4c-c0ae-44b6-8090-fd3ecacc745b"
        },
        "item": {
          "id": "2635e6e1-6d1b-4be8-8976-8869b0cf2903",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "cffd28ad-4631-45ef-b545-fca7f94f6026",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "f6bfa2e7-acd2-4eff-8673-12a0fc7f8283",
        "cursor": {
          "ref": "90b78407-c2d6-4ece-9635-68a075074890",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "74304b71-dbb3-4b03-a19f-2d17fb8718fe"
        },
        "item": {
          "id": "f6bfa2e7-acd2-4eff-8673-12a0fc7f8283",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "46437c4b-abb8-4d36-acbb-b496177c3098",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "afa95397-419f-4405-ac43-014d4929e87f",
        "cursor": {
          "ref": "313a5c80-5433-491d-8cd0-f09a7b247411",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "2e8d24eb-11f7-4cf0-89ac-088deb5cc57a"
        },
        "item": {
          "id": "afa95397-419f-4405-ac43-014d4929e87f",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "afccaa40-fafc-4555-b879-851881c15090",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "6bc96f72-8379-4f8b-bd9f-e5f7145fd31f",
        "cursor": {
          "ref": "edd87738-f76f-4dd7-bf4b-640baae3aea7",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "39e95546-1aeb-47a5-be72-3772d4640f58"
        },
        "item": {
          "id": "6bc96f72-8379-4f8b-bd9f-e5f7145fd31f",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "44e1b1bf-0c03-4ff9-9c21-20de09b2a7ca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "0d051387-dfb0-4c2e-b81c-4beca4b15b39",
        "cursor": {
          "ref": "4fc44063-20b3-4954-94e5-727dc3b94501",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "4f4696ce-0df0-46cf-b30c-b09ef838ed47"
        },
        "item": {
          "id": "0d051387-dfb0-4c2e-b81c-4beca4b15b39",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "dd626ad5-dced-4f58-9d21-ab9d888fdc28",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "9aaeda13-26a4-4946-a126-0a6c77221a8c",
        "cursor": {
          "ref": "5c5446a4-b0a4-4906-98c7-69dbcaab1cb2",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "695f136b-8f51-4333-a171-f2480384e60e"
        },
        "item": {
          "id": "9aaeda13-26a4-4946-a126-0a6c77221a8c",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "e7f4ff17-4b85-4fb2-b707-2e86f5d5843a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "533d0ff7-dc91-47e7-9ba2-5249ad1c17f8",
        "cursor": {
          "ref": "c5f0efae-bed3-4904-b79f-347ad8f31d86",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "b2dcafd8-1abd-420e-9399-7a678797fc87"
        },
        "item": {
          "id": "533d0ff7-dc91-47e7-9ba2-5249ad1c17f8",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "71207d52-f788-45cc-b58f-75e2363c653a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "91c5a2d4-6202-4930-9993-5c6ea723fe46",
        "cursor": {
          "ref": "70d22e60-c982-4376-8647-f3ea424e70eb",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "d1d1650b-cae3-4489-aaf4-ed44462e94a7"
        },
        "item": {
          "id": "91c5a2d4-6202-4930-9993-5c6ea723fe46",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "75969394-15f6-4012-b820-bcbea9887e1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 128
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "1dc0ed77-04cf-4bac-9c3c-c989f4aacbbd",
        "cursor": {
          "ref": "d32599f5-c79c-4a28-8511-758e2c70ef73",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b67bb9f1-a1b0-4b69-9fee-8563d8c59dbf"
        },
        "item": {
          "id": "1dc0ed77-04cf-4bac-9c3c-c989f4aacbbd",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "872142ae-45d2-45c3-8b88-996ab3fa7b10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 128
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "e0b14cb4-9146-4232-aead-a737086bfc93",
        "cursor": {
          "ref": "8b4fbfb2-7906-4dd0-9b8f-a215e0dcddd1",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "6012350d-4492-4b8f-a88a-8209e97d7590"
        },
        "item": {
          "id": "e0b14cb4-9146-4232-aead-a737086bfc93",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "3ca7d5a8-88ad-4434-afcb-1f5fb1f3f041",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "6a8b4db3-1dc5-40eb-8526-310bf0e8774c",
        "cursor": {
          "ref": "69047166-df8d-4e61-9ffc-67148ad842df",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "814ffbde-878e-41eb-822c-6946df4bc61f"
        },
        "item": {
          "id": "6a8b4db3-1dc5-40eb-8526-310bf0e8774c",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "0ffd7ad0-170c-4cb3-82f1-0085af1cf150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 128
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "3b064384-adcf-4eb6-83c3-821bc67ad8af",
        "cursor": {
          "ref": "7fa5b032-6d14-41a9-859e-a16ce97268f4",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "85fe5581-bf0e-49bf-9ebc-488ec58518ec"
        },
        "item": {
          "id": "3b064384-adcf-4eb6-83c3-821bc67ad8af",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "8566c4b8-5b5f-4542-bb44-e760decc6962",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 552
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "6be9d180-62b9-4a42-a263-bc612d110f79",
        "cursor": {
          "ref": "86913275-07bb-4407-9b3d-54acdf0861bb",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "9fc6786f-5ae7-43f8-9c0c-6b15630fe6e0"
        },
        "item": {
          "id": "6be9d180-62b9-4a42-a263-bc612d110f79",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "798f4443-33da-4fe7-93a9-15227fe5f34d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 498
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "576f5e28-32db-428f-abaf-9ebdf8c8e2f3",
        "cursor": {
          "ref": "dc63876a-93ac-4ae5-80cf-d217fe20d203",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "38ba3449-9a42-4867-a14d-463b223e3e37"
        },
        "item": {
          "id": "576f5e28-32db-428f-abaf-9ebdf8c8e2f3",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "18567254-dab5-404c-a012-28e1f2837e1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 498
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "9f6e264e-ebc8-4d15-91b9-d9a2b3c4d60c",
        "cursor": {
          "ref": "4a6d6f3c-9fff-459d-ba90-a575f3be5e43",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "3d1f5d25-2431-4fb3-92b9-9f6d5e39da50"
        },
        "item": {
          "id": "9f6e264e-ebc8-4d15-91b9-d9a2b3c4d60c",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "357758f7-3b40-4521-913a-a0e92b5130b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 498
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "b2531f5f-18aa-40bc-a97a-725da3da2dda",
        "cursor": {
          "ref": "633bad1a-65e9-480f-bd7e-9e4262a80166",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "9feca02f-d6ac-4592-b13f-e3747899524d"
        },
        "item": {
          "id": "b2531f5f-18aa-40bc-a97a-725da3da2dda",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "75a07d14-fc2e-4629-9b61-4a0f65d7699e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 552
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "c4157e6a-121e-4766-97c2-87a65e942730",
        "cursor": {
          "ref": "8b481f91-c7e6-4d97-b317-947e745bddde",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "c383cd67-c5de-43e7-92ba-6c07c2af940a"
        },
        "item": {
          "id": "c4157e6a-121e-4766-97c2-87a65e942730",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "c39d1860-daf6-4643-acc3-8d379add4473",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 498
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "9945b77c-43b8-41cc-a563-a9e29fc39018",
        "cursor": {
          "ref": "5d71188a-c355-48be-86d9-d8e4c87332e4",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "7a04156c-8e18-4d4d-a7e8-cc06cd8e4158"
        },
        "item": {
          "id": "9945b77c-43b8-41cc-a563-a9e29fc39018",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "a319f7ef-8abe-4d23-8ac1-0151fc108a50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 498
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:254)"
            }
          }
        ]
      },
      {
        "id": "d6209932-ae36-417d-a970-d11e50b1a7b0",
        "cursor": {
          "ref": "a2d25aa2-704d-466c-8f50-793a97239557",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "3f0eeb49-3a4d-465e-a982-6d829e3cbdbc"
        },
        "item": {
          "id": "d6209932-ae36-417d-a970-d11e50b1a7b0",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "9780b800-ac6e-4fc3-9730-eed04c60b448",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:255)"
            }
          }
        ]
      },
      {
        "id": "5a0e79db-4927-4473-a2ba-5bd14aaaa6e6",
        "cursor": {
          "ref": "72ecec4a-8bb6-4061-bb92-117f1b7a0010",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "1fc7a3cf-b7d1-455a-899a-c1d0933f819b"
        },
        "item": {
          "id": "5a0e79db-4927-4473-a2ba-5bd14aaaa6e6",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "76ca9e00-e45d-4665-970c-d4d1e32346cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:256)"
            }
          }
        ]
      },
      {
        "id": "fe69f1b4-02a9-44b3-8b4d-3dbdcf10d3b5",
        "cursor": {
          "ref": "87c541b0-98b8-4c77-af65-0c717f358f0d",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "66fae5ed-6a63-4c16-861a-5f9da76f216f"
        },
        "item": {
          "id": "fe69f1b4-02a9-44b3-8b4d-3dbdcf10d3b5",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "3889c40a-8478-4124-ba46-71eda8a32fa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:257)"
            }
          }
        ]
      },
      {
        "id": "6048ac43-2da7-4a1e-93d4-ffd044ac4e60",
        "cursor": {
          "ref": "18f3e5e2-75a1-41c0-8c44-7c9b796c3fd5",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "0c19b431-ad2d-409d-9b3e-6aee078519ec"
        },
        "item": {
          "id": "6048ac43-2da7-4a1e-93d4-ffd044ac4e60",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "599767a7-57af-44d9-a787-c5e0be031639",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:258)"
            }
          }
        ]
      },
      {
        "id": "5917e473-f124-4e54-85b7-4f63fbe1880b",
        "cursor": {
          "ref": "ad7f87c9-7a92-43a4-86a8-a282afe14ae6",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "619e6c6f-22c8-4f7b-8801-1ad047948f51"
        },
        "item": {
          "id": "5917e473-f124-4e54-85b7-4f63fbe1880b",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "34cac93a-b7f3-41b8-91d3-2612725a1a06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:259)"
            }
          }
        ]
      },
      {
        "id": "96b9e103-9a53-459a-9934-fb23b0df64b8",
        "cursor": {
          "ref": "a8f755cf-9821-46d0-b86b-08efcc4e6d9f",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "f6955075-1079-4d10-ba77-ddf3a01ddf04"
        },
        "item": {
          "id": "96b9e103-9a53-459a-9934-fb23b0df64b8",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "0adcc58a-e096-41a6-8a51-c65bdc89d13b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:260)"
            }
          }
        ]
      },
      {
        "id": "641ee5c5-0934-4a5a-85f8-1f6be30ca1c3",
        "cursor": {
          "ref": "eff8650d-3728-4d24-9c03-c2eee4183b39",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "601049d0-02ad-42fc-845d-633350968b94"
        },
        "item": {
          "id": "641ee5c5-0934-4a5a-85f8-1f6be30ca1c3",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f8a5daba-9326-4102-884d-cc70bec2a921",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:261)"
            }
          }
        ]
      },
      {
        "id": "80d8c8bc-640f-47bd-9743-ea5c56aecffb",
        "cursor": {
          "ref": "58ca6250-5985-41a5-86dd-9b93338c60a8",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "83cb40ee-37de-4404-b9a3-79b48291d6de"
        },
        "item": {
          "id": "80d8c8bc-640f-47bd-9743-ea5c56aecffb",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "63766e01-53cb-458c-b8db-6e6f65f53d0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:262)"
            }
          }
        ]
      },
      {
        "id": "165cac4f-c703-4cee-948b-bfbc2a1a5f51",
        "cursor": {
          "ref": "947eaea0-6e9b-4966-bec8-13d405245b8a",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "b867b85d-ec41-4c1e-aa17-adb3848d2e54"
        },
        "item": {
          "id": "165cac4f-c703-4cee-948b-bfbc2a1a5f51",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "ba368eac-5541-42a1-a90b-0bee34e74871",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:263)"
            }
          }
        ]
      },
      {
        "id": "4629aff7-c32c-4662-a8be-db6107a18e21",
        "cursor": {
          "ref": "66a8edf8-fd4a-43a5-bb2a-7c471c9316fc",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "fcac4f1d-a76a-4b7a-9ea9-faed9c9ef266"
        },
        "item": {
          "id": "4629aff7-c32c-4662-a8be-db6107a18e21",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "6af3726f-fdd0-4c7c-8593-d5fef2496ae1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:264)"
            }
          }
        ]
      },
      {
        "id": "7cf069a7-d844-4077-8c7d-61758a8e656e",
        "cursor": {
          "ref": "bc4d846d-5028-46a1-b5dc-3e79512b3ef2",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "95691025-7efb-4e26-9775-feb2b4566739"
        },
        "item": {
          "id": "7cf069a7-d844-4077-8c7d-61758a8e656e",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "8b04fea3-eae9-466a-b786-dab699754787",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:265)"
            }
          }
        ]
      },
      {
        "id": "af3e4b75-ec15-4c92-a36b-1e5857103b75",
        "cursor": {
          "ref": "638ca9f9-a28b-40e2-a58f-e81d78dc8de7",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "7232f670-6d45-4ce3-8bc4-b839b35b1379"
        },
        "item": {
          "id": "af3e4b75-ec15-4c92-a36b-1e5857103b75",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "6bc6258a-1258-41b7-9b0e-5ee28b906b96",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 80,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:266)"
            }
          }
        ]
      },
      {
        "id": "8b433801-c850-4b87-b102-999268d200c2",
        "cursor": {
          "ref": "dafe47f8-d12a-4bf8-890d-3981f5200521",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "aa6301d9-17c8-4bd0-9f3d-d11dceac9203"
        },
        "item": {
          "id": "8b433801-c850-4b87-b102-999268d200c2",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "734899bd-7c45-4ab4-9066-91f629c31e86",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:267)"
            }
          }
        ]
      },
      {
        "id": "1432252d-a94d-4123-a0fe-096876de9628",
        "cursor": {
          "ref": "1d10706b-154c-4c6e-a38d-ec80e43c610f",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "cb39c18a-6307-472a-854b-518d7a956714"
        },
        "item": {
          "id": "1432252d-a94d-4123-a0fe-096876de9628",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "f8469509-2334-4add-9c7b-84ed6e0da96b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:268)"
            }
          }
        ]
      },
      {
        "id": "193eb1ae-7791-4d5d-9b0f-369f991d876d",
        "cursor": {
          "ref": "577cd1c9-3e80-485f-ba6f-15d58de303c9",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "8cf9d195-29fd-4148-afe5-11a8b34c0557"
        },
        "item": {
          "id": "193eb1ae-7791-4d5d-9b0f-369f991d876d",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "c419a908-46cf-4b79-8818-c14db7714e3a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:269)"
            }
          }
        ]
      },
      {
        "id": "3a8dc533-452e-48fe-b6bc-480c3c4dca14",
        "cursor": {
          "ref": "3f7946e5-32e2-4abd-92be-9118701113d2",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "537a1e56-bc4d-4f5f-b8f2-391cc1ed20ac"
        },
        "item": {
          "id": "3a8dc533-452e-48fe-b6bc-480c3c4dca14",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "996e7777-0097-41b9-82b9-2108d9292fd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:270)"
            }
          }
        ]
      },
      {
        "id": "ec839870-7f0e-4fe4-8f5d-5a4f0d4d9e3e",
        "cursor": {
          "ref": "7d54f7cb-eb76-4237-af1f-ffb0c94e6e1d",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "9728e55b-da9b-43ff-8cb5-b5743bd2eb3b"
        },
        "item": {
          "id": "ec839870-7f0e-4fe4-8f5d-5a4f0d4d9e3e",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "ae8b0c7d-dbd8-4b9b-98ac-442906c1b2fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:271)"
            }
          }
        ]
      },
      {
        "id": "4e7222e5-d05c-47a2-8816-8779fcf4a854",
        "cursor": {
          "ref": "39cd7b02-ffe5-4a46-bb42-3a1735c68769",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "a6e3ec72-796c-45c3-84e8-1f9b01db4a10"
        },
        "item": {
          "id": "4e7222e5-d05c-47a2-8816-8779fcf4a854",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "34ea9d40-3f43-4a91-be1f-ad11eef3fa77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:272)"
            }
          }
        ]
      },
      {
        "id": "192d185b-dd7b-4190-98c9-942f12fc2dbe",
        "cursor": {
          "ref": "3c494f2b-8581-4f83-a66e-f8364823ac8f",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "674dd052-0aa3-493e-9cc1-28277fefdd43"
        },
        "item": {
          "id": "192d185b-dd7b-4190-98c9-942f12fc2dbe",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "8c709d2b-802d-4583-b06e-a39a6442380b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:273)"
            }
          }
        ]
      },
      {
        "id": "771f66b6-a69f-45ea-b0d3-a0451eb6f01b",
        "cursor": {
          "ref": "d8f2fff9-e259-47bd-b8d6-c2896ba5c526",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "1e4df239-82cc-43d4-9f7b-09679a7d6a58"
        },
        "item": {
          "id": "771f66b6-a69f-45ea-b0d3-a0451eb6f01b",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "3d5fea6d-828b-4a73-8ff5-5ea41b405cdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:274)"
            }
          }
        ]
      },
      {
        "id": "bf329247-bfb5-40ad-8844-e92430de38df",
        "cursor": {
          "ref": "8c10dcec-bd73-45bb-a2df-88e6d03c25cd",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "15d05469-38fd-488c-b83b-35574992de64"
        },
        "item": {
          "id": "bf329247-bfb5-40ad-8844-e92430de38df",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "a68ac8a9-a542-495b-bcde-7750e881530d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:275)"
            }
          }
        ]
      },
      {
        "id": "98f2a5d3-9a73-475c-82f1-403669d639ad",
        "cursor": {
          "ref": "5c275ea5-31b7-436c-9461-91fc97f4bc54",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "7eaa5c42-ff18-4a48-903c-bd811267a573"
        },
        "item": {
          "id": "98f2a5d3-9a73-475c-82f1-403669d639ad",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "eba6893d-93bc-4fab-936d-d0890a8da758",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "253f7c97-3efc-4263-a85c-3ee73f0dfafd",
        "cursor": {
          "ref": "23ce57ab-175e-43db-ac8e-a6143aee0528",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "2fd6819b-e66a-4475-9464-69f3410e6384"
        },
        "item": {
          "id": "253f7c97-3efc-4263-a85c-3ee73f0dfafd",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "3be8bf77-adae-4a80-8297-1167d3312942",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:277)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:277)"
            }
          }
        ]
      },
      {
        "id": "63896ba1-7397-47af-adc7-4b15d7bcdfe1",
        "cursor": {
          "ref": "d8650557-e9fd-4ff1-aedc-1768111a03e1",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "3264322e-573a-4bdc-a3ef-ce22240daca2"
        },
        "item": {
          "id": "63896ba1-7397-47af-adc7-4b15d7bcdfe1",
          "name": "credentials_verify"
        },
        "response": {
          "id": "f1f0dcc3-e23f-4694-9384-79a08558b98a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "9190c714-35bd-49e6-90dd-f95625cd4bbb",
        "cursor": {
          "ref": "2fec7cc6-175d-4f5a-8153-41519266a9ae",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "410868f5-2490-4c7b-a9da-2952509189d6"
        },
        "item": {
          "id": "9190c714-35bd-49e6-90dd-f95625cd4bbb",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "18e25425-2330-4ffa-a2b9-156282b0959b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "af60cba5-0a71-492e-ab1d-1db4491e8ea1",
        "cursor": {
          "ref": "22ed5a19-fc9f-446c-af00-d5638a6e4a1a",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "378ba2aa-f7bc-4746-9d06-54bcfd769bab"
        },
        "item": {
          "id": "af60cba5-0a71-492e-ab1d-1db4491e8ea1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "10479a46-039c-4b65-8e29-56427162f825",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af60cba5-0a71-492e-ab1d-1db4491e8ea1",
        "cursor": {
          "ref": "22ed5a19-fc9f-446c-af00-d5638a6e4a1a",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "378ba2aa-f7bc-4746-9d06-54bcfd769bab"
        },
        "item": {
          "id": "af60cba5-0a71-492e-ab1d-1db4491e8ea1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "10479a46-039c-4b65-8e29-56427162f825",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e112ddf-35a5-49d1-8fb2-451f2998999d",
        "cursor": {
          "ref": "37506eb4-a4ce-46a6-905c-47ed0760b342",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "913e061d-ada2-46a7-ad81-8700b7481bac"
        },
        "item": {
          "id": "3e112ddf-35a5-49d1-8fb2-451f2998999d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f100c524-dd01-4802-9af8-dec5713bdd5d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85094f72-861c-4b48-a9ab-c7054e081388",
        "cursor": {
          "ref": "e23a220d-8596-4946-b619-ab67074c9d98",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "e1c5281f-9854-4138-967b-a3a3e4b6ae4e"
        },
        "item": {
          "id": "85094f72-861c-4b48-a9ab-c7054e081388",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "bdefd499-77e5-46e9-a52c-75b33aa2142b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}