{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "04a4ee46-348d-446d-9b91-1c1a4d50a01a",
        "name": "Clear Cache",
        "item": [
          {
            "id": "73b306b7-c886-44be-afa6-98f2ca6dfdd4",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1706b003-e938-4dd2-9176-80ce9002b8cb",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "9ed3fcae-3cdb-4a52-a50f-c7149eaa5e34"
                }
              }
            ]
          },
          {
            "id": "136baeef-774c-4698-8706-1157df5cc39d",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fb4ba0cd-c034-4471-bfc9-f82d4cef83f6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "cb6a0c0f-2cb4-46d3-877f-3b3638b63dfd"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "f571699f-b401-4c1b-8483-bdd0c3d1ade5",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "8abb0d2a-39f5-4015-94ab-3e55147f7434",
            "name": "Positive Testing",
            "item": [
              {
                "id": "24ace856-853b-4094-bbd3-b7b1ee4fad47",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bc5739f0-c129-406b-82eb-79d4a307dc86",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "eeb34edb-3615-4b2a-bbbb-623f5ca37642"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4e3b377e-094e-489b-b68f-7b8438ea41e7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "19695119-9599-4783-ab43-4d9e93509d05"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a065db41-fe18-4ea3-affc-b14d52d4dbc7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cb2fbcd9-262b-480a-abbb-7f755cacfa60"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "652884a7-feef-438c-8811-b9a103ce3a88",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "7eff4d16-6168-4dc5-95a5-04709352c683"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "34c0ce64-4025-47d5-aea2-55b7de40b55a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "497dba2b-4cac-4922-bc76-0109bc141aaa"
            }
          }
        ]
      },
      {
        "id": "6dee02c8-8297-46fc-96ff-1b42e0e8f3be",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "fb39bc06-b1dc-4895-a272-a71b6081a2d8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "26216c49-dc2a-444c-b191-704914d1e3ed",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "27182775-bf81-40f3-9872-4ce0f873ac48",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a435b48-ab88-43f0-a599-bfb78e6409d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "59c0c442-57b1-44b9-ba61-ad22cd856604"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bc14e67-e563-42c1-93fc-2471da77212a",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19f700c5-07bf-453e-bd36-2eca6328ec6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a396e620-0ad8-4837-ba0b-705aa9a6b232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "634811d9-b641-413e-aa2f-3a0a2860d3a4",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c429012-59d0-4c6d-8a53-b186c42d88f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c55233dd-985d-434b-b3fc-627ccfd49aaa"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3863aeab-9dbd-4462-b7a7-c630dd04f62e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "583101e7-8a2e-477a-8a6c-c3c9ff777399",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19ce9e50-f8e3-41e0-a6cb-b9ab1e8a9e28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fc6e2f79-027e-4741-ac8a-08c9ad17826c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42117aa2-cec7-4b8f-96a6-9d35690e5be9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25234b1c-91c6-44be-903e-664b12f035ae"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "69db2128-84fb-4aaa-a7d9-3afeff2b7173",
            "name": "Positive Testing",
            "item": [
              {
                "id": "46c5698f-44fa-4ab9-89c6-1b3ca2d54179",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f47daa05-ab52-46a6-878e-32f0020968f8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "00628468-ca69-47d5-bfd7-a347556777dd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a425309d-ecae-4fa1-9fe8-814fc792355d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "6dd7ebcb-3e16-4c2c-81ef-5ccc6638ebff"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a5d9daf6-130d-49d3-940b-5f15829ee47d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "736ef453-0d40-4945-a185-32525b0c50ae"
            }
          }
        ]
      },
      {
        "id": "d90cb9a9-d309-40ed-a0d9-1b198578d5bf",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "de57a05e-5874-4e83-b1e5-8fd59dfa836b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c72f78ca-7d1e-4d44-8b3e-a7289b693651",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "2bbc91ba-f973-4758-bcd3-e58d65c3d248",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7670e957-ab5c-4b25-94c3-5b1c52189f2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13d3b45c-ef74-4efc-89a3-6247d247c0dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61208fc0-a357-41ba-9d4a-81d17921046a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5413bcb2-772e-4b19-a4fc-6313d52afcc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3715a72b-214b-402b-bd75-d625334b2c86",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52610132-d48d-44d3-9410-513f273e7c79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c2b10b4-5ac0-4cc6-9084-c7d576ab8258"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7bc9af7-5f11-45de-bb73-6a172f9f5ab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a673987a-d6d8-495b-a06d-00512aa1f46c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a2f76e3-67ee-47cc-a4e7-ff0bff3ea387",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14c81346-f333-4b4f-bae8-669bc2ee3e6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f882879a-788b-484c-a498-3440a55f856b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b3b21b7-ddb7-456c-be44-cea4cb7c940d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1bcec996-0a29-40b1-9aa5-c06ec9817d6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4f6fe13-3ad0-429d-8a4c-0af7fd81cdaa",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f911a3a0-e4e9-4ee7-98c8-d1c3d7451bdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e492a82a-6b61-4571-9035-059a08c376c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca9b6f9b-3c58-4506-ac11-04c1a83cbd4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "73d73137-7482-4d4e-bf0e-3661ea7a9e6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2666df67-f9a7-4d45-bdde-a00356711f05",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "410d090a-b7cd-42d7-8d90-202a37cf96f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02c1d682-f2e8-44bb-9e95-cdd12c4df953"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cc6d225-80d0-4066-b98e-fee7fc974b04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f33348e0-75f6-45b0-815f-a15e10a96378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3926adbd-310a-40ff-b666-6a15aaf88379",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dccfd269-18c6-47a3-8b5d-a866a29ed2ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ef46740-0dcc-4e7e-b138-3f99fc24ec03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4239bee5-ac6a-41fc-b738-0b9faf483d61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "191c905f-0138-473d-b3cb-d67915b1af41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2832e03b-6654-47ba-845c-9288d036e78f",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "794bcde8-a9fd-4721-bb53-f6403c967975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89df60bb-33a4-407f-bbae-ffd143a6b874"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f89eaa37-9bbe-453f-970c-6157d62e4131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "83c7d6b2-95d7-41a8-8483-f0194111feac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e6ce9e6-103a-4b1e-a4a6-5e329c178a38",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f74ddb9f-8661-4ace-a8aa-087fc71cffbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2487054-b9d2-4fbc-b5a9-391b9d942958"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af828520-d1da-4d03-95af-fba7f46d7607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9f087ef5-492d-40bb-819b-a6bfe03a2954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b385ae18-8bc6-42f5-89e2-1fdb896c954a",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c472ad8c-cddc-49a1-93b4-b5b774264ec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "032a9042-7ce2-4262-9854-f2f61baad067"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fee5f503-45d0-4193-bc26-3a555b601680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "238ba6b0-7f61-4e8b-94f9-b88dc434d435"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80780bd5-9050-44aa-b505-76addd1aea03",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41cdeda6-ba39-4811-ba34-b2294e5b4b4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1bd5dca-4720-4d50-9a7e-0dc3558c4a63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f765200-d66b-49de-a7e1-b1b8992c82c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "42f3da2a-b09f-47c5-b571-ad43dae9a892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44dde573-28d2-4e98-84ed-f108ed41971d",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80304d96-628c-4dfd-9bcf-d9caaeebbcf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffbbd598-d77d-46ab-a3c8-658f6c4a3bc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7e46560-de9a-483e-83b2-4a16d3560b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "49230709-e28b-49a2-8b0b-bce3b96133bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a63f93f-73f5-4c68-8c59-5f3985e5bf37",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fa0d83d-49ac-4979-b448-22f2cb3e060e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00d57f84-2806-492f-b3ad-f1c7905e50e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7ad7e73-7ec2-4d98-9789-a383faa0304d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9944cd89-f539-42b4-9618-6751d374f4ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bc2d862-de11-47f5-829c-2f23dfa6c8a9",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78c5b4e7-f473-486a-8b76-e5638da28624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c1fb250-d40c-4fd1-bdb6-74458ca91252"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4ffcc61-0682-4377-9229-86b32e32e7e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e7b12540-16cf-45fd-9cfb-8dcbeca2e404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c986afd-a954-4d81-8a47-af091e6550e5",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9741beb-7c94-478a-83b4-aa13c57fac78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd23281d-d786-4ea2-9dad-068e05f3f1a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c96bb75a-34a0-47d3-8e0f-a14fcc205596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "47b5a16d-66af-421c-8991-c1b7eed71111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76b43fc0-c0a0-4a92-9e2c-e5fea59f35c0",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3095d4c9-9ffb-4d29-bd48-c12492b8b199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3f85603-d12f-4a27-b4be-0f1acb9e8c88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06cae559-8200-4ef6-8de9-5ba50919c470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9164f803-74eb-44a9-a5e2-73a7e5bb24bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7447718-04ea-412b-a4e4-f01423d9ccbc",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78f38959-3166-4931-8dac-fd36e3023eb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eea4c7a6-5b69-4458-8d3b-2e9a2752ff34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8a03651-dea9-40d4-accf-03fdfbbc4df3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "270f225c-fe11-4cae-9479-c73d687afc49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d75c1f4-22cb-4ba1-ae14-a84fb92cd203",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb666cd9-8c2e-4316-baf3-b0a0ad5a343e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d2389e5-8741-4484-a0fd-824623f5298d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba921cf6-61fc-4323-b000-b6514d97ccfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bbbf9c53-232f-4851-80e4-63a56d7ea5ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb69b40f-12ab-49a6-94e0-c6f71d3611e6",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67de13ab-f3ce-4fe9-b699-26951c880fb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b92a6ee2-6c0b-499a-b321-6f926aafc670"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4de566dc-d295-4ec4-a323-9e55b13c831f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "015104ba-6d07-496a-9b80-a15273be826f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2af8027-51c8-4875-bc27-ce4f5600d058",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd03989b-ba52-40c7-adbd-6aae570c3a60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbb1215c-15ca-410a-b0ab-c36c6e7f4983"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b389c1c-e907-4f14-a993-1e3f79d20ded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a4bc73f-6720-4a47-879a-f3f2edeacc19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa637177-092c-4928-a6c8-13d9abfe9813",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "003f6c20-40d7-4218-9259-f21f1d4a1308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfcb43f5-7252-455e-ad60-0d1e6cd7f398"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f27f4eb0-5f34-449f-8dee-30b05dc0cfd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "429945e4-b297-4e0e-8289-fd71d47631fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ec99f03-383d-482b-8fa6-36320f91e353",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8df2d646-3b9d-4639-9aa9-ad6efbde0241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d10ebb96-5f27-4e7f-bd40-42bec66f73eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c238aa3-430f-4772-b9ef-adba9f84e8c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "61871aee-db95-4cd6-a74c-eaa2c09f8461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6acf4453-e2e4-47c9-9e0e-c011ffa8bb28",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b9eb2b4-259e-42c8-bbef-46f90305d803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0adf329e-5e75-488c-a7f0-49a658c96fcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93ac1c17-ad44-4dea-bf41-752629bc8c41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ad8576c2-b5f7-4692-8af8-0637efcb1a24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ff6ab14-0858-419d-a955-0ea36a6d7cee",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee2539e7-9276-4445-8146-0c7fa9078063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "643d1531-1070-43b9-8a91-b1c501b5b58c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83b237f8-365b-45b7-98b8-82042e513747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c66bcac3-6a11-4126-a80a-ad82a85cf228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed71f3f4-8104-42dc-93b7-3f44ca317d3e",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4d66222-b1a1-40d0-86da-1a96760fb6a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2507acb5-f83f-414c-b44e-033c517f3c6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5e787d9-df0a-488e-aa8d-ec460f31a130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "980eeef9-613c-48f1-8b9e-c5ae45682fb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eca956db-9785-485b-9b7f-017035562b12",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2890eb6c-48fc-4383-af7a-5839e54c0f50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "608cf503-1169-4939-9103-a27c331e48bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e5385b6-7539-414b-add9-49e6998ca6cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ff1174f-0a2b-48f4-9f43-3d89d6d13315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95c2147a-8bf4-40d7-9dba-0eacb2e70e84",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fb398ce-0f0f-41f3-981d-6b858d3168c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8240985a-480a-44f9-8f43-0804cf218c01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43e9735b-8904-41a3-b002-55c9e6e4a8a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "04e98612-0ac9-473c-b693-bc56842f3560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1ab22b7-aae7-42ed-bd4e-dc63805d87ba",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a53f883-31ee-4836-a421-fa80dbec18e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3e7c5e8-c3a7-4372-836f-bde6ef7ef625"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31c8a4e9-2feb-4fa6-b365-3fdd73d9675f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "33d39efc-9f90-4958-b0ea-83efe02b76a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d080e67d-63a2-4d3e-8df1-47a71735f0ef",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e188a90e-334a-45d0-b6b5-9b9642998080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b189a33-161c-4a12-aa65-7236a7fc1606"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b28ca83b-d8d7-4200-a37d-a48b8f45432f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bfe17f37-b5fc-4a50-8f2d-2eb8fd69b1c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b55bafe-8277-457a-a641-4bbd726774c2",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa040a4f-bf96-4b16-925f-15c5ec73082f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6993415-ec14-4e16-a582-a082e8a38a93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "967b46da-780e-4fa3-9225-9514ac265253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d1821fe-fce6-483a-9200-4b687cee54cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c0fecbc-f849-45a2-8347-50d1e2533159",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd4279af-63eb-459f-984e-99faada0acf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b088a03-7224-47e3-a2e9-d4517663dd16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74df8e72-8dc8-403e-a5b5-4e0f567e3eb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fa1641a-45a7-44fa-aafc-35ad754cc1f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97447935-0f3b-4dda-b243-286064ddb321",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "300289bd-f817-41a1-95be-68af6d882395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79c14e09-ae64-42ba-9005-72186bafa07a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d82b9a92-15aa-4326-9757-032d404dd3ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc320688-3a38-478b-add2-6830d45042d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "558228f5-dd8c-4923-8bd2-68d1dfc17dda",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "725d5731-531b-45fc-90cd-a4d8d6853794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0cfee8b-d6c0-4f57-a37b-c6b697e47dfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff74ab13-1508-4a8e-9822-428d9cbd2baf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ae8a3b2-9b00-4086-bd20-2ef3e04908af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c77ce0b-4cf8-488b-a6ba-87648cdf23df",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b4fe3cb-5099-4ff9-82c8-dda0b48c6855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48a989ea-a22d-4c17-a313-17d8f31088eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99fd406e-e94e-43c2-a9f6-8db2d1191a78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "10763216-86a2-47f6-90af-0277bf3a77ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33918cb1-f928-4f0c-8a0e-73a0b3d22fa2",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d31e8bb6-666c-479e-8ca2-3115ff88b90e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e134bd7e-93cc-41cd-a7c1-adc6c2d7f44c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c65ffe7-f5ca-4383-a7f7-72c11f66c4f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "15fcc940-1a0e-4f94-9549-8a6058566ab7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "379902b5-5bfa-4efe-9131-31f1c7d38cf6",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6da7d500-950d-4719-a0b6-6d7e50177499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "224c1282-2b4c-45c6-8801-1a0fd1ea6855"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8052bfb0-f057-4405-ba76-a1eb7b478e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "ee3081d2-441e-4417-b6c8-5064e613eaf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c288903-80e4-455a-ae39-7052d7ddc1ea",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7816cca5-a68d-49af-a4a3-bc35daf9b425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5b1c6c71-c27d-4b6c-bc43-442f788a46cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5785ffce-dddb-40ab-acd8-25087acd9215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c4e6509c-01c8-407e-9d75-bbda68ad62d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbfd02f0-3715-4f5c-afde-6f9bf0a7b3ac",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f127a92-df96-4031-b17e-cbf931d086fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ce3f6a9-bba1-455c-a66c-a7bb9ce72d8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4f0422b-dd49-423b-8eaf-695c4df86320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2fea27dc-157b-4582-ba79-a54fb2dfd60a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60f1ccf6-a290-4225-8aca-5cbab9816ffb",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c46696fd-06ae-4f58-9960-ba6e926e4f94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e30a6195-08bb-4b74-b446-e87fb4611003"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdfbc5bf-3a96-4ec9-988b-fb0674a50d25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b8de6c1-0838-46fb-8174-ce2e96cb8f2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "243128e0-b1f9-4ff3-8fd2-fe7c8bd08205",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30883070-e702-4363-baa4-edf5671095a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb273169-d84f-4a9d-b623-019a9660c188"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9b84afb-3e3c-4a03-be14-d436795d6294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "603f885d-593b-4a30-82eb-79adb9528a9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "953f2d07-b649-44d3-9309-61d466b5b65b",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aae34608-c657-4a13-bda4-d45c79e789b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dadcf75f-cc2a-44d3-a803-3d93868e8481"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bdb6b93-4aa0-4188-81d9-fb48f7fb44ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "64ca17b4-2b36-4a71-a58b-a2f22bbb4970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51a3ecdb-d0e6-42e7-b2bd-d17424481f49",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4835e686-794d-4d6c-a0a1-cb6065257115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ff32904-ff37-4b17-b208-f05961f967a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ebd350d-f014-4ebf-811c-90e8d96b50e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e3f283a-879a-472c-81bf-5ccd582567a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f66214d-c980-46a3-802f-6394d5e1903f",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ad13b90-9e85-4b08-b3cd-a434883acb9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5df5a50a-77a8-4fe6-90cc-e2e8ed872c35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20950dac-fa5a-4b20-918b-49c78ea2d841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "b8650d23-f184-4939-9299-0233cbc96f5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4258bda-2ec3-4d47-b731-2dbe326b89ea",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b795ac6-5d4f-4678-b62e-8b356d0d2aec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f9cd2f4-b5e9-44d0-9667-d9237702b969"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74f10e9b-3227-40b1-9e7f-fb67195e24cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "2354ba5a-33fe-473d-82bb-76269d3a79d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2db1fa4d-d3a0-46c6-b783-b9b36da92e84",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "836ffc79-f290-49ef-a2ad-cd0b16f87e46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3457be1d-dab8-44de-8739-02d6db623bca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d98ba92-e70d-4f76-8cd8-eefdae8274a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "8486151a-7056-4f9c-9ee5-cd1271147915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d396cf26-5ca2-49b7-8def-5072f8e8a933",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10a139cd-a21e-4f95-b487-b2b5a96db8b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6d025c3-ad1b-487d-8978-d922b2da685d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6faf2a59-13fc-473c-8502-ff21e1b6cbe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "492dee0b-7ca3-4b30-b923-93db721bddb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a41102d6-b550-4f7b-a5ce-20e9577dd703",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bdb6fd1-0af1-4606-b493-05dc4ddac714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38e8d991-aa57-4249-9f53-41e181706ef3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c04dc166-e480-4fff-9dfd-38e1a6814d10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7dc2dc20-b2d2-482b-98ec-052aeaec1225"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c4702bf-d3a8-420a-81fb-778f1bd59281",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36ae0967-6c3e-4f7f-b5d1-6dcfe36428be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c79dff1-0b5c-4c03-90d4-24ac620abc79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "092a9c54-db9c-41a0-968b-696f9f46ccf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b47461dc-2572-4f69-8ba1-e15d9b84e441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba8293af-f7ca-4b38-89b4-861a8c854a04",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60aca3ef-fd93-48dc-83c7-2fcdaf6fe807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84701ff4-4525-4491-bd56-cfb9c30789a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "996f4879-7959-4f11-844b-949deffc8a0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6042cfc-22c0-44dc-a3f7-a6f3ba787777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5796b76-c18d-4e14-8769-d8ae53a663dc",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b836845c-107d-4b3b-a2ea-e72f1b1a6f0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e44e98b4-e208-49bf-837c-5c44c0d7d570"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26ab1249-d0e9-4e30-ba4e-82c45fcc21f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "612d1415-76ca-4b03-8a15-e6f4ef61cf00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff119a13-343a-4106-b706-4220799a191c",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c517cfac-cfd5-45c9-9ce0-84b57361c73c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac03618c-ea2b-471b-a3cf-807f59e25435"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04c7d7ec-ff65-47bb-8535-240331b37406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "30c3b028-801e-4298-9836-6e1dcf89c062"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd4b59c8-0214-4227-a7db-0a63f45c7865",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e940796f-9960-4f6f-aeca-5e625593bfc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e3d269d-5fe0-446e-9924-0946a5ddba97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db3b19a0-3237-40d0-acef-ea51d721e54c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1b3552e-6092-4099-a5e1-4a9d6bc29748"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d4f61ea-d237-4ed1-80f3-d90cf24fc1f6",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e896f38-f9f5-4d0a-8556-57bd655221e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1670ebd9-6b6f-43c3-b1d8-0c6c190eaa02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a014d982-3c44-4733-9c2a-e7663d7b29e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "178e0faf-9368-4443-867b-2d047ebd8c63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e42466e5-0f12-4e2f-8420-388f5456af20",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35574d8c-2fdf-484f-b7df-605047755ff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6876b3db-ad24-4856-b862-4e289adb6e1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67f49f7c-f634-4e4e-8908-01b7773db37b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e1c6d02-9ac3-45a2-bc0a-688d0a96bde1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ace5735b-e27f-4bc6-a5ff-816944279873",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bc9852a-09da-4c36-859b-ffca3e48abea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c80f3838-ccc1-429b-b238-71985cfc2833"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8f521d4-2295-476f-83ee-f8a25ae16339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "25cce557-b7d7-4926-b58e-b7513200f412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f6547ea-979a-4378-8a2f-ba08db6078f2",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6349501f-49c1-4242-aadb-0eca7042751d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6c1bc5d-76bf-4a2f-bdd6-398b799f5b4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e77d0d3-3012-448a-b392-16da721f77b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1873258d-b60d-4e4c-ab0b-01f2b30e6009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "096893a9-3aad-4680-b972-56c4180c61de",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52737fc5-4658-45b4-b714-9cb4c081fb0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "183c07b4-d7b8-4c7c-a4aa-a979b6a0e6cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a936b96-50d8-4ce4-abd6-586eb7405ccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "970935e2-9640-457e-a607-d88fe45b27d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ccefc5e-f60b-4f47-893d-409f4a2d609a",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90a1eab1-e120-4259-80fe-a86aacf47cd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a93eb55-1ff2-4646-9d06-c79aee8676f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0661e5b4-55c3-4dbe-b61d-4eea30b89d72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "825e428d-66d2-4ded-a3c9-108b48d4f45c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5f3a38f-cde1-4ebc-9cfc-048a0b2fd3b5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8297e1e0-76f0-4e77-b37c-e628e404d041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed7a4e57-972e-4870-ae10-828a254676fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f47596d-467e-43e9-bba5-006c81081861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e5d431f-5e37-451d-aac9-74dda3e8ca30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3d91d09-134a-4db6-a19f-6afddb9fa969",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cf984d5-2c56-4621-9a11-5daf62298964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71dabdc3-0977-4585-9a5d-359b7cff5c4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9120b76-59ad-461e-a9dd-18d9a99c1028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9fefc15a-3085-4072-8d50-60ca255d5ad7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2b4d76e-99ee-452d-85ec-ecccc22c8286",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb56dc40-a4eb-4764-9cc1-324a482fb2ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ee61a50-2d7f-4eb2-9d8c-3c70e1896348"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41c6952b-c45d-45d8-8e0f-80d1ca6ad175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "cdf12051-49da-4bd4-a36b-9894ef20cd52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93f650d9-85a6-49cd-acb5-c6737f7ccb7e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbb00b7b-ad8f-4571-bb2d-a490fec12ca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22db5eaf-57b5-4364-8f99-90a87d4ecb95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e3ef2a6-0e30-4625-938d-f9d7292eb7e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4cdc0619-39a4-41b9-a969-909c126c761c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b8eaaae-5118-41cb-8b51-42b768781c10",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "630c8147-7d78-461e-a7ad-d7661e6ee25e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1bb90b7-83ff-4dce-bae9-a1c1fb7ccf0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "766d6b9b-eb54-49dc-be5f-30da6eba8b62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "27fa8a0c-bb3a-4cab-8e1e-617b4e267187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60c3ccd4-5773-4a15-847e-ce619b38f540",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "690801de-d87f-4100-9d1b-f3c8fa952b7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4399f2d0-15e8-4b49-84c3-ca7d1565d3de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e245dfd-1f2a-4467-a530-15dd249b8987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8166d6d-e93e-4c50-9d5c-26b709865481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40baab52-80e9-4ea0-9251-e23a55c57ac2",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c310002-990b-47e8-90fd-11d44e0cdcf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c485e331-614c-4697-a418-6d9d13e98b6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dca4cce-f037-4187-8f0d-e1e0ba87be12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "34e8f2cc-a658-4051-b185-25257f10fd6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69248596-6f54-4cf6-b7fc-5b5f706081f7",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2592fa45-ebf1-4c14-b549-c1078c469fa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a427e876-46d7-44fc-8be5-299886baaa43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b356691-5910-4e16-adc4-518f72990a11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "91ea2925-acb7-42fe-9feb-af6abe30547a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95602a8d-7251-4db4-937e-d476cafb36d4",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52b73b82-1e24-40f4-bc3c-ac381f48c2b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b2c00ad-322b-4860-b01a-0c1d8312dbfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdd83391-1c98-467b-bccb-ca2c04e2d8b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "85bf8ce5-ff3c-4a2c-badf-ad3d36c4174f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa9bfcea-42b4-4fcc-a0cb-31f99d12a769",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b156db9-005a-43ca-b90b-d53d5b88b431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08bc2c68-4eec-4a47-8699-c63986f95466"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f82b943b-d594-48bb-9cd5-1c47dfcb46eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "64326eea-9799-40e9-b3c4-071a55d671bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84a1d857-55b9-4fc7-9dd7-37f12bb36cc0",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b8e8e57-7de9-4b4c-971c-c5c936d3f5bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "317ff907-aea0-43de-b6e5-ce166700dff3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a48fe22-4e6e-4e7c-9c52-456fdf72a7e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8826d8f-d5aa-4d5b-887c-0d88a5ba703a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f05b9590-5370-4126-a0a2-b303311537a5",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9ed94f4-8f06-4eeb-bd20-7872a86de33c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1d7d450-fe44-403e-8675-354e83ffb76a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59af5595-293d-4358-9cdd-955b022c9f3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "79c66d10-2734-43c2-8e89-62c334f45ff8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06689627-0c6b-480a-a81f-37693e78e771",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83b066a2-3731-46a8-9e24-e69ca1cd5675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b56833c-8d3c-45aa-946e-80d7f584b072"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d40dea2a-e201-4aa0-8a45-4b360682b2df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8ef2240-40b4-42ba-b04d-0d0519022f27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "240e76a6-0627-40d9-ba8c-66d764e1d6bf",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "134b05e3-f1e6-479e-bf00-4055fd0e3074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1eed3858-9559-4167-bca0-f98549a3464f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa22fe8d-734a-4dc5-8931-0c025e44a00e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dae9cd95-d5ab-46b0-b8d9-c52e52a194ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "202f9802-f807-4617-ae64-87387c44576b",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79aae400-8dcb-451b-ab28-6e273e1595ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05d05522-1834-496b-8f12-554731c0e3ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "498747bc-3c23-48ce-9c38-4b9437597173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae024199-3c04-4de8-999e-e117db5c019e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2d2732e-6007-43f9-b3b9-440e79ef62a1",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7043fc76-e74e-4077-ac1d-34bbf0bee6f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c52047f-1cd2-4dc6-898c-93afcead3322"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "320bc9ac-5cab-447a-9fcb-d0f16bfaadb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4083593f-2578-4a03-8f4e-0e8f4973338c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aed987ec-c026-4f8d-b2b0-063f28188335",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25c6be51-a105-4733-954d-40c4d7a4ff8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adbac9bf-635c-405d-8559-af3cc190466d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51c5149c-5836-4eb6-bcc2-c0c997fee466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d1c73a3a-5168-4b56-9308-fd1eea16a3f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a82f9106-453e-41e0-bf0e-4be3a34c8589",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bbee08d-0d8e-4c6f-a2ab-2f4b1a168cf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b941c6be-2f77-44f2-bf92-cdafa87c5e71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fc0dc62-4a24-430e-8088-9338b63381b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e33e8b56-e10f-4768-895f-1b070d61958c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67c558cd-8169-4751-b42b-847c8b358a5d",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e40f2b10-6d01-4455-8cd5-dd2deff92ffd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48d145a9-d6cf-4cf4-af4c-d309a3734ff0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4933587-f719-4e45-beb9-7b7db9bcdc19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8bfab1f-2105-4470-b7d5-610532b7ed38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09f3d815-54f4-4ca2-a9af-d237f2d234a7",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de6bbea9-45a6-44f4-b860-de272e4265cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5314792b-f79b-4ea6-9937-fe4d0d543f78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8e1fd22-4a38-4389-b938-67f603c3a1e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "724f1d25-3413-40a7-b095-5bdf4ff09eb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ddd9712-abbf-4def-a289-f0850e8f49c3",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "965fd219-d11e-488a-bc77-7d52cb2e8a7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "658db9b5-8cb6-4718-a37e-4e5a8ccbb7a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fa7de74-4c40-4677-b239-8baf63c3472f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "311cb2fa-002c-4673-a656-dc7d223e56ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b7e2cba-e3aa-4b7c-9500-178ed5638fc9",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7892013-3cd8-411f-abf0-8ddeee06f97f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "652f529b-6678-4bde-ad99-3a89ad7fa880"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ea1cdb5-f2e9-4bb6-a1ee-3fa9f4b5b691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "aaddb0a7-b283-4c94-bdab-3f7f291623fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aec8923b-a58d-4855-9861-6accb0447f64",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b889d8cb-f9aa-471d-b04a-8712c139f6fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d262e9a-60bd-45b2-9176-b1267ad637b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c1303ad-71e4-405c-8e9c-23d83dfbd975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ef813cfa-bc1c-4da8-b840-3549f60a86aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa79d320-2737-4586-a925-761907df2970",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20e36d94-5646-4387-89df-93fe17b4b973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5cd1801-ccc5-4e7e-9b61-1423121a5870"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01edf0ca-aa45-4be2-a44a-604ee0d9bf8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb00a163-3d65-44ac-a248-eeb48b33027c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ce37b1c-845e-476f-bcf0-b7b1755806a0",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f56e1208-8c6f-4a2b-a2a7-2b07cd8def14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17ef9aba-2ada-4036-92be-f6b0e58c9ac2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35fa0ff9-d42b-4f49-8225-a47afb7f7f09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e892f9f8-3dce-467a-a703-4fd1bfd5d23a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30a1e187-35de-487d-baba-9415e54e1175",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31c43385-87e0-4df8-9be7-1ab535a7d77d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33010c0e-e651-464f-b935-15fea91f186e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "936e6b3b-bf15-4811-b2f3-58802dcc406f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3d9dd02-fec2-4215-a059-8beeae2e7329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cf903d8-2234-448f-b84b-063325a7c8c9",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee6d2359-8c88-4322-99f0-dd5deb5dc93e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24fd2153-1abb-4451-8475-924b248c4130"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "593dbe36-24af-4ce8-b656-62228db305b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3594b80-8420-4227-ae4b-4c1c6e698725"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc582158-fb26-4daa-9caf-2eb7c18fc9f8",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c5eeeb2-eae2-438b-818b-c294ad3c8111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "138f670f-6159-4d03-97b0-1cdb33a73477"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "133155d5-bb6b-4f36-9d7c-74fd31ad12b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d6c8b4b5-f96b-42eb-9576-2284eaf5acdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "866df837-7e13-45a3-b5f0-c4886d323cb8",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64905a32-cf20-47d6-9baf-bd0f9af3537c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "257e616b-f807-4abc-853e-42ec9621564d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2843eb60-1f30-4523-ab56-f6edccf356d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2e64b644-2e1c-419f-9ae2-3440eafc04b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6854c819-3508-4af5-8061-4e4a89c2f1d7",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bef0ecde-fa0a-4d39-a662-7a0af278ca2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab311910-3ae1-4e92-bdbb-9973542ffee4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2a977ce-db51-4696-b880-18ab6c57a239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "600a21a7-a577-4234-bf31-5653a62a320a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0894d1c-63f5-4682-b7b8-fe9371689a60",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57cbca65-157c-41c6-9da8-20fbfb82e7c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d837db6-1fcc-4541-b727-0e0153eb2fe3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a170730f-b699-4ea4-9d4f-8ec21a52d719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "260ff5d0-8a01-49b5-8f83-ad56dec0063c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e497259c-5737-4c5c-b4af-f2db2ecc4d37",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89273c42-f7c0-463c-83da-3bd4b087c06e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d197218e-8c1f-4860-bdad-98650c47997b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c3d118e-c47d-470e-8266-73062b28bd86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7d70ca2e-d86b-4ef7-9ef5-8680fbb21639"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de6e4e31-5741-4577-b26c-d82b2c9e576a",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60ac6321-aa37-4608-ad72-892af4302c5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79ad2e4f-c733-4c9b-950d-40c6214e7cdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0916439f-89fb-4ca4-bc1c-2c86a6652ca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c69b378a-1395-4160-add3-e3b4d142dbf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "249fb8f9-ffc1-4612-9b69-51faac9ac59b",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2ef08ac-1226-4ed5-9702-915b724be1cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8db1e3da-6120-47a1-ba19-33467e62306f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ba206ce-70fd-49e2-8ae2-71ec2cd62dda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "310091ab-9253-41fc-a2bd-ee6dbd921b3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05781b42-2dda-4f38-b263-0ae6e8c01bd2",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac820fc8-6b0d-46ac-a505-ab882551beb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "ea4a0065-22e7-409b-8888-0db3b85a0204"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3e9ea21-6633-49e4-94cd-b95bc25cc2a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "da48591b-626a-4a3c-a115-6c6b94c895dc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9d723f44-9857-4962-b478-0131f4cc4e83",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "924b3def-9a1f-4f54-9334-9b33ec233d03",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d92ffdce-7201-4e25-a80b-6a933d510acd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4ecae0e3-5f60-4ed4-a6a5-d19782e79ee4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3db532ae-9347-496d-a00b-11b570c3a957",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e6787365-f2e9-437e-aab6-0174c6a274d8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ab7fb0a1-cb3b-4d64-bb8f-e4953d9997f5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4a9be008-a8ca-44c2-b70d-c45a99068a01"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "312d53eb-4612-4ab5-b532-6f5e9adf9443",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dd1391da-f3d5-42f6-9dc2-dbd02eee6268"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "50ccc247-bb97-483c-b20e-94df992343c1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c4a77bcd-ac89-4a07-b92d-f852e28800ab"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3549f424-0810-4183-84a2-a78df82fb13f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7a110b98-1379-45e1-8b5c-8553309a7544"
                }
              }
            ]
          },
          {
            "id": "3cf24002-175d-45ed-b06a-4ba7b52b6269",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bed5e9d9-457f-4fc4-a8ed-539e6b2760be",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "4f4f661d-9325-45ac-8586-75f518986d15",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e17200d-2898-4b35-8772-f5e72636022c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "9805157f-519f-4aee-ae44-3c52ee69bcd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58d6da93-649a-43b4-95c3-b2f467767a6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfaeb15b-0f36-494b-a4ee-a6f1ab17bfe0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f1e1daf1-db11-4f54-b8fd-7f95da186c86",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e8c3843a-848e-4c83-b11b-2ba85875350e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "91a6f39a-bf05-4718-91e7-3582e2b277ec"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4f74aa03-d022-4c93-9e15-6e23789c71ea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c15d97be-75e2-40ed-84c4-215eea61f310"
                    }
                  }
                ]
              },
              {
                "id": "e5a969bd-f716-4c32-a2dd-cf0ef19248d3",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dc870a40-3fe0-4b74-9dd0-e138ed3464cf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fd496c52-c376-4a38-aec6-b31b19dc6d71"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "26f2f852-4092-45f2-b9fc-2451c629d731",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0243dc94-49a2-4a23-87cc-2e930f8183cb"
                    }
                  }
                ]
              },
              {
                "id": "f8fe4648-857f-411f-a7ff-e255b254c18c",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3a6b2074-23ca-4b1f-ab7f-283817e0d8b1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f93c2991-37d0-435b-9e17-929b16c7204d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "75a59d75-0303-4bb9-8f3c-85290bb96668",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b22db00c-e490-48d6-9482-244a24a0786e"
                    }
                  }
                ]
              },
              {
                "id": "88ec881c-c214-4412-b79f-83ec0d3f5351",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4154b243-d975-4769-9af7-af9832dcc809",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bd2ba728-67b3-4e21-84cc-9ed6db9456ea"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "413a6088-dd65-4381-aedb-23b8c4c91ce8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "44d36f85-4448-4e3c-ac9b-cfa1f425e67c"
                    }
                  }
                ]
              },
              {
                "id": "0c2ef04e-a82d-49bc-abb4-be4e05fef0d4",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dd691f60-50d6-47de-a6df-bab834709c48",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f9c166a6-5df8-419e-92c4-2f542ac4741b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7d1fb999-9505-41bc-a893-15e0df4478e6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "19458552-64bc-492c-9129-592a5a81b3e2"
                    }
                  }
                ]
              },
              {
                "id": "8334c142-450b-4c37-84cf-120fb2564ae1",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e3a6e579-8d2c-4306-accf-d0b081146aa8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "35df0588-cf54-47f1-bb87-08e0a36a7262"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "87d4ca17-304f-4e26-8592-f322bf72c3f6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "397f7c9c-25f3-4498-83e7-bf5380588718"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "55fe9e3e-f4bd-4dba-9676-d0c818013cc5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "63e50753-f7d6-4a8c-ae1a-3bae48063cfe"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ca1e889a-f1ff-4243-bf97-b830a5dbeba2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e3ff8a1f-e8c1-453a-ad40-108cd31a72db"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e9f05ec0-5d9f-4d1a-839d-dc42bc01719a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "34a22463-1af4-494a-a47f-f266e4bca84e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "82767200-58e4-41a4-82bd-6b6ba52ba2b7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c4dd31a7-01ab-4f03-ae1b-e0e9c8298cb6"
            }
          }
        ]
      },
      {
        "id": "fbe85d96-e2fc-4213-8966-1b0d867e3def",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "563256dc-3e67-4132-bc1f-ec3ae27af34e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3bc184df-44d2-4059-806c-b593b2dd9f2e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c6a53715-126d-4b5e-911f-7d689b51e2c1",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db8115b0-a6b8-4cc1-a7b4-8b82424d009b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dcb81e9-2750-44c5-b9a5-4c4674eba539"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbb90ead-8628-4a94-9345-ffde82d02efc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f10db39-eccb-4012-9e4f-a36c970c2f1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d80b133-fc2e-4cdb-bcac-466ce9c175e0",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa0a875c-b953-41b1-b1a1-544142159087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2acba81f-0a66-4fbd-b337-d735b4377125"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81dbf8cb-dcb5-4b45-be75-c40b5eff0878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "47de5cfa-f208-42c7-b71d-1c4a4864895a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e40b0594-eace-489d-a4fd-91ec814999b1",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff37ad55-d54a-43fc-a1c8-48189f605d6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0db12ac1-a647-4921-8b51-f24a87b31d0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcfc409e-2b2f-4092-bfad-7e23db57c0c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e88f47f4-9f67-42c6-a9a6-ccdbdf3fe3a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "057f4c2d-f8dc-41cd-8ac4-7668989d403f",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90e35516-4697-4c87-8445-920615d2b753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abb81ac4-c430-41fb-84ac-8d0a4c1c9b41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8154955d-7614-4a13-97cf-4b1b61e962e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "54d99153-96bc-4ce1-82bb-6703f5f9d751"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68ea702f-7440-4a39-9ab8-d418dc97ed15",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1cc95dd-62e8-46df-9bac-c8d1c19adbf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a90264e4-ea5c-4a14-98e8-170011617cf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb0facfa-e963-462e-9d70-780215f9abd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2de67141-cb2c-47aa-bc10-5bf9939e6904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea775eb6-6b30-4570-b992-3372c235669f",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a356a419-f782-46e3-91a7-f969eb85ac9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10a17074-0e3e-4c98-9319-905caf05ed8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79e156aa-8433-4dd4-a653-88e250b5a55d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0d6aece6-9903-4600-a92f-04926b535116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b253546-ab16-4f40-9449-2b45b6096c7e",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13bdcec6-cddc-418e-9563-6f1c2094487f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7a96782-f433-413c-87f0-80c8805db803"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2087a3ac-b3bb-46cc-8a53-4a7929adf761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "86b3b20b-3327-4fe0-a796-0d6299017820"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf406286-0bca-4138-9270-b4f3ca9343f8",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90d754a8-3369-443e-bce4-563c033c1462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4589d178-c3b5-4019-b5fc-5b94f5ea4bd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e11ab0e6-6e42-4af0-8e16-bdb4c11cd07f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "aeee3913-5faf-4520-bba6-345952d5b286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e6312ed-fb56-47cc-a5c8-893d6d482cf8",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4215f067-f12c-47de-bdaa-50c1c8a1928a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "494ab37a-a4a3-4db0-bfb5-e992dd47db0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8847d501-1745-4f60-b161-8e9da3ce6282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "933bfe1b-38a2-43a9-8e8f-c93391c1c07f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa88c66-4e56-4ba8-9943-1c623a07d4b8",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69324b26-c482-4fda-b32d-9f0ccce0ed32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f84525a-321c-441a-9213-fbd93859495c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfe33e1f-dc1d-41cf-8e20-b1b583dd6eff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d787e2be-1e47-4835-8614-0278d871a576"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a68090c3-d462-4c62-9fd9-d9ecf14272a2",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e53bafd8-8b1b-46c2-884e-0d015d773de1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "866668ad-e828-49fd-8ef3-ddd19e9e9ff4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21784ffd-4686-44fa-a13a-888959b44c3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "d1271bcd-4297-4cbc-8cb2-f37074b1d0d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "569a9321-2cdd-4a0d-8057-c2484a7a3a3e",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e7fce60-238f-4fa9-b399-083f0e9e3fa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e48b4e3-6031-4b85-8c6f-91b333f54219"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "378b0c16-23e2-4e7d-9b6e-50e9e7c121f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f2946652-639c-47f5-9286-ee0d76f8b5ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "809260be-a12c-486b-91bb-ffdfb1cb3616",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9705027-7072-49aa-909d-52e2274ca00e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "422c7dc0-5dd0-4a27-9223-fc2c82762ad6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56f4d732-2a68-4841-b84f-52f0649839a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "18877580-9c9a-4caf-bc77-523610e636c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b0be78d-745e-486a-a1f2-f71bd262d584",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "114a692a-cab6-4006-9525-ee50d1634885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8864b8ce-1e75-48c0-99b8-6550a2c060a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a17e4be5-23da-4499-95e6-7b5183e4fb58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "764505a0-5def-4f18-b219-3ff8ad95bf9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c58d3a05-ad0c-41be-a89e-1e756be40b75",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b08ee308-d0f3-4c17-91d8-e283a0989a04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0168aab7-6126-42ae-b3cf-156c3ae6f9fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b8c799e-9895-42a5-a809-33f8f1875a8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9307fb0-eb5a-48cc-85b8-20df2d681e92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd0d585e-7c13-4723-8053-e12feea10e59",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51baffab-5524-4800-a7f8-550fca71f8f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86cdd1f4-2a73-4d64-8bf3-8cc6194a0788"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2bdd521-8dcf-4b5d-8368-ae20c0530d5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "a69d721e-ae27-4219-87ee-633100131819"
                        }
                      }
                    ]
                  },
                  {
                    "id": "402b9b96-39b7-4e07-8c28-affdb5092931",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a143e3a-6514-4994-9752-eb59903f9a2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f23f6d8-ce8f-4e3b-9a87-b8ed8147020b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a11f14ec-2c18-4bcc-9f37-21eaf8f056f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "c58e3723-bb0b-4ad5-8413-22fbb47bf8b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "780a1327-da10-4d2a-9a17-d42b065b263c",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c69db63-6f34-4a63-95aa-5a8f20871ec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3307f28-d3c5-452f-83e8-a430359d2505"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9631bf6-6979-4ae8-84f7-5de8992fa22f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d362126-b4a1-44d1-8cca-479d6905d1d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d71b8768-0cfb-490c-abb9-d3d416d759f6",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc3f62d3-4ddc-438a-a3d3-e513efabe4db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "581c6f1a-c38c-48ca-b1b5-4f1eea615e00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9944e8f3-bb76-45d5-9aff-cd7b24f25a84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9b261c1-1407-4c72-b8da-8342831493fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23c01bef-7dab-425d-821e-ca7cd9290896",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cf2be51-e125-4572-8c84-dc3f7fff712c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cbab27e-6eb5-4cfb-8e59-b7259dc1a579"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "640558c3-a68a-41f4-a45c-b30abcb57690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07b36f60-7aef-40fe-b4b5-11fb5589ad61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d7c2279-de3a-4460-9fba-900befdc2eff",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eb8a307-e4a5-4e08-a109-601e132fc9a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e9f7318-0dae-4936-9a9c-aa4180083bb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42d41dae-2bbb-4c1c-b6d2-3732d134bd4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6135aef4-2eb8-4827-8e3b-6e1db2f8198f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec10437d-9334-44df-b5a5-0f3d4ab8a740",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a49e145-6b38-41b5-bd6f-48af7c79a6de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bdf92ef-b0b6-43d8-b4c2-897b21671307"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d331fdc0-27d8-4f9a-ac1d-b35049d66d69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "796a4987-58d7-4a4e-b88c-4a8847c97cad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8ea099d-b40b-46ba-80a7-4b51a59d5738",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b795c70-b5b0-4480-bfd0-261be0efb254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35e78f59-84de-43b6-af69-ff0b3832e22a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24aa3798-005f-4b1f-80dd-d4c193312c6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f346a0f5-d144-41d8-bff2-e2bc72e568bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef5a944e-2cc3-4235-8a8c-d2c4b49be88b",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "828deb00-f170-4552-8b77-d790c6cc0c95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e277a6e-67dc-45e5-b782-83cb82101b22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "822e3bec-0708-4af3-a906-b5a083b48688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "76fc7111-0e88-4e08-b2f9-ed2c680a4434"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed78e0b7-b3d8-4e74-86c6-7d68857ab098",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "626da3ec-2711-4b97-8605-c50f1f818ff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ea5db66-d0b4-427c-8e89-a06421046961"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1331e5c5-608c-47d2-9153-a04b4cf01fe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0335626-ca21-4e24-9b43-a22fe37dee5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fbf5089-674f-4e8a-a9e6-923b7f287302",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcd16b33-d53b-4274-87da-61de3dd57766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25db6adc-bce7-40b8-8b08-f90c626226aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed1a1de5-19af-4ad6-87c1-0122a1ea399f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1de102ed-0f97-4a6b-bd84-2d30283b4ae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffa313d3-11e9-412b-bfc2-1261a03fbd0e",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94929bfc-c191-4191-94e8-32bb8c7dd4bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f9a9b04-3923-43f7-bcd0-7e9f50706542"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "427dd26a-56be-4f08-bf15-273f4f7f95a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf97d9fd-d5ea-491f-9541-94a80e4c6686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ecc3349-9976-4d00-9db0-0380bd8e3b53",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf935fc4-2d91-4171-a0ce-667f3b496bab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8443b00c-cbf4-4e73-8864-22a0879fd079"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16c7d845-9ecd-4db9-b5a7-4ee747eb710f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8d48741-a0f3-430b-bf17-ccaeec38da64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e32f2d0d-b6ca-4e56-a197-1d795f3bac56",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b06ef42-6d4e-4256-95bd-1f4c091b2929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "688f094b-8217-428d-b9a9-31dbcb7bc416"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deb3bbdb-afec-48b3-a080-5103b8f1bd8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "62286409-e016-4766-aeb1-b8d207042075"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06ab4899-5853-4933-898a-bb7e4e73b1de",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "109378f2-4b51-41d4-a456-c47e844b58d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f93b081-1bfe-41ee-8589-a8b4b21d2399"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e38233f1-eadb-40d2-b378-752df4d085b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a57a00c-5b4f-4710-9a2a-a1ade22563c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45ba607d-7d52-4bbe-845f-1f8365463db2",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85254b09-68d6-4bb1-a5ea-007088fe23f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e67cc9f-739e-4ab2-86dd-e3aad5a16576"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8e47321-3359-4e7a-b2c0-2f8ad7f22b41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d14ccaae-3e59-497d-849b-8b66e64a3ae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db52af2e-212f-47d8-9373-18ef14f1cd88",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cacf11a-78e0-4452-b93b-9d330f2deb0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faba16b5-b2df-496d-9831-33cd8bbe6f54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf81464e-918d-4898-8c05-f8f3bae7978f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "33d0b08e-9a17-4884-b5e7-04553aef484a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3f889ca7-58e3-4877-88de-6bb73e2028b5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ffc6ac2f-7fd4-4fcb-9612-555e8a10d1d3",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe163232-c7e6-48c8-a51d-ae80b928250d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "12ce0761-3076-4931-89fd-024d3652fe3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a861dcc-7379-4ca8-8d68-d8ecb884067e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8b5d02a1-f28a-40db-87f2-22543e323e5b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2f80776a-9fdd-467e-a7e3-18842ce59650",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "745f4b3f-054c-47d7-b9e0-20078e541179"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7ca304ba-5e27-44b5-bf35-5481315167b3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6a39a919-753d-4136-ab64-e4fd78120f8c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5300b503-91b4-4d01-9753-fd98f4cf336a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "34f45cfd-6ee9-4f82-a5c9-62b3fcda8be4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "219522aa-e685-4a76-a107-79302515e8ee",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9a2f1447-8bdb-400f-bdf5-45835658ff73"
            }
          }
        ]
      },
      {
        "id": "682a1e02-48bd-4488-8d16-b399587d9e2f",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "7df2a49a-e026-487b-97e1-7d1b350f4ea1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "87ee2cc0-e6be-44de-98c2-f94cbef2bb28",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "05c850ae-e082-49b5-b2d9-1ff4c09871ac",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b82298fa-6335-4f3f-b574-7e9025406252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a134be75-aaa5-4286-85cc-1be8e81e7d6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fc751b2-d95e-4693-bacb-4e926c1c25c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "7442f499-11dd-4e29-8371-75d8d4f7c9cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80fb6f36-a37a-47bf-9259-593923fe39b0",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef10da5d-600e-4cde-9cb5-a62d19f9f28a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48172d3c-c53b-4c48-ba0c-26440daf430a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bc5d06e-5edc-491d-9409-eb01457de46b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fa070ec-fea8-4eb6-b149-da16b38dc704"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e448e9e-10a3-4e3a-b145-64f46577a5d2",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3218ddb9-3054-4fd2-894b-586aaedae8d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bd219a2-ca53-4caf-90aa-a88cdff37d2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9562b6f8-3330-4666-9776-1f6b6fc23ac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "920a0413-270b-4555-9285-e224ef5f352f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e175dede-7ff9-401d-93a1-dfb915192756",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae9eb35d-5aeb-42d2-a148-72de29cac1d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c35298c-5d6b-4bee-ac01-74ccd244b6bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f2066f4-02c1-42b8-b089-de98af581056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5ed26a3-dffd-4e4a-8d58-f73bcaccf0f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22e70428-2910-474f-91b2-b4d1a8e71d97",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc4caec0-eb85-4b08-96a2-7f7cebe1b546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83fabf28-96e6-4684-a2aa-dac3761f1251"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbb16e60-0106-4458-8db8-cf31711ea2c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bba34546-aa66-41b3-b0ec-280755ab7abf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63809b59-4e08-42eb-bdd5-06466d34f50c",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "688cf197-f5da-40fb-8a87-c70db5bf0d41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f4555e2-f72e-4e0d-a214-c534b6877791"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7bfb3b0-5cef-4e5d-badc-f0bdb6611221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5de34a9c-40e5-4459-b529-3f2b54061d46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54f6d9f6-6662-4da8-b206-4e1b085a5f10",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fafc2ffe-d387-4e8d-9818-5a8d1f0c2235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2a7f8aa-4e9d-4fba-84fa-e04751c53bf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5ab409f-f21c-43af-9bb2-47e14651c005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "0de47346-f5e0-4862-acfb-4a53ef8e9197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e7512fb-602c-422d-abca-9c2399d27bf7",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a9fba38-abf4-4459-a540-d29e0efa9bcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9afd1212-890a-4b70-b04b-84395dfabe55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6e420e4-38d7-40ac-80cb-ee070989d5fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b083fe3e-71c6-4a7a-a1b9-ad1cbabd52ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5975ea9-ceeb-4317-bedf-ff7391286f10",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f99c23f3-fb1d-4b4b-907a-12f0b5e4a608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32d58df8-dfde-41f8-a892-af1f2ea109bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "374cd434-3583-4885-82c4-f53930815c71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a347e228-53ac-457f-b3d6-dafd47127f62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6ff2879-8534-46e2-ab90-b7c455e8666d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a8db3a4-3780-4d39-96cb-632e5d2dc15d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f7835c9-6d84-427f-938b-70f68d2b8989"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ce107e2-9c40-450c-9e5b-698271cb8e5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "04644533-6aea-45f8-b8b2-e8a481a199c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "045b6cca-088d-47fa-aff7-de88701e6c21",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6361d78c-99df-4908-bda5-1d4786a1af82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5092dc35-5130-40f2-9d49-5b15c3e4eea2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72f9af83-79e0-4ea2-aa1f-66f4dca07a16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "28cd1a56-8b40-44b7-ab29-1bb0a053e395"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0667a00-6289-42c3-9b07-ecb4cb88fdd2",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57b814e5-82bb-46dc-a337-dd13c87db149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30303b58-f125-4952-ac59-a8522a617839"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "949e43d9-745e-4118-9947-c7e9e728a5dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3927d47a-6779-4f75-b281-f3760f703c63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "374fcb64-77b2-4874-bffb-6788a00d58c8",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60fcd3ce-0798-46b9-8c4f-ddcb0d9d051c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94f699dc-b9af-431d-b866-31797090e789"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a45b4a2-1448-4611-9086-4d350133759a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "67326d1c-b315-410d-8864-a97ccb335cf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8c930bd-41f8-4ce5-8481-86e923e56bcd",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccee44bf-3229-466f-8b03-dbe495f1fb9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef33e32c-b9a3-45b0-a4fc-2842fd80658f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0770d21-a115-427a-a7ed-cfd3bcf2b76a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b489b7d-3b8c-417a-b9a3-877bdc046741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "001b1259-3bb4-4122-82e9-f0365671470f",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db226744-6ee0-4238-bb1b-a24e30fd5f3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39016309-1a84-4fff-900c-29919244ae69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7b25783-dfe7-4b12-9dae-84dc845ac383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7d41c41-3748-4c1a-bb39-cd04bfc182a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ca6069-bef1-47fa-b150-4c4ace24534d",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e36cc302-5a3f-4cd7-97c0-d5fed704f07e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1485450-ec42-40e3-a68e-d09a0dcad8d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26a45c49-1fe8-406a-a412-b67e16a6f087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "8eb554df-4487-43c1-863a-9654bbab2f5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cf05154-f043-45f3-900c-87ce4395cdeb",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf867add-dff3-422c-b7ce-cdcab4587388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "333e7bf7-a01c-4f67-86ac-02a0af0dd0d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb662942-ee52-4c95-addd-7407fd178075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "d874438e-6660-433e-b2f2-eb842c61c880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "903a6de0-d8f1-4143-9789-afceb6457b13",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21f6420e-518f-43f3-8092-ba4a939b7a97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daab3a56-d7b3-448e-9be9-d79a9f44e050"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "014ce9ce-d7ee-49f1-960d-ded614c0a780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3984d40d-3adb-4b50-b57d-b8c406d2157c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95b7fabf-44a6-4e89-beeb-ef941b61bde7",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7d48ec7-d5cb-4413-9246-cfb67ba4060e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67b8aae4-6080-4370-ade7-bd4cf0f65961"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81dcff2a-a38e-41d1-9188-8f760043141f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eed24630-de76-4ca0-b868-217840385fbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4557974-c320-4ed0-89c6-827961b77cfe",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7c0fc53-fb11-4a9d-9647-ab8fd8bd8bde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40afee38-f377-4878-a355-72d67476641d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d320d89e-d5d3-4b58-9de2-4879c15e0e94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "553c91d9-cce6-4817-a256-65647327da99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84b9faf0-074a-4e63-acbf-e9bc807b3eb8",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddd2944a-361a-4cfe-8e8d-f9cec9d6fba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5f18737-e166-4b14-99b2-7a7630e1aa28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd23ff27-9e47-4b5a-b39d-aba6c12b4407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "648282aa-bd90-44a5-9c03-f34c3b2a63d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3687d7dc-e442-4a2d-ac7a-6f7d93cb7b2f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71e864a3-b562-4d72-af48-8e4f1047c758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67fce9b1-40f6-4378-9063-f43cc74c1fc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e36a0edd-2d0c-423c-9560-d7633f630203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "15764c5e-96c7-44d3-bed7-1458cbc8f419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76c5599e-167b-4321-85cd-4572e3bb030c",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62925c35-dd71-41db-8efc-4ce214302ebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c762c4f-b8de-4196-8115-a724192bb838"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d40d73ea-ffe5-4ee8-9587-f5498110b333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "05863250-4d1e-4b8a-9d4d-2761f08fb5de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da78f4f4-1aaa-4582-a955-80da80dc5849",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5216601-c430-41e7-8072-96149df2aa91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98abbce3-ca01-4982-844d-9dd05c5bf793"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5f31500-f6fe-4856-b471-2c448c7098a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5dcbba69-ecd0-480a-9172-681d5490071a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79979b6f-1ce3-44a7-a92e-986e341e7c82",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c037fddf-e9d2-439b-9c52-3918b5b8c0fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0f0bac5-4fa2-4d2d-a6a2-52ac4aba37ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8b46b74-fbd2-48a4-9abb-115d86681f13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c1bbe3c-9f4a-4c71-b767-8ef637657589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a570f72-fe8d-41eb-8ec4-9989ef730407",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "183bea11-e46c-463d-bb4b-bc9b21ee96ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5109db2f-ac04-4e3e-9ac4-4b803e3eea3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92dae84e-73fe-42ab-8664-8edc0a6650e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "305c7461-34bb-41d7-bd7d-ed1b9dc93336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0d95209-4704-4b19-ad4f-3f16a513b951",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88167061-0f0a-409b-8684-64ef15a9b8da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec1b0f81-d396-4fae-bf7f-6b8353256ce3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fe68380-d589-44e0-9f05-f0753afb6e11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5cbcf404-0651-4666-8969-87673b288259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8c6a022-c27d-48c6-b833-7cab11072571",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85525be9-597a-48aa-9b56-ddc4508c5886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1e7e2af-671f-426e-98d1-91b403965af7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b956b43e-5e46-42a2-aee8-43fac7eccca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "033425f5-67a4-4f0a-90a4-b9ee06c1414a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21658c6e-b1c5-4fef-aa16-ed323faa741d",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b76ffc3-7923-48ef-8188-9358922a3caa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62ab5b01-5682-4803-ad5f-2dfbcc938bbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a78b0967-6488-44f5-b1a7-57fea1d46975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "64aee766-3556-452a-8c38-9bf78a2e02a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e613e2fc-4d0c-4589-870d-e47847f50ebc",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76a74a65-dc1b-47f9-aab6-7a3a101c7ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc640f1a-2580-4f63-a2bd-065dc37e0150"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84e12968-90de-42dd-ac6c-29b2436e8514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e90f5494-5718-4ada-b3cb-bae8c72823f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "554f73bb-7517-46fd-87f5-e79ef9c3058f",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d16031c8-c8af-42ae-ae20-ea1ea55f95ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "445e1b49-e86a-492e-b331-0b60e64cffe1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e75c284a-a7ac-4b18-8c04-e3dc600a0d8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "39b38107-756b-42bd-ae11-df16a39b4743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c30003a-2a4a-434d-b1f0-63fe21ad575b",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08539385-92a9-4c73-bf16-eb3a351ac496",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "043457f0-f5ff-4f76-a2b6-eb3c915bc960"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "506347a5-c542-4931-971e-faa3109c88d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "acda5b15-4c85-4857-85f4-88129c2a7dcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d91fa33-7e4c-4aac-8d27-7d34c4bf6611",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dcb3f9b-9fb6-45cc-bd2a-741d531bbc85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cadaf226-5479-4567-a85a-5ddb03bce7be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee65a42e-8999-4389-9aa7-22892ba1de7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a03db3e1-2f72-4d23-9364-a53f72e3b9b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f2ea5e1-8d51-4f39-8b07-1ae508c9f30d",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c7d03a2-c283-48ce-ae61-285e3cc136b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00b23304-10a5-4565-ab1d-86130db2c4c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "073699c3-e572-4a36-adcf-e3ed0cdc7a24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc7ee386-83f2-4129-af45-66af088e406f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b1472e1-9199-4519-8ec1-22be0718f887",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5df9db5-f97e-4cd1-b015-58eadb789022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1e07487-60af-4d8f-a47c-656bdf85ffa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbe0b882-4cfa-46e7-aedc-f8df202743a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b5f8409-e3a3-4b01-adb4-0f36a4a460e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d44e0dd7-58de-4394-8997-1c151b629c99",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c24a8c7-0db8-445b-ad6b-420dae1e6108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91c20336-60ce-4a41-8312-86782b7c8584"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b74a05b0-1fa7-4f82-a57e-e90903c6b19e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "396134e1-f3f6-4316-8e10-3346ba54f200"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf5fd546-2797-4c8d-8665-3e0a461ab3f5",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23c248c1-2ab3-4174-8345-24da39fa617a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3be929f1-0e6b-4ebe-b2c6-72d6fd040f1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60e1509b-e8c6-4fa4-bd0d-d84b95890d5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e199f77-c532-4409-8643-97ff89377583"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "be2dd388-2b7c-44de-84ff-fe090d1ccb66",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "edbf1a54-614a-4e83-8d20-c2aee9798afe",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b21741d4-5b4f-40b8-8624-d16d9f4b3fc2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "4f4c5b43-5e73-461b-b378-449f69eb8c8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a676b74e-6972-45d1-afef-12030d74b343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0c46a18a-709e-48fb-afec-a86cff6bad54"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a1ccd93b-5ef4-4bd7-b249-42a997ce4a6f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "38f48b95-9ed2-4953-8880-42c207643d0b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b050e42f-d4f3-443a-a649-423af959e41a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ef769827-8b0c-4111-b418-0cc4f5322691"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c19e299b-ed27-4c04-a57f-4af26022c23f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3105a4e5-348b-48e5-a01e-f2cbcbcb8416"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c669f952-96d2-4e35-93a7-318707c3275d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "454a33d0-84db-4cfe-80e3-a10c6c0c2ce0"
            }
          }
        ]
      },
      {
        "id": "3e2bf9ff-cb49-4ead-80be-dccdc89bbe0a",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "279f7771-9759-447f-b76c-67dd4d881ed0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "07e55537-9ada-41e0-af33-5aae11a80e32",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6747a24c-df7c-49d4-a556-711085065ebd",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42451dfe-d9a6-4dbe-9953-9a876af4ab76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8199ce35-5780-43c9-b402-42abd69de093"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ebee4c6-1e7e-40e6-acfb-564100616b5f",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c7e8f53-9d0b-48e5-adc0-e5dd9eb10319",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "becdd762-09b4-42a0-b74e-99bb6fe1515d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "481a8dfa-aa99-44cb-afd4-5677a130c510",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "719b1010-2c93-4e64-ab53-bafb3c5244e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdffc912-e765-461d-9f50-e828b98465de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea17d399-eada-4173-8252-ba284135207d",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e58286dc-0937-4f58-bbb8-ea51f4f21b8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48367e01-1e16-48f8-b319-892d6ca58a19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96f6e641-9521-4275-9de4-97f3275c61b0",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f92eddae-83ec-40a2-afe0-bd415119ee54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1741f119-70d3-4418-8e7d-915c1c9b4936"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2755fdae-c8a6-44ea-b7be-d15064e2afbb",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b10cdd5-7812-4522-9f95-263b9542a809",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76222b05-e273-4403-aec9-13b8202f3477"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba882e2a-09b2-472d-88ed-c001f2ecf54e",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a7f62ed-1e0c-4d1a-ae8a-3b352cd009cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9f4f4ae-c7ad-4d9c-8a4c-025eed0401a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f5a8805-ca61-4c17-9f9c-4f60e1f8b44c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df3e3e6d-3f3b-491b-b70d-9b78c994cd39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f35131b-f66c-45e6-a31a-9f3cb86374ef",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb68a51c-2a34-4f6c-a628-5df1edcc63ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "068fb672-7b9f-47d8-a184-c9690df66164"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa8bb2a0-8b59-4352-bd4d-7db765e5c3a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb4cfa6f-3841-49c4-85bf-83e2c30093cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cf389d7-43af-4630-8edb-e9d4883d2c00",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1a6bd7d-26f8-4493-aee5-d5fb98980193",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "950cad75-fe32-4390-809a-4d1addb00f91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0208e195-0bd8-4a04-831c-83150526ce70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4525401a-3c82-4912-8136-be4c004910ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63288594-af58-45c4-91d9-0d81bbae9ab7",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e569064-d3e4-49af-b65d-dacc55657a9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92f09060-019c-45b9-a0a2-4ce9106794e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1de23094-70dc-490b-b31b-286a0b24440a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a56c2c61-722b-482e-838e-f5842ee16d37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05cbdc18-a081-46d8-a0b8-62cf2e62e8e7",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebeb0728-97cb-4cb3-9bf8-fe6d729a734b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1946e913-6317-4d7c-a481-d605683fefb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d015115b-e161-4949-a9be-02296e95fa07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7b0cc2e-ae6b-42dc-87d9-8dca5c8efb6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2103b586-e51e-4891-8ded-8ab4fcf389e6",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df789651-4bcd-4542-9ef1-053598c28655",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b714f51-7ca0-41fe-b9a1-7f8290c5b64c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bd50491-394a-4bf7-974d-ccb21c5fa09e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2fae0a7-2b99-47dd-8623-b2174a13dde7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe5db88a-61c9-4e1c-af53-80806adcd441",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7403848-22ad-4b6e-bd57-5f4a0a60174f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "368b31c5-a867-4ba1-a570-b5d1162c89e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "922c0146-2b96-4d55-9be7-3616466eee95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a847b2a-59c2-468e-bf97-aa9fb592da02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3b4218a-a99f-462a-83da-3864b6beb326",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a51ee5c-a1d3-4cba-918c-d253f0248ba2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe99614d-71b2-4a19-ac9f-908b72631f0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf1a61c4-d012-4768-b2ba-fa544b4b1172",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b91092b-414a-4cd1-a7b4-fbb65eda4afd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48da51f5-4ad1-44cb-8624-ec02bd0d2c02",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4284e058-cacd-45d0-abea-8975d3453c83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c541aab8-6f4e-4372-b3eb-150253285da7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f879d893-30c7-450b-936b-74da63445e09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b98fc0b9-7959-4172-913a-8466a7d27792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "018cf886-1130-437b-83a4-c4163393aafd",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbed19a5-69ad-4ef4-bf99-c19a2df9ad8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4dbe541-ad63-4806-867f-748f1b3fb880"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06a3bdf4-c981-48cd-bf1e-0b3e6e8aa6c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "833d2f60-84c0-47b9-8a22-f4c15e3f2e2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "333ae823-fa92-4e97-93cd-d6cf5ff94e3b",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5d8467f-9acf-46a8-946a-cbea46e42cc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2084a7e2-760e-4f42-aa29-f021c562428a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d75493e6-b861-481c-ba0e-d9b964ac4d6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54b30219-6019-4a30-9cd0-4b6002b6c11a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4183dace-c259-46a3-a674-600f634c6d49",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7482f926-107b-4df3-97ed-659ee8465fcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce646524-d7ef-41ba-93f3-695ebf627207"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbf169a8-77eb-4ff4-bc09-a72b3f132e7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf9fba4f-61f3-4ae1-8454-9945f495fd6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f01cb4b6-254a-4a3d-adf9-cc7e9ba84d6e",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bac2e238-e116-434b-be2c-fcda85424a74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5246bcd-abeb-43e9-bcd6-7783a7a9dae3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4b0fb0d-ba35-4464-a0ec-1bf6e22f7970",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29dd2669-791b-4a45-99b5-f9e55e81d892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d373cbf8-4340-4760-a0bb-e4230daa30f9",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "782556ef-fe2f-4eb7-a9d5-09c7976e7f6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6094cc05-a444-4925-a6e0-24817da39f9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3d45cc5-e6b3-4d32-8f6d-c807ace72d02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a37da0f9-b755-4eba-af8a-c9e4a3162b8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3bb2f92-476c-49b1-b746-512f118fbf3d",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a847ded4-3acb-4572-be12-9c851ab5df6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9949309c-ff1b-4a8b-96e6-fb569bd7ef9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf661b64-5145-49a0-a2e1-a97735197202",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11f223b2-9b9b-411c-b291-64b67416be78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26d6637a-c209-49d7-a513-a5465991c937",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "558730fa-4a8a-44be-b8ed-12f2eaba5ec1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe73e247-e661-4cb4-8b57-5338e18563f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "581502c4-b3ec-4242-adda-6c1f92153b5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9df1862-5d5b-434a-b12c-5f6c27a04208"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c89989fd-edf6-4b2b-9553-553e84328621",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef9f43ea-791c-4e17-8741-d1711cd97607",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f579c75a-776a-4b00-a070-737891db96d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c80a0011-4fa2-4538-a1bf-f851b6283051",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7e4eb9c-04ac-42e7-bda3-59c965a42dad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1028775-fb78-4f0d-9ab2-50be69f4f2fc",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b60d2c1b-a2f0-4117-b33d-ca8ec7a86840",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40646184-9f88-446c-8abd-4cf785abc23e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "023c9200-36b7-49de-9f0f-707792b90e9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d2c3c3c-8eab-4b71-b050-e1f461ddb2af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf328410-deec-4a3e-93d2-7fa8dc4dbcb8",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70c39548-13a6-4b07-b8d4-a15de18f32ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fc4e8fd-b569-40bb-a4ee-ae2543a75862"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7608141-f694-4cb8-bdf3-a10cc06857c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a054240d-c3ff-4d36-ac0a-480fc723a8ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d652c89-b604-445e-ac4d-ea2c7b69ad01",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3fbd38c-4dda-4eb3-803a-bd974d4216fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "548cc718-b410-47ac-8e59-866ad826f48f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "149c70cb-f7e4-4ef3-88ef-5fe5343a0c52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89f4b479-f393-4711-8d7a-9f51916521e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3da15cef-bd0c-4318-bab7-69368c4308db",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a6453dd-5bf8-442f-a0ec-5ad77b7082df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7c6cc6b-de56-41a4-bab7-064750e18e11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f585dc67-5f57-43ff-b9aa-0abb09f8ce50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2cbe85a-b304-4708-b8c5-145678c3b956"
                        }
                      }
                    ]
                  },
                  {
                    "id": "074fcf59-dd11-4d61-bcce-19d4fac2f444",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc5b54a7-a2bc-42d8-83a6-1a10e345570a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6af62cda-503a-4297-b38d-8302fc021782"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e36c211a-b599-472e-abda-befc4eb9c039",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22658bd4-cd21-48cb-a724-a439be3d2991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e39da75f-ee54-41b6-8f5a-15a6db05dc33",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc1f745f-b0a2-4edd-9735-1ed1d2bdde5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "409e55ea-8294-4ff1-8893-634cc2c2f50c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0940c358-6490-4feb-8efb-ec647e2702be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "359970c8-ec5b-4828-850b-fdd27068b491"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beb132f9-f5ac-403e-8c48-9b987f46953b",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "411d32af-5e2e-4a0a-924c-dc746188cb1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a2777f4-8fb3-4ff7-8400-e0dd3804927d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c44fb852-331a-454a-876d-fb3ae409eb24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f063e6c7-dc33-4b4c-84db-fc75149d690d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "943974d9-bf65-4c98-a6ef-9fe3b5a1b321",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb9f9e04-6cd2-4952-8ced-60cb03285ad6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4980c002-89d4-475f-91ab-2087df752240"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34ad9ac7-79b5-4af9-9b37-e596b8139046",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c007eb5-6dbf-4fef-8678-03632c532942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f58b736-a04c-49c4-b880-7f39434e12dd",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daefb91a-6ba2-4e80-91a0-2d5bf0e81647",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3bd12896-8374-4791-a207-5373278c01d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47553bf1-efec-4dbc-a91b-b6335fb68265",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bd4737a-cf25-489e-bb27-1a421a297007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6d45c47-c86a-4b5f-ba0e-baebc2aa40b1",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ba7bd0e-3922-4913-9b97-fc58e39fb212",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "391571d4-26ef-47db-8002-572650403d65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1438e131-53cd-4590-b892-ff4a9cb2d0d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf363733-8c87-4fe4-8d99-69bb4d812305"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98fc98eb-cd62-41db-9bea-a9f51d6bbc85",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccd0447e-791d-45ac-8f7a-87938be79c56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5dd6a4cf-c820-441c-aa1a-3514b3db508b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74d6b402-6d73-4977-9822-4aed7f212b1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "429105d4-f6ef-45a7-bd56-63e432c8f46b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88a65a3b-06cc-4a20-8920-32b841a1b669",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb133b8a-6118-4820-91a4-350bdf7d5eff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a74c500-b84d-4e4d-890d-1b4c307361fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c89cfce3-5ce2-4b22-bc86-a9bb3c65c85a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcfcc294-9d92-4948-a5dd-7ce1dbeac39e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fe6d7e3-76ad-473a-ae95-e89fff23d3da",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3846a88-10da-4409-bc29-d6a6c815fad0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1816a7e1-007b-44db-92fe-9391e21db350"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3530ac5a-55f1-44b9-8435-87bd2c136f4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1de52abe-e5d0-42ce-b55a-32c222999b27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea1e71a6-1e0b-4144-80ba-3de240a57e27",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbe04555-f537-4506-87af-38c913f2430c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1b05dda-f0af-40bf-a19d-63abb7bcc1de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ead2fb7-493d-4c81-842a-365a3bfc8027",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4cf2a85-0043-403c-af04-32dca6b3ada5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82a82f77-d8f5-4e7b-93c8-9b6c42cd019a",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7872a821-78a2-4328-a636-2be4e5091602",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5d16fb7-0f2c-4364-9a4f-e6f2db11ee0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8522ecfe-1bd8-45e6-8ab6-feb8e4d0da53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c42261fb-5f7d-4fb6-8bc1-8b2bdbba98bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e42ba94a-e74d-4d09-94d9-4fc723d133db",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "734e0b0f-61c3-4914-b55b-0c1ec9d88279",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2253021-cfb7-4054-a74a-d7d190acf4e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75171245-64a2-468f-b6bf-be01eab2ef1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05a07a02-68f8-49ba-8928-149ebe0367c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "406b2958-3eab-428e-8b53-2d91b57ae776",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1023689-f421-429d-b25b-21aca33500f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1eb4a86b-ce7b-4070-9539-c236e9f179ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41aabce3-075c-4a1b-907d-be322f7e11b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89c4d55f-32ea-43c8-b72e-48f7a2d156d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daa377ec-86ec-4db2-a45e-5d88c9eff5cb",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9a5eff4-7e7e-440b-b590-5b1201c8a65a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0349bad6-57c1-4255-a2d6-6f1680a24044"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d96a967-c42d-4983-ae02-f407f5b3d032",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5896b467-0dcf-4db6-9453-5413d98e0fe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d51da91d-ebed-4ed2-92c2-8ee7269bdb9c",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e7219f7-d992-4db9-ae61-bf1b6a48a7ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93cb351a-b1d0-4885-8aa1-8cf10136e26f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dbf19d3-399b-4600-a96e-df249e7a548c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32bb9ccb-1367-436c-8354-3099e7bb120f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d546be0-3c47-4785-9d61-d43eca809b30",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "455814af-d239-4a6f-973b-58207e6c7a0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6e89776-1160-4f0f-a5e6-125e79897a40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c157aa5-e1ad-4019-b263-6bec6d04fabc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e4389ac-413a-49f3-bbef-3ed99903da42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1fda4c7-d632-462a-abdf-ef1730add386",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "889c12ff-3c00-4901-b7aa-41ea4605d504",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01a80994-c204-446f-83b2-ca24799b1d70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "434ef9bf-6ed0-4b13-877d-ae2a7fbfd206",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b462a7ed-fef5-4fef-b35f-6235125d68d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7b06c69-207c-467c-975d-7a73dad28dd8",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df9ff60f-41f4-4da3-a618-d2e323f6eab3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0c3bfeb-7b4b-4173-a144-bbdf3a2535a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66824719-ed1a-407d-bcf9-3e388aca6cd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b300d6f-7600-4e3f-b3b9-6371e2af9dd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d1430a0-791c-4d59-b03f-a7e4a5bc3381",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab1a71eb-2afb-4477-a8e4-a659b122c500",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96e3caf7-2c58-452e-88dc-6bd98ddd0d2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de8c8782-d324-492b-83d9-20f5659d6cdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c96e025-0a75-441e-931e-8c5652a73b50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "249c6081-ad4f-450d-8a97-4b2371451d71",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8144705-fd42-4c4a-8af5-056f3031429e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cdc86e2-fecc-40c4-94fd-7419215c6991"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cda85e6-1c0b-4684-9a70-18da9fc10bde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea191a26-fb11-46b5-8c95-4aac3110fc21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36a6d6d4-d3af-4d3f-bb2b-6eda76f2cbc4",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cf2ebcd-dd6a-469a-8d30-999b2ed886af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25b42e93-0080-43b0-9eb5-e2b4efef3ace"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f97d91e0-a086-4037-895b-18c04d42c763",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c39f9252-1e71-4902-aebf-f96368d0d26a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cd34bfa-4c23-43c0-b351-f45fa6923ef9",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f16a59d6-c0df-4643-9ec8-c01412b148cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b19d8fb3-b824-480c-9001-0cdad53fecaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "888a5c0b-fdec-49de-8033-97c52a11275f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1749a27-4c98-4358-8120-3ab98f60db1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71356cee-645d-4f1c-8413-3721916fb7dc",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "879579fb-7dfe-47d9-a0e7-3a2834a6b0b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f03fd3e-f4a5-4dee-ab28-fa19676c7a1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "363f4f05-5f4e-481f-a1c9-e23db9d70d23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89829939-cd58-4a98-8b56-592290e19bad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "155ea10a-324f-4f43-a938-3cbf0e77c950",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7b32292-f932-4140-9198-67a534863328",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d55e4a1-f78e-4656-a7dd-3e81e8bb74f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00dbc918-6161-4e80-900e-d832aff0c04d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d4331f5-c13c-4d35-b4a6-071b7511ad28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d2ebc47-e4f2-46fd-94b2-2713a5039713",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74502d3b-294b-4384-89a8-215c6cb3b7fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e231df4-5779-447a-91bb-7d32dce2a1c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "389115b8-6718-4c1a-9ce3-76631d29066d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07716d9d-743e-43b0-8efc-027d0e7520ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4b5f940-ec83-43bc-929c-6be23d22d43b",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f769d94-46e8-48bb-87cf-cbd8ef003d73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57717e4c-ce8b-4e5a-975e-b8c1699d6b07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "508b28a4-d6b4-4199-b8e6-1a77c3df56e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14fe3c4f-50d1-428b-a5d1-9d151da76c2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "794740a7-4c60-4322-92c1-402a45cb2b1b",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11721d59-57aa-49f8-ab5a-81ea81293fce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a09637f8-4483-483d-809a-9c5bd7fbf003"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fe1437c-8e04-4fe4-b539-efa757743941",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92e7a4fd-c091-4092-9c1a-eed4f0233f4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7c88bb5-8309-4e83-8fcb-76fbc260e9a4",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a0c1e78-b9ab-4de1-87f8-8dcea8d91d93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5811d11-e3c7-4cb7-b2cc-5793794482e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b17c97d-f6e3-425f-a373-d9e59b9c9c38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d60e4f2-b427-4697-8967-ed7768204a67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cdc2d56-ed1a-41a5-82f5-01e771ccf03b",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f7bca92-6e88-4a5f-a01e-675fe7ea04f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a35badc-637d-4acb-bf74-186d856ff5c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e785339-29dc-4494-9311-b2d84170f47f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78a809bb-86e8-488f-abbf-9c036b94537e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58c24111-6d8d-4e7d-a2af-685319a6333c",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aa02ef8-29af-4241-8fcd-f315214278b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3f2afa6-dbca-44ea-9250-7d8f5f0dc9cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0df4b51e-5e3b-4c35-9ffe-e3d40d6f801a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2126ff73-62ac-418d-8543-85345cd5956c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e353ec8b-009b-456b-8720-8ac6676690d9",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91496a0b-d38a-4c08-8aba-5a17a7648e3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fadd5f5a-d30e-4dd2-86ab-7f4bd27f0ac2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1a6335a-ddf2-4f79-bb86-83f9102a766e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8506e617-0483-49bd-959f-ae098b1cbbdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11aa85b5-504d-4bfb-8060-b6ff6c1a2a94",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cb5178d-6604-4340-8332-bab1a856e11d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6106f304-0b81-4584-8c3b-125e2df52e8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78c6c189-e32c-45d4-a14e-971a9d3d8bcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98e3c89e-99d4-4f7d-a050-81da4a6c3fdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa406b7c-8d5a-47fa-a88d-2ce5c5742aa9",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49ddbc46-dbfa-4af7-b843-43f071e8d9bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7101fcd-33bb-472f-8ebd-6151b8bf7ec7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5641bdc9-269e-45c0-aa54-d0d8122a6678",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c141686-c5da-4b17-ac83-9acec73f4d08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be504321-f3d1-466f-aba1-b6ef8b38b53d",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa2352d4-de72-444a-bf46-1d6cdc1f57ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b0b6e89-e949-4bcb-8a06-e6aabc4ac1d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a604f0c9-94de-49e6-adf8-b29a07ee32dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64ae8297-361b-4e07-ad96-c1b0c28ca629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "645781e3-46d4-4559-b7ec-7db071cc6043",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a15d078-dedc-438a-904c-238e32f52bfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "575d6631-a9b8-4b7f-aeea-cf4f1b5d27db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d2b610e-6648-4679-bdc5-2ab7d1e8378a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51698061-3b59-4f49-a69a-033bc089ef47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6801e69b-bf5c-435d-8954-31808e67bf40",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01e2f46d-3364-41a2-96ea-8b64b2ee6902",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18ac407a-4b2d-4e3a-b4e2-b36e6ccd30e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d72a9ae-1d93-4cd1-929d-d240955f764e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbd0e263-936c-4554-9556-bbfee36e39be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6321306-117f-4b72-81b2-dd9197a1bda5",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71f75f87-f295-4777-9ea5-ab56f0afe0e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba919d80-8191-4038-9524-2666f4e401f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25ead958-aaff-426a-b9b1-4d650d34cfe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2e17175-49f5-44e1-878a-2ebe09e1b63c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b6d2793-7ca5-44e6-8ae4-42dab5a061c8",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e43151ab-fb62-48bc-b818-4888057960eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c88d5796-599a-420b-8f41-591d836ac176"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53889bd9-26a9-44cb-a0f8-16548b1774dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "def06a8a-81a7-43ed-bec6-59b2a2e90762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3befdccf-946f-4780-9512-0a7197ccf71a",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1464e35a-2bd3-49cc-855d-fe1497d226ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bf0d4c6-54f0-42f9-86d7-f6a5fceff598"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02bc6f09-97c8-4f09-af17-5ec81ed57ef9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d6493a3-b136-4422-9d5b-042d95f15f76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a80702d-0145-49bc-bd53-5e3db9760446",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a63b5a5-7f65-42cd-88c3-27b523f97594",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38da28df-4913-4411-95ac-7e58f2f9a913"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aced2e23-d731-48ea-ae5f-93e2ce1b9d3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0be63d3-22c5-490c-8f57-9ccad484b4d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec4a5c0d-673a-4928-9746-8ce1950abc89",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02f04487-cbc7-4dd1-9e7c-59c19325b320",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc29dd64-507a-4757-81ae-f39eea964919"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fbf4f73-c641-4d36-8656-0ddb90ee69ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a37d8b4b-8a15-4fd3-8ab2-09b305699c76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbf78719-ec89-4a04-b992-e2fc0ba09c49",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1bb2839-282a-4b07-9d57-cb03ffee02f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bce40acf-6656-442a-807f-33bc5b535b38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b9ebe8c-6f91-4f3e-be6b-49d19fb0202f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ef218e8-8f89-452e-b3ee-8b5b8d4e6210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba3f1163-930c-400a-983e-e3f23bb199ac",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bd3f49a-b4e5-4ce3-a15c-eb4ca1817f31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52a7a93b-74f9-435a-a46b-ddaa87b4f2d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f621b10-a987-4ab3-a020-e9af65b87678",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8f434d7-9709-40c6-9c57-c2b5f2ae5469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a93ffabd-c5c5-4ed4-90aa-0927b64647e7",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0b48a43-4ec7-4d17-8195-81fa924ecd00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fd1b75c-d9ad-4e37-a338-0684ebb59cc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8729197-d0a3-4c94-8180-c99811d2ab12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "158a7ea7-6d9d-4eef-b292-3f358f9904ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9e8d60c-ba82-43fd-a494-9fab016ff36e",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c27b0e3a-2ec1-4daf-bd23-3b037e1eed33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc8e31d3-f6ee-426a-b644-8d26444da0b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "591e1a4a-801c-4fa1-b4b8-913e33bbee68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cabe039-3b10-49f9-8e06-0cc62b67e4c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be83800b-f96e-4f99-a6e7-81a37335dbfb",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbfd8e60-575f-40b5-a29d-6d2c5891ee9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5342605b-dd8c-40b5-a8e4-49d97d99d755"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ed43d54-1601-42e1-a014-3b48294f9f12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5066efb4-5c9e-4266-9e92-1032ff3ab3d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63c3e000-ee62-4b01-8415-c142430e01e6",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6771e220-a275-40c7-9ced-d4c1105dc1ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3beba1d6-58ab-46ba-9a01-24501d607c06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99c502e7-89e8-4d10-95bd-8bf726b76e36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22e584ed-b60a-4e4d-a97f-307b41bba1e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7e80bf9-fbf6-45be-bbb1-4b37a1704fa0",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b79d9173-de40-40b1-ac00-8e2962d39e31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a4a6a0d-8dd0-411e-a65c-642d2212fe22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "691e5b05-c51e-4c0a-9a76-72093a9d34e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3223c060-d13d-45da-b0da-a4e59b64a042"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3af42b8-bbc9-4cba-b706-9933d365db8a",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43372b57-9006-4bea-a79f-98df052de333",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1129eca3-3ebd-4c4c-802a-25cc9295d359"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84188cd4-46d2-47fd-b6c1-4825048fd523",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0505e78-ec8b-4c63-b63b-a9faaa0cc423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6a3f432-4a26-4fac-8edc-ff9904938462",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "995761cd-121e-4659-9edd-9a3d51143725",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d7bd3b1-4852-4ec3-8a90-419cf40db49b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cf44227-d66f-455d-9941-d6ae1a343915",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87eaca09-fbe5-4363-8fee-3c0b6948c48b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6259ccaf-b6b2-44f7-bff3-f06a016d29af",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f403479f-a9d7-4d7d-9199-11f52156c682",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a75c149-e3e5-4f89-abab-35faa5b4b3fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d35931a7-ef3a-4a3d-b3d1-f1f098e9d2fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a4740c8-9a50-479c-acfb-563af06e01e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e895a4a-da78-4943-9633-041b3733c4a8",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8faef3d7-0394-4f30-b544-06ba00222574",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "baf6a10e-bcbe-4210-b87e-72b131cbb2ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa4f4cfd-cdec-485a-9649-b98607afedec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce1d78ed-691a-4fe0-a05e-6b6095c72669"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef1c556e-06f2-4b9a-a2df-627a69767dd0",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e1dbb18-41f1-42a1-abe7-f2a20d9de288",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f54380d6-9c31-44be-ad96-7633549dc3f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87e5594c-4b8e-4cce-b9e5-2a11c965ad52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02a9b886-2557-4c70-a4f7-00d07badf545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85a18283-51b9-4d45-86f4-f1e708727f82",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "618c8e84-7793-4837-8a16-b72e0bae70c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "818b2859-a3bf-469c-9f7d-cb54cb8bebbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "caaca3ce-aaf7-4f98-bc67-08619cfa7828",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec9813bc-1bf8-454c-8df7-ad2bbd504c96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c17f00ee-ec36-4d08-871f-4a36c5f13167",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dbfd6a3-46d7-40d0-a51c-60507a593c4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2fce327-d2f7-46d6-81cc-710d178c7d93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e2593b0-db22-4672-8115-ca0d8d666152",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f190cd5c-8400-4563-9ff9-d6000906eb98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5335b34b-94d6-4dea-bc02-f3d53ae10a7d",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "323dd26d-2bcc-44a0-a206-c8047b5f2133",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afd95cac-71e4-4a1f-aa1b-91633dc91958"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db26d137-6900-45fb-91c0-754aeecfd40d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a7061d7-447b-4cfa-bb28-5e917a36b623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e5fb116-13b4-44c6-a4f5-b0f412ddcf6a",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f866177-88f1-4559-8141-8bee3fdaba02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7a115f2-7cf7-44bd-bad7-e6cc31ecf360"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7271c0a-a902-4e30-a170-6b44abcb8ec3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3c542ac-b377-4a31-8c68-2b5864c471c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91d81df8-9706-440d-b049-d1a29535d2d0",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58477940-780c-4617-8c9b-1f699d02fd32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae891367-2d31-40f7-b97e-f667ab2dd3fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34e57fc8-605b-4443-b458-a5c1d0fbda24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84f05446-8ca1-4acd-b6ff-67029da6c207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9224fbf4-71f3-4675-8d36-768d206823d6",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee7bfd90-e40c-4cb5-9d0b-99e24c719e45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bbc427b3-82f4-4272-bbc6-663c3f173961"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaead7bd-1b04-4893-b5db-1432b5b30c46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "120e7655-308a-4d9e-b259-4d26f5899410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35168215-557d-41c0-9a66-23d20acd5e82",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee91a8f4-5ea5-4b13-b5ae-6674d6b11cde",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c76ad79-f056-4907-8a55-0cfe573a9e75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bee55f1-270d-4a4e-a15b-bcfabf998126",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1af4fe7a-0acb-4137-a130-91874341015a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e43a068a-6adc-4941-b874-ca096eae5f25",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dc025d0-fb6b-4437-86dd-6442d4c8e316",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6864705e-9807-40db-9256-17c2f2a2cad3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "316d703a-75d8-4235-9576-45fccfd30527",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "448835eb-6558-4c69-8a9a-a1279f9c5c6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "448c3232-0a11-4bb9-9120-111dd938c337",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed18159a-0ba9-42a5-a925-64d5574180e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "798bd7f6-f300-4ff0-b0dd-5bb7500d849e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca34b765-9fd3-49c7-b5d5-da0d8fa686a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe5e1cfb-b3d2-45c6-b196-c63b2026e55a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc45c85e-736c-40b6-80de-b084c47fe245",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ea4da68-5811-404c-80db-a88aa3c8eb44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18e6267c-c8fe-4162-8ec3-03d300950d83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6c907e5-772a-48c8-95e2-11ae00194f1f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1ccb3de-1e94-4453-896f-a0fd4395a064"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed99088f-72fe-4ad9-80d6-5044224ecccc",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63f82201-ca72-4efd-acfd-a47f732d3564",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b95173c-890e-44cb-826f-75f577df74de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaeabba5-b3c1-4e60-9187-5fae9a65e927",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96098349-c25c-43cb-aa72-eb1ad227734f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "571c69d7-fa6e-4b43-8550-fc20995ab816",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "673ce5d0-b7df-441b-8176-e80175338fd4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8854b78e-a3f1-4902-997d-5703575f5a0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7638463-693b-4fb8-ac47-e60c665d5e40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f40dfdd4-cbb0-43ca-8dc5-9bc65a5610f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acc98c3d-63f8-4964-9e87-5092306d46eb",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7484c100-3c38-453c-9748-26b1264ad067",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b93471d-ae02-491d-9631-b5eabd93c634"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e190d3b8-4e91-4301-836e-4a692ca385c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6a90a30-0f8d-4d05-b5c2-642a66a45a4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaf8ecb6-8b10-4dce-b3ff-bcd9c73cfbe3",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d962b49-837c-4af7-b240-f992af8e69f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ea8c09d-d814-4a8c-bcd0-f403df9254e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce77c63-b503-4426-87c1-785a7072e5a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "853d5161-174e-4afd-8840-2c06a4546b2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dac9ec7-fa27-4186-ba90-66cca2c8e769",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2590f27f-f15c-4c3d-9406-02a9a8add008",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f0f14f8-ea29-4e4e-8f29-03799c92e429"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43a513fa-d0a8-4002-a00d-cfc63bdf75c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e23b73e-b087-40c8-bcbd-4bb38fbaa7f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f290f513-2784-4deb-9070-4ac405190d2a",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cdf180b-7cd8-48fe-99d2-3eddc6ced350",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3bf5b9c3-ad4c-4441-9818-5489c3c424be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee29dacd-970e-4c16-a21a-cfcb6a67b781",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ce4531e-ba7a-4540-b88a-14a2f979bdb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9d9b458-32c0-4749-b845-6811340315c9",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "665d093d-1406-4df7-a884-0c74c50a16f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15dc19b4-5020-425d-ae0a-56a252e63f9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aeec1ed-16e2-49b6-901e-bdfd3dc14726",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5576cd4-715b-4f1d-83c4-985f89a982f1"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6800eaa0-41c4-423f-b733-8e71713351cd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1f460396-437e-45b7-836e-b53bbbde8b03"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4774acf9-6628-41d7-b835-6503ebd64167",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "544c6599-421c-48b4-9bf4-a0fed322df91"
                    }
                  }
                ]
              },
              {
                "id": "3751b62b-8f29-4040-8e8a-cf2053b8111b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "704cded8-ec62-403a-b895-ae7fb9c23dc8",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54c8d577-d6e7-4dcf-8ca9-6cdb294772b0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "648d2939-b5ca-472d-b445-0b5dba0e95d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d947250-d1bb-4096-a85b-6feb1156f6b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "068d2833-ef4c-4021-9082-50f42ec71d8a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c842ee61-057c-446e-81f1-f28e7d4b2120",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "df9b39d5-71d1-4544-8ea0-816d5591d34d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "728ea87a-0b4e-449d-871d-236a0a80620f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "56d7a0b9-f1a8-4213-b2b3-0cd4aa13c5b2"
                    }
                  }
                ]
              },
              {
                "id": "78f693ff-7ba8-4eda-885c-054336b26b78",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "0ee4f2e1-c2c2-4715-8120-df047463c80f",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ec4b5e3-d898-4d8e-a256-ea467cb970bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "393aad57-864b-46b0-b33c-f0a28153b332"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c7a17ec-ccd0-48a0-8701-3ef68dbbac76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e6ac0dc-8c65-4648-9172-fb8037d50ba2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "515ae702-fb00-4995-a1b9-d4f27088367f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6e076923-51a4-4941-8544-a287b164df0b",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0cbf81dc-f6bc-418a-a7bd-1ad58301a41e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2acbed1d-3a1d-4eca-a096-a668e512bd1e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3589fdc1-841b-49ad-a42f-0569c34840f3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "017c11da-a388-440b-946b-50b76e3d5538"
                    }
                  }
                ]
              },
              {
                "id": "21c848bc-7cd6-4bf4-9123-70ff4092b6ed",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "acf8f70a-ee43-4831-9a65-fb47d7051ba0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "5a01ccc3-9ae2-4f04-9be3-2f911a42978c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "07a44601-9735-47c0-898a-506062bd9aca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "13b63e3e-760c-451e-83cb-3287e7edb5f1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e1ad9fce-ccd9-4761-bae9-71d8b927a203",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "f36e3dc9-85b5-490b-91b2-4fe43328d371"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aae24f55-4239-4ff9-aa58-09a2fd996e52",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0654de6a-921b-41bc-bf70-b887327681ed"
            }
          }
        ]
      },
      {
        "id": "80b2f612-f121-4c30-8861-3958e726dd14",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "a2e00735-9dc6-48b2-bc6f-605898f00458",
            "name": "Negative Testing",
            "item": [
              {
                "id": "12c22245-e916-4d1f-87a5-86cdb4bf578c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "312c6240-2b0e-42bd-8514-2270559ca1ea",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcbb24a8-6161-4ea3-a005-f033cd23c7d7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7bcef2b3-9c62-4a81-a7bf-88e7ced60bf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6efcd829-82e2-4ece-b36a-31c72d01369f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e2e7668e-d64b-4898-8062-0ffe0efaea81"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0cab943e-248b-4214-b02e-6586941a55cf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "961ff70b-de13-4be2-8026-b676199e21c8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8a4b0ef6-fd8c-4bc7-a03a-5f0c7b9ca7fa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f4d3f2ed-814a-41ef-a116-1f1d2a9d1916"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d442a22d-1c24-443e-8015-1d1ca6258db3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "79673050-787e-4c84-8d51-a641cdc190ad"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "763aa246-79aa-4825-a6ea-741ceec37ca4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c3d97b84-320c-4356-a080-113b317a6d49"
            }
          }
        ]
      },
      {
        "id": "d049d044-7c19-49c2-9ef4-f8be44aaad78",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "d21b3721-b40b-414f-93c9-a25f7f791d1e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "db12d080-0aef-4f94-aad0-794036a13709",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a24847cd-3896-4796-a48b-58e7c970879a",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d339dda8-0c9c-4472-8fb4-8940da8bf335",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3dc1f413-a247-470c-9efe-01b91d4d589d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee74db2d-87b9-456c-8810-5f4b2dd1f2af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "570dbcd6-9d31-4840-ab3d-6af50e217606"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "376312f3-dc80-4b3c-9d75-0d1d59625dc6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "298d9123-c098-4d41-9135-38144a1677a4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0719a415-1edc-4f3c-87fc-2bf8301349ac",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "22752009-3d6c-41ae-a630-fb71cd029559"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6e56b96b-74a4-47cb-a1cb-3347914d2d19",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "650d6604-140e-459f-8b72-30cfc1146576"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "57c4db95-67ec-47cf-b195-cd761bc31aa8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "88157c97-24dd-4865-ae2e-b112d1f3c53e"
            }
          }
        ]
      },
      {
        "id": "e3cbe57f-cd00-4a9a-a816-ed097d39e5ac",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "005fd855-5026-442b-bb23-f3295cda5160",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c323d022-7a55-404e-bfc2-94b920acd6c5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f444f69b-5254-4eb5-84b8-b14f80747cb9",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e87d294-a37b-4f5b-afdf-dab9e896adb5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f8725c2d-ddce-4a3c-9f43-b9b647c021ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "082b6244-3265-4359-87d3-5536279c2487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3bbf86a8-92e6-456a-a051-80f7d3908d7a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eab6a1da-c5e5-4e25-bc54-ae44316fbcb9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1387c51a-4793-470e-841d-a08b529d9627"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e1fa774c-c65b-42a1-abb6-5454e596e6d4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "41673fbf-67f5-4b21-94bd-ea50f5d62afd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5b1cc758-bf8b-4369-823e-b8276808637f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "005b0105-e6d0-4ecc-a3ad-b73aae590f07"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4527a6b1-8c14-49c3-ad96-d2d2419de518",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "23a608a4-26fe-42cd-9fbb-ea3c60e5711e"
            }
          }
        ]
      },
      {
        "id": "05085b2c-dcb6-4aef-9528-ad3d80c6ddd3",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "75932ee5-74d4-44cc-add7-97900eedebd3",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ba97d33a-ce75-4068-be1d-50f3563141d3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "5c7d8178-f307-4f81-973e-c5dd5e43760e",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bc47ffd5-f2a0-4700-aab1-576df3d617e5",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f935d2db-0047-4bad-888d-c7fa2156c06b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 67.45263157894739,
      "responseMin": 9,
      "responseMax": 630,
      "responseSd": 83.35665520376278,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1706661262684,
      "completed": 1706661291333
    },
    "executions": [
      {
        "id": "73b306b7-c886-44be-afa6-98f2ca6dfdd4",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "62f8a648-1cf1-4ffd-8136-81d63b855a12",
          "httpRequestId": "36fdb820-9928-45a8-a0de-6d9a343a3bd2"
        },
        "item": {
          "id": "73b306b7-c886-44be-afa6-98f2ca6dfdd4",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "b4ee189c-c3e2-41f8-abbd-e99af18fe68b",
          "status": "OK",
          "code": 200,
          "responseTime": 54,
          "responseSize": 0
        }
      },
      {
        "id": "136baeef-774c-4698-8706-1157df5cc39d",
        "cursor": {
          "ref": "9dcf7ced-29a5-4801-a048-3ed7b068f455",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "c677a5f2-c873-4844-898e-6cbf2bf9f631"
        },
        "item": {
          "id": "136baeef-774c-4698-8706-1157df5cc39d",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "f9898497-c33b-4ecd-adb7-1f00857f384e",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "24ace856-853b-4094-bbd3-b7b1ee4fad47",
        "cursor": {
          "ref": "7eb99bd8-387e-4edc-930d-ab00b7d47dad",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "4c68b79c-3a31-42e5-ab89-98e31afb75bb"
        },
        "item": {
          "id": "24ace856-853b-4094-bbd3-b7b1ee4fad47",
          "name": "did_json"
        },
        "response": {
          "id": "20e1bb53-4ad7-4037-ae47-48a4c280518b",
          "status": "OK",
          "code": 200,
          "responseTime": 440,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27182775-bf81-40f3-9872-4ce0f873ac48",
        "cursor": {
          "ref": "72f59da1-5f62-4a66-aa54-3dcdcc44d5fa",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "4e07c7bb-a48e-4d87-b666-35049b9e8ecf"
        },
        "item": {
          "id": "27182775-bf81-40f3-9872-4ce0f873ac48",
          "name": "did:invalid"
        },
        "response": {
          "id": "643427ba-3f65-4c7d-9d88-25a765b4afce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27182775-bf81-40f3-9872-4ce0f873ac48",
        "cursor": {
          "ref": "72f59da1-5f62-4a66-aa54-3dcdcc44d5fa",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "4e07c7bb-a48e-4d87-b666-35049b9e8ecf"
        },
        "item": {
          "id": "27182775-bf81-40f3-9872-4ce0f873ac48",
          "name": "did:invalid"
        },
        "response": {
          "id": "643427ba-3f65-4c7d-9d88-25a765b4afce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bc14e67-e563-42c1-93fc-2471da77212a",
        "cursor": {
          "ref": "89fae96b-d422-4a26-969b-41084a5e4a1f",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ff784ec0-a028-49c5-9f74-23e92b8354d8"
        },
        "item": {
          "id": "0bc14e67-e563-42c1-93fc-2471da77212a",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "36952b3b-0706-4518-9b8e-e3880b688857",
          "status": "Not Found",
          "code": 404,
          "responseTime": 98,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "634811d9-b641-413e-aa2f-3a0a2860d3a4",
        "cursor": {
          "ref": "491fa47f-e1e4-40a5-96be-29a239937cc2",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f674377b-f600-4818-8c7f-1c79e9ebf894"
        },
        "item": {
          "id": "634811d9-b641-413e-aa2f-3a0a2860d3a4",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "d3e0213b-a1d9-4d14-a5d9-8634129f6057",
          "status": "Not Found",
          "code": 404,
          "responseTime": 43,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "583101e7-8a2e-477a-8a6c-c3c9ff777399",
        "cursor": {
          "ref": "b9674908-348c-4517-a6e5-b8a0c8f3f667",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b00cb8d2-d63c-4c70-9ad4-4e2bcb63c1c2"
        },
        "item": {
          "id": "583101e7-8a2e-477a-8a6c-c3c9ff777399",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "b4173950-473f-48c8-a817-582553693edc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46c5698f-44fa-4ab9-89c6-1b3ca2d54179",
        "cursor": {
          "ref": "52659e42-e20e-4783-8d4c-0b7454edc756",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "80840c18-8e35-4b0b-b1cf-e3556f465123"
        },
        "item": {
          "id": "46c5698f-44fa-4ab9-89c6-1b3ca2d54179",
          "name": "identifiers"
        },
        "response": {
          "id": "d1cbde18-6a95-406f-aa2e-d457d4928711",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bbc91ba-f973-4758-bcd3-e58d65c3d248",
        "cursor": {
          "ref": "6b629c8c-be8c-4083-9128-cc3863ed9266",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "1397bc77-33b3-4354-9399-a4d7c3d403a4"
        },
        "item": {
          "id": "2bbc91ba-f973-4758-bcd3-e58d65c3d248",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "12032b01-c8f6-482c-a45c-48231bbb3064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3715a72b-214b-402b-bd75-d625334b2c86",
        "cursor": {
          "ref": "95036a14-119e-4a67-a5d2-e5e3809cb9dd",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "481ba449-2f9c-458c-9d3e-b01cefee5f70"
        },
        "item": {
          "id": "3715a72b-214b-402b-bd75-d625334b2c86",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "36d54c9f-71fe-4039-8be8-dd49f4073949",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a2f76e3-67ee-47cc-a4e7-ff0bff3ea387",
        "cursor": {
          "ref": "d980b16e-f987-47ad-a849-3703d543fa2f",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "9ac90e00-1b3c-4aa7-af74-9d9956b85db7"
        },
        "item": {
          "id": "0a2f76e3-67ee-47cc-a4e7-ff0bff3ea387",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "264892b4-c89c-48de-b333-546f4444d0f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4f6fe13-3ad0-429d-8a4c-0af7fd81cdaa",
        "cursor": {
          "ref": "5578aec8-4367-4d40-9723-aa5b5465a8ba",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "db15c7b0-4904-44a5-8fa1-69709af697f6"
        },
        "item": {
          "id": "a4f6fe13-3ad0-429d-8a4c-0af7fd81cdaa",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "2ba6c3bc-0ea2-4108-b1a5-1425fd27464e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2666df67-f9a7-4d45-bdde-a00356711f05",
        "cursor": {
          "ref": "dfbfd6ac-cd0e-489c-9f95-1927b6472d8f",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "60ca8080-9bac-4bda-86fc-690d61564447"
        },
        "item": {
          "id": "2666df67-f9a7-4d45-bdde-a00356711f05",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "4261e8e7-dab5-47ba-b71c-b1117016872c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3926adbd-310a-40ff-b666-6a15aaf88379",
        "cursor": {
          "ref": "2820b753-df26-47b5-8da6-19bdbd23d728",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "e731fe74-cf40-48d2-b633-accfc6c41893"
        },
        "item": {
          "id": "3926adbd-310a-40ff-b666-6a15aaf88379",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "c4e447e7-5be9-4831-8948-e682608eb8f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2832e03b-6654-47ba-845c-9288d036e78f",
        "cursor": {
          "ref": "cfb58c6a-67f6-4677-927f-cfefd4464454",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "6d51d983-72ff-4aae-92f1-be9c55c70ac4"
        },
        "item": {
          "id": "2832e03b-6654-47ba-845c-9288d036e78f",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "492ca142-fa1f-41b0-9f1f-1ca735db9bd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e6ce9e6-103a-4b1e-a4a6-5e329c178a38",
        "cursor": {
          "ref": "ecfb1371-1326-4654-b033-2e94f84a1408",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "01079c9e-f1d5-4e47-ba18-f721a036acee"
        },
        "item": {
          "id": "2e6ce9e6-103a-4b1e-a4a6-5e329c178a38",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "b4e3c472-c553-4346-8284-07ea360acd14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b385ae18-8bc6-42f5-89e2-1fdb896c954a",
        "cursor": {
          "ref": "0849a8ae-11ca-41ed-9eda-4408b11fa9e0",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "66be829a-25ad-4a59-a60f-8369bb73d519"
        },
        "item": {
          "id": "b385ae18-8bc6-42f5-89e2-1fdb896c954a",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "06c3f4a1-040c-416a-9a09-b46f31ef6f0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80780bd5-9050-44aa-b505-76addd1aea03",
        "cursor": {
          "ref": "2b7d8eee-5b25-429d-bcc5-569e07c4e1ce",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "c6842ecd-464c-4452-89f9-5f42207ddfb6"
        },
        "item": {
          "id": "80780bd5-9050-44aa-b505-76addd1aea03",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "c93f8e29-0a76-4743-a07c-64447bbe7592",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44dde573-28d2-4e98-84ed-f108ed41971d",
        "cursor": {
          "ref": "7675358b-f7d9-4fb5-9b61-2f536c775a1e",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "e767ca92-84c8-4925-9247-d1e616fbd867"
        },
        "item": {
          "id": "44dde573-28d2-4e98-84ed-f108ed41971d",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "bf75f493-b09e-4054-b54d-ee1e8b147177",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a63f93f-73f5-4c68-8c59-5f3985e5bf37",
        "cursor": {
          "ref": "4610c384-00f4-43c0-b7c5-6a9103e1c364",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "69030f78-f12b-4ac1-a1e4-08ae87561a25"
        },
        "item": {
          "id": "0a63f93f-73f5-4c68-8c59-5f3985e5bf37",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "67ada61e-4a70-4e92-9813-0104974d7988",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bc2d862-de11-47f5-829c-2f23dfa6c8a9",
        "cursor": {
          "ref": "fa2e124e-aa2f-465e-9d65-a8049205e94b",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "8498ab2a-4bd6-44a7-9595-6d75cbf12673"
        },
        "item": {
          "id": "6bc2d862-de11-47f5-829c-2f23dfa6c8a9",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "fb28676e-1a77-47cd-a67e-de1965a2c1f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c986afd-a954-4d81-8a47-af091e6550e5",
        "cursor": {
          "ref": "004e3250-aa10-4085-bb33-d3368405d230",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "4ea036b1-030c-439e-af81-e2ab7120a8c2"
        },
        "item": {
          "id": "8c986afd-a954-4d81-8a47-af091e6550e5",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "8ca26a77-d2ff-4674-86da-6d45c437c823",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76b43fc0-c0a0-4a92-9e2c-e5fea59f35c0",
        "cursor": {
          "ref": "b141366e-8535-4de2-8b65-f85a2bf2a9f3",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "dac03ba5-d6f7-40d9-a74a-f316bfbe9286"
        },
        "item": {
          "id": "76b43fc0-c0a0-4a92-9e2c-e5fea59f35c0",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "95f1795d-c863-49e7-a41a-6b3371360ebe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7447718-04ea-412b-a4e4-f01423d9ccbc",
        "cursor": {
          "ref": "f5d09976-2370-41b1-b69f-c20c876991e7",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "bde4e52a-8dee-45e8-ba4f-b1e5f1abc233"
        },
        "item": {
          "id": "e7447718-04ea-412b-a4e4-f01423d9ccbc",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "cd963a2b-7e80-4839-b724-a96cc8805fd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d75c1f4-22cb-4ba1-ae14-a84fb92cd203",
        "cursor": {
          "ref": "b08eea81-f465-4acd-a721-df099dbc7d39",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "4e53ff2e-7867-45ea-be09-58a666375845"
        },
        "item": {
          "id": "3d75c1f4-22cb-4ba1-ae14-a84fb92cd203",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "65cf16ea-e642-4e30-97d5-675b0584ebd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb69b40f-12ab-49a6-94e0-c6f71d3611e6",
        "cursor": {
          "ref": "f4e2e164-946f-4595-941b-1f45787545e4",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f070109a-0814-48cc-b046-f521ce85097b"
        },
        "item": {
          "id": "bb69b40f-12ab-49a6-94e0-c6f71d3611e6",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "f8456343-a681-4b40-8252-5efba470c157",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2af8027-51c8-4875-bc27-ce4f5600d058",
        "cursor": {
          "ref": "5360433e-3f2e-4e6d-a76a-a1b7c976ae75",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "d6fd5709-2dcd-44f2-9f2c-d839a37b979e"
        },
        "item": {
          "id": "b2af8027-51c8-4875-bc27-ce4f5600d058",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "94bd015c-e360-40a6-a03d-e4fd3a21177f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa637177-092c-4928-a6c8-13d9abfe9813",
        "cursor": {
          "ref": "6e501c7c-5220-447d-8a9d-ca818407027d",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "b092f486-9499-499c-acdd-e83252d6f3fa"
        },
        "item": {
          "id": "fa637177-092c-4928-a6c8-13d9abfe9813",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "82a81bde-1057-4e46-9a91-ffb65e833b0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ec99f03-383d-482b-8fa6-36320f91e353",
        "cursor": {
          "ref": "448611e2-a755-4c72-ab85-f9e7fa350fea",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "b83fa567-ef37-4f71-8ac6-7d3743c67173"
        },
        "item": {
          "id": "7ec99f03-383d-482b-8fa6-36320f91e353",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "a6093238-2675-44e6-8a17-c036ed31799b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6acf4453-e2e4-47c9-9e0e-c011ffa8bb28",
        "cursor": {
          "ref": "a089d465-24da-4a2b-a8e8-31e42c6bbef5",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "39561697-1fc3-49b6-bc3f-6faca1a44196"
        },
        "item": {
          "id": "6acf4453-e2e4-47c9-9e0e-c011ffa8bb28",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ec867c11-02aa-4c41-979a-4998d467f833",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ff6ab14-0858-419d-a955-0ea36a6d7cee",
        "cursor": {
          "ref": "65d24801-aaaf-4f34-9df5-41effd68ee07",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "8bbe8208-489a-4161-bb2d-e76d0d827895"
        },
        "item": {
          "id": "5ff6ab14-0858-419d-a955-0ea36a6d7cee",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "699fe2e6-1ed6-4749-9c28-a98313c2be9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed71f3f4-8104-42dc-93b7-3f44ca317d3e",
        "cursor": {
          "ref": "0de88bb9-0324-4738-adac-cfa1d1e60bfc",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "22705637-dccf-47a4-bac1-0a6795e51acd"
        },
        "item": {
          "id": "ed71f3f4-8104-42dc-93b7-3f44ca317d3e",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "22f72b9d-8b41-411d-ace6-cc61c7d506bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eca956db-9785-485b-9b7f-017035562b12",
        "cursor": {
          "ref": "b3afb1e0-da11-459a-8daf-e143156ba652",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "707b241f-fc8d-44fc-8dcb-7c51f1d98ea6"
        },
        "item": {
          "id": "eca956db-9785-485b-9b7f-017035562b12",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "6e09de8d-3b69-41bb-aeb2-e45348065dfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95c2147a-8bf4-40d7-9dba-0eacb2e70e84",
        "cursor": {
          "ref": "51af2ecf-df9f-4010-bc54-0c249557380e",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "d51cc08e-3865-4542-a6fb-db820a18fed3"
        },
        "item": {
          "id": "95c2147a-8bf4-40d7-9dba-0eacb2e70e84",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "7fef4e36-b6dd-4ff8-a009-c0438a0b1113",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1ab22b7-aae7-42ed-bd4e-dc63805d87ba",
        "cursor": {
          "ref": "64cec01e-5aca-41b2-a2cf-b31ecfd46b30",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "f81bcf87-f2f7-4f1f-bfe8-3aed2f991416"
        },
        "item": {
          "id": "c1ab22b7-aae7-42ed-bd4e-dc63805d87ba",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "9889d591-afe8-4dbf-b750-0de4f57823ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d080e67d-63a2-4d3e-8df1-47a71735f0ef",
        "cursor": {
          "ref": "317407c8-1a44-43cb-a16f-773965bb27cf",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "8b7869ef-e114-47b0-b045-9e81b157e3da"
        },
        "item": {
          "id": "d080e67d-63a2-4d3e-8df1-47a71735f0ef",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "a108ea57-30c9-4d8d-9f11-5b46e02c2059",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b55bafe-8277-457a-a641-4bbd726774c2",
        "cursor": {
          "ref": "6631545c-bfda-4c01-ad50-434f2f633126",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "b82f04a6-28f1-4965-8da3-e8e6b84c2b6a"
        },
        "item": {
          "id": "8b55bafe-8277-457a-a641-4bbd726774c2",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "88c8f2d0-0495-4632-af80-57bc39f616ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c0fecbc-f849-45a2-8347-50d1e2533159",
        "cursor": {
          "ref": "af3bc094-bd43-4399-948b-e660941ab840",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "205c05c6-8a71-41b1-adcc-d97bc0ef9b74"
        },
        "item": {
          "id": "7c0fecbc-f849-45a2-8347-50d1e2533159",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "1367687c-221a-4411-8d36-288e608b2499",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97447935-0f3b-4dda-b243-286064ddb321",
        "cursor": {
          "ref": "249f1654-7bb5-4b77-b960-a2eb3aed82d3",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "a71658a5-38a8-409c-9a8b-52685e68b5db"
        },
        "item": {
          "id": "97447935-0f3b-4dda-b243-286064ddb321",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "767140aa-aae9-4461-96f0-207e6734a238",
          "status": "Created",
          "code": 201,
          "responseTime": 630,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "558228f5-dd8c-4923-8bd2-68d1dfc17dda",
        "cursor": {
          "ref": "2ef71fcd-cf57-403d-af43-68e95bef7acc",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "e814f6e0-ecf0-4a16-aa8e-4c19202a78af"
        },
        "item": {
          "id": "558228f5-dd8c-4923-8bd2-68d1dfc17dda",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "eb30ad25-8d72-48d2-a749-3bfe64dba7ba",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "6c77ce0b-4cf8-488b-a6ba-87648cdf23df",
        "cursor": {
          "ref": "fad302b2-c964-4aa8-9b9d-332d4b51c03b",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "255a7bde-df94-4e17-b899-4b3351316ffa"
        },
        "item": {
          "id": "6c77ce0b-4cf8-488b-a6ba-87648cdf23df",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "aa7c5742-83fb-4b32-81e6-7edabfd8e902",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "33918cb1-f928-4f0c-8a0e-73a0b3d22fa2",
        "cursor": {
          "ref": "cd3441ba-3b32-43b1-84c8-329450f1c021",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0a907bb1-cd10-4417-841a-2b2299451645"
        },
        "item": {
          "id": "33918cb1-f928-4f0c-8a0e-73a0b3d22fa2",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "60da77dc-ce16-436b-a290-71239a98119f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "379902b5-5bfa-4efe-9131-31f1c7d38cf6",
        "cursor": {
          "ref": "3f0eff6f-95eb-4c82-9d12-9d72cd91d92f",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "2cab610e-28b9-445f-8f10-91522e0fbfd9"
        },
        "item": {
          "id": "379902b5-5bfa-4efe-9131-31f1c7d38cf6",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "a44076b1-dfb4-4757-9289-2b2b7353f19e",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "5c288903-80e4-455a-ae39-7052d7ddc1ea",
        "cursor": {
          "ref": "aa6899fa-fbdf-442b-a7b7-3fa1cd134c38",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "f8b328cd-d121-46da-a3d5-64ca814ec64f"
        },
        "item": {
          "id": "5c288903-80e4-455a-ae39-7052d7ddc1ea",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "ceeefe1b-482d-41da-9e1b-ddcad37dbefd",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "bbfd02f0-3715-4f5c-afde-6f9bf0a7b3ac",
        "cursor": {
          "ref": "be9fdb97-0c02-467d-88e6-c62aa300c691",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "aa343f45-b947-4ad3-a218-c09cf1b756ed"
        },
        "item": {
          "id": "bbfd02f0-3715-4f5c-afde-6f9bf0a7b3ac",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "28d76a72-2631-471a-9e6f-f5a42cf92e3a",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "60f1ccf6-a290-4225-8aca-5cbab9816ffb",
        "cursor": {
          "ref": "54a22558-e6ce-4c02-9ffc-6758d1e6ab3a",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "8d8f98b2-4392-41ad-a268-50b27edad938"
        },
        "item": {
          "id": "60f1ccf6-a290-4225-8aca-5cbab9816ffb",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "3eaea82a-66bd-449d-b468-cd87109d3f32",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "243128e0-b1f9-4ff3-8fd2-fe7c8bd08205",
        "cursor": {
          "ref": "68b9352e-254b-4013-8212-deb14fc652fa",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "0ad8bb46-94e4-4353-be99-2598b20618d7"
        },
        "item": {
          "id": "243128e0-b1f9-4ff3-8fd2-fe7c8bd08205",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "83225071-d880-4463-b8cb-8739ebe12481",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "953f2d07-b649-44d3-9309-61d466b5b65b",
        "cursor": {
          "ref": "80b1386a-6d13-4cce-b14e-f0b6cea94168",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "8196798b-2394-474a-8734-0839fd97f8e0"
        },
        "item": {
          "id": "953f2d07-b649-44d3-9309-61d466b5b65b",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "71f0846a-91e6-4bb4-82c0-92ea9bea5ee4",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "51a3ecdb-d0e6-42e7-b2bd-d17424481f49",
        "cursor": {
          "ref": "91c1aba8-87f3-4c7e-b8dd-7c7ac37c06a3",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "f3f7cfd2-70cf-4139-8dc4-9b1243204c50"
        },
        "item": {
          "id": "51a3ecdb-d0e6-42e7-b2bd-d17424481f49",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "41b63a1d-9924-4403-a338-6bc18c1258e5",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "1f66214d-c980-46a3-802f-6394d5e1903f",
        "cursor": {
          "ref": "d93815f7-3f5e-4483-bbda-e845cdc4bb46",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "6e920aa7-e39e-4592-a9b8-f8faedf01f5e"
        },
        "item": {
          "id": "1f66214d-c980-46a3-802f-6394d5e1903f",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "bbae6c64-c76f-4829-b905-3f03d3f0d360",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "a4258bda-2ec3-4d47-b731-2dbe326b89ea",
        "cursor": {
          "ref": "41b493cf-13f7-42d2-8742-b97ec2751091",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "46688346-d1b4-4f07-84f3-cc9c9e088976"
        },
        "item": {
          "id": "a4258bda-2ec3-4d47-b731-2dbe326b89ea",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "e473ca86-58d5-4405-9a49-d5260ae07bdf",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "2db1fa4d-d3a0-46c6-b783-b9b36da92e84",
        "cursor": {
          "ref": "9e2e85ca-b03a-41f3-8445-4f72a10ce0ef",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "387717ce-6608-42e4-9e3d-faf14d1aa6d0"
        },
        "item": {
          "id": "2db1fa4d-d3a0-46c6-b783-b9b36da92e84",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "8553909d-6b20-42ea-9e7d-c3a8ec45f0d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d396cf26-5ca2-49b7-8def-5072f8e8a933",
        "cursor": {
          "ref": "0eb08882-caca-4a5d-979e-13ae59437770",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "1a80ec1f-f8e4-4987-a87b-12037728cd5b"
        },
        "item": {
          "id": "d396cf26-5ca2-49b7-8def-5072f8e8a933",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "85795267-2d0b-4816-a411-6190e7588c6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a41102d6-b550-4f7b-a5ce-20e9577dd703",
        "cursor": {
          "ref": "cc0869d7-7b51-4461-9344-cfbc2343b8b0",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "5ba1f05d-ab95-4bce-8db7-724adaa61e79"
        },
        "item": {
          "id": "a41102d6-b550-4f7b-a5ce-20e9577dd703",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "3b1b9d5b-374d-4116-94b9-401bae41d6b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c4702bf-d3a8-420a-81fb-778f1bd59281",
        "cursor": {
          "ref": "0d913b25-f13e-46cd-ab98-20d0b7fa94c3",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "c573fc79-1b70-49b6-83f9-bf97a723ea0d"
        },
        "item": {
          "id": "6c4702bf-d3a8-420a-81fb-778f1bd59281",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "b7730cf0-9947-4f46-8824-2f5533370dd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba8293af-f7ca-4b38-89b4-861a8c854a04",
        "cursor": {
          "ref": "47ef3c66-005b-48b6-aa9a-0c7f047ef359",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "7739448e-6362-4b55-b93c-6c1b1424b932"
        },
        "item": {
          "id": "ba8293af-f7ca-4b38-89b4-861a8c854a04",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "153c9715-6edd-4065-8433-daddee882ed9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5796b76-c18d-4e14-8769-d8ae53a663dc",
        "cursor": {
          "ref": "8912f1b4-bed7-4f6f-a67b-3d7f14e1c4ff",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "5b4d493f-1eea-4d5b-9438-ca5f8bec7c67"
        },
        "item": {
          "id": "e5796b76-c18d-4e14-8769-d8ae53a663dc",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "8e67ab0d-5f1f-47b6-93da-5c293e511b46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff119a13-343a-4106-b706-4220799a191c",
        "cursor": {
          "ref": "d1b08d92-0e81-4e97-9a79-6a58f48e8dae",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "e267a462-0bc8-4e8e-a2c8-4357c15e71f8"
        },
        "item": {
          "id": "ff119a13-343a-4106-b706-4220799a191c",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b145c723-5f3d-4e3b-89d3-cfb97cf54168",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd4b59c8-0214-4227-a7db-0a63f45c7865",
        "cursor": {
          "ref": "d0ae0028-1d2b-4897-b46c-8a0e31659e51",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "54cb5a2f-c20c-4234-aafd-87b68dc5d7f3"
        },
        "item": {
          "id": "fd4b59c8-0214-4227-a7db-0a63f45c7865",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "1c79afb3-9b4b-4c23-a431-dc798160fb32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d4f61ea-d237-4ed1-80f3-d90cf24fc1f6",
        "cursor": {
          "ref": "adb0ade8-ca5d-4a1e-b66d-5d040395a18e",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "2fa91037-cf74-4c4f-bc95-4461bec0cc39"
        },
        "item": {
          "id": "3d4f61ea-d237-4ed1-80f3-d90cf24fc1f6",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "0f7e23d4-6fca-4585-92ae-ec2028739962",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e42466e5-0f12-4e2f-8420-388f5456af20",
        "cursor": {
          "ref": "2c960eb2-bf92-46f5-8081-39b261810bda",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "03e7a8d3-9c2c-4b8e-9b8b-90c0ed79314f"
        },
        "item": {
          "id": "e42466e5-0f12-4e2f-8420-388f5456af20",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "ab2086eb-a273-4d58-878b-09094b63e825",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ace5735b-e27f-4bc6-a5ff-816944279873",
        "cursor": {
          "ref": "0b78e9f0-c274-427a-b360-d0883fe5dbc3",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "8016dc2c-9cb5-4b50-a2b4-c89b7ac76fd3"
        },
        "item": {
          "id": "ace5735b-e27f-4bc6-a5ff-816944279873",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "ea73e2e8-dde9-4f8b-afe9-93cf1a7b085a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f6547ea-979a-4378-8a2f-ba08db6078f2",
        "cursor": {
          "ref": "be05e779-1562-491a-811d-ff39daeb1c2a",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "3c72fc69-f618-43bf-9704-ebbf45056d0b"
        },
        "item": {
          "id": "9f6547ea-979a-4378-8a2f-ba08db6078f2",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "bc7732cc-c155-40db-98f3-3af83ba1b332",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "096893a9-3aad-4680-b972-56c4180c61de",
        "cursor": {
          "ref": "04f9cd25-b7e5-4131-a622-20fbc11338b2",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "8bf7c3ac-dc6c-42ea-aa00-b76f272e7ab5"
        },
        "item": {
          "id": "096893a9-3aad-4680-b972-56c4180c61de",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "361fe2b7-562d-4630-9fcc-9afd82ebcb46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ccefc5e-f60b-4f47-893d-409f4a2d609a",
        "cursor": {
          "ref": "da399836-f075-418c-85ff-81ecb133fd5b",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "14b241c0-7d39-4027-98d0-6e820f8e1f09"
        },
        "item": {
          "id": "2ccefc5e-f60b-4f47-893d-409f4a2d609a",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "fb3043fc-cb3e-430c-901d-5fc011b82956",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "c5f3a38f-cde1-4ebc-9cfc-048a0b2fd3b5",
        "cursor": {
          "ref": "46615a02-83ab-4dd3-8a2f-bb4a01c7649b",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "5d68a408-dbaa-431e-bde6-354c21af7b3d"
        },
        "item": {
          "id": "c5f3a38f-cde1-4ebc-9cfc-048a0b2fd3b5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "b99c0c42-b607-43f2-991e-be72d600ec23",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "a3d91d09-134a-4db6-a19f-6afddb9fa969",
        "cursor": {
          "ref": "53d72f32-cf0b-45cb-ad61-b8e793d85c4b",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "aa982ca6-2684-44d6-969c-df7c0457f2ac"
        },
        "item": {
          "id": "a3d91d09-134a-4db6-a19f-6afddb9fa969",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "b81f43f7-1ce7-4406-bc71-31a98c16e1df",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "b2b4d76e-99ee-452d-85ec-ecccc22c8286",
        "cursor": {
          "ref": "44ee5169-e3e6-4ae7-8058-7a8a972f5675",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "758b615d-c87e-4ccc-ac5f-b556929ed076"
        },
        "item": {
          "id": "b2b4d76e-99ee-452d-85ec-ecccc22c8286",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "e9f37d97-8434-42b7-b309-15da206171c0",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "93f650d9-85a6-49cd-acb5-c6737f7ccb7e",
        "cursor": {
          "ref": "cca79d6f-6705-4c25-91e2-0f024bf9c661",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "b95a891f-66b4-4fa0-afaa-a9cbeafe25e2"
        },
        "item": {
          "id": "93f650d9-85a6-49cd-acb5-c6737f7ccb7e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "85fa9cef-4f22-4305-876f-f955d8f14a60",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "1b8eaaae-5118-41cb-8b51-42b768781c10",
        "cursor": {
          "ref": "abfb3457-8332-4c98-9f65-537e8ded6f42",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "ffb86078-f636-4921-a710-1bd93a93d06c"
        },
        "item": {
          "id": "1b8eaaae-5118-41cb-8b51-42b768781c10",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "a92057c2-aede-4b69-9dfe-8653051bb47a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60c3ccd4-5773-4a15-847e-ce619b38f540",
        "cursor": {
          "ref": "4daa747b-c5e3-4165-aa59-5d6bbcc2273f",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "22242f20-e400-427e-91bb-3bfb5683029b"
        },
        "item": {
          "id": "60c3ccd4-5773-4a15-847e-ce619b38f540",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "1862495a-56d8-4488-9442-ca494855d6ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40baab52-80e9-4ea0-9251-e23a55c57ac2",
        "cursor": {
          "ref": "34821251-f6de-414b-aecb-57a5973f2021",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "00967c63-e76c-4ea5-afca-14f4bac90e06"
        },
        "item": {
          "id": "40baab52-80e9-4ea0-9251-e23a55c57ac2",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "896ddc8c-f023-476e-b395-de6dced667eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69248596-6f54-4cf6-b7fc-5b5f706081f7",
        "cursor": {
          "ref": "93719c74-22d2-4bb9-b767-f0592da13dd0",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "038490f0-2499-455c-87f1-5c02578b6ef7"
        },
        "item": {
          "id": "69248596-6f54-4cf6-b7fc-5b5f706081f7",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "7cc6b3ec-6d75-441b-8b6a-a91a53dc3536",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95602a8d-7251-4db4-937e-d476cafb36d4",
        "cursor": {
          "ref": "cb0e5154-cac8-42de-b672-461086df82dd",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "e4da8d54-aac1-46d0-878d-6d4acfcd3d9a"
        },
        "item": {
          "id": "95602a8d-7251-4db4-937e-d476cafb36d4",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "2ae7c499-3773-498d-ad45-c9e5fc2f7d68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa9bfcea-42b4-4fcc-a0cb-31f99d12a769",
        "cursor": {
          "ref": "2d179dbf-67c1-4e25-9f46-477b7eb94b96",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "1b89de44-7961-4a58-8fa1-5589326223e6"
        },
        "item": {
          "id": "aa9bfcea-42b4-4fcc-a0cb-31f99d12a769",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "ddd4ef83-446f-4567-94b2-cedae870339d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84a1d857-55b9-4fc7-9dd7-37f12bb36cc0",
        "cursor": {
          "ref": "8dfe1f2f-33cd-45a4-903e-2ad4f887bb66",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "dc666eaf-e909-414b-8518-338f1b2f46e4"
        },
        "item": {
          "id": "84a1d857-55b9-4fc7-9dd7-37f12bb36cc0",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "d7b16715-497c-444d-8dca-d5bb2b2139e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f05b9590-5370-4126-a0a2-b303311537a5",
        "cursor": {
          "ref": "3af427b6-9e3b-4788-acc9-ab59a62afd01",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "d8f6007f-9a73-431e-8fdc-4e34c71d2ae7"
        },
        "item": {
          "id": "f05b9590-5370-4126-a0a2-b303311537a5",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "5f30cf10-df29-4a4a-9614-ee50dbee8537",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06689627-0c6b-480a-a81f-37693e78e771",
        "cursor": {
          "ref": "ed2b4439-05fc-4573-9a7e-4123cb6aa90d",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "212987f2-3801-4a56-b3b5-12ba0c01d32e"
        },
        "item": {
          "id": "06689627-0c6b-480a-a81f-37693e78e771",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "f1ef953b-56bd-4969-8ad1-4692a14e4f0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "240e76a6-0627-40d9-ba8c-66d764e1d6bf",
        "cursor": {
          "ref": "e4b985b8-32b2-45bd-9d45-409fc9a4258d",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "ebff4112-70f8-45a8-9e35-803d2c89ae36"
        },
        "item": {
          "id": "240e76a6-0627-40d9-ba8c-66d764e1d6bf",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "bd3c313b-96e6-4f64-b9c2-744e998ac910",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "202f9802-f807-4617-ae64-87387c44576b",
        "cursor": {
          "ref": "86256c93-69bb-4682-9390-826acd06fac5",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "3fafa900-3b57-444c-9a1d-17810afdeeee"
        },
        "item": {
          "id": "202f9802-f807-4617-ae64-87387c44576b",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "47942010-d47c-4e44-8f9d-538f98e121ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2d2732e-6007-43f9-b3b9-440e79ef62a1",
        "cursor": {
          "ref": "e457ecc3-abdf-4b64-9a64-49884c894f16",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "2a4d6e37-ac4d-4db8-89cc-fe60e9e9b370"
        },
        "item": {
          "id": "f2d2732e-6007-43f9-b3b9-440e79ef62a1",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "98d69147-ceeb-405b-84d3-0e20bf0a0301",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aed987ec-c026-4f8d-b2b0-063f28188335",
        "cursor": {
          "ref": "5ae8faea-5d3f-4c8a-9360-70df82d6ae20",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "9faf0ea9-0590-40fc-88d5-e1a1494dd63f"
        },
        "item": {
          "id": "aed987ec-c026-4f8d-b2b0-063f28188335",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "24adadc9-4a05-47d2-9f7f-3f94a39d9c18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a82f9106-453e-41e0-bf0e-4be3a34c8589",
        "cursor": {
          "ref": "1d9f1314-8048-4cbd-aa85-0dcbbf3f2658",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "cca7eb5d-0818-4b38-9f7a-5d799906c2b5"
        },
        "item": {
          "id": "a82f9106-453e-41e0-bf0e-4be3a34c8589",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "18f91009-5995-452f-92f8-b4a965c20e65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67c558cd-8169-4751-b42b-847c8b358a5d",
        "cursor": {
          "ref": "a9627332-4bf8-4813-b1c5-7aa99de68dba",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "3c9eecdf-dd1e-49ff-8624-ace5a2275df2"
        },
        "item": {
          "id": "67c558cd-8169-4751-b42b-847c8b358a5d",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "b65c12ef-df3a-4e52-9dac-ad6a2007a120",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09f3d815-54f4-4ca2-a9af-d237f2d234a7",
        "cursor": {
          "ref": "95232637-917f-480b-8380-9af3164f5de8",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "f499066b-cd19-419b-ab42-735f1b239226"
        },
        "item": {
          "id": "09f3d815-54f4-4ca2-a9af-d237f2d234a7",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "2a09632c-5936-4fd8-8302-eafbbef59729",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ddd9712-abbf-4def-a289-f0850e8f49c3",
        "cursor": {
          "ref": "393d0fe8-9e2f-4ddc-be1f-b1853af24a08",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "94b3abb0-a674-42b9-8e04-2fa505254649"
        },
        "item": {
          "id": "9ddd9712-abbf-4def-a289-f0850e8f49c3",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "ecc814a2-2e2b-43b1-8eac-dbf83cad0d92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b7e2cba-e3aa-4b7c-9500-178ed5638fc9",
        "cursor": {
          "ref": "fcfa81cb-3a2b-442b-ac89-6acf0af45e45",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "cc3da259-298e-4ac4-9270-96e1adc7831e"
        },
        "item": {
          "id": "3b7e2cba-e3aa-4b7c-9500-178ed5638fc9",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "b9d492fc-80c1-4bef-8d69-3690d6b34037",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aec8923b-a58d-4855-9861-6accb0447f64",
        "cursor": {
          "ref": "d03e982f-6760-461c-a374-b946c8ca7ba5",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "9b4ffbb9-004d-411e-8b61-cfa1ba9b5535"
        },
        "item": {
          "id": "aec8923b-a58d-4855-9861-6accb0447f64",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "fefe87e2-4a32-4812-b1e6-94acb28e36f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa79d320-2737-4586-a925-761907df2970",
        "cursor": {
          "ref": "302dbeb2-938d-4f1b-8df6-205e1489d339",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "777c030e-46d7-47b8-b4a8-e5ecf7fcfe3a"
        },
        "item": {
          "id": "aa79d320-2737-4586-a925-761907df2970",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "42ba6a97-038b-4c05-b79f-cf5c8ebb3120",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ce37b1c-845e-476f-bcf0-b7b1755806a0",
        "cursor": {
          "ref": "b1c65630-9c85-4e46-ad46-e1a0ab098659",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "64f1d50a-c1a7-4d2a-b5a5-680878f43743"
        },
        "item": {
          "id": "9ce37b1c-845e-476f-bcf0-b7b1755806a0",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "13cbdf25-dc5a-4893-a9b5-c4bea4b65581",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30a1e187-35de-487d-baba-9415e54e1175",
        "cursor": {
          "ref": "1a735a9e-7060-4ff6-9a82-8c4a74ebef6e",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "56522809-8879-412f-95e0-7576c641df8f"
        },
        "item": {
          "id": "30a1e187-35de-487d-baba-9415e54e1175",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "70e74d13-3d01-4a56-a06c-39807ef3f975",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cf903d8-2234-448f-b84b-063325a7c8c9",
        "cursor": {
          "ref": "ad5c856c-5eda-4def-aa2d-c254761f41d2",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "2edd81b0-8439-4890-a386-a2840ac66371"
        },
        "item": {
          "id": "5cf903d8-2234-448f-b84b-063325a7c8c9",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "10605392-2319-4e83-a50c-c16e53a29d91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc582158-fb26-4daa-9caf-2eb7c18fc9f8",
        "cursor": {
          "ref": "02f7cb4b-ab7a-40b0-8320-324de04f2e21",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "95ffb0f3-b325-461e-a17c-7f125c275c91"
        },
        "item": {
          "id": "fc582158-fb26-4daa-9caf-2eb7c18fc9f8",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "50336201-4198-4861-a5d4-8c44511a3220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "866df837-7e13-45a3-b5f0-c4886d323cb8",
        "cursor": {
          "ref": "fdf890cd-a0e8-4d26-8ccb-13f9ce871acd",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "2917d91a-b667-43b0-930e-f56c5792a8dd"
        },
        "item": {
          "id": "866df837-7e13-45a3-b5f0-c4886d323cb8",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "3b6560c1-6fc6-42ec-87c6-3e6b3fa99b18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6854c819-3508-4af5-8061-4e4a89c2f1d7",
        "cursor": {
          "ref": "ba4da4ed-bcec-4c67-ad80-600e70bba534",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "ae04a4d3-9136-493c-a6e4-9e8bd7c96ef4"
        },
        "item": {
          "id": "6854c819-3508-4af5-8061-4e4a89c2f1d7",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "d119aa0d-7fed-4599-98bb-2a846567134e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0894d1c-63f5-4682-b7b8-fe9371689a60",
        "cursor": {
          "ref": "4713da9c-d05d-493a-8375-14a84403c3c7",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "09dbb6b8-66a5-4542-bb58-dac773fda6fe"
        },
        "item": {
          "id": "e0894d1c-63f5-4682-b7b8-fe9371689a60",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "5821336e-e515-422d-ba47-723ac1359425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e497259c-5737-4c5c-b4af-f2db2ecc4d37",
        "cursor": {
          "ref": "520bb7bb-fe9d-4b7e-aed0-de901f991945",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "378119b5-ce5b-4253-80aa-ce8650d6afcd"
        },
        "item": {
          "id": "e497259c-5737-4c5c-b4af-f2db2ecc4d37",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "209b2475-d94f-4223-b878-2046bcab1eba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de6e4e31-5741-4577-b26c-d82b2c9e576a",
        "cursor": {
          "ref": "83141fd9-18c2-46b6-925d-7e160ef87e7c",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "8c417815-90a1-469b-9fd6-cff7a9c5c234"
        },
        "item": {
          "id": "de6e4e31-5741-4577-b26c-d82b2c9e576a",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "5807d9ab-9daf-4482-b70a-9a4ebb606610",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "249fb8f9-ffc1-4612-9b69-51faac9ac59b",
        "cursor": {
          "ref": "85de9d6d-32ad-4295-ba57-cc593c762f7f",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "790d2b62-f1e1-4747-aa22-2931081a8a08"
        },
        "item": {
          "id": "249fb8f9-ffc1-4612-9b69-51faac9ac59b",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "9fb9d890-344f-4f85-ad3f-0099c7828326",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05781b42-2dda-4f38-b263-0ae6e8c01bd2",
        "cursor": {
          "ref": "3cb60267-1829-4e58-a727-3ad1db4db5f4",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "e8ecb0bc-a501-4f23-8a46-67475c082bc0"
        },
        "item": {
          "id": "05781b42-2dda-4f38-b263-0ae6e8c01bd2",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "df93572d-c983-4bee-b817-c2781c8cb07e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "924b3def-9a1f-4f54-9334-9b33ec233d03",
        "cursor": {
          "ref": "35163692-0beb-4e31-a661-1d20255769ae",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "195e4802-8a13-4138-8a94-67ca37d45fa0"
        },
        "item": {
          "id": "924b3def-9a1f-4f54-9334-9b33ec233d03",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "bc039ffb-54da-43f0-93cd-cd1ca92a48e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f4f661d-9325-45ac-8586-75f518986d15",
        "cursor": {
          "ref": "9eb55ce4-3cf2-4f02-a4f8-0825821a7a0a",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "9980f7eb-ca2f-4b6f-aa8a-11102230280a"
        },
        "item": {
          "id": "4f4f661d-9325-45ac-8586-75f518986d15",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "9c65e7a6-e947-46cf-a4ee-d363a9662311",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "f1e1daf1-db11-4f54-b8fd-7f95da186c86",
        "cursor": {
          "ref": "c2c3a88e-558e-48dc-8e44-301952777d34",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "f1bc0811-8426-4fab-9a3f-d3494c5d0105"
        },
        "item": {
          "id": "f1e1daf1-db11-4f54-b8fd-7f95da186c86",
          "name": "credentials_issue"
        },
        "response": {
          "id": "b393137c-a613-4e12-8eb8-35ba0b0e52df",
          "status": "Created",
          "code": 201,
          "responseTime": 338,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5a969bd-f716-4c32-a2dd-cf0ef19248d3",
        "cursor": {
          "ref": "b1958599-1f7c-419b-9c9e-4f7acd5f9925",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "b9491635-f093-40a2-9634-7a270f59f77f"
        },
        "item": {
          "id": "e5a969bd-f716-4c32-a2dd-cf0ef19248d3",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "613ca715-eb3b-456f-9429-26f2c9223be9",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8fe4648-857f-411f-a7ff-e255b254c18c",
        "cursor": {
          "ref": "f8d381b2-8165-42f0-bd6c-1f3175356fd1",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "c55db4e8-1716-46be-88f5-0cfb592dd666"
        },
        "item": {
          "id": "f8fe4648-857f-411f-a7ff-e255b254c18c",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "8a6a5124-c156-4bb2-ae4e-345649672160",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "88ec881c-c214-4412-b79f-83ec0d3f5351",
        "cursor": {
          "ref": "3de6520a-db9e-44dc-81cd-e0158880201c",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "b4dbbddb-1608-4219-b3d5-f0d4ec88fbf6"
        },
        "item": {
          "id": "88ec881c-c214-4412-b79f-83ec0d3f5351",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "19a8ea79-992b-4022-a976-04b60d8654a5",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c2ef04e-a82d-49bc-abb4-be4e05fef0d4",
        "cursor": {
          "ref": "33cf82fd-3b75-4b0c-bbf3-9ceb5f2d013b",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "629f7b9e-c015-49eb-b626-4a4473b0b82a"
        },
        "item": {
          "id": "0c2ef04e-a82d-49bc-abb4-be4e05fef0d4",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "417900d4-68c0-4a16-966f-716aef774127",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-01-31T00:34:37.018Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-01-31T00:34:37.018Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "8334c142-450b-4c37-84cf-120fb2564ae1",
        "cursor": {
          "ref": "ce9e3aad-3ca4-4486-80f7-fb03fbfa1897",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "bd3fcb9f-5bc7-4d2c-b16b-965c70aab9af"
        },
        "item": {
          "id": "8334c142-450b-4c37-84cf-120fb2564ae1",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "7d0e7d8d-0408-43d5-a0d0-a38f0b843156",
          "status": "Created",
          "code": 201,
          "responseTime": 348,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6a53715-126d-4b5e-911f-7d689b51e2c1",
        "cursor": {
          "ref": "4de34d14-f85c-4e14-aa07-a8f38daae5be",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "e228e6f7-a8d8-46ed-8cdb-87fbf6064395"
        },
        "item": {
          "id": "c6a53715-126d-4b5e-911f-7d689b51e2c1",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7a344f99-1767-4f2d-a554-2ef464f3547c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d80b133-fc2e-4cdb-bcac-466ce9c175e0",
        "cursor": {
          "ref": "ab6efac1-0ce4-492c-a1cc-7b729ddfb6b5",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "4cbe7a70-12c7-4dad-8ff0-ecf16e8abee3"
        },
        "item": {
          "id": "0d80b133-fc2e-4cdb-bcac-466ce9c175e0",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f91f5115-3e7f-4759-88a4-4fd07c1bb444",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e40b0594-eace-489d-a4fd-91ec814999b1",
        "cursor": {
          "ref": "061e3fbe-1856-472a-847c-8059de293379",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "3891bed9-8bb4-404a-8368-437da3622abf"
        },
        "item": {
          "id": "e40b0594-eace-489d-a4fd-91ec814999b1",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "3b3134b0-1286-4e40-89b2-49f1469af825",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "057f4c2d-f8dc-41cd-8ac4-7668989d403f",
        "cursor": {
          "ref": "dd0cf258-1413-4798-b5b0-7d9719c66eb5",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "bd0ee079-0939-4104-a6a7-8ffb5abf1b38"
        },
        "item": {
          "id": "057f4c2d-f8dc-41cd-8ac4-7668989d403f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "edd6db1f-a5e5-4511-8543-02e55921ccf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68ea702f-7440-4a39-9ab8-d418dc97ed15",
        "cursor": {
          "ref": "8f99100a-60e8-481d-ae38-f7ad23679159",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "5cc01d3d-ffdc-4a7b-943a-06332e6fd275"
        },
        "item": {
          "id": "68ea702f-7440-4a39-9ab8-d418dc97ed15",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "ef61e2a7-0171-4c0b-9dbb-8138b949551f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea775eb6-6b30-4570-b992-3372c235669f",
        "cursor": {
          "ref": "ce2500f8-b853-4b3c-8970-d29cda3f0392",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f4ef9ed6-23bb-497b-8596-890fdb741f4c"
        },
        "item": {
          "id": "ea775eb6-6b30-4570-b992-3372c235669f",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "acf83970-e59b-4efa-bb4b-23621a3077b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b253546-ab16-4f40-9449-2b45b6096c7e",
        "cursor": {
          "ref": "94046c43-e509-40fa-a28f-0122b9744ad1",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "f5985b00-81f3-4250-b547-ee7d0eb63180"
        },
        "item": {
          "id": "5b253546-ab16-4f40-9449-2b45b6096c7e",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "20e09b54-07df-45ed-bf8b-f1f145267f7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf406286-0bca-4138-9270-b4f3ca9343f8",
        "cursor": {
          "ref": "c823ab88-0797-4220-8f8c-fd654a4047e9",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "3d36f500-606c-403f-af6b-5a50ff8b7e6d"
        },
        "item": {
          "id": "bf406286-0bca-4138-9270-b4f3ca9343f8",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "f95e1bd0-6496-4491-a115-1d06368ec270",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e6312ed-fb56-47cc-a5c8-893d6d482cf8",
        "cursor": {
          "ref": "108ba95a-6391-49e4-81fa-9c250b9668da",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "e18253de-694f-4040-99a8-69a2d621f475"
        },
        "item": {
          "id": "0e6312ed-fb56-47cc-a5c8-893d6d482cf8",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "7053a588-4b76-44f9-aaca-dcbbc4acbc8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fa88c66-4e56-4ba8-9943-1c623a07d4b8",
        "cursor": {
          "ref": "53207e15-ba0b-4300-8fbb-e313d7d00d92",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "43349179-b3ad-4408-88c2-6c93ce59b204"
        },
        "item": {
          "id": "6fa88c66-4e56-4ba8-9943-1c623a07d4b8",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "9b963963-5dad-4bd4-aaf4-d4eb3295cb17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a68090c3-d462-4c62-9fd9-d9ecf14272a2",
        "cursor": {
          "ref": "db8b0b00-5b4b-4de2-8555-6dfb2faf5d16",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "45ca59e7-09a6-43bb-86a5-744a52d513c9"
        },
        "item": {
          "id": "a68090c3-d462-4c62-9fd9-d9ecf14272a2",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b437f5a6-6bc6-41ea-986b-d7035a015a9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "569a9321-2cdd-4a0d-8057-c2484a7a3a3e",
        "cursor": {
          "ref": "fd52c8cd-f830-4d20-aef0-5f68b667ee55",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "2c3f2a6b-5508-46bc-b1d1-78a764618574"
        },
        "item": {
          "id": "569a9321-2cdd-4a0d-8057-c2484a7a3a3e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "24a888cb-aa73-473c-8ee3-804f29ca18d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "809260be-a12c-486b-91bb-ffdfb1cb3616",
        "cursor": {
          "ref": "8db9dfcc-0e53-4d4a-9e58-e500a30d490c",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "55d9b74e-cc0e-40ad-9804-be20e5e4bb05"
        },
        "item": {
          "id": "809260be-a12c-486b-91bb-ffdfb1cb3616",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "b7406c10-29af-4c43-b698-938b2cd5f31f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 101,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "3b0be78d-745e-486a-a1f2-f71bd262d584",
        "cursor": {
          "ref": "002fd1cd-c0a5-465f-8cd8-1a1f8564a57b",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "d05be7b4-77bd-47ab-b942-142e6baeaae0"
        },
        "item": {
          "id": "3b0be78d-745e-486a-a1f2-f71bd262d584",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "06f73325-56da-4871-972b-0a9c9c1ecc3b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 80,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "c58d3a05-ad0c-41be-a89e-1e756be40b75",
        "cursor": {
          "ref": "b28adf0a-21d9-4130-9fc8-bf952e649517",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "84869ccd-2e18-4edb-a4f6-a16336479a88"
        },
        "item": {
          "id": "c58d3a05-ad0c-41be-a89e-1e756be40b75",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "01da84fc-ed4b-4ce7-bf16-8a455a0addde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd0d585e-7c13-4723-8053-e12feea10e59",
        "cursor": {
          "ref": "b10dc789-c7a5-4125-9761-2d1ea9849ab6",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "433863e4-355c-48b8-b669-af9886ab132d"
        },
        "item": {
          "id": "dd0d585e-7c13-4723-8053-e12feea10e59",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "d86f0556-42db-4e1b-8f65-014920086b61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "402b9b96-39b7-4e07-8c28-affdb5092931",
        "cursor": {
          "ref": "801f1721-3acd-4327-8a93-d5db7b82fa3b",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "c0b2c6f1-6427-4160-bb1e-c9841e1cfd6e"
        },
        "item": {
          "id": "402b9b96-39b7-4e07-8c28-affdb5092931",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b178e270-418a-495e-a64e-d22462e75d02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "780a1327-da10-4d2a-9a17-d42b065b263c",
        "cursor": {
          "ref": "e6de8d25-c3b1-4de0-a346-69033fb6a85a",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "5fba6be6-c19f-4473-a7ce-416c1e80059a"
        },
        "item": {
          "id": "780a1327-da10-4d2a-9a17-d42b065b263c",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "606c0860-6516-46d7-b676-deaa6dd161ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d71b8768-0cfb-490c-abb9-d3d416d759f6",
        "cursor": {
          "ref": "448feb79-bf95-4e7b-8177-32806515a5bf",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "40609ae4-3121-4dbf-95d4-59115a39e1be"
        },
        "item": {
          "id": "d71b8768-0cfb-490c-abb9-d3d416d759f6",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d4dc971c-1ce7-459c-b9f4-d100f67d4294",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23c01bef-7dab-425d-821e-ca7cd9290896",
        "cursor": {
          "ref": "b15da385-fae7-4c1e-82af-63614b83eb66",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "2fbbd1c2-c094-49de-9e39-ae9f4f761a81"
        },
        "item": {
          "id": "23c01bef-7dab-425d-821e-ca7cd9290896",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "8d76e3a9-5d99-4ad3-a64a-07747e0bd6e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d7c2279-de3a-4460-9fba-900befdc2eff",
        "cursor": {
          "ref": "8cd160ad-9ff4-4253-bd78-a7b75a7e523d",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "2c37e186-6450-4e9e-9dd1-ec7095be5283"
        },
        "item": {
          "id": "7d7c2279-de3a-4460-9fba-900befdc2eff",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "531df907-a991-4db9-8f53-a56e41f65cbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec10437d-9334-44df-b5a5-0f3d4ab8a740",
        "cursor": {
          "ref": "838b4149-81a1-4ed1-aa1a-07214c3e7fa7",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "0c51c1f8-6218-4bf8-b589-691aced5d51a"
        },
        "item": {
          "id": "ec10437d-9334-44df-b5a5-0f3d4ab8a740",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "e9b91022-2cc5-43f3-9ec9-72ef8e393516",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8ea099d-b40b-46ba-80a7-4b51a59d5738",
        "cursor": {
          "ref": "34eaec6f-1656-404a-bfef-e97aacf996db",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "791e3bfc-19fc-46bc-8075-ae57f1fc900d"
        },
        "item": {
          "id": "b8ea099d-b40b-46ba-80a7-4b51a59d5738",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "a3f707db-9de1-4f67-8886-6ca5ee1f49fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef5a944e-2cc3-4235-8a8c-d2c4b49be88b",
        "cursor": {
          "ref": "6f309805-a93a-4366-9fda-63437dd3f0db",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "6de8978c-56e0-4930-a3ca-36b84b994d93"
        },
        "item": {
          "id": "ef5a944e-2cc3-4235-8a8c-d2c4b49be88b",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "a8b21b58-903b-4ec9-ae2d-6628d1fd07f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed78e0b7-b3d8-4e74-86c6-7d68857ab098",
        "cursor": {
          "ref": "115b3434-f2d5-4a66-a1e4-239550c0de3e",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "2205eb92-6ca9-473b-b210-4fc702c93ee9"
        },
        "item": {
          "id": "ed78e0b7-b3d8-4e74-86c6-7d68857ab098",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "0105c3a0-4bb2-479c-8f78-e6d5d4f90625",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fbf5089-674f-4e8a-a9e6-923b7f287302",
        "cursor": {
          "ref": "376fa06f-6fea-406e-a746-1d642af70a6a",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "2fb73b6b-aad1-444f-9bd2-cf41b6788738"
        },
        "item": {
          "id": "5fbf5089-674f-4e8a-a9e6-923b7f287302",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "3d04ee0f-d409-4a85-9b9a-1ec89190f6ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffa313d3-11e9-412b-bfc2-1261a03fbd0e",
        "cursor": {
          "ref": "7367a41d-b36e-49d9-b116-584736ae52ac",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "ba076940-6ba4-4e29-bfd9-dda0d1b3a30f"
        },
        "item": {
          "id": "ffa313d3-11e9-412b-bfc2-1261a03fbd0e",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "2bcad26d-4396-4fe7-bbda-4161d0d8502f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ecc3349-9976-4d00-9db0-0380bd8e3b53",
        "cursor": {
          "ref": "8ebabbe9-24da-4da5-a91e-f74b2f5ee0a2",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "98a3f6c2-ceab-40c5-99bc-5ebe8d65f27e"
        },
        "item": {
          "id": "6ecc3349-9976-4d00-9db0-0380bd8e3b53",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "40eaa54d-7a17-46ae-8d65-d6fc0efa76fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e32f2d0d-b6ca-4e56-a197-1d795f3bac56",
        "cursor": {
          "ref": "6d70edbb-72ce-4e99-86a3-078e6281d888",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "f099b96c-5aa1-4e32-bcde-116b18a118ea"
        },
        "item": {
          "id": "e32f2d0d-b6ca-4e56-a197-1d795f3bac56",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "2caa99e1-2646-4a1e-bdf4-a436269c0a06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06ab4899-5853-4933-898a-bb7e4e73b1de",
        "cursor": {
          "ref": "c0bf1477-4f67-4611-aaff-8b1c0de0c18f",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "22488f75-2faa-40f2-af49-e212296167d0"
        },
        "item": {
          "id": "06ab4899-5853-4933-898a-bb7e4e73b1de",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "6ed387c9-7ca7-4132-8a29-a9c1ef44eeb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45ba607d-7d52-4bbe-845f-1f8365463db2",
        "cursor": {
          "ref": "d9dbca71-48c1-4c5a-890c-06a0285eeaac",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "445f1f76-e696-400d-998f-293a3fe9cba8"
        },
        "item": {
          "id": "45ba607d-7d52-4bbe-845f-1f8365463db2",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "65729d1b-2898-48b3-891e-94b647a52a46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db52af2e-212f-47d8-9373-18ef14f1cd88",
        "cursor": {
          "ref": "9b7bffa3-090f-428e-ae49-8be4eba98611",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "3e626b30-f11f-442b-8507-9508bf780f22"
        },
        "item": {
          "id": "db52af2e-212f-47d8-9373-18ef14f1cd88",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "949dab79-f0f3-4f59-ba5b-b68d930b248f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 79,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "ffc6ac2f-7fd4-4fcb-9612-555e8a10d1d3",
        "cursor": {
          "ref": "bad87131-c003-442c-a755-a47eaa05be9b",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "5fee1913-5722-4d20-acf1-1efe31a82316"
        },
        "item": {
          "id": "ffc6ac2f-7fd4-4fcb-9612-555e8a10d1d3",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "be756f66-0290-41cd-a6ba-792c208f7543",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05c850ae-e082-49b5-b2d9-1ff4c09871ac",
        "cursor": {
          "ref": "51f24cae-d957-43c2-ae74-76a309474222",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "f850d442-26fa-4878-8399-bcf7392474cd"
        },
        "item": {
          "id": "05c850ae-e082-49b5-b2d9-1ff4c09871ac",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "583d8099-6bd2-4bc9-995b-7f1a1c3b895a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80fb6f36-a37a-47bf-9259-593923fe39b0",
        "cursor": {
          "ref": "9959b6be-fe2f-48a2-aa4a-39bef92d9ffa",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "bd86bda7-0f86-4b0c-8e8a-30750011ef08"
        },
        "item": {
          "id": "80fb6f36-a37a-47bf-9259-593923fe39b0",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "22b2593d-dbc8-4ec8-b253-8219fb626d09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e448e9e-10a3-4e3a-b145-64f46577a5d2",
        "cursor": {
          "ref": "5b3f1f8c-b30a-44c2-908b-07da6b9cd49c",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "97145167-b1d6-4c03-ad67-28a213a45ad9"
        },
        "item": {
          "id": "6e448e9e-10a3-4e3a-b145-64f46577a5d2",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "69bdaf27-d725-420d-8309-3095ce46c8a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e175dede-7ff9-401d-93a1-dfb915192756",
        "cursor": {
          "ref": "390410ab-d916-4e69-ae6c-9e27d88b1ab7",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "96620de8-de6b-49ae-b0f8-786f480cba4d"
        },
        "item": {
          "id": "e175dede-7ff9-401d-93a1-dfb915192756",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "bc9108e7-4481-45d1-ba28-d5be00f1cbf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22e70428-2910-474f-91b2-b4d1a8e71d97",
        "cursor": {
          "ref": "90490be6-b664-41ff-8603-de3e0c9903c3",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "9c1c7a57-9a14-434d-8717-bbcc3dcc0b56"
        },
        "item": {
          "id": "22e70428-2910-474f-91b2-b4d1a8e71d97",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1b5780cb-3f3a-4720-8a80-c0c65d951c16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63809b59-4e08-42eb-bdd5-06466d34f50c",
        "cursor": {
          "ref": "abde0fb4-282b-4fe7-8366-7283b940bb2a",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "40d13c99-1ac0-4cd2-9ef4-6d6233e6c940"
        },
        "item": {
          "id": "63809b59-4e08-42eb-bdd5-06466d34f50c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "7c5c1107-e477-46db-b9d8-b9c5c08780f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54f6d9f6-6662-4da8-b206-4e1b085a5f10",
        "cursor": {
          "ref": "b883eb1a-8a0d-41c8-80b2-0714dd8a97e1",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "006c98ba-2d57-4931-be38-7805107240f8"
        },
        "item": {
          "id": "54f6d9f6-6662-4da8-b206-4e1b085a5f10",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "7acc1500-9868-4021-a2ae-9029c6c08788",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e7512fb-602c-422d-abca-9c2399d27bf7",
        "cursor": {
          "ref": "61a2051a-d7a2-45dd-b5bd-46484e41e18e",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "b7bc2a05-47e0-49dc-8dc9-9b64ad432c8e"
        },
        "item": {
          "id": "9e7512fb-602c-422d-abca-9c2399d27bf7",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "b615faf6-4145-4112-ac0b-103194ce40c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5975ea9-ceeb-4317-bedf-ff7391286f10",
        "cursor": {
          "ref": "9e47e58b-b22b-41ae-80c7-7d4c74ea4ff3",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "60fe075f-28aa-45c6-97a2-bcb37343dd85"
        },
        "item": {
          "id": "b5975ea9-ceeb-4317-bedf-ff7391286f10",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b4147d88-c5a2-43c5-b81b-ab911cf2d190",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6ff2879-8534-46e2-ab90-b7c455e8666d",
        "cursor": {
          "ref": "0de5b36a-1a30-4887-9235-ed588da6e3c8",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "3a9f2bba-79b6-482a-9ebb-6be46dacce1d"
        },
        "item": {
          "id": "f6ff2879-8534-46e2-ab90-b7c455e8666d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "94ad2398-eb2a-4adb-9df5-71a5e321d2e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "045b6cca-088d-47fa-aff7-de88701e6c21",
        "cursor": {
          "ref": "a7ba7eef-d2ce-4423-84da-7795aee78c72",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "939aa18f-4bc7-45b4-a5ca-d0815967b61e"
        },
        "item": {
          "id": "045b6cca-088d-47fa-aff7-de88701e6c21",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "6221016f-23bc-4984-a5dc-5d769f2afecf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0667a00-6289-42c3-9b07-ecb4cb88fdd2",
        "cursor": {
          "ref": "98b79f74-3bfe-4329-ae48-94a942f3c951",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "51edbba2-2f83-42a3-8924-c5b79d47c074"
        },
        "item": {
          "id": "b0667a00-6289-42c3-9b07-ecb4cb88fdd2",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "ce6a7e7b-e0d1-4551-ad37-ea7518db54ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "374fcb64-77b2-4874-bffb-6788a00d58c8",
        "cursor": {
          "ref": "0ba7990b-16f6-4a5d-adef-25d9784c6ad8",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "1b998fe7-65d4-4eed-aa5b-2dfd14d4761f"
        },
        "item": {
          "id": "374fcb64-77b2-4874-bffb-6788a00d58c8",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "7eb4e420-3891-450b-b28d-40b15cb1936b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8c930bd-41f8-4ce5-8481-86e923e56bcd",
        "cursor": {
          "ref": "4e346382-47e9-4d72-9e23-0fb4689fc9dd",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "87682c01-a6f5-4033-b13e-39d734d716fe"
        },
        "item": {
          "id": "b8c930bd-41f8-4ce5-8481-86e923e56bcd",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "cd5a16f2-2af5-4d1d-9716-0a8b6da23d55",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 75,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "001b1259-3bb4-4122-82e9-f0365671470f",
        "cursor": {
          "ref": "2e999d61-d4f2-47b8-a07e-8aa7f770960b",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "2cd4aca8-53fa-4f5e-b572-6aa4ba8b3423"
        },
        "item": {
          "id": "001b1259-3bb4-4122-82e9-f0365671470f",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ba7bd11b-0986-4eea-969d-80a52c6b3575",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05ca6069-bef1-47fa-b150-4c4ace24534d",
        "cursor": {
          "ref": "42093dc0-c1b7-4697-a865-1c005aca716d",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "f4488955-2a31-41b3-935f-ebc56558436d"
        },
        "item": {
          "id": "05ca6069-bef1-47fa-b150-4c4ace24534d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e991ac6b-f5b3-4313-a609-da07e038a612",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cf05154-f043-45f3-900c-87ce4395cdeb",
        "cursor": {
          "ref": "ceac74aa-0e2e-43b8-9a01-3b38f66b8940",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "8a51357f-1948-4e97-bf1d-3ed5d5b2f380"
        },
        "item": {
          "id": "7cf05154-f043-45f3-900c-87ce4395cdeb",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "4f5e6744-b9bb-4997-9f09-fe8397e7292a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "903a6de0-d8f1-4143-9789-afceb6457b13",
        "cursor": {
          "ref": "555726f2-1ef2-4414-9f85-875ef202cb8b",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "f74a3ae0-f7f0-40bd-bdb8-f2fcf56a599a"
        },
        "item": {
          "id": "903a6de0-d8f1-4143-9789-afceb6457b13",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "2cb8cabe-66a9-47f7-a3ef-414f872c14f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95b7fabf-44a6-4e89-beeb-ef941b61bde7",
        "cursor": {
          "ref": "65a90ab1-9d00-4ab6-a7d5-eac5dfb036de",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "5507d87e-aaea-4e85-ba78-fc8908406fd2"
        },
        "item": {
          "id": "95b7fabf-44a6-4e89-beeb-ef941b61bde7",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "bda0f9fb-6dc9-49f9-ac2a-d4bf780f87ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4557974-c320-4ed0-89c6-827961b77cfe",
        "cursor": {
          "ref": "665b9dbc-d824-45ce-ab7f-53a499fa5b8b",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "ce5ad977-f686-47e9-9c1d-6d1d13348229"
        },
        "item": {
          "id": "d4557974-c320-4ed0-89c6-827961b77cfe",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "b3b19dac-8cae-4416-b254-806ba6bbf72f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84b9faf0-074a-4e63-acbf-e9bc807b3eb8",
        "cursor": {
          "ref": "bbdc2372-eb6e-49ff-8dcd-7ec35fef5de8",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "95fdd2a8-3aaa-4f09-b902-a6dd5261f4fb"
        },
        "item": {
          "id": "84b9faf0-074a-4e63-acbf-e9bc807b3eb8",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f779aac5-287a-4445-918e-f69b624781bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3687d7dc-e442-4a2d-ac7a-6f7d93cb7b2f",
        "cursor": {
          "ref": "937edc91-02b8-4780-94f9-a5f06522ecbb",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "9e71f03d-06c2-4b48-a7b0-de3013ad617d"
        },
        "item": {
          "id": "3687d7dc-e442-4a2d-ac7a-6f7d93cb7b2f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "2180829f-d41d-4fab-96ab-ab70d192d03e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76c5599e-167b-4321-85cd-4572e3bb030c",
        "cursor": {
          "ref": "db2405d7-e663-46e9-9ad8-c496c95b2167",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "ee56803d-dfc5-4dc7-a1aa-e790ed73ab44"
        },
        "item": {
          "id": "76c5599e-167b-4321-85cd-4572e3bb030c",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "553abe70-325a-4ffd-90bf-56d90e42ba12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da78f4f4-1aaa-4582-a955-80da80dc5849",
        "cursor": {
          "ref": "75482540-2a6d-4313-a9a2-d1884396b870",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "5fd36d4a-9ebe-48e3-b109-369760cb7f43"
        },
        "item": {
          "id": "da78f4f4-1aaa-4582-a955-80da80dc5849",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "53454c81-7413-445b-af50-9270c05eae51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79979b6f-1ce3-44a7-a92e-986e341e7c82",
        "cursor": {
          "ref": "f4d9f413-199c-49ee-b114-e54ff7677f52",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "4eb7375e-0d08-48c2-b7c3-a7ee53f0644c"
        },
        "item": {
          "id": "79979b6f-1ce3-44a7-a92e-986e341e7c82",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e550bd1a-143d-41f7-ad1b-d4405f10d301",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a570f72-fe8d-41eb-8ec4-9989ef730407",
        "cursor": {
          "ref": "2f686d59-191c-475d-8b14-a4ecfee21890",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "2cbc4a76-04b9-4715-979a-3cbe01031e88"
        },
        "item": {
          "id": "9a570f72-fe8d-41eb-8ec4-9989ef730407",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "020f61a0-ffc5-490a-b7dd-70850ff58953",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0d95209-4704-4b19-ad4f-3f16a513b951",
        "cursor": {
          "ref": "54662d9c-f94d-4331-aae5-11711dedb050",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "dbda789d-de35-4c64-8827-3f8c6ed85152"
        },
        "item": {
          "id": "d0d95209-4704-4b19-ad4f-3f16a513b951",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "d1a0659c-091f-4e42-a5db-ba6c0147ced4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8c6a022-c27d-48c6-b833-7cab11072571",
        "cursor": {
          "ref": "20bae456-2cb0-42a5-baf1-310ae3847e71",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "d68acbbd-bd86-407e-a353-6685e2bddb95"
        },
        "item": {
          "id": "e8c6a022-c27d-48c6-b833-7cab11072571",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "99c5dc18-0dcf-40c3-8536-6ffa54dad9d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21658c6e-b1c5-4fef-aa16-ed323faa741d",
        "cursor": {
          "ref": "02f79e26-c126-43f8-9cac-76c8a5278452",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "d38cb363-08ba-4678-bc7e-29a6771d074a"
        },
        "item": {
          "id": "21658c6e-b1c5-4fef-aa16-ed323faa741d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "25c4c4dd-2d69-4a32-ae59-c295cf7d1ca7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e613e2fc-4d0c-4589-870d-e47847f50ebc",
        "cursor": {
          "ref": "a5599f5a-b4b1-46df-9ddc-a5e3010fbe21",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "4434dc66-0145-4bcc-a9e6-8202019d1523"
        },
        "item": {
          "id": "e613e2fc-4d0c-4589-870d-e47847f50ebc",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "361f54ca-6c43-46ff-b6f9-a0d40feb6f37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "554f73bb-7517-46fd-87f5-e79ef9c3058f",
        "cursor": {
          "ref": "fbdcfb9d-3e3d-4f7a-97da-f1582152385b",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "4ed8e42d-ceaf-4bf2-be01-d14c643dffb6"
        },
        "item": {
          "id": "554f73bb-7517-46fd-87f5-e79ef9c3058f",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "7f1d41a9-4f87-4379-b913-3511234b9bbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c30003a-2a4a-434d-b1f0-63fe21ad575b",
        "cursor": {
          "ref": "5c0e67da-11b7-44c7-9dbf-dcdee410c9bc",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "e000655a-d419-4230-94b4-a395bc226ed2"
        },
        "item": {
          "id": "7c30003a-2a4a-434d-b1f0-63fe21ad575b",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "25dcf78c-84fa-4342-9bd7-1a3ea9bf0b78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d91fa33-7e4c-4aac-8d27-7d34c4bf6611",
        "cursor": {
          "ref": "1d128b03-ebe8-47d3-a44c-db3d96ea44a0",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "acd1961b-7f12-4d77-9554-63211cc59804"
        },
        "item": {
          "id": "9d91fa33-7e4c-4aac-8d27-7d34c4bf6611",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "a9a61f3f-b2a2-4cea-82ca-0c7702ecaeb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f2ea5e1-8d51-4f39-8b07-1ae508c9f30d",
        "cursor": {
          "ref": "2efc12cb-0155-475c-ac17-6c56fb092122",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "c932c3a0-4236-4523-9a32-60781096350b"
        },
        "item": {
          "id": "2f2ea5e1-8d51-4f39-8b07-1ae508c9f30d",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "89cb8022-c743-4ed2-a6fb-6ddaacc470b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b1472e1-9199-4519-8ec1-22be0718f887",
        "cursor": {
          "ref": "61cdad5a-9e26-4320-958d-b78c95949be8",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "c14257bd-a79e-4d4c-86cd-5bbb8cd7b30d"
        },
        "item": {
          "id": "9b1472e1-9199-4519-8ec1-22be0718f887",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "8961a558-8b21-4d95-9f3d-b4343ae92e51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d44e0dd7-58de-4394-8997-1c151b629c99",
        "cursor": {
          "ref": "c97cc713-d87d-45bb-b55e-a9766e4cf643",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "edc1410f-b214-4bfb-ac62-5fddba24934b"
        },
        "item": {
          "id": "d44e0dd7-58de-4394-8997-1c151b629c99",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "27374409-8b8d-4d57-8b24-9f9efc735cf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf5fd546-2797-4c8d-8665-3e0a461ab3f5",
        "cursor": {
          "ref": "96f14e7c-fe64-4f04-bde9-5269414a2164",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "ab055b37-1164-4857-af4b-a6b8984a3196"
        },
        "item": {
          "id": "cf5fd546-2797-4c8d-8665-3e0a461ab3f5",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "e49a19ba-eecf-47dc-b821-a7479e7ddf42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edbf1a54-614a-4e83-8d20-c2aee9798afe",
        "cursor": {
          "ref": "e34b0f75-3499-4d2b-bf44-b50998bff927",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "66678d7c-6f0b-4df9-ae7e-7afdbb774501"
        },
        "item": {
          "id": "edbf1a54-614a-4e83-8d20-c2aee9798afe",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e0d52f8b-4153-418f-9de0-7ee095e99218",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6747a24c-df7c-49d4-a556-711085065ebd",
        "cursor": {
          "ref": "8846f22b-638d-4f53-b26e-0067434c17f2",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "4316e5d7-e7b7-4b09-aecb-b632043ecf3a"
        },
        "item": {
          "id": "6747a24c-df7c-49d4-a556-711085065ebd",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "82293c71-c69a-4afc-80c2-585784fd14fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ebee4c6-1e7e-40e6-acfb-564100616b5f",
        "cursor": {
          "ref": "d600ea6a-d971-4489-90b1-e5975bffc035",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "da9dc798-ee7f-4d8b-9a93-852f4315e08a"
        },
        "item": {
          "id": "9ebee4c6-1e7e-40e6-acfb-564100616b5f",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "67b89c1b-6cdc-40b3-ae1b-4a59f975ab61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "481a8dfa-aa99-44cb-afd4-5677a130c510",
        "cursor": {
          "ref": "b4e84788-f685-4615-a36f-c288f8bfcd84",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "22747b58-161f-4f6c-9440-930bb1e40084"
        },
        "item": {
          "id": "481a8dfa-aa99-44cb-afd4-5677a130c510",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "86ee6671-f60a-41e5-9b23-2bc3c88dac5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea17d399-eada-4173-8252-ba284135207d",
        "cursor": {
          "ref": "98dba7cd-d61a-4ae9-a3b3-e68b19f4c540",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "b9554426-c0dd-47a6-9368-9e69cc0aa5a8"
        },
        "item": {
          "id": "ea17d399-eada-4173-8252-ba284135207d",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "9e131d4c-b739-4443-80a4-23b650cd6723",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96f6e641-9521-4275-9de4-97f3275c61b0",
        "cursor": {
          "ref": "f54e1ffc-0605-4d11-97c5-45dbb72c6cc3",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "cbdb467d-b629-450d-835f-b1a83330f618"
        },
        "item": {
          "id": "96f6e641-9521-4275-9de4-97f3275c61b0",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "a82a5812-6439-4226-a4a0-020dbed5e004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2755fdae-c8a6-44ea-b7be-d15064e2afbb",
        "cursor": {
          "ref": "23f2fb17-16cb-4061-ae93-434338fea376",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "11a35f89-cd91-4e4c-ac13-fafe2e74b4ae"
        },
        "item": {
          "id": "2755fdae-c8a6-44ea-b7be-d15064e2afbb",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "ab742b41-68fb-4dff-a75a-b68022004877",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "ba882e2a-09b2-472d-88ed-c001f2ecf54e",
        "cursor": {
          "ref": "14eebe66-29e4-41a0-baf8-725704b2e32c",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "26cea213-bea7-447b-b4ea-f135222a36bb"
        },
        "item": {
          "id": "ba882e2a-09b2-472d-88ed-c001f2ecf54e",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "cd0e50d0-a11e-4f6f-b45c-8ad6a84e6787",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f35131b-f66c-45e6-a31a-9f3cb86374ef",
        "cursor": {
          "ref": "b6097fb1-2702-4a11-bac0-84b05d9c2fbf",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "04fa1e6f-4e31-466f-9a4c-40b014697a4b"
        },
        "item": {
          "id": "2f35131b-f66c-45e6-a31a-9f3cb86374ef",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "c3031c69-1cfe-4ad4-aafe-62bc45e13cab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cf389d7-43af-4630-8edb-e9d4883d2c00",
        "cursor": {
          "ref": "7b05741e-3d1b-4135-9a79-a5ad2ddf516d",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "1caa759c-8bfc-430e-816d-78a8ded8e558"
        },
        "item": {
          "id": "8cf389d7-43af-4630-8edb-e9d4883d2c00",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "6ec4c532-6e04-4fd2-b1d8-80b205318775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63288594-af58-45c4-91d9-0d81bbae9ab7",
        "cursor": {
          "ref": "4f7c7a47-e70c-4020-8fb9-33e667628cbd",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "6edb810d-78c0-4b2e-a11a-df07d0e35ae4"
        },
        "item": {
          "id": "63288594-af58-45c4-91d9-0d81bbae9ab7",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "9083bbc1-f971-4b91-831d-616567ee2859",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05cbdc18-a081-46d8-a0b8-62cf2e62e8e7",
        "cursor": {
          "ref": "1a2516dc-01cb-42ec-a68e-6117ffc981e8",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "f7e311c3-cae6-4726-82c4-b409c8a0ed75"
        },
        "item": {
          "id": "05cbdc18-a081-46d8-a0b8-62cf2e62e8e7",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "ea49b53e-3997-4086-a033-24befed6176f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2103b586-e51e-4891-8ded-8ab4fcf389e6",
        "cursor": {
          "ref": "28ab890e-47a1-48fd-9f45-1267217e55bc",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "86549f37-5013-4b78-9d54-592a59004e22"
        },
        "item": {
          "id": "2103b586-e51e-4891-8ded-8ab4fcf389e6",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "b20b01c6-806e-4cfe-9d39-9b27e90815b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe5db88a-61c9-4e1c-af53-80806adcd441",
        "cursor": {
          "ref": "7a984b90-8b6a-4df6-8e18-59e4669a6743",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "5c82b152-b9d0-4b5a-bd0d-613253c5f2b7"
        },
        "item": {
          "id": "fe5db88a-61c9-4e1c-af53-80806adcd441",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "4f07f270-6696-4b53-88b6-aef735e8dc3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3b4218a-a99f-462a-83da-3864b6beb326",
        "cursor": {
          "ref": "82f8d5d9-5e2b-47a0-8817-e3ae95db746b",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "2147136b-be5d-4a3a-a0af-4be4060d5fcc"
        },
        "item": {
          "id": "a3b4218a-a99f-462a-83da-3864b6beb326",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "b86f5c9d-b0de-4f6d-a5f1-c8e222501307",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48da51f5-4ad1-44cb-8624-ec02bd0d2c02",
        "cursor": {
          "ref": "a0aebb71-9fb1-48dd-88d6-cb6aa8129489",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "a6eb6260-234f-4b31-8d6e-6bf1e2cf51ed"
        },
        "item": {
          "id": "48da51f5-4ad1-44cb-8624-ec02bd0d2c02",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "2bae75c9-0942-43ec-b8df-8c45aaed9473",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "018cf886-1130-437b-83a4-c4163393aafd",
        "cursor": {
          "ref": "7fdd9691-694f-436b-afa4-fe9dcbe23d48",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "059521d0-f3a1-466d-a472-09376efbe45c"
        },
        "item": {
          "id": "018cf886-1130-437b-83a4-c4163393aafd",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "17bb753e-c2d8-4068-b327-0338e2226eea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "333ae823-fa92-4e97-93cd-d6cf5ff94e3b",
        "cursor": {
          "ref": "9cb18547-2494-46fa-a0bd-cf547d00444e",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "df1d873d-663d-462d-b69e-2705c508069f"
        },
        "item": {
          "id": "333ae823-fa92-4e97-93cd-d6cf5ff94e3b",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "c1b4d849-575f-438f-9d32-8c625e4fd21f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4183dace-c259-46a3-a674-600f634c6d49",
        "cursor": {
          "ref": "c3e65fea-cc57-4817-9ee1-df0c4c73206e",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "ab14b5ed-deba-4702-aa4d-2849b226e58c"
        },
        "item": {
          "id": "4183dace-c259-46a3-a674-600f634c6d49",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "c4449670-8462-403f-8308-a0b73d3d6666",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f01cb4b6-254a-4a3d-adf9-cc7e9ba84d6e",
        "cursor": {
          "ref": "26fff8f6-0c0e-41aa-83d9-a155b0de57df",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "92066b45-b8a3-4fb8-8a26-2493b9b5537d"
        },
        "item": {
          "id": "f01cb4b6-254a-4a3d-adf9-cc7e9ba84d6e",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "e58fb115-d320-4d9c-be5e-e0dd2d3598e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d373cbf8-4340-4760-a0bb-e4230daa30f9",
        "cursor": {
          "ref": "1f73478c-dc94-4fd1-b7b3-4ab846154e1e",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "44597b78-e78b-4107-9efc-e3668d9c444c"
        },
        "item": {
          "id": "d373cbf8-4340-4760-a0bb-e4230daa30f9",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "daa63c7d-9822-49ac-a8ae-54924865796f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3bb2f92-476c-49b1-b746-512f118fbf3d",
        "cursor": {
          "ref": "617163e6-33d8-488b-9790-d504f5812765",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "75d1ce27-ba8d-46df-8660-c9a7f76fd74d"
        },
        "item": {
          "id": "e3bb2f92-476c-49b1-b746-512f118fbf3d",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "48ec6c1a-d593-4b01-842f-2123db3b5738",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26d6637a-c209-49d7-a513-a5465991c937",
        "cursor": {
          "ref": "8b6f7faa-7424-4fcb-92e0-bc9c6ac85983",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "879155f5-2aba-4ccb-b0b0-ddeea9635427"
        },
        "item": {
          "id": "26d6637a-c209-49d7-a513-a5465991c937",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "30970ed6-cb29-44b8-87c8-d238edddad6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c89989fd-edf6-4b2b-9553-553e84328621",
        "cursor": {
          "ref": "9bb06f7d-6cb8-4cad-ab86-f69a8789b833",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "1a59353a-c748-4105-aec0-89a0dbd8a12e"
        },
        "item": {
          "id": "c89989fd-edf6-4b2b-9553-553e84328621",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "105fdf3d-33b0-4608-8fb8-19412008390b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1028775-fb78-4f0d-9ab2-50be69f4f2fc",
        "cursor": {
          "ref": "e2abfdd1-08f8-49c9-a4f5-f5290ade92b5",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "6a57bd4a-39c8-4e9f-ade9-9b032baea7a2"
        },
        "item": {
          "id": "d1028775-fb78-4f0d-9ab2-50be69f4f2fc",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "b2c4eddc-7f05-4886-a860-39d1a9429501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf328410-deec-4a3e-93d2-7fa8dc4dbcb8",
        "cursor": {
          "ref": "baad4e84-c94c-4df3-93c1-e820ca2a03be",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "fedc418e-91cc-4db9-a7ec-51d072490d71"
        },
        "item": {
          "id": "cf328410-deec-4a3e-93d2-7fa8dc4dbcb8",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "968ca817-4094-4f6f-8924-4551e97d4361",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d652c89-b604-445e-ac4d-ea2c7b69ad01",
        "cursor": {
          "ref": "3992b71f-a7f9-478b-bf30-11835378deaa",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "4aa0f553-0eb1-4871-9cb5-25bd9de3354d"
        },
        "item": {
          "id": "9d652c89-b604-445e-ac4d-ea2c7b69ad01",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "d31817e4-f910-4b7c-98f9-8f7c04b2d8b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3da15cef-bd0c-4318-bab7-69368c4308db",
        "cursor": {
          "ref": "220adc84-de0a-48d7-af19-aeee0937ca61",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "69d200ad-636e-4f6a-bbe8-4132ca66d88d"
        },
        "item": {
          "id": "3da15cef-bd0c-4318-bab7-69368c4308db",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "96b58039-4f77-4d73-8e5d-366fa024ff26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "074fcf59-dd11-4d61-bcce-19d4fac2f444",
        "cursor": {
          "ref": "bb889b49-1009-41ad-8c50-9e4567f1110a",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "a0d761f4-0a91-4d3e-84cf-44a94e1b9b30"
        },
        "item": {
          "id": "074fcf59-dd11-4d61-bcce-19d4fac2f444",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "e9b636f1-1bef-4fa6-a79c-8091c226d666",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e39da75f-ee54-41b6-8f5a-15a6db05dc33",
        "cursor": {
          "ref": "f95aece3-b257-47be-80f2-47ace8ccb5ce",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "1cf74bd0-dea6-4647-9856-1b8b35c07d96"
        },
        "item": {
          "id": "e39da75f-ee54-41b6-8f5a-15a6db05dc33",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "d5090951-7c82-418a-8d87-60eca5d5bb0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beb132f9-f5ac-403e-8c48-9b987f46953b",
        "cursor": {
          "ref": "56e03ed6-5b62-40c5-be64-35e5c7938691",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "92f88bc7-1bbf-4c8d-834c-d1df0bc5dabf"
        },
        "item": {
          "id": "beb132f9-f5ac-403e-8c48-9b987f46953b",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "2a676a89-2da9-4447-a237-a79ba3b03e61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "943974d9-bf65-4c98-a6ef-9fe3b5a1b321",
        "cursor": {
          "ref": "8033964f-f481-474b-98b5-5e7c30d2df6b",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "e0cbb348-0fbc-43e0-883e-90cc8d04f4d6"
        },
        "item": {
          "id": "943974d9-bf65-4c98-a6ef-9fe3b5a1b321",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "1838393e-f86e-46ab-8049-33226245cfef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f58b736-a04c-49c4-b880-7f39434e12dd",
        "cursor": {
          "ref": "12cf7fc0-8d1e-472c-9862-c81d916745e2",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "eaa93f68-d5d2-47a4-b192-d494d74b4955"
        },
        "item": {
          "id": "6f58b736-a04c-49c4-b880-7f39434e12dd",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "0006c740-bd2a-4450-a36d-6c1c6b7be19c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6d45c47-c86a-4b5f-ba0e-baebc2aa40b1",
        "cursor": {
          "ref": "6a28b072-03d3-4682-8048-b76bbe8e28c5",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "5d985fe7-28b8-448d-80f1-2976ece91559"
        },
        "item": {
          "id": "c6d45c47-c86a-4b5f-ba0e-baebc2aa40b1",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "bb104b59-28bc-4e06-aa7f-c0278bb2fe02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98fc98eb-cd62-41db-9bea-a9f51d6bbc85",
        "cursor": {
          "ref": "d3e5806e-e029-42c5-80aa-00c16240b2d1",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "504a09dc-02df-4141-86ca-af564c41fa01"
        },
        "item": {
          "id": "98fc98eb-cd62-41db-9bea-a9f51d6bbc85",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "d83f20d6-5e58-4506-8864-1faf636df54b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88a65a3b-06cc-4a20-8920-32b841a1b669",
        "cursor": {
          "ref": "8a1a8003-ceb6-4187-b944-a90981828f68",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "ca73d330-72d4-4abd-9475-d4213438317a"
        },
        "item": {
          "id": "88a65a3b-06cc-4a20-8920-32b841a1b669",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "8b65c6ed-6d33-4f8f-bd69-f29d4d58f068",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fe6d7e3-76ad-473a-ae95-e89fff23d3da",
        "cursor": {
          "ref": "19a02594-1628-49b2-a196-f8c689ab384a",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "60b676ad-4dc2-4050-a702-52c0fb864ef9"
        },
        "item": {
          "id": "2fe6d7e3-76ad-473a-ae95-e89fff23d3da",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "d51cdee4-3ee4-4a92-ba00-191fb8f6df25",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "ea1e71a6-1e0b-4144-80ba-3de240a57e27",
        "cursor": {
          "ref": "4212a699-d12b-4317-8d2c-f7a11d81034a",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "1ac3f07c-7fb2-4eb8-a91e-fee182166795"
        },
        "item": {
          "id": "ea1e71a6-1e0b-4144-80ba-3de240a57e27",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "427cbedd-9eef-4f7f-8a3c-a5e0f71637ef",
          "status": "OK",
          "code": 200,
          "responseTime": 146,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "82a82f77-d8f5-4e7b-93c8-9b6c42cd019a",
        "cursor": {
          "ref": "0f3a1c99-4f8d-496a-bed1-1c79e451a4a4",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "ae7b1b92-94e8-4217-9478-73a6dd904fbe"
        },
        "item": {
          "id": "82a82f77-d8f5-4e7b-93c8-9b6c42cd019a",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "df265563-282c-4a29-b88c-4927cf9593a2",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "e42ba94a-e74d-4d09-94d9-4fc723d133db",
        "cursor": {
          "ref": "40651f74-635c-46d1-86ab-4c2f466033d2",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "1f0d4f9f-1600-4a4b-bc01-3b2cf758297f"
        },
        "item": {
          "id": "e42ba94a-e74d-4d09-94d9-4fc723d133db",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "a4428e7e-87fd-494d-97db-a8da3609035a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "406b2958-3eab-428e-8b53-2d91b57ae776",
        "cursor": {
          "ref": "d215f175-45da-4455-b980-5b53e754aa82",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "08094a26-781f-4e18-a455-7fa69e7ce2fd"
        },
        "item": {
          "id": "406b2958-3eab-428e-8b53-2d91b57ae776",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "7b31379b-4724-40fb-92fd-e3c9c968e2e6",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "daa377ec-86ec-4db2-a45e-5d88c9eff5cb",
        "cursor": {
          "ref": "f4ca37bc-01e4-4e5d-8d66-610dca0272ee",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "439f326e-c716-40bb-b51c-6276a428c2a8"
        },
        "item": {
          "id": "daa377ec-86ec-4db2-a45e-5d88c9eff5cb",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "24f69fb8-a7e6-4b01-8820-e0409f3cf6f5",
          "status": "OK",
          "code": 200,
          "responseTime": 152,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "d51da91d-ebed-4ed2-92c2-8ee7269bdb9c",
        "cursor": {
          "ref": "e571011b-ab21-49d0-963f-220a31ce46b3",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "3f8eb5ee-e88b-4a14-b72f-3dcaf7c45c84"
        },
        "item": {
          "id": "d51da91d-ebed-4ed2-92c2-8ee7269bdb9c",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "277d02c4-692a-48c2-b25d-2077168ca5b2",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "6d546be0-3c47-4785-9d61-d43eca809b30",
        "cursor": {
          "ref": "8b68e669-ab4f-43b7-a455-b7bdcbe387ee",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "cabe6ac4-b035-4125-8a78-42aad7df1222"
        },
        "item": {
          "id": "6d546be0-3c47-4785-9d61-d43eca809b30",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "575732fe-6e80-45f7-8124-f099d1ee37a0",
          "status": "OK",
          "code": 200,
          "responseTime": 150,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "c1fda4c7-d632-462a-abdf-ef1730add386",
        "cursor": {
          "ref": "d8785f3a-3e4e-482b-848e-c2258b4ac037",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "fed60475-f833-4c55-aca4-7248ad616965"
        },
        "item": {
          "id": "c1fda4c7-d632-462a-abdf-ef1730add386",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "5ee0bb63-37ec-467d-ae1f-7f92e1102e7a",
          "status": "OK",
          "code": 200,
          "responseTime": 149,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "d7b06c69-207c-467c-975d-7a73dad28dd8",
        "cursor": {
          "ref": "490ed8fc-c5c6-4a9c-96f8-3c631214d65b",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "565a677c-5a21-467e-8d41-0ef725af2819"
        },
        "item": {
          "id": "d7b06c69-207c-467c-975d-7a73dad28dd8",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "47ff197d-ba57-4ea2-8974-c66465c26ae2",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "8d1430a0-791c-4d59-b03f-a7e4a5bc3381",
        "cursor": {
          "ref": "c7527aac-5a74-4798-b839-e0403530dd26",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "3e7fa3f9-535e-425f-be58-0b138a2e74d1"
        },
        "item": {
          "id": "8d1430a0-791c-4d59-b03f-a7e4a5bc3381",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "bbb792ee-5c0b-44cd-b05a-be762b3d9aa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "249c6081-ad4f-450d-8a97-4b2371451d71",
        "cursor": {
          "ref": "755502f6-3791-44b8-b36a-393e2903087b",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "e18daea4-c215-4d72-940a-b040db5b8fe8"
        },
        "item": {
          "id": "249c6081-ad4f-450d-8a97-4b2371451d71",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "2724830a-602d-4a1b-b4fc-0910453b0e9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36a6d6d4-d3af-4d3f-bb2b-6eda76f2cbc4",
        "cursor": {
          "ref": "7caeeb60-4474-45c7-8163-bab757aa3213",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "cc165d0e-61dc-4ca2-8842-dfc18d023554"
        },
        "item": {
          "id": "36a6d6d4-d3af-4d3f-bb2b-6eda76f2cbc4",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "e9544793-fe25-4139-a2f5-9f4b4b33ab78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cd34bfa-4c23-43c0-b351-f45fa6923ef9",
        "cursor": {
          "ref": "f9db3041-68aa-4da0-8579-06981e16bcb0",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "75a3a727-29fb-4565-b672-e90f03f64ca2"
        },
        "item": {
          "id": "3cd34bfa-4c23-43c0-b351-f45fa6923ef9",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "ab61bc12-5d6a-4584-8dc1-e96197d75f86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71356cee-645d-4f1c-8413-3721916fb7dc",
        "cursor": {
          "ref": "9b36a4a9-d46d-4bb4-889b-f39f6716bc1e",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "1e8705cb-2e9c-4bc1-9d1b-0db7c0409716"
        },
        "item": {
          "id": "71356cee-645d-4f1c-8413-3721916fb7dc",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "5039535c-de56-4768-97c3-6b53bd052c9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "155ea10a-324f-4f43-a938-3cbf0e77c950",
        "cursor": {
          "ref": "8ddb50dd-5716-4412-bd54-989c147ba16e",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "a5e25a4a-a968-4ee0-9bae-c3cfd6a89266"
        },
        "item": {
          "id": "155ea10a-324f-4f43-a938-3cbf0e77c950",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "1176332a-8509-4b7a-902c-34a48cafc3b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d2ebc47-e4f2-46fd-94b2-2713a5039713",
        "cursor": {
          "ref": "c57ae84f-4f5e-4926-9238-46f8607addca",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "98041381-0936-4453-a66a-064b33ee4277"
        },
        "item": {
          "id": "1d2ebc47-e4f2-46fd-94b2-2713a5039713",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "6ac33a44-843f-402c-8088-f986df3f746c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4b5f940-ec83-43bc-929c-6be23d22d43b",
        "cursor": {
          "ref": "b1e3249a-8d9f-4eb4-ab60-a6e5d1b2f82f",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "606cc261-3548-4bbc-b85f-f3345b466f36"
        },
        "item": {
          "id": "f4b5f940-ec83-43bc-929c-6be23d22d43b",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "ccbe29f6-2686-4c89-9adb-8afd5231b771",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "794740a7-4c60-4322-92c1-402a45cb2b1b",
        "cursor": {
          "ref": "3360656c-727c-455c-be9b-71f3f3c7b365",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "b5b44324-e846-4701-a172-dac37e85354d"
        },
        "item": {
          "id": "794740a7-4c60-4322-92c1-402a45cb2b1b",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "c7d6304f-7c24-4930-9ad7-b7378c6d0c90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7c88bb5-8309-4e83-8fcb-76fbc260e9a4",
        "cursor": {
          "ref": "117b286e-fd0b-4668-9d68-3c74adebea8f",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "2993b5cf-3b3a-4eda-9f2f-3155d06557c5"
        },
        "item": {
          "id": "f7c88bb5-8309-4e83-8fcb-76fbc260e9a4",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "71f415c3-3e89-4120-aaed-734d1f6dfd8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cdc2d56-ed1a-41a5-82f5-01e771ccf03b",
        "cursor": {
          "ref": "9f505d78-a773-4f45-9523-727f5e8ad915",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "a52d9fb2-6026-4b1d-943e-1ab7f3c61a5c"
        },
        "item": {
          "id": "8cdc2d56-ed1a-41a5-82f5-01e771ccf03b",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "65deb77f-c56b-41c7-a67e-e117047fd340",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58c24111-6d8d-4e7d-a2af-685319a6333c",
        "cursor": {
          "ref": "e467136d-6ba2-424e-a54f-1e510e38c548",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "98a67ef2-df94-4e18-b6d2-ef59abf341b6"
        },
        "item": {
          "id": "58c24111-6d8d-4e7d-a2af-685319a6333c",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "cccc068b-d8be-4f0b-81de-a7262c446b15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e353ec8b-009b-456b-8720-8ac6676690d9",
        "cursor": {
          "ref": "eeabcc21-3dd8-4f01-afea-3ce3e68c5b7c",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "462f97cd-8f18-466e-bb06-b0fe464aabdc"
        },
        "item": {
          "id": "e353ec8b-009b-456b-8720-8ac6676690d9",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "6bcc45b4-c90d-4545-a32e-40e69d2fc47a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11aa85b5-504d-4bfb-8060-b6ff6c1a2a94",
        "cursor": {
          "ref": "223f66ae-be3c-4e10-8e0a-db21f03a75c7",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "061be339-60b6-4a94-83fa-aab057d310ff"
        },
        "item": {
          "id": "11aa85b5-504d-4bfb-8060-b6ff6c1a2a94",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "52d534bf-4991-4976-90a3-bd4c04b6b65a",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "aa406b7c-8d5a-47fa-a88d-2ce5c5742aa9",
        "cursor": {
          "ref": "2f824cae-f4d9-49f8-80ca-48aabb634631",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "a93de2e0-d7ef-437d-910f-040d6b86ee96"
        },
        "item": {
          "id": "aa406b7c-8d5a-47fa-a88d-2ce5c5742aa9",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "dd147f88-740e-4f72-85e7-4969ee1555a5",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "be504321-f3d1-466f-aba1-b6ef8b38b53d",
        "cursor": {
          "ref": "ba0dfd5f-9885-474d-88d9-578a50c11227",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "4d9a7873-abb7-4b42-8189-dba949fef5d2"
        },
        "item": {
          "id": "be504321-f3d1-466f-aba1-b6ef8b38b53d",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "43abb138-17b8-4927-a443-181119b4dfcd",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "645781e3-46d4-4559-b7ec-7db071cc6043",
        "cursor": {
          "ref": "b8aaa51e-9b8c-4c73-a8f0-fcc71aebc9d4",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "c1a9fc8d-b384-4852-b574-55e180b11df4"
        },
        "item": {
          "id": "645781e3-46d4-4559-b7ec-7db071cc6043",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "6f8cfaf1-1e01-4046-b2b7-c9f7ab9cc949",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "6801e69b-bf5c-435d-8954-31808e67bf40",
        "cursor": {
          "ref": "ce1c8d00-8f11-4738-9175-ed0caa109d67",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "9fcf7825-e9fa-424d-9af9-43728b700c90"
        },
        "item": {
          "id": "6801e69b-bf5c-435d-8954-31808e67bf40",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "1bf169a8-7f50-46f1-b7c2-5b649af1b6b2",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "a6321306-117f-4b72-81b2-dd9197a1bda5",
        "cursor": {
          "ref": "997ebac1-1d92-4b9b-a893-030a8eb576ca",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "d415944a-8a12-4e41-a672-c57ebbd2b24d"
        },
        "item": {
          "id": "a6321306-117f-4b72-81b2-dd9197a1bda5",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "bad34b62-5976-4e60-9afa-c17b3ef64899",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b6d2793-7ca5-44e6-8ae4-42dab5a061c8",
        "cursor": {
          "ref": "7929df04-3ccf-472b-85d0-306ba3280626",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "69c5b326-444f-4103-86d9-ba50cada3d8f"
        },
        "item": {
          "id": "3b6d2793-7ca5-44e6-8ae4-42dab5a061c8",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "98940df8-9b84-4fed-a97e-e20b21b6a6d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3befdccf-946f-4780-9512-0a7197ccf71a",
        "cursor": {
          "ref": "b4eeed20-1e8b-430c-8eba-06c17460ea44",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "61963b37-0fd7-423f-b437-93a0fba537f5"
        },
        "item": {
          "id": "3befdccf-946f-4780-9512-0a7197ccf71a",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "13e56a63-d49a-48ca-a450-0588bb22e01f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a80702d-0145-49bc-bd53-5e3db9760446",
        "cursor": {
          "ref": "902d72bd-f0e7-4408-9cc6-a93ab15299fd",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f7eff61e-43aa-410f-8a6a-20c751e3ee7d"
        },
        "item": {
          "id": "5a80702d-0145-49bc-bd53-5e3db9760446",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "6e1eb29b-1a3b-45c5-8ea3-6d8f9c57d299",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec4a5c0d-673a-4928-9746-8ce1950abc89",
        "cursor": {
          "ref": "5d31fb97-16ee-4782-af38-18917a63be85",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "967f94ce-ded3-4700-8b6c-cb727a01423e"
        },
        "item": {
          "id": "ec4a5c0d-673a-4928-9746-8ce1950abc89",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "0eb2cebc-be7b-4696-9a10-fbf4e2acdfff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbf78719-ec89-4a04-b992-e2fc0ba09c49",
        "cursor": {
          "ref": "aea3d2e1-f69f-4ef4-81f0-abb85a0b57c4",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "57e8f4c7-93d5-45c0-bc04-46bafc452774"
        },
        "item": {
          "id": "bbf78719-ec89-4a04-b992-e2fc0ba09c49",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "56a92672-3b7a-46c6-bbb4-d8c71d6ec0e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba3f1163-930c-400a-983e-e3f23bb199ac",
        "cursor": {
          "ref": "96c2a5fe-dd55-4901-9809-46869846d248",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "2b2feaa6-8af4-49af-8143-ce34ab4b617e"
        },
        "item": {
          "id": "ba3f1163-930c-400a-983e-e3f23bb199ac",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "c6ca92ff-0bf6-4301-a84c-63c0ef897fa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a93ffabd-c5c5-4ed4-90aa-0927b64647e7",
        "cursor": {
          "ref": "3799d765-c9f1-4452-9ec7-3d3e6512e697",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "2bb49250-592c-44fc-a307-1db03ed48934"
        },
        "item": {
          "id": "a93ffabd-c5c5-4ed4-90aa-0927b64647e7",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "7bbfb125-a442-45fd-849a-49ea94740f11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9e8d60c-ba82-43fd-a494-9fab016ff36e",
        "cursor": {
          "ref": "224361ed-955c-44b9-8b71-a88f9532ba4a",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "2cbfe1f3-95e5-40df-9263-312e8f94a833"
        },
        "item": {
          "id": "a9e8d60c-ba82-43fd-a494-9fab016ff36e",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "55b3afc2-585a-43f8-81a1-83e375ce8032",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be83800b-f96e-4f99-a6e7-81a37335dbfb",
        "cursor": {
          "ref": "948364e6-029c-4ffa-ab73-29ff75ff1920",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "02da5bd1-32ba-45b0-bf46-a85d7625fa30"
        },
        "item": {
          "id": "be83800b-f96e-4f99-a6e7-81a37335dbfb",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "7b830593-e920-49e5-ac66-13e8a9a901b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63c3e000-ee62-4b01-8415-c142430e01e6",
        "cursor": {
          "ref": "5004e8e0-06d5-4ea9-a60b-d13b29b226b1",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "340b6ff9-b660-4aa0-a6a0-93e720edb7df"
        },
        "item": {
          "id": "63c3e000-ee62-4b01-8415-c142430e01e6",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "94520c5a-6d0f-49a5-8e3f-042d7e34bab0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7e80bf9-fbf6-45be-bbb1-4b37a1704fa0",
        "cursor": {
          "ref": "f6bd7d4d-e157-4c46-be57-f50705df6e71",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "da8fa754-1106-4614-bc44-fdb3ce990533"
        },
        "item": {
          "id": "a7e80bf9-fbf6-45be-bbb1-4b37a1704fa0",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "eed2dd84-0ad0-46b1-9d5d-4025939c6701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3af42b8-bbc9-4cba-b706-9933d365db8a",
        "cursor": {
          "ref": "8519b30b-1686-4b27-8c23-54049a6f0a83",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "49a6423d-5c15-4758-82b6-4632b83b01a5"
        },
        "item": {
          "id": "f3af42b8-bbc9-4cba-b706-9933d365db8a",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "7c83a31f-47c3-42df-805a-a9f696c4b127",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6a3f432-4a26-4fac-8edc-ff9904938462",
        "cursor": {
          "ref": "8bc2358b-36cf-460b-ae0b-3a4d7ffda5cd",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "4fc909d9-8d6f-4d12-8a3b-74357bed3d96"
        },
        "item": {
          "id": "d6a3f432-4a26-4fac-8edc-ff9904938462",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "1063a3be-b152-49f8-baeb-c31680c9c150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6259ccaf-b6b2-44f7-bff3-f06a016d29af",
        "cursor": {
          "ref": "a479ac6d-94d9-470c-ba58-0aee44540e99",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "c40cecdf-df79-42df-956b-c9e6840397fe"
        },
        "item": {
          "id": "6259ccaf-b6b2-44f7-bff3-f06a016d29af",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "901c07fe-98e9-4878-8c04-45519a434d19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e895a4a-da78-4943-9633-041b3733c4a8",
        "cursor": {
          "ref": "5927072a-0a33-4e00-9bdb-c570b7b8a7c1",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "1f2c11f0-e105-4761-8d19-796f958207ce"
        },
        "item": {
          "id": "9e895a4a-da78-4943-9633-041b3733c4a8",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "946eb009-ba8a-4bdd-b101-b7d4a8131991",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef1c556e-06f2-4b9a-a2df-627a69767dd0",
        "cursor": {
          "ref": "49d4e323-16c6-4590-85dd-7952529bdaff",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "acde13ba-a172-43c3-9546-f473151a3cfd"
        },
        "item": {
          "id": "ef1c556e-06f2-4b9a-a2df-627a69767dd0",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "46789807-1d2a-4750-973d-37eedd90e792",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85a18283-51b9-4d45-86f4-f1e708727f82",
        "cursor": {
          "ref": "2101a94b-6bf6-49ff-bcd1-05773063f050",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "ad462c56-58f1-4283-ac20-a6a16a25611a"
        },
        "item": {
          "id": "85a18283-51b9-4d45-86f4-f1e708727f82",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "a925018a-c3bf-4ef7-baec-99475be4abe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c17f00ee-ec36-4d08-871f-4a36c5f13167",
        "cursor": {
          "ref": "8c81c13d-299b-4415-b873-0fc050956a18",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "3f72ccc7-f298-46cc-8ea2-a02ea84b9f91"
        },
        "item": {
          "id": "c17f00ee-ec36-4d08-871f-4a36c5f13167",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "0dafef54-d451-490e-8250-23f8f1f26d5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5335b34b-94d6-4dea-bc02-f3d53ae10a7d",
        "cursor": {
          "ref": "13b6e9f6-e0ca-45d4-b2ed-b16318a05e8c",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "3c1b3981-2180-43b1-a8df-d51a4e9e8f56"
        },
        "item": {
          "id": "5335b34b-94d6-4dea-bc02-f3d53ae10a7d",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "9cd73c20-a249-433e-b0c4-0a8babf7f9be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e5fb116-13b4-44c6-a4f5-b0f412ddcf6a",
        "cursor": {
          "ref": "ee5c97f4-7ebb-4f50-8a3e-0878c3dcc458",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "555c114f-56d3-4e09-9eef-d625a42e2fdb"
        },
        "item": {
          "id": "6e5fb116-13b4-44c6-a4f5-b0f412ddcf6a",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ae602ca8-1657-4f74-8dc9-d0d8f716595b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91d81df8-9706-440d-b049-d1a29535d2d0",
        "cursor": {
          "ref": "5a45ba67-1e17-4424-a878-2ec4ef1132ca",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "ed1d070a-c738-420d-84dc-d5d8be02026a"
        },
        "item": {
          "id": "91d81df8-9706-440d-b049-d1a29535d2d0",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "0c9ab8bc-4b8d-4633-9b74-67221ebcf1a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9224fbf4-71f3-4675-8d36-768d206823d6",
        "cursor": {
          "ref": "adcd1df4-de70-4169-9a0d-b374603871df",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "0c24a2bb-0f48-498b-904a-e881e5a574e8"
        },
        "item": {
          "id": "9224fbf4-71f3-4675-8d36-768d206823d6",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "e6492de5-e9a7-40e9-b7ba-16609d4ca384",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35168215-557d-41c0-9a66-23d20acd5e82",
        "cursor": {
          "ref": "4f329038-6c23-4bfb-afb3-b200d302b8e6",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "246f9bad-dd3b-463b-b66f-de527ec97767"
        },
        "item": {
          "id": "35168215-557d-41c0-9a66-23d20acd5e82",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "c8598c23-8383-4e0a-9619-e91836fc6a3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e43a068a-6adc-4941-b874-ca096eae5f25",
        "cursor": {
          "ref": "9ce25b82-5242-4a79-a306-dcb184066b54",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "b4899cdb-343a-47e2-8f6d-1f86073ec7b2"
        },
        "item": {
          "id": "e43a068a-6adc-4941-b874-ca096eae5f25",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "043a6497-80b8-4694-96e7-a7219f3c25b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "448c3232-0a11-4bb9-9120-111dd938c337",
        "cursor": {
          "ref": "d1a90172-8c15-45ec-b8c5-250bc70638b5",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "a114686d-abd9-4400-92f3-0f6fd0d441b1"
        },
        "item": {
          "id": "448c3232-0a11-4bb9-9120-111dd938c337",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "f661dec5-2303-4b06-b453-e3fb883cf472",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc45c85e-736c-40b6-80de-b084c47fe245",
        "cursor": {
          "ref": "c4f7b372-81ce-4459-b0c6-775064c5e7e6",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "63a70180-0fe9-4c75-a9bd-1b36f8ced083"
        },
        "item": {
          "id": "bc45c85e-736c-40b6-80de-b084c47fe245",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "1d371c1f-9772-4b4e-a7f0-5f9e26d29362",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed99088f-72fe-4ad9-80d6-5044224ecccc",
        "cursor": {
          "ref": "e12c9c08-03da-4981-8307-ac9ecc6dd65a",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "7460dad9-e175-4b1f-ac38-ce85516daae8"
        },
        "item": {
          "id": "ed99088f-72fe-4ad9-80d6-5044224ecccc",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "080bacd3-c395-4eb8-97fe-31d64635e5c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "571c69d7-fa6e-4b43-8550-fc20995ab816",
        "cursor": {
          "ref": "b6efa08d-3f4e-4f55-98b2-7bd5be28799f",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "59609478-4ca9-450e-8236-3b2b80b48a28"
        },
        "item": {
          "id": "571c69d7-fa6e-4b43-8550-fc20995ab816",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "9606a190-44b6-4f12-adda-06387595d484",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acc98c3d-63f8-4964-9e87-5092306d46eb",
        "cursor": {
          "ref": "4cc3d8a9-0f47-48ee-ab09-bb08a53b4bed",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "8918d99d-e5ab-4201-abf2-681372dd0750"
        },
        "item": {
          "id": "acc98c3d-63f8-4964-9e87-5092306d46eb",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "2bcfd9c6-40d3-4b60-83ca-270833cfec3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaf8ecb6-8b10-4dce-b3ff-bcd9c73cfbe3",
        "cursor": {
          "ref": "0ea19b06-ede1-4c33-a4fb-9da1bbb5e4bb",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "550270a4-a34a-4e89-b623-bcf0da8cbdd2"
        },
        "item": {
          "id": "eaf8ecb6-8b10-4dce-b3ff-bcd9c73cfbe3",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "534c9f8b-fd05-4a00-8ed1-c7ac7eb9f60d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dac9ec7-fa27-4186-ba90-66cca2c8e769",
        "cursor": {
          "ref": "32f08af9-6477-40fe-9fab-32ab44ebbf1c",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "86cc58d7-74ba-4f1f-b74a-2d82456f1be2"
        },
        "item": {
          "id": "3dac9ec7-fa27-4186-ba90-66cca2c8e769",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "00bd06c1-43f8-46f2-83d2-044ab7e1a345",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f290f513-2784-4deb-9070-4ac405190d2a",
        "cursor": {
          "ref": "fe61bc19-371c-433f-809f-5e16d195e62f",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "aabaf791-8dd5-4013-9da1-66144ebc1b56"
        },
        "item": {
          "id": "f290f513-2784-4deb-9070-4ac405190d2a",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "4cbb8245-d083-4ebc-b032-eec808d05106",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9d9b458-32c0-4749-b845-6811340315c9",
        "cursor": {
          "ref": "53516e8f-b36a-435b-b3df-8593ea15959c",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "c33905c2-ed79-44e3-8489-a7275d0e4957"
        },
        "item": {
          "id": "d9d9b458-32c0-4749-b845-6811340315c9",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "7377b21f-4a9e-4cb5-867b-4e92252b9f90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "704cded8-ec62-403a-b895-ae7fb9c23dc8",
        "cursor": {
          "ref": "4a7618d8-440e-457b-a08e-48b19f7c02ef",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "439d9a05-4b27-4aa3-b11d-9cbcad25989b"
        },
        "item": {
          "id": "704cded8-ec62-403a-b895-ae7fb9c23dc8",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "483d0adc-303f-4a90-a44c-63a9e6fdb6de",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ee4f2e1-c2c2-4715-8120-df047463c80f",
        "cursor": {
          "ref": "4023ca26-e495-4ec4-8260-397ffb13f12d",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "11a9d448-f3f2-41c1-87a8-a077ad9794c4"
        },
        "item": {
          "id": "0ee4f2e1-c2c2-4715-8120-df047463c80f",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "9304a040-64c5-4f61-b157-a9f8a298e6fc",
          "status": "OK",
          "code": 200,
          "responseTime": 160,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "6e076923-51a4-4941-8544-a287b164df0b",
        "cursor": {
          "ref": "c7a88501-1d53-4afa-ac34-98a1b6ab74bc",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "73d7dc67-890a-48ef-b226-87d1f743893f"
        },
        "item": {
          "id": "6e076923-51a4-4941-8544-a287b164df0b",
          "name": "credentials_verify"
        },
        "response": {
          "id": "bf21a1c1-91a0-4f8d-b444-7d1ee17bddbd",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "21c848bc-7cd6-4bf4-9123-70ff4092b6ed",
        "cursor": {
          "ref": "ce8eea3d-1a6b-4bba-b039-dfcb6e4211f9",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "d2bdebd2-087f-4360-95b5-c6d36e63fa4c"
        },
        "item": {
          "id": "21c848bc-7cd6-4bf4-9123-70ff4092b6ed",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "fb041ff6-bbd7-44dd-a1bf-f166dc0b3a67",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "312c6240-2b0e-42bd-8514-2270559ca1ea",
        "cursor": {
          "ref": "dc275ced-eabb-40e6-a039-eac981e85b8b",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "d6865b00-9a83-4a6e-89fb-3b0b6b0ce292"
        },
        "item": {
          "id": "312c6240-2b0e-42bd-8514-2270559ca1ea",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "aa2c3122-c5b9-4c5e-86fd-6117b1c10053",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "312c6240-2b0e-42bd-8514-2270559ca1ea",
        "cursor": {
          "ref": "dc275ced-eabb-40e6-a039-eac981e85b8b",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "d6865b00-9a83-4a6e-89fb-3b0b6b0ce292"
        },
        "item": {
          "id": "312c6240-2b0e-42bd-8514-2270559ca1ea",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "aa2c3122-c5b9-4c5e-86fd-6117b1c10053",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a24847cd-3896-4796-a48b-58e7c970879a",
        "cursor": {
          "ref": "0f7f787d-d930-4347-9242-b3e5bf6471db",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "b3d42625-2df2-4bb1-8981-67e8afa430fe"
        },
        "item": {
          "id": "a24847cd-3896-4796-a48b-58e7c970879a",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d05a7fc4-702d-4438-b1dd-cd452e6b9567",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f444f69b-5254-4eb5-84b8-b14f80747cb9",
        "cursor": {
          "ref": "45649360-b973-4d40-a6b8-651dfb2bed3e",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "e140d4d1-a890-42fb-b55a-07e8962aa798"
        },
        "item": {
          "id": "f444f69b-5254-4eb5-84b8-b14f80747cb9",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "8430a5bc-7799-4444-bf70-ea7e52a2b1cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}