{
  "collection": {
    "info": {
      "_postman_id": "4bd78d4a-8f35-432a-a4e9-9e5a47c7c93c",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "059ecaef-1093-4209-8361-62e7cc6d46f0",
        "name": "Clear Cache",
        "item": [
          {
            "id": "b3ea8042-d971-49f4-8a79-7bf53a612171",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "99b21316-de55-4726-8d76-d248cab65b22",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4dd70e5d-a0ff-43be-b2c0-7090079e948e"
                }
              }
            ]
          },
          {
            "id": "cf7ef9ca-1177-4e4f-994d-b1e57be41b96",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "22adef5e-f397-4168-a356-935b561ca117",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "28cc8f98-e8c9-4f94-8c69-09710e2614e0"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "033aa660-35c0-46c3-85d6-8b3e641b5091",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "5d0cb32e-524f-457c-ba27-e1a932b17bef",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f7008293-762e-4267-aafd-ca1e2a095b5c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "21288066-cc32-4bea-924d-25ea0fbd0acf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0225b628-b722-4429-b9a3-b5ab9137134c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c19fc4f8-a166-4c0c-8751-7052496a1782",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c1720931-5e63-4b2e-9ab5-075e80b88145"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "05a7b2ee-8d9e-4cef-8d7a-5b43ab74eabd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "23db6e67-0875-48b8-941c-08e0a0c3aef3"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "79a659ac-718c-4d32-92f4-446ab2e8a965",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "4e9476cd-8ef0-4934-a4b1-59464cf77025"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ec8cec60-4d4f-485c-9b6d-a29d61b16c2a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "308a26aa-0dc9-48cf-982c-1d0c98b01705"
            }
          }
        ]
      },
      {
        "id": "5a71caa3-e107-4eb6-a77a-768194f0f4eb",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "04819021-149e-41d3-9873-df7732ee96c4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9d5a0f13-0251-43f1-b178-1a2ebee4a691",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "765d103e-ddd6-45af-b95c-1dde0c4a2a18",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ab70fc7-92d8-4d50-ba4f-d2f6a025e3dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "53e2554c-a3b1-4181-a418-4023ac5031a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4ed4696-5ead-4be3-8139-664a7652eaf1",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da56f91f-b257-41ae-8fe8-0f6c30a76700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2fb0d6d6-a033-4c44-8285-2b2c1e74ce00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da53add3-86b4-41b6-a558-a787e10e1a8e",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0d7cdd7-8f30-4b33-9660-e3b2dc80c56f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9e0fcbd3-f0cf-4262-b1d5-c305af8c427c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "270e620c-00f6-4927-973a-4a69bf7a9e03",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "91f45c3b-6c7e-46a9-b0d5-8c8c3b8cfcc0",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3a9c6b2-aa5c-43e8-8375-994ae15c6931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bb5fb847-189e-4c37-8cdd-a7e1f5c794ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71c4cca7-fbb5-4fbe-aa1f-161f72e1cac1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "624a9567-abd4-4a7f-9c1b-cf2a71d6b762"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "85708211-c79f-45cd-b9b8-74c3e2d16d6c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f5fdbb5d-ed8d-44cf-8189-c5e01ab89a5c",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e0486770-658c-4720-8b93-76c04284cbf2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "005c695d-2cd3-4a53-a84c-254e15932b2a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c51182dd-e7ef-48ee-a6a6-29c2c4cd7481",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "f9789c58-ef33-4ae3-af06-425a767da8f8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8cfa72db-0089-42c3-b6df-6b0bb1543d71",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d6145a19-092e-4a61-848a-97beb8a8e4cb"
            }
          }
        ]
      },
      {
        "id": "03ea222b-b132-4e01-9e09-310bbe204e17",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "9d527a49-5c6b-4237-830e-533690a700d9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a2376e7f-4c23-45cf-8e7e-64aa033f1501",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "0c6ad977-1525-4d99-9ee9-9c5b3c3c4a4f",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dbc3467-5ef6-44f4-84e9-db41c3c7c4e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a42e1211-7257-46db-b1f3-33cb11da589a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08fdb80f-e068-4274-bae9-b3305453c23c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "76a92cd8-72cf-4847-b5ae-ec56a8a77dad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6074fcf-3e77-4a2d-89bd-64ed0cfe2fe5",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7a820e3-1cd3-4bc9-8b00-20ec4c39beb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fda3c023-6016-4072-bc8c-82fd5240e363"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e50f275-48f9-4e1f-aa2a-0c59bd5f1b31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4c057934-1779-46f0-8c3a-369961ff4ebc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5075c4d3-4260-431a-a169-af2c26dbf523",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1e7fa94-070b-4f9e-8dab-b4a13d8c43c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "890c6877-de3c-46d9-a30c-c299c2946903"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "734be33f-d7a8-4c8c-b458-52ffd4709a64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "41e86497-f5d7-403c-bea6-2ba621f85ed3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53159bbe-83eb-486d-acfb-5afb5479efa9",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff8c21aa-ed16-44df-acec-b772245b0a73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c0caee7-7ca0-4f05-8ff1-48c37297f6db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f81922f-aef0-40b2-aecb-964083e44949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "da4de42d-f29a-4ccd-9041-573335d55f63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e87764c-cb83-4db2-906c-fe3a33a55b2e",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e8963cc-6b33-4a8d-b9ba-9ce8719b602a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c174f3d-285f-450b-b431-af8f10ecaf69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1d1ece7-8d7b-4432-b7e7-fc0dab2d6d16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "739a074a-f0f8-42c2-ae69-24fd4a58c73b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3b955a1-c729-4a94-a1b9-77b3aaaf7e24",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e52d08cd-49b9-45d3-9813-b8b642217d5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97965f79-9f5d-415e-8d37-47779c754c1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb05a4bc-44eb-4187-b8d4-2e969fb06fcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fc2260b7-adf5-4134-a763-558c0b59d1c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fe3eae5-f9b8-4ea8-8c2a-d7b629f32bfd",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3f868d9-6cd4-42c0-a415-291ffacd91d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24922da5-2c3d-4b85-b949-f83e42218818"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2faa71af-defd-4fba-9a52-d7e71a8ebc28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "39f571d9-4f6b-4c42-ab4f-16a53823c93a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c54cbf8-613e-425b-8d4d-7341c02ff297",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27c20634-76ad-4214-9c69-d4d0a770aef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b2dcdfc-5f79-46ee-ad44-500df6f61b87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3faa94fc-6cc2-4d39-a4fd-8031b0510b90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b8fc7d2d-9d21-4726-8a8b-13c49f5346b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49e485b3-2d51-40dd-bb46-0e2a236bafbd",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ace9ffd4-99d8-495a-bcab-e4e69c6b21c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15505d97-a0a4-4abc-880c-328f33ef329c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1a4d15e-c88f-4a5c-86ce-506a22d1933c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "76a75e0c-9af8-4a99-93d8-66f6e14660b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1931a54f-620e-4a80-b599-2809abae4ced",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c16166e6-cd85-48e8-bdc3-47bb516b2d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c75cb85-95e7-432c-bb60-c649a11ab8c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10270dc0-a5ce-4945-9de6-b53b598a1a6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2bace96c-1e8c-4ad1-b6e0-d0061bf969e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "536088f5-84ef-4f35-8558-1601f7b05324",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8c8c6b4-a76e-482f-a45c-9277a1456e46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0903fb47-0075-40a8-8798-a914b3f082d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b320556b-6f5a-4e83-8546-65edb00c02be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5b08d3ac-65df-4a09-b9d3-15d4186ae766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b4ba374-4d33-4cb5-b81e-191d51f0642d",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b1c2356-4b55-4253-8678-2b9f6eec31b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46f98fec-cf54-4600-ac41-b6c78591cab2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66d4341e-4517-4c54-8d86-1e987a190015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0c815d3d-dba3-4151-a68e-e40724c557ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0648a6d4-5e30-4b77-8846-005644b603a0",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a58b6d68-faec-4e56-81c7-4f53b828b232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d0dbcd5-e553-4ec7-972e-858a59a8e217"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aae9cc02-13e1-412b-b411-b795af67faa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a7a0b260-08b3-4e5a-9e13-341d915936ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41fc7bdf-a655-432c-864b-5be5d8c20f7e",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dee713e2-d820-4a17-81a6-17788f83e8c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93005e22-290b-450b-8ff1-d724146c1dbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6dbf2a3-31d8-4a0a-8dc6-4b65830293c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ee21118e-e634-4c63-89ef-38be23679dbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "420f4e15-25e3-472d-8813-cc60a850fe1e",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac466b3e-e845-4066-913f-e9187a16402c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "352a1c1c-ccd8-4628-8784-226a39c41600"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c065d20-169a-4693-a80b-5d2ccf70993d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7516f2c3-f0b9-4a9a-b279-9e17e575eab5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60d18281-653a-4ed2-ae8f-dc63fb45b109",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "991a440a-b995-4e7f-93ff-92339884a9bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a11aa13-c77d-4c89-ae58-be4bf5205f51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7165e602-72e2-4fa1-88f9-1239ecc69e75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c2842f37-33c2-4fec-b9b9-485b2e2e423d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "065e6080-520f-4732-b6ce-3811208b5cc9",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a98a06b9-dbad-45bb-99ca-c725ea358fcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df6dfe68-617e-410b-b193-778f0b06cc1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "955d7294-8734-4ec0-ba06-47393418d40c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5805d0cd-2632-4b44-8b75-6adf1f257174"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bb5775e-2233-4f6b-ae79-1dd619acf3ff",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5e4f8f8-139c-4361-a4f2-9e22b0e0a821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54ac19c0-836d-499e-b71f-645a9017f038"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b24260f9-9dc8-4a39-8981-09d26a3a713f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbb8f9da-3ed7-461d-afe1-6129906873a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf6b8f36-bf15-466c-a42d-7a55e8dc0b27",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0394f9f-77c0-4e23-8fb0-c9cdcda3636f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e546f53-7460-4be9-9adc-71d8be5395f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1303ec5e-e39e-494d-812c-ee27bffc1d53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3940d111-d677-4871-a48a-ddd7071446e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cadcb84-8df9-42f2-8637-10db5dd52be9",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e79c582a-a08f-4c76-ab64-5824d79c2655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa193873-d5f6-47f4-81a9-a444c48b5d2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75c54443-e540-4d8d-8578-fbba6bf76e86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed9bd97f-8dc0-42c5-aaeb-a39e38b9df85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85d6adb2-b878-488b-b480-d94a4c8c190c",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "985d2ad2-b643-4d4b-88e2-1e0a5394e9ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37e0ffba-2cab-405c-9850-6e85c2e4acff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a111b578-4bbc-41c4-abb4-cbba07beba8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "06e49340-ff5f-487f-bb83-55c7143328f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b53fc847-ab38-42a1-9784-b462371d62fb",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87b41f03-a7f0-4288-8490-da744b73abe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30354b1c-bacb-4bc4-98b2-f59444569add"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c297a039-5074-467c-8648-31d75d1aad8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "27b51282-a861-4415-b4b6-65a9afc930e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ec09810-e0b7-4a24-a575-9bfbbf1662f7",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e33426a4-4657-4bed-8127-2283c2d32bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b1352b2-9b5e-4a66-9a29-79180cce86f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70d3602d-70d9-42e5-aa8d-a91720edebeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d551223c-775c-4d17-952d-8d1345f22c84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "234ead8a-9f86-49d2-a72c-17777e5f8a95",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80078e26-31d2-4430-af22-c31f7db590a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88c3d58a-4e77-47eb-94ae-bafd31937f78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "995f0850-b584-4e56-8f89-50e921e8e5c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc403677-159f-4a81-99e4-3bddd056da97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a69a9130-7630-4b9c-9208-68a067f01839",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b33cdb2-369e-4751-98c5-1b86355d1486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0732649-c6b0-4264-996e-a9a520853072"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a8d76b7-bf4a-4861-8ddf-01c452488f5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "be1096e4-2777-4e44-804b-0018d02a378d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "826c7c3c-0904-4f8d-b96a-54fe749c8c5d",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdae587b-d1f2-405b-afa1-b879e37f6ef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ddf2214-80d6-48ee-ae2c-67214638faf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5ae4e92-53d4-4599-98c0-7db1b217ebd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff453a7c-ab4a-4583-8ef9-9774ed40a335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db545538-c709-4d09-8768-8c967aabab02",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e95f1c81-3533-475f-8c8f-f25802d13a85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c08fb05a-770b-4e83-81e6-7063b07bada9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d53b00-9b1f-409a-aa06-7cd4627bc07b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1580b71e-48fc-4a24-8823-a68119b70a15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6587d8d1-dd5c-495a-88f6-0818622679cd",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf648fd8-7f17-49bc-8f0c-a8f179723f5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0538f039-d6d2-4c8c-938c-60c89314eb16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d28702f-9144-4cd7-ae8e-fa4f9775d24c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "98119d6f-c4da-4207-875a-7d2aedd87c55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "397d45d2-9e3b-45bb-82da-b8dd2e62ffd4",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90062c8a-1f8d-443b-b3b2-789634f44cbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9be392fd-1efe-4864-a084-61bdf2c1673a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b141dec-e0ab-4136-8017-761cbfbe85c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c8c90a9-88a3-44c3-9eca-936b55af23b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85de91b5-38a7-4126-af6c-ece3e1381f8a",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dfd0c8f-792d-4884-b076-e23af80082d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cabc3df0-6e90-40ff-9bf3-daa40a8daaff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46e38d25-be95-4c1e-9235-8582c05372f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "032ce6ce-c44b-4d48-a753-3c761a64caad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aac0c043-0f84-4983-b089-827451e3a8fd",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eea8e9e-b116-4958-b434-9fb8a8d4a80c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "829150f6-7aa7-4448-99d7-f0b57263b7ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1524f754-5728-42ce-97ba-f4779181610e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbabad29-717c-4aea-b888-e2adfe423e1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc48f977-edb5-4ff9-8a4d-7cf2493bc39d",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ac33551-3871-4a0c-8c23-56c004e7859f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0de285ed-7a20-44e6-917f-3e4c7aec1bec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81e75549-353d-40c7-bc46-b46c1f0fab5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "45275cda-4125-464e-99e2-714065a5ca00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f6e3600-c17a-4c9d-a4a4-15c8dc9b1072",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "817b4235-a1f3-47c5-8e64-a0c42ae3452b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "699ce636-ba08-47a7-9277-02bff37e07fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8910e9d2-4af7-4c75-8208-ac7afc7dc6c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "441b728e-5c48-434e-b981-a34ac721c8bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ae24966-d13a-4899-8dd8-1b3f94ac4c2f",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3843aa14-ffcd-4794-b1dc-aa21049e5844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d322645-295a-40fe-9504-4a7ff4d480d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b406286-10d1-4739-b85d-e03853ab22cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "39eb76e4-a733-405d-8289-e11c187f283a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd2e4919-7f04-44cf-8467-9b99f063ad06",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f164ea1d-b405-4cd4-b2d1-29525d4c0609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1accf5f0-fd8b-48fc-92b5-7706e29b84b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41e21917-5e7e-4a7b-95bb-48f2d092f21c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "8002a4a3-bdb9-459e-9fd2-33b5a2133167"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a812decc-0da2-43bc-b7f2-8b91a58d6e3c",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f498740-6add-449c-bd86-011848568ff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "28c0962f-fcc7-4817-9d6b-ace45cfde7dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "180a29f7-e637-437b-882a-97979d783c4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "32fe5b00-01fe-48b5-961a-31fcf89115f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36d896fd-720d-49ec-a1ac-799f84d9bca0",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c332d315-b550-4031-9c81-545270b6cb8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c11beff-9be7-4521-8ec7-9241b6d30dcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7269c169-2428-4cee-871f-a47af1abea69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "efcdc7fe-01d0-4889-8fe0-dff71304f48e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e99ca22-05b3-41f9-831e-706a6a0d8a1c",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f3988ee-e51c-4efb-a0e0-723a7255f388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ccdf95c-7862-4fde-b09f-d542ae26588d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02b1945e-44d5-4060-b69c-f31a16634184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed86c244-99d1-4794-8163-f5d7f73856a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb517f68-c47a-4fe9-bd41-adbfebbd9e34",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e82c1d3-6d2e-4229-ac0f-42f5ac0dfb38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "458cbf4e-805b-4402-9dcd-9a8a1ffe1e74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "586199a5-5acf-4772-af85-23445324a326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "65f8a7b8-f968-46ae-a748-018cfc65de0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9f1e052-71e9-4814-bffc-32a156295238",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "384b7c53-0068-4575-b074-3fb5ad07bbf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d063696-ab44-4b8a-9e30-8ffa56ad457f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b925a18a-14ee-4b2b-bc38-669a44acc9b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "67972a6f-6efc-4fa4-9727-51d9481a8ed7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8dfa745-e86e-4310-96d9-dd40aa9b43fe",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6393d74-5d6c-4103-a23e-2f101ee09396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f78aa9c4-4020-4a3c-9dae-22c06f75bb82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e6dfd53-ad5c-4ef9-8460-516edebdefc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "25513a3c-cfc3-4423-b40a-6e3e729ac2a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4bf15e8-5841-48a6-9070-1a56de9a831d",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cca212b4-4c59-4efb-857d-14646ef2d72b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4db1d85b-30e1-4b52-9040-5646b6d15b3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b319e7c8-c4ec-4c30-bd31-b8a8e0a7a735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "a2e866ee-ad16-49b6-97ed-52f224b82930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b64509e-d1c5-41c7-936e-78452ce017f2",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1ccabfe-2216-4a56-8e05-d31d74bb31f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d300cd5-4514-4808-969b-a82feafaab6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c47c535a-1ad9-4bd0-8aa0-15bc8fb9d6a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "02d5a3e8-f476-4a3b-b814-411333f98d36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdaa6afe-4ecd-4445-879d-c0f672046b23",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0f2809e-46a4-4c0e-9b32-08bae28bcd4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c4f02e2-f8a9-4a1f-841a-64535b136b2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d1b7a79-4fd1-42d0-82d2-0fe4d16efe3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9330c05-ae39-48e5-932d-7cae169c36b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cf200f6-027c-4e18-8b2a-9c581cb19e27",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99b9efb6-2fde-4d78-b4c3-1b44c0b5e94b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "672b2775-67d7-4c9f-968f-37600c35cfe5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ef659d4-df34-4242-ac56-b2016a4d13a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f278caa9-e92c-4ca4-95c7-bd9200403496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13ea7cd8-65e8-4099-8b3d-57f9b312fd12",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0dd665d-d63b-4dbf-8dbd-1db35ba8cbc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2641151c-9632-4c5b-bc86-7f5237c118a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2563c469-4511-401e-9e63-f920d41204a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7693b22-a778-462e-bf6d-cb16559d66c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "994e5b0b-9c87-4d2b-b0c6-35de070e6d8b",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e99b60e-0ebe-474f-8366-1152c06b57e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1d3ae40-7df9-424e-b09b-d317b47db9e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "191f9ef2-f2ef-4c1c-9a5d-98cb8e2089cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6476e4e-56c5-4a04-abea-02fc7cfec67b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c3274e1-5294-469b-b823-b3a12db1c5de",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e560327-203b-454b-96a3-0a6ac71b4d5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52c00f4b-cb5a-4b6c-9890-bbead858c238"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6a45a3a-bf26-4487-929a-2b27e1666e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1780e6f9-ba7b-41e5-b4bb-ee27ba259560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f4b4774-d491-4693-969a-52f93f8d2046",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "219dbca8-2325-4d1e-8257-0ae3121774c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cfab3a8-ada0-429c-b456-a3b9b729dd5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "892639e9-0c3c-401b-b487-e9745edf2246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6051bd1c-0ad7-41db-928e-ff2188453287"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02fcb250-3d57-4bda-be3d-1a7d6f874e22",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "637d7dd2-9dd8-4730-ac5a-8d54d1e8256c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cd7875e-033e-4329-b9d5-385508c92006"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30d1985b-578e-4ef3-aa5a-678765ded6a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f2704ed9-c283-4ba8-8e62-97f7e293a0f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7924a8f8-d5fe-4099-8d77-a4f9bd0d6e62",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1560d204-b50d-400b-ae18-40fe0789267e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23df6031-7021-4d7f-9ec4-97e93b00b940"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f3c5868-1194-4819-a6bb-4a697cd0585e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "881a461f-0fa2-440b-99a9-21e0338d34ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa180000-6f61-4d97-a61d-83d1de4c0244",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db21ce5b-831b-457a-892d-a5f075b07bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ae75f38-5645-48aa-be46-de685db0772c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d5562b1-9dbb-481f-9c7e-bf028dea7030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ecdde2d1-a29e-4c48-8c55-9c64ad746950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a73882a3-a8af-4ed1-bce9-a31350f33742",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2ebb264-5538-4cdd-ba3f-f405a5df49a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59785118-e9b4-4cb3-8e1a-cdba73133602"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e487d3c-1cfd-48d8-9afe-c922e59f8acf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8197a25-7e07-4d88-ade9-c1ec90ac3bb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b77dd8e-c193-4b3a-95f7-45c100ea49c3",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b30ef9b-d8e1-4b8f-bf8a-f06b313f7c76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6540b761-099d-4cc6-b0fb-ebaf60e055b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4743ef57-c7f9-4158-9c33-9408be37494f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f225c8b-f037-485e-a9dd-fef8257141a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7546d58f-ca95-431f-9d2c-d5ab130f37da",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "799736d6-1908-4c7b-8d99-d08f6eaa96df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3879986a-f2e6-4ce6-81d1-dcaa1d8580a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "619538d3-a18e-40e5-9d18-d8eba4ae243d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "79a8a851-5772-4ae2-ba75-a75d65b82289"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aca76600-ba20-4ef7-b032-7db550dbb6b1",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9756e44a-ae61-40e4-b7de-634ea750dfb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2a22372-bd48-451e-b467-e73fbd115ffa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52028bb5-e141-459a-9e6c-b9486ab0fea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "22247a05-7f23-4098-95dc-bdfe91190e4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6509853-6138-49c1-b53a-2e9a02a62397",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97100fb3-d150-4d46-863c-120f795c8ac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a67b1f37-8ef0-42be-af37-be08136b704f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90ff80fe-e256-4a1b-8623-0346d4c25089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "06a0bf44-5c39-48de-8c71-43c74cb1f6e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eff46ca-17fb-427a-8932-427d6a88f220",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd9b21a7-c73d-4499-9db3-c74fc6df9f39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d6ac90c-10f1-417e-8bea-5b71a93d3103"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d257f572-e24a-4557-957d-4b2ac63c4df8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d2d1224a-8987-4e5a-b66b-b8158fb18a6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72a58031-57c4-437e-9f77-2e755a1e20ab",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7953c1c9-8c6e-4c55-8fe6-6d40fbc96628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "603fca55-5317-4757-926d-2e142eab61d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "175f0209-f05f-49b4-a39a-7515474d4abb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c1ab3dd5-0043-4ad3-9372-ce0f9bd62db2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7b60006-45f2-4dea-bbcb-a8255a6272a4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36b393ff-c003-41a0-bdaf-4291bd3962af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6711ab1f-e221-4de7-b65b-7a47d1304509"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d655bb87-a25a-440a-9e53-aa60f3cc0f1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d63d6931-d921-4a5c-a4fa-737918977f47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44327ba4-9591-4538-86cc-d85d56996e92",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d566f22e-c153-492b-8c1b-a405a6e4af27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e819e0e8-7f66-4df7-a876-a95fbad6098c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5ef6e42-751b-405d-8b3a-4cdd4a6a370f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6fdc48f8-ad26-4656-a2c5-cabed80d5205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc028610-bb35-4c1c-af32-0e077f9e9bf8",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19125254-743d-4bb2-9995-ea62662e4660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a97d4a1-2b44-4bc2-8543-11b52df386d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a80b0dd-b02e-4c78-b212-bd2ee2aa66ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "c408b810-3704-430f-9c80-6e7b2c2eaec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfdf6e3a-7d5a-4fa9-b884-3bdb73fbc824",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0838f289-4b93-48d2-bf48-90394ea46ac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85b49c97-d16f-42d5-9dd3-7f0cb5cf337f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4e5b528-da76-452f-9ee1-8bf65f01cf52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7ee5ea2-f8a6-4626-82a6-80c20abf98c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a94fd85d-8d24-4c36-a8f8-aaab90cb6879",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65c1f1f5-f5f8-42f0-82a0-d7286026ebc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e10c60ef-6f32-4fa2-95a7-78949679b493"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54002639-cccf-4103-ba9d-3bf6243e4d83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "21c8d11c-a0b1-406b-b8b9-4bf0ceafd0cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09c4bbc6-fc16-4882-8f8f-2e47151705f2",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "217765a8-1e0a-4751-8a00-0c62015af41b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "169f9ca0-48b8-4f91-8a88-e751afa1808f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d385500-918f-408b-a3d8-dd431ecb4988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "379511a6-e18b-4923-9875-1fecf8be17db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a2f225e-d00f-49d0-83ff-56cce16f822d",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08cca0d3-2c9a-4033-9ca2-6f4760030c31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf5cdfed-1afc-4fe5-a4c6-5c31f508c5ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc0ceb83-2fc9-4235-aa47-8bdb59ee03fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "87a40f3b-e9f3-42dd-bebe-fc99f334214c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a73b8c8-fb03-4415-af2a-56acac20ad33",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "160d963c-4daa-42b3-9ef9-404cc7662a1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f74835b-f90f-41d7-9018-9c092dc1844e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b02dffb-6716-402a-9cdb-795f65ece309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fab086d1-9776-4add-bc91-c06616d2d5b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4878dfd2-1b82-4044-8e69-08c58054645e",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bebf860-5775-4df9-8cb2-fdd3e3384a73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84f42b7b-d0e4-4f47-aec9-994e5d8420a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0dca0c6-0c15-4573-975f-ff5e5969e4d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5570df0-da0a-4b1b-85c4-7911bd0b9a62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85724581-d5b2-40d9-8d73-e4d9427161d4",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2877833f-078e-4e29-8da0-bbd2001ad4d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed774c3e-60c7-4846-9a4a-95e1bf8b1527"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78447d2a-8b02-45fb-956c-940005efb02c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "57d0d177-ea38-4ba5-be49-13e4fe7f3643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79f721a3-412e-4c5b-b5a6-5029705b227e",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "567a707a-63e9-4265-aa33-47159681ed56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ab0502a-3e9a-42d5-b6e7-0b5b09aa4bb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07229ce2-ea0c-48f3-b213-d1ca0608da9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "45fa271e-bbfe-4812-bd41-eea42a958e97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff1592ba-dab4-4360-903e-a173f09d3d17",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc309f15-2974-4768-b435-9b96e93d81c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83b25485-bac0-40d0-86d3-7bacad965e08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "936f8631-ca00-4a07-bd17-2505766b8a82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b687331-5b5b-4ab8-8d64-ef6163a2007c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28f54258-9d2c-4d26-83b7-453235900f40",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93f20fd5-79a5-4284-8e15-b7bea2a1eeaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c220538-9a79-4d97-9324-aea76786f07f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc626bfa-6f09-4ce4-beec-c9cf4e5f1da3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6104420-cd57-4336-9a81-3fa343a9434a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d31c79b-bb56-4671-84ed-401fb3b9d17b",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e80c4b20-0bf8-47fa-a242-4e5159b65a58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb6dec31-6414-4b39-aedf-cd32be3bf4d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f6a1bb2-d596-4722-a7ed-1262bc955fc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "53354bf2-d5d2-4d2e-bbde-b673e03fca6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f119a28b-a08b-4525-9149-1e57197b13a2",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "344106cb-9119-4051-b540-564dbfda15e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55c25927-74c5-44c9-884d-1523c8e7d014"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46637d2c-fb01-46ac-9ec1-ab96cba77d9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ae413777-aa38-4f0b-b63c-ce12cb506c87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f249aab3-6c3b-4daa-a357-cf752562dea1",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "753d6e48-5199-47d6-b395-d073e8d1a9b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b96eaa3a-5ad3-429e-91e2-7a8f862b5519"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f2f60f3-45f9-4cef-8dc3-fe91c133e7c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "be686e97-e031-4348-a8b0-ac5411879b9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "012ce1e3-4400-4919-a073-55790cf24603",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21a5dc96-7c36-4200-b2f5-2ac3b2ac181c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecdb6514-b58e-4c1a-923e-e2a9239c984f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9fc7394-94ff-4fe6-a889-3f9b37cd9d3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "25434d67-e2b8-4e9d-aa8b-0323b22d716a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "872b5f2c-bd7d-44ba-adc0-f5d6a33ea686",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfad131e-67fb-46db-8577-307ca38d90d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdefb67d-5868-4d09-9db3-0d5113389bbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b253a871-d768-466d-9da8-7671eba199bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "358fb21d-e723-4fa1-9508-6f506858c1d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06df2374-353a-479c-b4a0-22538f232ce0",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "364fb201-21be-4efc-bbf9-e1c5e5fc0429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95dbdbe1-5113-419e-a9a3-1ed6ca0d13bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dd8b786-6cbf-47ea-bc32-8eaaed2f616d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f2d1cc0-77c8-42e5-97b1-bf06bfdf87d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffcc1def-4065-472d-9b80-0be710cc3059",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8672feb-1c94-4841-9473-e8cd0c086fc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4c70cf4-02ac-413e-a940-4afdabb84410"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e183f384-016c-4878-b6e0-c31421ae627d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "64b8caed-d565-4180-907a-2e35b607798b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04a8c60f-0aae-4f16-a361-5540a4d943ef",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04e3d605-ff1a-4085-b23a-5119806c39c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7fe553a-3f40-459f-9073-430640652a0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5409c9a-27b9-4bbd-8c8a-01b7ece434cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fa909f2d-0f19-48cd-9784-79bf846429bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5035224d-6bb1-483e-8fa3-ec0fdfd8520c",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbf18234-b0e3-43d0-aaaa-52d6853181a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b077fddb-777c-4b7f-bb5a-1d1ccf8f7bea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28b09ecf-18d8-4e45-a72e-86017847c482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "168d5172-9012-46d2-b26d-f1f587b88123"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45a89f80-059d-4fdf-b4af-47c3a0fa0bac",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccb10b1b-2013-4953-859c-f1373fdf2528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65dc47db-28b4-4f5a-ab6f-d7ebd8d6f721"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b051cdc-414f-4f02-befd-2e87d5b669aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f5fad66-8c85-44ed-90cf-9ef51d711c97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2ea1d8a-6b24-4348-aa60-b2d5a1ebef1f",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea3e8674-1683-49f5-bfe2-e9a697c44f16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f58feeef-56f0-471b-b6e6-9d72180bb1c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f02a6c5a-ebea-43c5-98cf-69d0dcac6fc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "84aca112-d83f-475a-ab85-b688c6893168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70db257f-2d18-40d7-be65-797620a604b7",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb76ed8f-0e4f-418c-9fc8-517b43d197a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca2b7110-9c22-4dce-bfc3-e18cf13e54b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "640cc6dc-03c8-4799-8e78-bcefc0596c10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fcc638ed-a529-4a2c-a291-79ddeed900d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b45fdc18-1978-44e0-8794-95a66e2ecd3e",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66e36722-73e8-46ce-a2a0-f0322b274495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42d218f8-3d8b-4fb6-91ab-bd53cb20ba4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e67d94a4-53fb-4b24-85f8-af4576d11083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9b291c78-0a76-4033-b880-2baf1f123a78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aa5d915-e7c1-44ed-865c-546c1cbad25c",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02ef5f82-8528-41ac-b7ee-50d07d7b98e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6d1693f-b1bb-48d4-b4bf-67f53a987602"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d475ab7-df87-4cc2-ae12-cdac9b9f5e66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "36fd2e89-428b-4aa2-8f39-4c8c3e9b06c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00fe5703-9348-4cec-8ad5-71ba3ead6318",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d33e8cd-635a-4d43-9bf9-7e28f7b7e9a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43438914-5491-4c60-a3c1-f040e7c8a05d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44726015-332d-4203-898f-c55c970a7de9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "518b873b-30d2-4909-8843-d82fd06a6365"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c68e938d-ab65-4f4e-8c2c-19d200b6438e",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3a24efb-b4db-4a20-a5c9-4a261892d930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7a20efb-e7ab-43e3-8ec1-16f930d9cdc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce929c18-d1de-46a0-9ca4-02f5922d4348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "213e5290-11e0-4dbd-8554-4159d2ac2c20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caf9f6bb-e248-418d-951b-739f39fa9849",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e63b394b-4f9f-42b5-ac91-ae857ce68e26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6560e2dd-b94e-4899-891a-5e440ab01a84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce9a4098-a2c0-4c1e-98fe-3beb08f3297a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d44e0ef-c62f-496b-9acf-53a30a1b4616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67b07f18-40ce-4e57-a63f-8c0bb5efdb41",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a8fd686-5279-439d-84e0-46d7c4802b78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f357d582-b928-440c-bf1c-fd0852c5c16c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "418a2baa-1bc2-42a0-a701-bcd40b22bfba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b126e7bc-4573-4b8a-aee6-f57bc923051b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3a78597-93c6-4192-a926-24015ad306fd",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15339cbc-58e3-4bc8-8345-5c2c763ffaf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "117b03e2-053e-4483-842a-e6f41d69c97d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b832e38e-0fe1-4c00-a4c7-5854d4c1c093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f120cf4b-e854-4c58-9cea-b2bc53a01288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f65ab14-5676-4ab5-8213-a4eb9b939719",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9741d8c2-0a1c-4c4c-a218-9ebe3c50e8b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "2257deaf-1624-4676-a2d8-22f7cacd88cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8025c83-6dea-4bd9-b928-73720e3f5dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "30230653-03d4-44b9-84fb-8968917a4ff0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5372ce64-9ee9-4ac0-bf87-628c14de690f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6a9a1be2-17fa-4784-a81e-7cb8aed78847",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3733acb-7aa2-43e6-9ddc-4eb44ed96366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "632bd692-75dc-4d66-a2e0-bde5a92d2432"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30f736b5-d705-4956-a868-fe2aed128579",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3c5c2739-d5c8-4131-99b7-c4f88bd91a5d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7c120896-d391-4e2d-b3e3-d4d4227027dc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "793b9cbe-68a9-47ce-a9c5-158765b22c4a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "143c890e-f662-4e2b-8817-d39a8bc181e9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6e989086-86e6-4898-89e0-1fb02caf4f87"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8afc6e7b-429d-471e-9a8b-1b9d1963195e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8b7bd418-9ea1-4c24-a6a0-a5c4219c34d1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0b4986d7-ce77-428b-88af-2e35a48e5386",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "24f844e5-eb82-44bc-9a48-57abafe9b857"
                }
              }
            ]
          },
          {
            "id": "c0f9d558-fe0b-41d6-b737-d85adfccb24e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b86e9bcc-568f-4e29-9152-c0b1e8461734",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e9d3bfcf-31b7-4c10-952a-5ea0329a00ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e3fc9d17-17a3-4340-b646-a630d868b1e9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4daca8bd-0f3f-4b65-ae84-c5e12a19f331",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c753b666-ce63-400d-837f-a84a075ce054"
                    }
                  }
                ]
              },
              {
                "id": "dc3b6e13-045b-452f-a887-0f6ec8961624",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c4b6e481-08d0-4169-a08c-e86ead1a11d2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "04e30035-1c5e-4cab-974f-f07eb77d9b22"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "17e680ac-ff04-4e9a-b939-a9aba9104d57",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "28e5b526-8c0a-4d5d-bcc0-9887fb182b6b"
                    }
                  }
                ]
              },
              {
                "id": "1c7b62ae-d012-4b0e-89f9-bbe75aad1010",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ca814377-7917-4d9b-83b7-7efe81edd5b6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9eeeb2a4-fc8d-4a4f-9eb3-8604e75626ad"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2822a7ae-32e9-417b-a54c-e98f9833d331",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "80b18df4-a5a7-4771-ad27-5161c25b86e3"
                    }
                  }
                ]
              },
              {
                "id": "2fe2240a-716f-4200-9480-caa91844bfbb",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b70b27b5-49fc-423f-88a2-656349e42c77",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "da6d7e58-2c7b-4e58-9d97-9e1e243e73c1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f54cba48-c228-44fd-94b4-f050bc9def2f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "1f24cf55-5219-4548-abc1-00176ee03a80"
                    }
                  }
                ]
              },
              {
                "id": "e7bbe615-9197-45f4-a682-100f777a53a0",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "22f99504-2d3c-4fa4-90f1-e23e3dbf8687",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "793edc03-29d9-4c15-9210-61a1c3a06284"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "781b439e-3417-4c46-bd31-237b7219e1fb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "7d7e843b-7e85-4acc-b2cf-c210c85ebf08"
                    }
                  }
                ]
              },
              {
                "id": "8301f921-b3e8-4f1d-a935-7eb0d6df7054",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6d0b3bb8-764a-49b9-bd70-6fe20884d2fa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f8ae76fa-73de-414b-8ac2-8a126d87c57f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7f7c964d-2abe-4b29-a29d-ccebcd8fff2f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e910a645-519f-4dca-baec-3dfbd49c67af"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "67ee4122-e5ce-403c-af8c-fa8b778de09d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "af4247b2-9777-4421-8a40-d2c397998997"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2e671ecb-cd97-4325-9572-66d1af151633",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2dced96d-effa-4567-954c-3177fa495d84"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6c6f4957-9d60-4158-9948-c876c8a7e7bc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "b98b80bc-a0d7-4ea7-a3a9-300f087d40bf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5a72f13a-0d0a-479b-b6b2-9b81da57d45b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bd4a7d3b-95f9-4e9b-8a80-adb9b5847409"
            }
          }
        ]
      },
      {
        "id": "dc75ec2b-8225-41dd-bc20-f58137c6d71c",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "103e0627-2146-4ebe-a97b-7eeeb16d7174",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1f10ade1-2702-46d5-a491-28e673980c02",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8e10db48-085d-44cb-8194-b3fce20a1fb2",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aa0b30c-4030-4ebd-9ebf-435754fb8806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9da59f0-39c0-4d9d-876f-19a9a9fec096"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66f0aaa4-ddbc-4f6e-a352-c9fefdfde004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "182586a2-4bca-43b6-bda4-63a728132500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d65b336-127a-4abc-839c-f0dd13453be5",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9726d38e-e538-47e4-bdd6-6988bbe4e553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4176f0c0-0547-4261-9c05-1634aea8433b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e61c269-e98e-4e77-9031-7ba57cf728a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8eba0e78-bf85-4f1a-b718-d728a5f2e56f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a92b082c-cf09-4004-b278-0a4570fc8923",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "146919c5-79a0-41db-9c32-7dff91d49464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05a73365-0a74-4f4a-bebc-6d5da1659457"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaa04e5b-2ddc-4425-b4e7-2b6e126fa9eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7d5192e-bb53-4c06-8fee-29bf9c79033d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c2e492b-eb96-42bb-aa87-28d7bf5c5265",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e131541b-2558-41e6-8eac-609202798c8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "641d61f6-78d1-4f16-b5f1-46d45d729840"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0abeeb17-2ca6-4597-be1b-69bb04c13c42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aef677b7-d3c8-4425-a587-22679e6b0a94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d3bdda8-f4e3-486c-9f42-470fb0f2ee47",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0adeba0a-0a76-41e8-a4f8-94f0cd5b51a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e05b68a-ce2d-484d-afef-05217fe28eef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd332766-69d6-4169-ad66-b06637f4fdad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd073138-df2e-4223-87a0-59701c1070c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99c1c42a-5f93-462a-b75c-e3a1bbe4bd08",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fe5ec94-80d1-40f9-bedf-2227a3eb95b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3ecea3d-edeb-4c4f-865f-eb30600eb14d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c554cb3-516f-43f7-90fa-8a370f9d0b5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc69ea36-997f-44e0-a1ae-598cba879410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ab68774-9f4b-4d69-b7e8-7722f06b9c9a",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8279a827-b5b0-4966-86af-0bd39aebc68e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae31debd-399b-47ba-b548-6ef131e7e4bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "998a920b-1648-4a2a-be61-07002f2a7923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "96b2d9c1-daf0-4a9c-b9dd-2aa5a5aa7808"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6da9a88-10ef-438e-aa0b-f052a5a84356",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34207ce3-729a-444b-94f8-90773c63c054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f081cfd-fbaf-4f68-aa2e-31729a6183ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4927a96e-3884-49fc-a936-3df031c42716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "822c0412-85d6-4de8-8b91-9683d62e06b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31a46fd7-ed28-4e73-8105-77e173481e4b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d73f1d95-f37a-4983-ab40-715fd462ed73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38807cd1-b3ee-4a4b-8a9b-cec1ffb9f22b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea8ded5b-1b32-4b18-99cc-72bcc402c36b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c2c4e69-debe-496d-a2ec-508ea6a25729"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec55cd24-9293-4307-b2ad-9030b8bae3f5",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "342d48f8-2273-44a8-a4d8-cddfa6d0651d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "705b7029-bf9f-4cf1-9f2b-9090d5118f4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c0a0771-4cfd-409f-9dfd-9675cc0abbe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a985d54-0a83-4f25-a716-9e1d85ffa4df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c441de9-1d1b-4e23-9558-c9a8073e522f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3669bf8-e4ee-4960-b970-f59a2b37fadc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03f55af4-2561-4039-a68b-504b9fc1b05f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dff651c2-9184-4829-86d8-3410ab850af3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a3ba0d06-f2b8-4ff3-8aa1-730b83f4761e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a23f4966-1756-4d7e-9df9-38b4f376e9e3",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfd72035-3f61-4ea1-877f-15702fa33b01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1df02f78-999f-44a7-a01a-a5b7640026e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8caf956-1aad-4283-a897-73212a00dbaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c85998d6-e78a-464f-93bf-7b048b78269f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdb40cf1-d2d0-432c-a599-92adfd10891d",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe265ae1-1928-42df-91d3-4d277ac99935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33a691b0-25ac-4e48-9008-b027ae09e2dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f0ed61a-223a-4796-ac84-916a56c86b1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "173acb2c-17e9-4f61-84eb-15cfb8a7aabd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "886f43ad-33a4-48ec-a440-85d730a1bbd7",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6a7eaeb-7b5e-40d0-a554-8378d74cde46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84a1edea-7324-4635-8c76-9d420a29aa0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c817b6c-1943-4661-9be5-8a5326d84dab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "53c7d2fa-9c41-4adf-bdff-28f45e8d6423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a0280d-27ad-4bd1-8825-979fe2e36b4e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e13083af-63ad-45d3-b06c-6eaf08e50441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0596cc6d-4233-480a-ad50-b08c9b61d12d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1919539b-b8ab-4c61-93ed-5925167cc543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "4cce0ce8-d66c-4817-b822-9b4f64447cc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43580b36-dce3-4c18-b71b-928a10b081ed",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "594ceeb5-6784-4b22-9a0b-8bc73941c3d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e363f372-2f3f-4708-8a26-b09cfc445ed3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a451df2f-8e0b-4c5a-afc8-d94c1a6f8a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "69700108-0469-4f2e-913c-8add846ab060"
                        }
                      }
                    ]
                  },
                  {
                    "id": "936d6d04-36f1-4713-92fc-afe8c048b1c2",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f6eaab6-6d2d-45b6-82ce-adfb6ff061e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7712231b-a728-4f1e-a5ce-02a95bcf2323"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb26538b-42a2-4c66-b05f-3353452328ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdc0bd2e-d5b5-45cd-afb9-1205b8a5f89c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1d6d10e-ffdc-4283-bd16-b6a93e198387",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad4c36bf-ab05-412e-987f-01bf7291d61d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c007dccc-9989-410e-b599-d76cd182a80a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5b0b6ff-3851-468c-9ace-0359616d55c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5947c2b-537f-409d-ab69-5e2eaa7d5803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee4f3645-451e-4a91-a1d5-75f1ea62df54",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21926b5c-8f9c-41ae-864f-5e9c5cb7ad82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f9bfbda-b366-4e1e-9285-f15dd606deae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c945f4f7-cef5-4783-8125-29542ecf832c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "073dac76-1412-48c5-af2d-8d209821d331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99dfe92a-c399-45c6-b078-00d12325cf85",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ee24ced-052c-4eb4-a550-224f75f908a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d542af8-489b-42ce-88ad-0730aac54c2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fbda541-304d-47e5-8aaf-8ad2b497babe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2f79551-b691-4d1f-bd1e-d7f370b442b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b15c635-d1df-4f97-94e4-f5d6e911f0aa",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1883ad47-b9a3-4a41-b342-8a3ea08fdcf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db90ecc2-efdc-47af-af5e-6a68cc4d755f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa8a236d-e561-4a25-b6be-06f11134dfbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e8cc49e-85f6-430d-a9a5-0eddaa25e279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36f0bee8-1b16-4ed6-87a7-e7950891939b",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d7b0d90-60f3-4eb1-a2cf-f612d1572d67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "670e5e80-779c-4ecb-90b6-79eba64e0728"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f582990e-1932-4802-83a5-38ccac97f2fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5bc54a2f-50bf-4b0a-aab8-adaa300fc6d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4690b696-00a9-432f-a18f-4f1a9fc623df",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94b612cb-cc4f-41b8-9b11-1f8940eeff52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1c2c599-0bc8-4f7c-b4d9-dfafc4246376"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b8dc4c0-7d18-45b7-b9b1-f15d25948227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7ca0e21-af24-4fd6-8c1b-f65a55153d8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "725a9298-9f02-4893-b93c-2d27abe6ffd6",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ff94ff1-a081-46bb-8508-0b4c78571f7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2cbc344-41e3-4df4-a3f7-a27a9ce534ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dff4b5b-91ad-4a42-9019-5b1530a4850a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f4c3924-08e4-40d9-9bc0-39b07f250021"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fe5aee0-ab46-47b8-bfc8-5c8ebfc67b48",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30201b30-e5c8-4865-bf73-242d76c2c4bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b95bc950-aee6-4418-a246-da02c616685b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbe37a9a-da00-45bb-8edc-a11813e2c286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fbb952c-fa96-4579-8e84-85e94cf3c2bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a5f3282-648e-47e5-bb32-eae5c4ec914d",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4700c48-d13e-4dd0-b563-f832bba080b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d70ca28c-3ba9-4fb0-af12-392ab33d18f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d54773ba-c475-4790-9230-fe055c06670f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d157f467-b2f3-4215-b1b4-897f8066afff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ca99db7-8e78-49d7-aed3-62abab8bb017",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0a69b2b-7831-44d6-9d2a-554320ae083b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec5ddd35-72e9-49f9-97bd-ce1b46aa3bde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2e2b853-bf62-425a-94fe-c394ca68b0fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fff46cb0-effe-4246-a23b-d3d92ecc4af2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f443be9c-6e3f-44a5-8ab6-51e6c24e25d5",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aa2ba6f-8624-486b-a709-1527a7b4a41b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36391430-c180-4a69-9d5e-45c899cf441a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c29130cd-8ea0-4747-bc36-51a760bd207d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "396c66ee-f460-4fc8-92a4-b5682e6dcb80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c029a1f-7580-413b-8d97-340a5229c1a8",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3910feb1-0a84-4f49-8f15-e0d3d1a07c9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6a7532e-6666-4686-9df2-b6dfaf133641"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2e9463e-2dc5-4934-8eb0-336613040835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a062c259-773b-47aa-b5d3-c478783d6ce7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c6867c3-1389-4579-9731-f299f83b1cfd",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4061868-e64a-4ff1-89fa-5e244c08cae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c31e2ee2-ed4a-4e04-9aba-d0532d07544a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55d533cf-2093-49e7-b227-b3d2ef1251bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af9b4206-0ba6-4f4a-9cc5-52fac2672d67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "305f9700-7ea8-4486-8135-8c92c5b04c36",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "782632d9-f84b-437f-8224-a4f0b2a65618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ecaf435-c848-44ac-ba8c-2e5c678f6961"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25e90ae4-f650-417c-8ddb-356e901f56d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6b1f6fc-24e4-4426-b6e1-ce777a73b03d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2adb436e-1ff4-418f-959b-0d72d704623b",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c388ca0-6f7e-4c9a-a998-c19b6721617f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "952e3a38-38a0-4b5d-bd9f-44e46f7f2fd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c3a6a8d-540a-41bf-b406-7c47d8acdbce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "98dff6f7-3dc2-4cfa-98de-8a7406646e99"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a3cbd6e4-3537-4681-81f3-cec9b3e4933a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "56548f9e-ad7a-48c5-9031-aad83a6ec94b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abcf1ce1-e72d-4fe2-9b96-1b972c609d17",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "48695659-c366-4f6d-acfe-f48eaf8f7048"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d4b8521-d4f2-4d17-ad01-846e2919a847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3d25b0d8-b8e9-4d19-b1a4-c7bb7c991b8b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cff1b69a-4bc2-4db5-894a-9390b1a74c18",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "853567bd-5117-4edc-9920-0760905715d6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7c0cfb5d-770e-4bb4-9a2c-37ae32b9967a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6df2ef9e-b47c-45d9-bcdd-1d8f008e119b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "afb4d094-be50-4a45-9d6b-98067cb0c2b4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a63b1448-aac8-42dc-940b-124864666cfa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d712273a-db9f-444b-87e4-be8b6180f331",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6c58c632-d1dd-436a-a7cf-f39d25903ea6"
            }
          }
        ]
      },
      {
        "id": "14538ff7-2665-45cf-a9a8-593447aed49e",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "62b04325-7bea-4d6a-9500-5090111abc8e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "da62e41f-d141-4ba6-bbc1-f6ef45e85c3d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "10142072-db5a-41b9-ad8b-b14d55cf3f1d",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cddb5557-6cfa-45bd-a8a8-aa82f581eb33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0f2cc9e-3dc7-4352-a414-9260d1849ecf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7702b721-652c-41c1-963f-25e0d82ef297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d2744d9-f044-4000-9b9e-35c2d9de5b5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f95d0d5f-93b6-41bb-af80-12af51d89fe8",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2edda319-c3a1-4760-8323-8dd27499c0d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38dbe079-87b2-45e1-8047-2f3f4a7806cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b56433dd-c110-4df1-92f3-2fb5b81b45d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "917a505b-e6c8-4c24-bb20-542795ed404b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56590d6a-fa84-4d63-a59f-bc98b0b9e3ca",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "636329f0-bdd1-48f5-be2a-8008edbf1154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "156d4ae9-c7a5-4839-8283-12c7d469a9d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "981f6687-e949-4598-b134-f9d648e0d5e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b130bc64-a79c-4295-9342-a529f724aea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34505704-8c7e-4d47-8632-7d4dfddafa35",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2d4c4fb-911a-4cb8-ab08-20ad812eebfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa3f172a-02a2-4326-bb81-b30b9ea821d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "823675bf-056a-4dc1-8e37-2e45088257b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "429e504d-bdc1-4be9-ba51-878ab86d62f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ee8ca14-9455-41e5-804d-c63951333b78",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e90d6e8-b94c-41e0-a702-66f549abbbef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b5cfadc-01cf-4baa-b926-3002450fecf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a3b0a0b-b3f7-4197-95b8-efd1912746db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a22ea1b8-7bd7-4f9c-889f-8463801ba30f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba133ed5-9764-4762-af1c-7d01e0028399",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2d5453b-b31d-4c02-bceb-ec34c0e14745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c49b085a-7fe6-4654-89e7-d67cd34be6b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11862358-fa86-4a45-b416-1ba6800d5a71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a6453070-5dc6-4ad0-a656-f24c4b43c3af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e80e562d-3a4c-4d2d-bddd-373f6f45c955",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa915df2-6090-4be6-a291-85fc2f360dd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5d8ec84-19c4-43d7-9417-0581e9b91966"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b565221-fbe9-46c0-bb8c-fb0d7c71d23a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "e012231b-d5a6-4565-ae95-d7e62f0a2780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c5789b9-b448-4118-b87c-10164f4c8d41",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "352973e7-b839-4067-acbb-60d1dac73e65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcc759f7-101a-42fb-822d-56329a7181b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e6185d7-3c7a-4661-b219-0b6fb7bd80e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc3782ce-b7ee-4e3e-bab3-48d4e8a5cd76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d6c140c-5bdc-49ad-b2d1-472f4c0f1e18",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a0c148-2513-4303-a474-3cad174662e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86413483-fa47-469c-b476-40d38c905d15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3a15345-a946-4dd0-8ed9-e90dd2f2fd10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "27d81012-c104-4c69-b4ba-a0fa795c7f4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "190eb771-e4ec-40f3-bbfd-6ec4cb5c9f8f",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34a12d20-4eb1-418e-92ed-a41cdc58bfbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb50a60d-b5a1-450f-9d5e-e1bda2e63ddf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b487351-b65f-418a-bb24-6f49e525f90a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c63de871-37a6-4dac-9945-4e36c2c35ace"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e60da0c-46dd-41d4-9f37-ed410629e315",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6801c8c2-e85e-4d3b-867d-1c839673ea3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b82ec92-c669-4877-9e7e-6b3d45535e5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49e85b0a-26bd-4fbc-825a-7eb7a468d741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "8dfc9b45-ffc4-4521-b563-e3032bde425e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b0b7bec-7dfc-4e62-8b87-9ad1cb3c1907",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87c44f61-fc86-4d9f-9871-0b7944e58f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08aff5bc-acb6-4c69-a730-5dde60627910"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26fd9988-f213-4266-9a4d-0cd6ff9e0d3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d526eb14-4690-4cda-a057-f060ef29d9dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5737a16-8b1d-4e61-b122-ffe7077c1327",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a53f958-d447-46a2-a7bd-8dfabe7b8b1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abef859e-a4d9-4c0c-9316-9a2f40df58ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "005ac16b-678f-456d-b7d4-bddf04d08cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "375eb36d-4297-4c29-b7f5-7a3530acb9c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83c4c048-2788-4a89-b3c9-c2b6530dfbe3",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09fc2600-aca8-4fce-b35d-d7d432a554c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69161006-3490-474a-b7e3-5a16537a6ba4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e59f279-14fc-4840-b639-6b4c2d0369fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "771ee9a0-1d61-44c5-badf-e2070a96edb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f754e8c4-efbf-409f-94c0-640a34193d53",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d9ea604-fc7a-4c8e-8a01-28a084b6010f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12ac88f2-927f-4a3e-9904-1cf644b6a436"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01dfacf9-c7b7-4cea-867b-ac660ffa296a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "74bb7ddc-079a-4f1e-8c0d-60dae5693df6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b85872d9-1b3b-4742-8117-3292d48c5c03",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bf03ff5-567f-47e7-a60a-6d998961adfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af2affe2-509a-4295-9560-2728145c92f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4efb8fbe-4fc7-4d58-acf6-a62e0f4c6939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "66e4dbc5-bd8f-4203-8ce7-79c75a2041e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d220e0a4-03d7-4608-9c7f-b8f3fd03c6e1",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af86bed8-f490-4032-b2fd-ea3e1961cbe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5ad12ca-3e65-4bb4-92c3-22d8a07e0da5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a800103-0528-4072-9c14-3b071963bff1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef5294ea-9062-4878-bb4a-b03bf300b670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a5ea18d-d68f-45f2-b707-728a25d49306",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "538715cc-7fb7-4633-82b3-e49cca7e482a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6af920e0-cfe9-49ea-949b-e8fb29e56f2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eea4e176-1da9-41ca-97a5-b4c6a0b9db66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5482731e-28c5-47f7-8133-427efc558b3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d950768b-55f2-4f92-9d27-fdb343892d49",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "167155e7-eea1-4104-a3a2-b4ca92edcb2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ae14f77-1756-4c50-b6b9-6c8b6aa7da12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e32551e-10d1-4df7-8fb5-7add163932b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "62dd3222-ae6b-4c5b-abf2-237372ddf420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ef96464-34bd-4756-b15d-38c2aa1ae53d",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90babc17-edfd-4786-8992-eb3a3819328a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f155da2b-8315-4638-83ed-d1b94c2e297a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74438fca-3631-4738-9d88-db99cb1a5074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07721860-ae75-4e3a-9a96-ae0d02ef562f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80ab4130-227d-4cd6-8d4e-c49c625d2ecf",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eaca030-35e7-4f7f-9b35-b0f7d552cf6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f212b912-e8aa-4636-87c5-eec46ad4e32c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f721dd24-d5d8-499a-9ab3-5c027091a82e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3691671d-370c-4cf7-8e0e-fb8d56c1aef0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12f83117-380a-485f-be2d-1a21d6f2331c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc421f4d-e4c7-4e74-8be7-d6036d635ddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e19f8034-40dd-4d87-a6f5-b1c51bfeaf78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1cceaec-d33e-4fbd-95f1-8bb695d14e41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3857de4-e0f0-4ec8-a3a2-661fc0bf4681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d9e9ed4-3c82-40bb-a15f-8dd9e23116aa",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05cac184-f6d6-4aea-8ca5-ec9011e6a0ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da7fc4d6-1720-4554-b869-a014fab210c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "656840a9-55ba-4cd7-85df-1fca0aee5aa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d500825c-c04d-48a1-91f4-e5e16f05d348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2606e834-958a-4bca-8245-87f7308ad076",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a15e7b4e-d278-435f-aefe-3917d84752dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28c0abc7-7f11-437f-86bb-3c0a0792bfb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2db104d7-c84d-4157-b6f1-2f7b3ceb8bfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6c22aaa-a32d-4b08-9272-2fe00b08074d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "102fd503-e758-45a8-a1fb-622975d52f8f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3556a29-42e0-4ba5-b623-8a44cab8061e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d07e9838-16f4-402a-8311-fe5dd3f36ab6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49a58acd-1e0d-494b-8476-fe9268871912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e4ca4ca-9f7a-4a75-977a-3a7a2a721eac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5f507d5-9881-4721-a9d5-8b03d3004d5f",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7919728a-a31a-4017-a8c9-31742284bfde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20dfbc8f-e7a1-4e6b-831f-a49217917e01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a155ab30-b69b-414d-b8e2-4347bf8abeb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e2bc596-dcb1-43ab-8950-a6765709b77e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d03634e5-381f-4a68-8a0d-6251d521a2e8",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89b33ef0-d52f-49ad-84e3-d4c09996575b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "398a0408-223d-4b73-b1e0-03cd7c22c467"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a27ca5de-b412-4894-9555-b4599a6dc98c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2fb544f-b174-4989-a2e3-861d2af7fbd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "328320b8-5720-4bf7-8b76-4540322aaebd",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "548d499f-8fdb-4543-9939-fc53c333cc3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "245c97c2-594a-4638-baa5-0a8d82b094bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab7af867-2ba8-45c3-90bd-c0ef7119177b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "51029fa8-b3a9-43b0-9672-ab58f7fc0452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1092eb5b-7448-4a51-be26-3be89b5329f7",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "334b7e55-a7a4-4ef5-9805-021413d5959e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d272c0a9-9e3b-4c48-b1ed-34ced97e751e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1cfc6d9-0e2a-4992-81bc-b972d3c021da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "061f93b7-6c54-42a2-bedc-2e84de600d69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77771cc7-7a19-4634-a449-5f6b2e3990dc",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39d2eb80-f354-4aca-a50b-0b79ace5fd7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6baea50d-fc6e-4dd8-a9a0-bb352b665072"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b6e1892-7d8d-4c75-913b-8c919fad3609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d02780a2-9300-4471-b7ef-310f68955710"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf021353-7a27-4c23-8710-192f44fdc093",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24eac682-2039-4222-8ed7-7d2115eada3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "941b4aef-fb3f-4896-8924-b63d8906fc5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edd48055-e15c-49b0-893c-652ff64a89f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a28c63c9-aba2-46e1-98a6-ad5fd004c54e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97316083-f1d9-4c8f-a521-7828619cfea0",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05f7b3fc-54f6-44ee-a74c-372ee39c7290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5286b9f3-5796-47cc-b453-de5856bbefa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60c31e0a-d82b-4d16-88c0-8aad7b793b2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8eeda45-acef-4c79-8d15-efafec8ec622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc7baead-c5e1-463d-a037-6646b5456b6c",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7042eb4-0ecb-43cd-8131-78ccfc154b1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4042a18-cc01-4a1f-885b-9b75bcc0f232"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c88cba0-d8db-45f8-b110-dd1843c5d522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ce58baa-bb44-4b2b-8661-37210b5be5a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f58a3209-999d-4130-ab54-b683013eacaa",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "235b865a-9538-483b-9254-c431918ffa8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e4042c2-9352-4d3e-9f0e-0f15780be46a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f5e4b1d-6a6f-4b46-a978-39eaa9aa2956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad02dd42-4fab-4431-8e3f-643d1ca9bad0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f5963cf-b621-46a1-83b4-f8d2e97458f7",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc650c1a-8789-442e-bb45-33879e865c04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e13b7a2-9aac-4f6a-bc55-66a85bb772be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c90a0f0f-49cb-417a-b679-db0cd4c4c153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a009c7e8-d9c9-41fa-a04c-f51b2e278c6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd652aa5-904b-4d1b-8dfa-bac915ce6bfd",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb3af96f-f6ed-439a-8d38-1936508dd412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "567ff167-92c0-4968-8726-a9192adfe242"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d62e25f1-bdc9-4cfa-abcb-622671d9b95e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bed56894-c894-4caf-9c0f-a909b764a786"
                        }
                      }
                    ]
                  },
                  {
                    "id": "066f91d8-e972-4777-b9f7-949258c4f4c6",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c037b111-f610-41e2-a6a2-fab9c1ea4743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42144df9-4d30-4347-9ff4-9199ff9017eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c103f592-b09f-49fb-a228-e03d00d55894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f88168cf-ccb0-4aba-baca-6627aae71b2b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8dffaa06-49a1-40a1-9e84-40d0f2650a1d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "651b2f60-eaa1-40c4-9077-4258a240eb30",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0456fad5-30e5-425a-8e0b-74fb120be1d4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "1cecf704-b583-412d-b3c2-bb2b28ff068f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dedccc7-de63-44af-82ec-e58296fbdd8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ca39af76-d1a7-4b1d-8bee-b4ccbac030e7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "64c4fcf2-c40d-4441-a26d-e4cc86cef391",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b7059316-21f3-4f48-a560-785bd1d4132e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c43ea69a-cae3-49a0-aee9-cbfe6d45358a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "77061b38-387c-4cce-b446-b8d7d90ce082"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "99642a33-3283-4b7c-892f-310f76f73ebe",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bbd37317-c9eb-4ca1-b25b-0c7048df19d5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "13543cec-ef6a-4dbd-ae39-b0d77e4bab10",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f964b151-8e21-44e8-9cf9-cb2e5f3db339"
            }
          }
        ]
      },
      {
        "id": "c63b712a-0693-450a-80c2-51243fbcc804",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "ed6962c4-5e5d-4e84-a61b-607d6d9d5b80",
            "name": "Negative Testing",
            "item": [
              {
                "id": "727b0977-87a2-41eb-863b-ceefd008efb8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9d741fa4-a7c6-4354-9bc3-44c43a77c1de",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8f0a942-3c0b-4b78-a509-b94dcb3c453b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b55d1252-6c1c-4028-8e79-87d2882b777c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2756d13b-ef0a-45df-9792-aca8a7ea52d1",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1c88f32-aad1-40df-bb3e-ea7978a4ba2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef879172-94c6-4123-a124-61c63e6ad2c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af9c0129-5e57-4696-8249-0902a552237a",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "598e7404-838f-4d2b-a3ee-bc7beb50464e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ead9b53-9872-49a1-b13c-6163ffab1d79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f370324c-d7e3-4b44-9a3d-c185dc948a89",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70b2e104-1e94-4db5-bed6-2495a4002e3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06b9f451-756c-403e-a474-6a0db94e8ca0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a286105-e43a-4bd6-a250-1a0433de5f58",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "880488c4-d27e-4616-a91a-54a9f3f778f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74003619-8480-4536-a2b5-b1263889446e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40a8886b-5629-4022-9066-d8da878783cf",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30bdd79b-40a0-4d0d-9bd2-e4fe5396044a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79810bf3-9bc4-4342-ae0c-bfbd5112c247"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2a36203-42cb-48b4-89f9-76f465b11f28",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9392a5c7-998e-40d8-94ca-bb22de74753d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b25876f-e04f-4f60-833a-042d65a4b630"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30d77c24-177b-4513-88c3-c0eabd8537bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "825465da-b2ce-4801-9c47-d5624757fa71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7761aa4-7e2c-4a5e-a251-a8b1c501701d",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c056ad58-1012-4c48-bdf9-8c1b2c380a67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e46187e5-ca4d-4b38-be48-f50d0d738db6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f99cf55b-6299-4537-a896-2d7a2eff2038",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8565179-4e10-479d-9cf8-b307b57a7dc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72e3ff0f-7a34-4d11-9b87-95ba7cc57ddc",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3a289d3-1f54-4e84-8988-397f76bec6ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a834870-0e44-4660-aeb7-3ae9e91df6d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "622e5cba-46c4-42ab-a5ac-48c43deb31f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35aa8fcc-b348-4bf9-aa28-dbfc8bab3713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c834ea3-0589-4ddf-bf08-c267d96771a7",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba25bb50-22b0-4047-bf7d-0a8f97ab44b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "275e077a-974a-4a6d-a922-638fd6c7b188"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a52a21b-8987-4265-ad12-55ba405c6f51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fb88f86-f917-4bc3-941d-94d53d37d71d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "306e6c3e-4bd8-49a7-a56a-9ccc821346ee",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2989ef91-71eb-4adf-9c09-6a4d4e4d33f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b501ed36-0c6f-479e-9d47-908dda1a16a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e9190a8-93df-4e3b-a994-133f623d4a98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "720b576d-6fb8-4e62-9886-b90612064a5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac5770f8-cb06-4188-915a-e6c96825eed8",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aad9e935-623d-4180-b8e2-8b80db3cad51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "272da7b8-6d53-4de9-90d8-e8e385d7a7ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0605feb7-34d1-4fd6-8056-81678239f91a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1342bd3d-79bf-47f8-927d-c84a862560a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b356d50d-d2ce-460d-99d3-3ddc386b4889",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82554377-4879-49b6-aa4e-d66143ce117d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0a05b2f-7524-403f-a976-437c31de67a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9b5b1e5-5e57-4572-8bd0-54d2d122950b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8678c5f-b2d7-4f38-83e6-a76848c22a2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fb202f0-adde-44db-8c83-070398738b8e",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a8f8131-7e25-4389-988a-0e80f8abb9f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6aa9967e-e12f-4810-b864-f5bad819d259"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ef2ca1d-1dd5-4531-b685-bb2c646d64d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bc360a1-498c-44b9-b5d5-90d39eae8163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "966502d1-94cf-406b-a1ed-bfd1b4402a8d",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f48b40ed-542c-4841-b51a-e37170d366fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0681391f-51b8-4148-9f27-9e1048522d10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fafbc16-68c1-4e70-9197-ee7e25a253bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd6f45f0-553f-4dc6-9e07-2d298f679741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb624215-6a1e-4fc3-8245-d69b437d57ca",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfc24664-46aa-4241-ae3d-1c15ff0abe47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "380ab1fa-708a-4b74-80e4-f6287e01dc01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9a88bc0-a7ec-47f2-a4b7-b589a623dab2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3ccb985-9e7d-4db8-9f92-087ff6151e85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "828a9726-0706-4f81-b5b5-3d9a87703468",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3cd2972-2634-496d-84ce-1f886dfff382",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cabc8ac8-5468-41e2-a4a5-e76d561225f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a6f98a9-2188-4939-a45d-6f7d39fcf87a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92b26f13-cddd-48f8-b88e-fb4e499afab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "767d1075-d7fc-48d8-80f7-20ff39c456d8",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bc2d4d9-4d44-4406-aed7-8d71da364fa7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b0eead1-a813-435b-8cc4-de81a0a7ffb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "906db8b0-6191-4fc0-8d29-3822a4b88f10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "030ac762-8530-475a-9014-7ff1e9de405a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9107774-b012-41f3-977a-6641244ccfcf",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35b0aa51-544a-4d29-9bb4-e46a6a1dff33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62a3fd8c-2bd0-404d-b8fa-251f75c52556"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "198c4af3-d631-4389-b391-06e598611bc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e01daa03-dc04-4cdf-88e5-e8adc48a29c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9205752-dc07-45fd-b370-3511543e0851",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdf33580-856b-4619-95c9-d1accfbd3d6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86a10450-e247-47d6-99e1-30bf63df83c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d2ebe16-a766-4ec8-b264-90c42224ed17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "444fcadc-c899-443d-b26f-a28ede5bda59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2913269c-412f-4ad1-8560-4c7521eb886c",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7453e0f-e741-4916-92ba-91ed05a34614",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2341d86-8ec4-43c4-8d46-4d15cb3986f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27a13c44-d4dd-40ec-816d-45193a7d8a35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a9a8572-9fe0-4fc6-a68b-113b9134a335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d8d5114-e7e0-4380-8a21-34f3c8747171",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "253d364a-1bdc-4d51-bc8e-6c7f57f0deb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10790282-a929-4053-8cb2-61f92710fbff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b7f2652-33d1-4e10-b677-11beeadeb13a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bef6fab0-8489-4ddf-8ede-5f87254e3d0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cf47943-3a15-4ce2-9c2f-85eb46adaa99",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8153483c-0220-4c03-b7c3-f2c25bf1ca73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "783ac27f-7a4e-4a3b-adf5-fdcf2414899d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c043dbec-cd0e-4e55-ae5b-22af050e7522",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3938196c-b661-46b9-bf4d-eb5e33937d95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37835211-d797-473d-b023-75e9a596f720",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6deb416-4aec-42ba-b5d0-e14fc9db62a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6175ceb6-8295-4f2e-87c3-ddf22eaa4245"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "356db8da-a04a-4c8a-b349-93a4d527748d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3231a6f5-2a0a-40dc-bcee-c7916425dc7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac01b648-4610-4b24-90aa-31b771194443",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a028c9a2-8fea-4856-a554-f0e2d8802426",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffcbc9a2-a548-46b3-8281-001b2a16059a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bef94fe1-c011-4b7e-abef-ea8922f0102b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "744defda-3a0d-474c-a5bf-67077af3d6a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48f9b242-e2b4-46f8-ba4b-265b870002d4",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de3aac20-9ada-4cf0-a385-ddccc26a6151",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa307717-2e0c-4728-a343-a025996dfc3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c08573bf-0751-4c9c-9641-6cf7fe264b72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae23a170-50b4-4fd9-bc6a-1f67f4e6caa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e210d23-4a19-4126-bde6-8eefd3463855",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa2c7cc1-911f-49e8-8a75-4172b010f27a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e96a738b-c26e-4b21-8add-7d363c0a4c19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d941eb5b-20d7-4d88-9228-5ed188a4aefb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d6f8e32-8763-4ccb-ba39-c9931b13abc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f6c7c4c-7dd2-4854-a421-750747bde950",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8160d6b-ce19-4236-99c1-85d904904875",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82554545-eeb5-45c2-b247-57b9a3f95120"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "485a9764-2a85-493d-98a3-7a0403131899",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b4e38df-49f2-4ce1-bbec-48afd592ce56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46c90096-ed04-49d2-967f-afc534013035",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfd377fc-e096-43b3-90f1-212f1ef7c5a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c65e4549-dbdb-4165-aea6-343938845ff4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78e1bdbd-899a-4021-8a5d-2a9548d8f688",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5d3180b-b615-46d7-8ed0-df0c47dd8705"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd5a99e3-af0c-4233-88cc-a6d322c06308",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b8eef56-bbf4-472b-8670-23a00d23bd2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c5005b1-59b1-4eee-839c-ada628337e00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95ff4bc9-2446-4e14-ab4a-a72c0510c2c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "378414aa-e349-4a73-804f-de794c4228b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "716fd15e-1716-4b3e-b94c-17df5dbbe72a",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ce2d175-4b44-4e3c-83ba-5dfbbb89e06b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b285bc63-4927-428f-bbf6-c15d801d4cd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "351faef4-383f-4512-aac1-63b01c2dfd4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04f78d07-6b5e-494e-8f10-e306f8dd5242"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8d52735-e900-4bf3-9ad2-dfa99d166e11",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db814079-9642-493b-af54-38bc28541134",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d787bb6d-b93d-4596-b94b-44231953e45d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "828c1a95-3c86-4b20-bb1e-6742b735898a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c08c851-b56a-44c8-8bb3-83921c4c4631"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b628df6-ca8b-4a82-9308-b84bf6a824f8",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5f2f8bf-b981-4b7e-8624-c0ccc39f21b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76c97413-660a-4763-a24c-861a861a3738"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9142d38e-f589-49c8-ac65-24f94ded6ecb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e11b9f8-d2b7-4308-83d4-b3d22a81a81b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47495995-9ce6-4b7c-bde9-42d770882881",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6605ce4f-3a4a-4855-acbe-73c8f1c39461",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "180dba62-f1a6-46df-89e3-14d214529724"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d847fe22-d35c-417b-b4b8-22931b0a5adf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c959a5e7-e54a-4700-85e3-0d988b8f390d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c9c1624-224b-40f5-b1e5-cc47eba3c36f",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7a4c455-9190-4398-b3eb-8efe01de52e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "107e86e0-a315-4803-94fa-d3d873cdd269"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d135dc8-d2d3-4583-8c0f-28a5380621ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "694fcb25-a8c7-46c3-88e9-49878f01d45a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6efd02f2-437c-4508-bccf-6c9d79cff678",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf6cb1bb-98cd-464c-96c5-63e9ef45a2b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c6bd9e2-14b7-46d8-9bbc-eb001403a117"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d483831-df9f-42dc-8b6d-6493f228f5dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7c95941-6ede-43e1-9ebf-94a9b6b0d1fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1af1ec6-c54c-42f6-84db-14d0b0460a81",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74a3973f-7fdf-403d-a8b7-c90ca1345b31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d66c7e2-f23c-4bbf-88ab-51e2a340b927"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e9dc597-abf6-49d2-b176-b9be7e421e2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fe86cd0-cd2a-43cc-8315-5b17ca5febac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc7016ac-7a7a-4f09-b4a2-c24104c84c82",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9602ccb-d430-4aa9-9de9-0d443d8a3962",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87d7b5ac-b33e-46a8-a984-7781a062a72f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfe7cf28-dc96-4954-8cde-453899129b43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "488849f4-9a40-4161-ace2-8caa84b0fea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83c51c35-5449-489b-ac23-c08eab03fa61",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad072639-94de-4b6c-a57f-20d3d6ca7383",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "156b97e4-f588-40c9-96a9-caeb93e45b53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7adcb1a5-aef6-45e8-bd0d-878073aad6dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3890a91-087a-4ce4-8653-89349f23a9e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ba6b6ca-2c5e-4228-ac90-4f93df6b6c94",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14963101-d335-4e85-9711-76f2069c8071",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4334898e-20ed-49ba-b51f-0dccbfda2e59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b566820-2356-44d8-ae0d-5ad763dcbc7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f58c317-f48b-405e-87c5-254ad51ce6e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6055a6be-f684-4666-9c11-418bc0c514d7",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75c31c49-5f6b-4a0e-af0f-08a99df1838d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "729aae68-7d7e-4960-a6c8-384eea343543"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd585734-dc13-44fb-9b0c-8b0811b8c026",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e83c3a70-4459-46d8-aa73-3e85c132fac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a86f607-643b-4b17-a122-f3807d4ee0ef",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85114f12-0c4e-4d15-a8c2-1f52073540c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98da1feb-e4ab-4758-b745-a201f1bc2674"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "514d31fd-ab18-4aea-8163-acfb26b6c45a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "438febdb-c439-421c-b0bb-57fcc7fff96a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13859f56-fb06-4bca-874d-c03d3843994c",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea3b5892-d0be-4f52-868d-c541cbef73e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b730b37c-6d42-4f27-8ab1-8a7c1d0f4f26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abd56167-52fb-4f96-8a57-d07e7c38390f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fdc7f74-cfa5-4c63-8e9c-aa592be08b9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02648fc2-8ff9-4a41-bb50-1e280fc54fb7",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "765f2298-175a-4f40-bfda-93c32aca025c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "948d6261-c3ab-4206-808d-95dfa0f74fda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b180880-587a-45f4-8f35-6963ee2fdc56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5c24409-3174-4071-ab13-ccb0280b3fe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9481f177-888b-4f05-8ff3-e9c9f041a8d8",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5dd2e29-13ce-4623-9448-7b306f57dc9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dc0da99-b83a-4f41-bc63-b313da6bff94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddeb5f81-4320-4736-b177-2c639769ac75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df095af8-84bb-4e82-a572-79ee276f678f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac364bdc-286b-4791-9231-3664470b58e9",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "859be022-984e-4d3b-9b4b-a7cf598cd342",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a43ed1a7-21f2-4c75-9f77-d740a20a7e7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb75cc0f-ed88-4ca2-bf84-74645159a3eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84345700-a34f-4b05-b836-88e61e35d643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe9a2139-80b3-4cb4-8abe-07ed24ee2d9c",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5d37b4c-255d-4975-8e24-4646ba9c14ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b30b9354-f83e-44fb-bd82-b6a5f22c00ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f6fb887-9afa-4b6e-8b37-45a5c689ea91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44c69093-4422-411d-adb8-6fd47476d360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ae718c9-ac26-4bec-9f56-eef0f9728706",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fce042fe-9a82-410d-b2dc-8decd9419b87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "457d9931-fd68-4fab-a698-930381e47142"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7921a3a-f618-43fc-acbe-e2efaa22943b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b73c5e47-4bff-4ded-a8d6-5179ef83928c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0515f34f-9a11-4472-b866-d08d3f6c66e0",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e6c70da-2a26-452a-a538-a5d6a8176a5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfcd7635-c7e2-4b27-bc11-8fd6e2b5aec7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd7e83a6-50ca-48af-8091-fdacc5a135b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b2ccd01-4b6b-4601-ad2a-17a4c8d89443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e70a0fc-e64a-4589-aef5-86543e614d81",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fce94047-8e9e-442f-9bf5-fdc31c8924a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f9dddf5-d4b7-474d-a9e0-9724239f6d14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82719a44-bd1c-42ca-a38a-a91e7a7f2123",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a67b760-1e11-4dfb-a1fd-ff6be3f2dd2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5718f445-4b00-4577-8d80-dd1367757f82",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "286e054c-74dc-4d50-a86d-255d39d37247",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9caabfa1-e42e-48c3-a5b7-25ad0de995e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a75f3cec-c962-43e7-bf32-0cf728ab2b8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4885a83-10f8-4431-ac41-a0d93779a1e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b469994-d9ac-4754-be1a-23753f4a4bb4",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9df6f19-2d7c-46f0-912f-03552e3b4dc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15098ef7-8b39-443b-bf80-a29e7691c1ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2b356b8-424c-4961-a78e-d289123becbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "634ead3c-9266-419b-a719-6ebc170b90b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "180adf96-d1d9-4563-bc38-c7ec7afdb7a2",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9ed51ae-8317-4e4d-bb20-a11b9a633d53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "979db9b1-ccc9-489d-8660-62dd6557a566"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc134c8d-1854-4ec3-bd62-be2eb4682035",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85730049-38af-46d5-b77f-e4943ec0799a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c735451-d266-44d3-82e8-b375edf4e5cd",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3db6ab27-8480-41ac-968e-60d3e9781e15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ab6ebf3-27be-4f97-be6c-754016628d33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e8f0387-26b6-4cd8-94d4-79541e465acd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23a64be7-b0b6-41c3-800b-727c44cd8c97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87a3c700-ce2f-46f5-896e-72f76bf56c40",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cd61b32-dc14-48a5-ac92-8f3d73ebfbb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60792f9f-ce3e-45c0-92e7-638daf30fbde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b989dce-fba7-40fc-884f-3d6a103f7e73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6a9882f-3d3b-4635-843f-365bb2ae7b87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8f0940b-7152-4c3b-b3cf-0a29f94c64f1",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fd7c486-7cd3-436e-b78e-d17fa241d7bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90666874-99d8-430b-9b91-000ca857a964"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "945d3103-4e25-414b-bfb2-2ebf94963f62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "987bfe94-47a3-4c2f-91fc-21340ba056d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04be88f1-bd4c-4bdc-a5b8-8199fb26024c",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69ebdbca-a3cd-424b-98b5-bebcb776dce3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e663388b-0297-44a2-8331-de5782079514"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48127357-9f04-4fe5-8bba-5796634f6d06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dd1f538-9d6b-4da9-9ad7-7ef784d138d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c563e087-4c43-4a1d-a595-afa2d06f3324",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09661ea3-360b-45ff-aa49-324526552663",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df690d4c-91ea-4e65-8d55-d988ae13433b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9549deeb-31b2-47e4-9caa-73f265d87255",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57d7b3b3-3465-43c0-8cab-8c7fa57805d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddb1f288-9274-4738-948d-25f1a173cf9d",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18dc37de-0e9e-4d55-9b4b-1842ad2ba4f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd1f3828-854b-42b0-9230-0c9a818c3eac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d092537a-e49c-4e47-8fc5-c04dc05d5f30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "267b8aa9-5369-4477-a7c2-abb333a88654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84661849-42b1-45c7-9c6a-a6bd8f9d0ce5",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fa96969-e9af-4147-aacb-0cbc3d822dc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed33a0f2-2712-423a-b174-f1031e0227e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13512fe3-652c-4108-8723-2657f7bbef6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8602dde-84f7-4d37-b156-aa5bcd8a6a7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "167f2011-5d49-49f3-9621-1f93be7a9202",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3456bfe-15c9-4acd-86d7-243e813a02ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c49856ff-1fe7-4e63-a445-f830ad9ab75a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ad80d14-d409-406a-9046-3a9caadd3ec2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa7a0695-a20e-4caa-af01-75c54b2e5567"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad365335-b78a-4094-a3db-0180213b60b2",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bca59b3-d766-4ddc-a816-acc2b0555bda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c12d58e-eb75-4721-aa8c-fc8da3b4f347"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd5609b3-0d54-441f-b893-bd834620aaec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7fee6fe-5f8e-4bb9-a250-928238af145b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8584f76d-9ec2-41e3-b96b-575fca740196",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8089de3-1b38-4e44-925c-3652c65afc65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bce59fa2-26fc-46a9-8dd2-bc7700d07e71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd7cad67-a87c-4cba-b965-cb81e2efcb80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43c042b9-0382-460b-b65f-5086b793b391"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c326dc7-2e72-44b5-a35b-1e062003eda9",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8494c3e9-1a28-4116-812e-9cf523e2268e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "796c6d85-5707-4c5f-b6c4-157ee85c2cdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b70bd50-b390-47e1-a8ec-1f9913e3ae25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cecb28e-0bf3-4e8a-84c6-57bcdeb51c68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6de037fd-abe5-4053-bced-801b60fe8825",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45b5f842-d786-4850-a9aa-5be00bdab0b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2ba2667-808b-405d-a8e2-1f17efc7d53d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "778f6d4b-e092-42d0-864b-43270736073b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72b03cfb-59b4-4da0-8e1e-d6b9c47a3da9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5571d6c8-8027-4fbb-a5d1-b7620794c69d",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09855e92-3a30-44b9-8f72-6172cd89bba2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9885223-cb45-47ad-b963-6a7529dca33c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2542dd5a-19e0-4d2f-894f-c5660c4d0cc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6e9d792-e6a3-4e87-a41b-a5cd5b2a14a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3cef715-9253-4920-bc2b-e86708f25b50",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1210f88-a517-438f-a9cb-1b07305e72dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba7f4920-e220-4e6a-bd20-1eaac21f679c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8c28e2c-e442-4d56-9a35-f1f6d046b87c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e30fc63-e30e-4800-b95f-d7a2c9c75d2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6e4ce79-f15f-4a0e-a06d-23e3c1ddb60e",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d509b404-65e3-4a80-a7fc-b7753061126b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b99cef2-63b9-4a0c-9ecf-91c1a46f459a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82e51079-adfb-40fe-94b5-f7657fe601c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9cf7e9c-e086-4e12-8416-70e36852065e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da81e969-d880-4b8f-a8c6-48865b593fd5",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e0d0a81-8f4e-471a-8bcd-1a9ef58a222d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "108976aa-ccfe-47e1-a8a7-2c19777b0e9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60a4f07a-acaf-49ef-8eba-f259b3214152",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fde8e126-5ed4-41e3-923e-a93f2ce1e77d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66e2dd6e-f99f-4cf6-a371-b762b002a139",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3470010a-26bb-4b64-8dd2-861da83ad8dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4d4634f-7dae-4909-8e61-5a351a401b82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c305954e-44d8-40b7-af5b-15d6035b3c64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80a5a9ed-3d72-4c49-8a8d-351d06f53ced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49b812e2-5c40-4c7c-aa16-e7b14b335cf3",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "881f8fa0-7d28-4d95-afb4-4d48197adde6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c314ba1-1265-4319-b697-056f07f8f76c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca9e3503-bf9a-4a91-a878-f5c5d77643e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56476ee4-d046-4938-917a-d030075300eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1baeba6c-e2b9-4dd7-a863-731659f00e9f",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da1d69fd-b1fa-4872-aae0-ed3343218d62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c766da10-293d-41ce-b572-678bf2494c69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b4c0395-e64f-4100-be06-012513777e35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d2fbb29-5b1e-46c9-b5c4-f2731a2944e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a3350f7-1e85-450b-aaad-1bdef7801f21",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df184e09-4a43-4ae4-b79c-4e954da7c572",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32d3b2b5-32e6-4e41-9e3e-4399f3ae72a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b0aece8-174d-425f-8f4c-221d9ea0a86c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ea1ff44-9675-4c6a-af84-306b69b6030b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdceb242-dbdb-47c8-b554-2d2472ae026f",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15193a62-aedf-4dc0-8c79-fda6ac97dbfa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d66c118-18c9-459e-8523-326f8ff9f8e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d904c97d-af6d-438b-9312-34cb1182bde3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f897806-4369-408c-ad34-baf3fa8ba0ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fe78261-50b7-4d91-bed8-01a3ab328b3e",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ad7e24b-843a-42a9-a8c7-5ed3320f847f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcca95c2-b254-400f-a4be-8097dfb15e39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b84f96d8-8120-41eb-8189-03b78dc08b2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9172d518-5448-4718-8fdf-57b8c78d8111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6ad4e01-a92c-4af9-8511-d04eb09c19d5",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce083105-a983-4617-befd-efd4f9cee13b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "535abd1d-5791-463c-b7e0-d201ea51316e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d04d488-27ce-4033-a569-8f3c3ba8cc16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8bac4bc-bf50-4216-95c1-aac08cb2bd24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a513fdc5-5a3c-4e3c-9213-a28226e1b1ca",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e16ec855-c17d-4b79-8c13-d1a104412798",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34cc8efd-62b8-4d3d-be1d-e5d74003ef56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce78e597-5854-426c-9330-d53c25d6b622",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01edcf3f-a6a8-4b30-9b73-22a261ec4518"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbe4b01b-53d4-47f7-a6b5-477767486c9a",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f744bdf-9600-4a42-9887-58a78d68c0fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1aebd744-d2d8-4289-9304-7aab4eba816e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "819ffff9-f3c9-44f2-9661-26547e373612",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23a4bce7-ceeb-4a02-a5b0-526229be063f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5b4c1e2-f4b2-4a11-8f50-75dbbbec3dae",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d005ac49-c8cb-4402-83f6-69aa1e37c8c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9249883a-0634-4846-aca1-d84140ac20c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df8d4111-95ca-4667-af12-0e2ab27c8288",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bab288e-2d44-47cf-ba95-5182ed12aecf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0a8faac-154e-4f3f-bc96-96a7ee2ed196",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8854bad-c1a5-4226-ae74-bf0d01434271",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8c77eb9-5801-45ad-a014-aa876f0f55d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99f26ea1-7c12-4027-978e-0056b789017a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acc1edab-80c0-4ae6-968e-1b4930bdc143"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ab13f15-5ffe-40ae-9049-882e99a531d0",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56f22916-92b0-49ff-87af-a69e23d9e33b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6360dde-0add-4539-ac22-8c93cf9a4020"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab454079-bf9f-404c-9dc9-848d35e48937",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02b06d6b-7ff7-4afa-9d57-5d1dab25c0eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34081921-e4b3-4147-b121-bb4f8e633f99",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd8c92a4-687a-49cc-acc5-4bab456c423a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc7180d6-61d2-4ce0-bdc4-2a852c4f35d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef183927-ace6-4aa5-b873-17e2a169ce5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2015ddaa-e7ef-464e-b6fe-c9027eee2d6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8a87a09-93f9-4f5c-b221-0fe2a46c537d",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76b2f0af-3c79-42ec-8a55-ea773883a58d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a057b5c-611b-4224-a3bc-1a763cb7eb53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e32c14f2-4276-4214-a2d2-be5e549c6765",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68efdb8b-63c5-426d-8f24-0dcdd13def5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "658b58ba-e453-4059-b07d-4f71045d48fc",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbc7a6ce-6b6d-4992-a6d9-81acf73f0746",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d885e282-772e-4fae-b18f-07ea8239e23b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f97f8c08-de86-48f4-82f9-f985469cee6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac10623b-7239-4c0e-b671-65ff30df1158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c80e23b4-de15-4867-ad60-4e25246524e2",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70904e93-064d-468c-862e-f2bfd5072272",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad51e6c8-849e-464a-b4a9-c734f7d46392"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cd5a2be-d391-4002-bbca-622b7a73e5f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfc542a9-1252-41aa-b172-611ac630c3c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b082606-423e-41e7-add9-0b95397957d8",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f79f2897-4ade-4369-af95-44c5b5eabc62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60d365da-0486-48e2-bbb2-c472bc446444"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceb031ac-0cdb-4a88-8d52-11f156f15229",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47509b36-f330-426e-a32f-a21ccdce569a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba7190d8-c884-4c24-bc94-324ab08cf193",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d50f960-7847-4a80-ab14-8271995f02ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3dc48602-1a95-4b18-bd56-153d3553da80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c2543e9-e087-4ac8-8f98-3ffd2afc6ad2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c84d14c6-656f-4a50-aa6d-8a55b0d7b9d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09eede80-9e00-41c5-9fd9-fc242d8c06b3",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f5c397b-1571-4a3d-907c-667d8bc81ff7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75c7777b-2d3c-4ac2-96dd-fdb9d8b1771e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95887b16-5e24-4383-96fa-d4f41448af5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2a07ac4-c7d6-46f1-a69f-e6de661cf97f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d31d4431-0171-4dd3-bdf3-fb097e060a2a",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35035626-a0c0-4641-9dee-a2bfe0ae0479",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a69a828f-cf82-4201-9646-38a2270d2692"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "850c1376-2580-48a2-9514-dd517b2c8524",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c0288ac-465f-47a6-a54d-e2d8afa8bc39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbb35598-4337-4a1f-891d-f7cce98506a9",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00438e1b-37a2-4b52-ad1d-8c8cd86c6bd6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f592cd5e-8894-43ea-973c-2c2158eab030"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "084533a0-602c-415e-95d7-52e1d5a5d81c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "878a03f1-1a98-4fdb-ad46-b2d9d811edd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e762a8b0-1576-4f72-8b58-df50cb98d1d6",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8e43eeb-5ea8-412c-ab4d-aa8ffd1c6c50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62bbc037-4a2f-430c-ac98-364466381718"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f98c6596-b48f-4789-bb94-63b3142ddada",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33907f00-4206-476f-8d60-288e955002ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1558e8ff-aec5-4944-ad1b-1acb7fc311fc",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d02f096d-3048-4b97-8930-a6fe20f23dec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56ca68b4-baf5-46d9-8da6-61c628eca255"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb6d7c23-018d-4a74-a968-3b424c7d1ca4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94d5ae24-3305-408b-ab4e-cc23246f5c2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9e5233c-baff-4223-adfd-7ebf9fef5370",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49bd6707-8dff-4545-896a-d0ab1072fd01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b05a309-679c-4a92-aa26-a75becab8783"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3be5d032-32bf-49c9-8197-b241f07e8766",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ed60bb5-bc59-400a-8f70-69af4531ded2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01b44385-7776-4872-8ce8-9e7e3dbb8a87",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eddbacf-5cfa-4113-899d-a3049e269e3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b49f23b1-2b1b-47b5-aae8-f1a55d37467c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d3eb393-a910-4f2d-8234-880c9aae0ed4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2216eea-d600-4ef2-8f4e-00f5325d8460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22980044-dc6f-47b8-8d47-ca27abf30a60",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f94610c-0e02-4079-bccb-5a391aba7586",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b43394f-4dbd-4fe5-928f-224367a3269d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "feb33d05-30e3-4234-baae-a30e4ca7f1b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85db8005-4623-4886-9087-a951b68a56af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80dfec59-703c-4577-94aa-9bf75a4830d2",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "593968e4-d0ba-411a-8dac-9a93a18e8aac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2e7dda1-b5ca-4cf8-9685-f15bfc6150dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9481a7d3-563c-4a82-9342-2518fdda4b5e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4534cef-23fa-4ed1-8d7d-00ff5b7b4817"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cf08706-646a-46b6-b736-a1f5d215b491",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f3aa0ba-f9ba-4bbe-abca-39e22ca44c74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fa5857c-e33c-43a4-a42f-11dedb913a37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "360214ce-342a-4df7-8635-d3baa04ca3a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59ce0ce6-5dca-40a9-894e-f310da18d993"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "73229eee-a50b-4624-9849-12af884948cd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "251282f7-4c3b-467c-acf2-372c33daf17d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "35a69e9a-5c86-47ca-870b-9e854c0adb98",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "001dcb7b-60d6-42c6-92d0-428aa8f18497"
                    }
                  }
                ]
              },
              {
                "id": "3a93337b-7738-47ab-a8dc-33ea53089cce",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8a624ba3-52c8-4a09-a5bc-46d6ed596d13",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f173d0e8-5932-4f88-89a6-cab4ef23d515",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "ec1bd3e5-8ddd-4a8d-a6f3-0de43e033f56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "259e58f1-61c4-4573-87b9-b7c7888b8b70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "056fc8c4-f608-47be-9455-90990cb0fb57"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6edc8b46-b64c-49ca-872c-3d3501ea7091",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9a15dc8c-98c1-48bb-8697-fc6ead03450e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "20da12ef-6246-4062-b706-1b9eb1348668",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b7da5185-eada-4698-aa09-63aefc0c3378"
                    }
                  }
                ]
              },
              {
                "id": "3778b47c-8ec1-4f69-bc21-d02cc5cc7bc4",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "3b0977f5-b3f7-47a4-8fc5-2800261775fc",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d6bcef4-d6e0-4261-a728-48088fb8165b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "708218ba-cf9b-4209-a2e2-e80035f11f74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "134b9ec7-fc6d-4796-83b8-eb08535b072c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a10fe585-3284-4a56-9eb8-1f22918fb5cc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a405880b-d857-47ab-9749-2f181174af35",
            "name": "Positive Testing",
            "item": [
              {
                "id": "97e9b662-7cdb-46a7-9700-fe4f635eaebd",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aadbc0f0-d116-45b4-a842-bcf4757bdca3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "508e6e37-81d3-4808-a78a-4e48d87ad76a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3b038537-b92d-4b74-83f6-dc9fec7acdd8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1e1aa3ed-c80e-4ae7-a617-0d3e346c9cb2"
                    }
                  }
                ]
              },
              {
                "id": "26cf8af2-f97f-4fe9-8226-72451160a756",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "83544d96-422f-44ba-ba6b-8ec42bdb7162",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "fb18d817-f0c3-4593-b74d-6d3139279d4f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e5755bb8-dc6d-4781-b253-7e3543fe216e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ac233cbb-6289-4abe-8ec9-66596c49f8e8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "084ffa3b-beb1-4568-bca5-40bfb17dd6c5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "4a822993-1ed8-4ba4-a97e-aceeff556cb4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7cbdd31c-3d6d-417e-bd48-8343cf6c636f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5b3da74b-c6d0-4774-a518-5e8e53e7340d"
            }
          }
        ]
      },
      {
        "id": "df2f8d11-0243-4f2c-854e-386f0481721e",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "dcec40c5-089e-4be6-91ba-8a7e99165faa",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a8a30c4c-955c-4bf7-b4be-a64845b8d9cc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b67b929c-3c89-4d39-b022-50fb3d6c23cb",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd02cfe3-00fa-4077-a2d8-19c8467fcc68",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1fabb93a-455d-4487-919c-2da1f0367a48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06c22dcc-e048-4c8d-b5d5-ef8212a03718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d4221e53-21fb-40af-ba8d-19c7faf29274"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c2dcfc2c-a603-4600-9588-a6a19d613b40",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d6ceae7c-1a44-41bc-b7af-11b152d91f86"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "910215dc-3ab9-4bc5-9352-19b2d01ed78b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ef180a78-9f01-454a-83af-d65dde8a218e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7985f1a6-3eae-4a1f-b636-091ff9db2c2a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "76d847d6-320c-4e59-844c-ba0cc8b6c2b1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c2f118ae-c251-4b51-a216-01ae62ba460f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "23b2b6f3-5652-48be-b3d1-9db3b55af80f"
            }
          }
        ]
      },
      {
        "id": "c1a1a85b-a994-4244-b068-89d79c069fef",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "9530d209-ad5a-4345-b4f5-dbce8f0e0a47",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f77e8448-8934-43e7-beb3-210575b343b5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ec48d5e9-d90e-4a48-ad10-4597d1471479",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b0ae7c0-704f-4c03-8852-9709739395f8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3c2fb01c-8a00-47a1-9e2e-d3c2eddd0102"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96f2f971-06aa-4976-93b4-b6b58ff267a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "791554b8-0aa9-43ff-9214-303af2ed92b8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dd7fe40d-4341-4540-a214-a06ec1ded21b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "72e26580-c2ee-473e-b50a-fe853aeb2954"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9e136acd-4edf-4121-b3c0-4d19dc6c5cd1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3c99baeb-678e-4bef-919f-5da433521be4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fa069c59-c06a-4236-ace3-b30e54708cb6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1e76f740-fcb8-4d51-afcc-e2d7232de530"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b3dfa84a-30ed-4102-90e5-e995ed64ba4b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ddd34f5d-07a5-4b8a-8af3-4cecc95b2568"
            }
          }
        ]
      },
      {
        "id": "09fd3347-f9b3-42af-a08e-4489b8581e1f",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "f15410f0-0fa0-42ba-90ed-81fe4f86daa2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "205bdacb-dd62-4bca-b103-4e3dc8ec63eb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a7bc12bb-1b60-40b0-b9ab-9117bbbeea3f",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af51ee02-d6a3-4b60-b077-2b5dcc05c5af",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e1daf0e0-2458-43c4-82d0-7b12e015c531"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8228deb0-a20d-4dbd-bf5f-7dfc30d6bbd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "740f2e03-c858-4277-add1-3707ad535c5b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fd74b3b4-c073-49a9-bced-e1f3ed10dd04",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9cfe4fd2-8616-4b66-bba7-4ff696c060ea"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "689341df-e43e-42a5-bb24-7701864dc7b2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "006ef93a-302f-495a-8dfd-52248cea4ac2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "644c592c-e0b7-40ef-82fd-1d772a0135e4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8f69c888-4780-4db5-94dd-38933b6d89b9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d18de5c5-e5c9-47cd-92ff-62f51546818f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d834bdaa-3154-4dee-a7fa-676cd42775c1"
            }
          }
        ]
      },
      {
        "id": "5aa5935d-5c6a-462b-9f1f-2d458b2bb1ae",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a780d48e-0c39-4b09-9e7f-de6818155a08",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ef4a599b-fd30-4795-a30d-7a2317dcbf2c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "21438271-2ccc-4486-8cbc-89400798c59d",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "08ea4d95-36bd-4b2b-9edb-15f994409002",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ebc7bc54-9f56-458d-aa69-b032ab6cacf5",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 571,
        "pending": 0,
        "failed": 87
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 151.34859154929572,
      "responseMin": 16,
      "responseMax": 1918,
      "responseSd": 276.1446631075911,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1691368791682,
      "completed": 1691368849242
    },
    "executions": [
      {
        "id": "b3ea8042-d971-49f4-8a79-7bf53a612171",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "5b58174f-bad6-40fa-b5c1-cdf940d3dbbf",
          "httpRequestId": "a2b8c1b7-05c8-4f17-8d8c-1f363e0279a6"
        },
        "item": {
          "id": "b3ea8042-d971-49f4-8a79-7bf53a612171",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "e54fa453-db7b-4a83-b4da-3b72b3a7656a",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 0
        }
      },
      {
        "id": "cf7ef9ca-1177-4e4f-994d-b1e57be41b96",
        "cursor": {
          "ref": "0c9cea1f-6000-4a98-b381-4c5c8af2bad8",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f55c9ad9-aaee-4edc-93a2-18c2c591e40f"
        },
        "item": {
          "id": "cf7ef9ca-1177-4e4f-994d-b1e57be41b96",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "fec75fe5-1107-4a84-97c6-202d9d8f78ab",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 0
        }
      },
      {
        "id": "f7008293-762e-4267-aafd-ca1e2a095b5c",
        "cursor": {
          "ref": "69be46fe-fb95-4e87-b5c1-245503b8e137",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6919d82b-2e17-421a-9418-9e805ff56ff1"
        },
        "item": {
          "id": "f7008293-762e-4267-aafd-ca1e2a095b5c",
          "name": "did_json"
        },
        "response": {
          "id": "d7cefbf2-64a5-49f7-9ebd-cdde841501ba",
          "status": "OK",
          "code": 200,
          "responseTime": 233,
          "responseSize": 1102
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "765d103e-ddd6-45af-b95c-1dde0c4a2a18",
        "cursor": {
          "ref": "acbd0881-50f6-42a0-bed9-a36ee30baac5",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "305ca182-a2e9-4725-ae00-89eee5fcd32b"
        },
        "item": {
          "id": "765d103e-ddd6-45af-b95c-1dde0c4a2a18",
          "name": "did:invalid"
        },
        "response": {
          "id": "91205484-f0e0-4c38-9b3d-4f9efb70b379",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "765d103e-ddd6-45af-b95c-1dde0c4a2a18",
        "cursor": {
          "ref": "acbd0881-50f6-42a0-bed9-a36ee30baac5",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "305ca182-a2e9-4725-ae00-89eee5fcd32b"
        },
        "item": {
          "id": "765d103e-ddd6-45af-b95c-1dde0c4a2a18",
          "name": "did:invalid"
        },
        "response": {
          "id": "91205484-f0e0-4c38-9b3d-4f9efb70b379",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4ed4696-5ead-4be3-8139-664a7652eaf1",
        "cursor": {
          "ref": "aefd72ee-bcdc-4286-9a97-44fab63b083f",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "f20e2cff-59b7-4c60-b504-55b9f8e06351"
        },
        "item": {
          "id": "d4ed4696-5ead-4be3-8139-664a7652eaf1",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "6ad42cad-9c95-4071-8a83-bf38ee30040e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 130,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da53add3-86b4-41b6-a558-a787e10e1a8e",
        "cursor": {
          "ref": "26be21c0-0f8e-407a-a164-685d06384c31",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f6acb8f2-375d-4101-8b3f-1e215e83e1bb"
        },
        "item": {
          "id": "da53add3-86b4-41b6-a558-a787e10e1a8e",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "ea6dfcf2-982d-4bb1-8b6b-1c8776837c83",
          "status": "Not Found",
          "code": 404,
          "responseTime": 76,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91f45c3b-6c7e-46a9-b0d5-8c8c3b8cfcc0",
        "cursor": {
          "ref": "7b72e4af-5f50-4404-8e8a-1e6d268504e7",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "57b9ff50-a806-4fce-abee-519681a4cdec"
        },
        "item": {
          "id": "91f45c3b-6c7e-46a9-b0d5-8c8c3b8cfcc0",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "81a7c0fe-57d3-4053-9b34-e5b501eb54d7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5fdbb5d-ed8d-44cf-8189-c5e01ab89a5c",
        "cursor": {
          "ref": "f6d409b7-acee-4e9a-bcf1-3134d3fc2bac",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "1beecf22-aceb-40cb-a298-5d75b847249d"
        },
        "item": {
          "id": "f5fdbb5d-ed8d-44cf-8189-c5e01ab89a5c",
          "name": "identifiers"
        },
        "response": {
          "id": "d4f36441-4460-47a6-af84-46c0131eba31",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 1118
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c6ad977-1525-4d99-9ee9-9c5b3c3c4a4f",
        "cursor": {
          "ref": "5995601b-5ac5-458d-8887-55f615df3d44",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f7a91288-3c80-4530-b4a3-aa56cd36c8d7"
        },
        "item": {
          "id": "0c6ad977-1525-4d99-9ee9-9c5b3c3c4a4f",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "f343e2af-ea99-4aba-9eb2-e57e36f65472",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6074fcf-3e77-4a2d-89bd-64ed0cfe2fe5",
        "cursor": {
          "ref": "ed1544b1-ecf3-461e-90a9-e04ad4c8c7a2",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "3871c6b1-e9c3-435b-a82a-61997dafc507"
        },
        "item": {
          "id": "d6074fcf-3e77-4a2d-89bd-64ed0cfe2fe5",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "ce28b910-ec40-4a70-bc3d-61de0b7796a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5075c4d3-4260-431a-a169-af2c26dbf523",
        "cursor": {
          "ref": "12d9fe2e-d8b8-4795-87e2-60667093366c",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b2f0f6dc-5326-4425-a43c-85790b54b572"
        },
        "item": {
          "id": "5075c4d3-4260-431a-a169-af2c26dbf523",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "90fe767e-4498-431e-8505-76427899c6b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53159bbe-83eb-486d-acfb-5afb5479efa9",
        "cursor": {
          "ref": "7d6fe248-4a0a-4371-af3d-efdbdc715659",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c6097802-35b2-4a4f-ac2e-c671670ee177"
        },
        "item": {
          "id": "53159bbe-83eb-486d-acfb-5afb5479efa9",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "5defa931-fdd3-454a-a64e-f78351a285ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e87764c-cb83-4db2-906c-fe3a33a55b2e",
        "cursor": {
          "ref": "899420d5-5f03-4371-a6d1-a8ab375da4d9",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "f1036127-b10f-4903-a580-73c1b2301403"
        },
        "item": {
          "id": "0e87764c-cb83-4db2-906c-fe3a33a55b2e",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "d21780d5-8e3c-4218-8992-119bda859e75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3b955a1-c729-4a94-a1b9-77b3aaaf7e24",
        "cursor": {
          "ref": "0d26feec-0aae-4c40-9654-9b8d869c643f",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "10ea7f1b-980f-43df-b3e7-f1886cb66955"
        },
        "item": {
          "id": "a3b955a1-c729-4a94-a1b9-77b3aaaf7e24",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "a80f25ca-9718-4ac2-88ed-446b98d67b38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fe3eae5-f9b8-4ea8-8c2a-d7b629f32bfd",
        "cursor": {
          "ref": "2b9717b5-a8aa-455f-a5eb-aaf9c572c31b",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "876b0e65-837b-4fed-ba59-f669385609e3"
        },
        "item": {
          "id": "5fe3eae5-f9b8-4ea8-8c2a-d7b629f32bfd",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "3c10b345-6485-4f16-b421-da464ebc78d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c54cbf8-613e-425b-8d4d-7341c02ff297",
        "cursor": {
          "ref": "5a35e761-cc66-4235-9965-7c0d2e989a4d",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "81b38801-8a9f-42a4-86ab-9faaa14b2416"
        },
        "item": {
          "id": "3c54cbf8-613e-425b-8d4d-7341c02ff297",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "78ad47d5-354e-4471-aa18-d82e5ec2aeca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49e485b3-2d51-40dd-bb46-0e2a236bafbd",
        "cursor": {
          "ref": "2feb19cb-5cf7-47e3-b569-472d911832e1",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "aed9184f-0550-484e-b628-5f82164868fb"
        },
        "item": {
          "id": "49e485b3-2d51-40dd-bb46-0e2a236bafbd",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "042cf49a-6784-458f-b3a2-320d1ada56c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1931a54f-620e-4a80-b599-2809abae4ced",
        "cursor": {
          "ref": "13b5dc26-d58e-4c9f-adbf-bb542000f640",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "dce75d4d-9dbc-4f76-b90e-8cff2f89fb23"
        },
        "item": {
          "id": "1931a54f-620e-4a80-b599-2809abae4ced",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "80ce892b-2536-4588-94ee-7188b13c961d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "536088f5-84ef-4f35-8558-1601f7b05324",
        "cursor": {
          "ref": "0af4f05f-cd84-435c-9147-542b1e9d2f2c",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "93646e0e-ff1d-42f8-a66d-5a4ab3f3efe3"
        },
        "item": {
          "id": "536088f5-84ef-4f35-8558-1601f7b05324",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "c556cc91-1c55-4624-bcc4-9e4df4613aad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b4ba374-4d33-4cb5-b81e-191d51f0642d",
        "cursor": {
          "ref": "ca37d079-f69d-4fc5-97b4-08348bbb5986",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "2e4bb0da-ce94-463c-9c53-b9bbd2320a91"
        },
        "item": {
          "id": "5b4ba374-4d33-4cb5-b81e-191d51f0642d",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "381f4d28-9c6f-43a4-a8fd-51d4d63e3d5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0648a6d4-5e30-4b77-8846-005644b603a0",
        "cursor": {
          "ref": "86033820-6e35-47cb-a05f-8ba712cd52a4",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "1113f833-8a3a-40dc-902d-c51b81110548"
        },
        "item": {
          "id": "0648a6d4-5e30-4b77-8846-005644b603a0",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "b7b95f17-df6c-4104-be2a-3abd9251fc19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41fc7bdf-a655-432c-864b-5be5d8c20f7e",
        "cursor": {
          "ref": "4f13cd26-cba4-4c86-956a-5bc7a0cd00dc",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "15bffe36-f98a-4bcc-b847-4d502558bd1b"
        },
        "item": {
          "id": "41fc7bdf-a655-432c-864b-5be5d8c20f7e",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "e2b422c3-f0ec-4f0d-8928-a1186562eb47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "420f4e15-25e3-472d-8813-cc60a850fe1e",
        "cursor": {
          "ref": "4cc69f87-f344-4d15-af06-bf4ff7f716e8",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "22fc1c19-5b38-411f-9e00-2a7f81ddd31e"
        },
        "item": {
          "id": "420f4e15-25e3-472d-8813-cc60a850fe1e",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "4746b91b-404d-4050-ac6c-415c4ee51a7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60d18281-653a-4ed2-ae8f-dc63fb45b109",
        "cursor": {
          "ref": "67c991df-1d0d-4f87-acee-f372e2aa4570",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "78572452-b8ee-4006-98ea-9d3e07ecfd4c"
        },
        "item": {
          "id": "60d18281-653a-4ed2-ae8f-dc63fb45b109",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "677ec382-302f-4b15-9115-2b42eefa3981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "065e6080-520f-4732-b6ce-3811208b5cc9",
        "cursor": {
          "ref": "d07d2955-7913-41bb-8e9d-487467e8cc29",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "3ad97c9d-f57b-4d57-851c-5d5863e85e3c"
        },
        "item": {
          "id": "065e6080-520f-4732-b6ce-3811208b5cc9",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "7b46bd84-d851-4553-9aee-f4aa0c4465b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bb5775e-2233-4f6b-ae79-1dd619acf3ff",
        "cursor": {
          "ref": "04890f37-e095-481a-a59a-24ab08299c90",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "b8c8c3bd-300c-4e24-b719-8d5a748e83aa"
        },
        "item": {
          "id": "8bb5775e-2233-4f6b-ae79-1dd619acf3ff",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "7d67aa18-9a6d-41ca-946f-f66a946b3c0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf6b8f36-bf15-466c-a42d-7a55e8dc0b27",
        "cursor": {
          "ref": "bdcd7397-fc7e-4d83-bf7d-749d2e0cdb3f",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "6fd08a72-d6f9-4b2c-aa1f-4f3045c3a892"
        },
        "item": {
          "id": "bf6b8f36-bf15-466c-a42d-7a55e8dc0b27",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "8635107c-6e5e-4e19-b5c8-a50887581c7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cadcb84-8df9-42f2-8637-10db5dd52be9",
        "cursor": {
          "ref": "f6157fb0-f0cc-48f7-80e3-a8c8639525fd",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a1394146-ac2c-43aa-8c5a-08009a18f62f"
        },
        "item": {
          "id": "8cadcb84-8df9-42f2-8637-10db5dd52be9",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "f2cdd544-bd97-4288-830c-c080cbab6b14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85d6adb2-b878-488b-b480-d94a4c8c190c",
        "cursor": {
          "ref": "9a36b9e3-0497-4917-9ab8-35d130221e75",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "6b755ab9-d216-4937-be92-576e2bd2a5d8"
        },
        "item": {
          "id": "85d6adb2-b878-488b-b480-d94a4c8c190c",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "a55d9a11-cce9-468c-82c5-5b160ae6f1cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b53fc847-ab38-42a1-9784-b462371d62fb",
        "cursor": {
          "ref": "915ca95f-08fc-435e-af25-0c302c22234e",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "befb9bda-e66b-46a6-9ce1-6e6b67242eca"
        },
        "item": {
          "id": "b53fc847-ab38-42a1-9784-b462371d62fb",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "fdd3ed98-6c8d-4154-af8c-9c94e13c39b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ec09810-e0b7-4a24-a575-9bfbbf1662f7",
        "cursor": {
          "ref": "d06ce976-e925-4837-9f5f-77792d06278f",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "68740c8a-49bf-47df-a5ed-b567eadb75ef"
        },
        "item": {
          "id": "5ec09810-e0b7-4a24-a575-9bfbbf1662f7",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "27fd465c-8863-4367-b826-a817a4fe9410",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "234ead8a-9f86-49d2-a72c-17777e5f8a95",
        "cursor": {
          "ref": "38732739-39dc-43e7-893a-374aa99e2cf0",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "b5a4f959-a949-4d37-b552-5c85a32e4651"
        },
        "item": {
          "id": "234ead8a-9f86-49d2-a72c-17777e5f8a95",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "1a88fed5-4d01-4ce7-a342-ed98cd6f76c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a69a9130-7630-4b9c-9208-68a067f01839",
        "cursor": {
          "ref": "741e4737-695c-48d8-b987-8f254fe2dc73",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "f4933ee5-1fb3-40eb-adc1-8c602191bfa4"
        },
        "item": {
          "id": "a69a9130-7630-4b9c-9208-68a067f01839",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "a0c9b694-d6dc-4b1c-a6a2-a9baf6432aa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "826c7c3c-0904-4f8d-b96a-54fe749c8c5d",
        "cursor": {
          "ref": "d66d4b94-9b7f-45be-b1d1-e8905912257e",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "ed34bd4c-9520-4fd7-8ea3-f22340d752b7"
        },
        "item": {
          "id": "826c7c3c-0904-4f8d-b96a-54fe749c8c5d",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "4c5a7526-9dac-4b46-b9de-b17a7582eff1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db545538-c709-4d09-8768-8c967aabab02",
        "cursor": {
          "ref": "4e3a8bc7-24c7-414c-bc9e-a0555a5b44f1",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "07e01785-bd69-483e-a61b-05fc33d68f50"
        },
        "item": {
          "id": "db545538-c709-4d09-8768-8c967aabab02",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "c72f9d2e-8710-4447-98eb-7ea414c1bb2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6587d8d1-dd5c-495a-88f6-0818622679cd",
        "cursor": {
          "ref": "4ca1de46-d223-4bb8-9ea9-aeb374af0bde",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "db289d88-7ba8-4fdf-b08f-be5fd694187b"
        },
        "item": {
          "id": "6587d8d1-dd5c-495a-88f6-0818622679cd",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "a68ccb00-8eb4-4973-8b18-37a22c4678b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "397d45d2-9e3b-45bb-82da-b8dd2e62ffd4",
        "cursor": {
          "ref": "3bca8d32-2308-4a17-83ae-be3fd0ab2ce3",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "da1a2f4c-b47b-4ff4-a801-acc59e460c20"
        },
        "item": {
          "id": "397d45d2-9e3b-45bb-82da-b8dd2e62ffd4",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "5beb520d-d9a9-4b1b-8b72-f204baee3311",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85de91b5-38a7-4126-af6c-ece3e1381f8a",
        "cursor": {
          "ref": "60a7fe5d-14cf-4d7f-b4a7-23c447470674",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "dcaa0895-b595-4402-8352-6abae723dccf"
        },
        "item": {
          "id": "85de91b5-38a7-4126-af6c-ece3e1381f8a",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "bc41e566-8757-453e-990a-deb20964f8b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aac0c043-0f84-4983-b089-827451e3a8fd",
        "cursor": {
          "ref": "3101cd43-5d34-4f86-b364-d218d516d123",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "622ec6b2-53c8-4ca9-b785-31fd96cfa66d"
        },
        "item": {
          "id": "aac0c043-0f84-4983-b089-827451e3a8fd",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "e23895d8-7774-4442-92f1-d8119480a449",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "fc48f977-edb5-4ff9-8a4d-7cf2493bc39d",
        "cursor": {
          "ref": "ceb9c02d-1da8-40dd-a0d8-6af5668d2a94",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "3be8a3d6-7fb6-4bd5-bce4-d4cdce0e62c3"
        },
        "item": {
          "id": "fc48f977-edb5-4ff9-8a4d-7cf2493bc39d",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "c5f48f41-a35b-4b6d-9bce-7c551f377f61",
          "status": "Created",
          "code": 201,
          "responseTime": 1918,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "5f6e3600-c17a-4c9d-a4a4-15c8dc9b1072",
        "cursor": {
          "ref": "db78a8f1-89e8-4553-92d0-944ee819739f",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "b80a15a2-e33d-4961-a5f1-00b07bef3397"
        },
        "item": {
          "id": "5f6e3600-c17a-4c9d-a4a4-15c8dc9b1072",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "f907e1af-940e-445f-8e2d-45c4a9251566",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "9ae24966-d13a-4899-8dd8-1b3f94ac4c2f",
        "cursor": {
          "ref": "dc6afe8c-9b30-477f-9ac9-6fb954b92a94",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "cc8b8a32-8cf1-44cf-a48b-7f307641d315"
        },
        "item": {
          "id": "9ae24966-d13a-4899-8dd8-1b3f94ac4c2f",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "fd4c0eab-0044-4491-a8e1-1f8acbab439d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd2e4919-7f04-44cf-8467-9b99f063ad06",
        "cursor": {
          "ref": "1b99ee39-8dd6-48e3-b7e4-33877267d042",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "9d95c8f8-6248-40ba-8cc8-f9a4e1bb559a"
        },
        "item": {
          "id": "bd2e4919-7f04-44cf-8467-9b99f063ad06",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "c890710b-0779-4c15-96eb-926a39da90a6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "a812decc-0da2-43bc-b7f2-8b91a58d6e3c",
        "cursor": {
          "ref": "9ebfe17b-19bc-47f6-93d8-ddedd616a439",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "addaecf7-73db-4fd2-be94-2e52ee985253"
        },
        "item": {
          "id": "a812decc-0da2-43bc-b7f2-8b91a58d6e3c",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "cc084c4e-d428-4915-ba9a-f652745461dd",
          "status": "Created",
          "code": 201,
          "responseTime": 1450,
          "responseSize": 752
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "36d896fd-720d-49ec-a1ac-799f84d9bca0",
        "cursor": {
          "ref": "dffe6008-e964-4fe3-ac64-32dc7785d5ec",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "9db12d32-2e5c-4249-b3cf-54601a5e455e"
        },
        "item": {
          "id": "36d896fd-720d-49ec-a1ac-799f84d9bca0",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "8a3864a7-af7c-44e4-b27d-e13776b98ba1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 74,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "5e99ca22-05b3-41f9-831e-706a6a0d8a1c",
        "cursor": {
          "ref": "bc55b33c-61dd-42c6-8ff9-697107695239",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "3138be8d-4bb3-4191-8693-f4498f256c43"
        },
        "item": {
          "id": "5e99ca22-05b3-41f9-831e-706a6a0d8a1c",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "37b4e9a9-aa6a-4d67-87f1-66ba18dcc753",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 795,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "cb517f68-c47a-4fe9-bd41-adbfebbd9e34",
        "cursor": {
          "ref": "78d6e10e-1422-4171-9a9e-8736f7d6c1b8",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "add1e755-94f2-4f2d-a295-8afe0f52163d"
        },
        "item": {
          "id": "cb517f68-c47a-4fe9-bd41-adbfebbd9e34",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "a68e9fec-af64-4d1b-b476-3b33f48c1ed9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 77,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "f9f1e052-71e9-4814-bffc-32a156295238",
        "cursor": {
          "ref": "f928dd65-6b66-4152-8b39-26e54cad7b8b",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d3949859-df7b-4a95-8e9c-56920d13cb53"
        },
        "item": {
          "id": "f9f1e052-71e9-4814-bffc-32a156295238",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "1e3013a8-80fa-4d58-9966-317422298063",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "e8dfa745-e86e-4310-96d9-dd40aa9b43fe",
        "cursor": {
          "ref": "9ea4e85c-fd5a-4d97-96ec-8cfb2111261b",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "6bcac263-1349-43d3-8837-2ef732b086e2"
        },
        "item": {
          "id": "e8dfa745-e86e-4310-96d9-dd40aa9b43fe",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "15049a08-d4af-4738-bdf7-0d119ced4d2b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "a4bf15e8-5841-48a6-9070-1a56de9a831d",
        "cursor": {
          "ref": "8c8e6570-5630-48ff-bd46-01ad5442ef3e",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "612d877c-cb34-4d12-8e4f-1ce4c6db211e"
        },
        "item": {
          "id": "a4bf15e8-5841-48a6-9070-1a56de9a831d",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "741ea96c-7887-49f2-8169-fbc04a2eb952",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "1b64509e-d1c5-41c7-936e-78452ce017f2",
        "cursor": {
          "ref": "4baf8f06-5a7c-417b-aa2e-f3710c1575b3",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "9a2d848a-21fc-4a3f-bcdb-57a043c013b1"
        },
        "item": {
          "id": "1b64509e-d1c5-41c7-936e-78452ce017f2",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "756fd203-1f04-403d-8439-8c0d3cd6d2cb",
          "status": "Created",
          "code": 201,
          "responseTime": 1037,
          "responseSize": 759
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "cdaa6afe-4ecd-4445-879d-c0f672046b23",
        "cursor": {
          "ref": "626c8873-92f9-4655-89ee-562ad699db9d",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "b36e0069-6b2b-4e01-9edb-ba15ce1406da"
        },
        "item": {
          "id": "cdaa6afe-4ecd-4445-879d-c0f672046b23",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "8461facf-af00-4a41-bdc8-6a7a2ab4ef8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cf200f6-027c-4e18-8b2a-9c581cb19e27",
        "cursor": {
          "ref": "57ca8cd0-88c5-4258-9dc4-5b2d0c0963d3",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "63929014-d108-4475-bbf2-b1a9895848ed"
        },
        "item": {
          "id": "7cf200f6-027c-4e18-8b2a-9c581cb19e27",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "d415dec4-a493-4c77-8022-ba706b63b22c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13ea7cd8-65e8-4099-8b3d-57f9b312fd12",
        "cursor": {
          "ref": "1fe03904-9eda-4f93-b73b-da1a637bc810",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "1a15e95e-c9d6-4a96-9ced-4f8dab11a4d4"
        },
        "item": {
          "id": "13ea7cd8-65e8-4099-8b3d-57f9b312fd12",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "c61f3216-3ac6-44e8-94fb-7b3db01dbff1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "994e5b0b-9c87-4d2b-b0c6-35de070e6d8b",
        "cursor": {
          "ref": "b2f1f762-a2f4-4bbd-8e9f-d5c54c988435",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "95b170ac-d315-44fa-b0fb-7c5c27c9da86"
        },
        "item": {
          "id": "994e5b0b-9c87-4d2b-b0c6-35de070e6d8b",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "c21e6964-ba24-4c11-a372-f7ac95f60698",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c3274e1-5294-469b-b823-b3a12db1c5de",
        "cursor": {
          "ref": "873336fd-82bf-41a7-9d58-4b2230e1d264",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "80114357-d100-494b-b206-397e7bdd0b96"
        },
        "item": {
          "id": "9c3274e1-5294-469b-b823-b3a12db1c5de",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "a2a1a5cc-624b-4762-9712-4776e3fe9aac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f4b4774-d491-4693-969a-52f93f8d2046",
        "cursor": {
          "ref": "3d11d876-abb3-46cc-86d7-4fec7cd38d97",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "2a43fbca-9496-43e8-b029-36946c266b35"
        },
        "item": {
          "id": "5f4b4774-d491-4693-969a-52f93f8d2046",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "7e11bbf4-f0b3-453f-984a-ae9502e76b42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02fcb250-3d57-4bda-be3d-1a7d6f874e22",
        "cursor": {
          "ref": "39814577-7256-4b93-a671-a76334702c5b",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "e083b7cc-bfa6-4ea4-a7a3-3b9cbbbc5894"
        },
        "item": {
          "id": "02fcb250-3d57-4bda-be3d-1a7d6f874e22",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "39840600-0b4e-42f1-83f1-6e129d6e6098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7924a8f8-d5fe-4099-8d77-a4f9bd0d6e62",
        "cursor": {
          "ref": "8e8c4c64-6997-49b6-93fa-8535575f3cef",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "cf1d01a4-8601-4ad6-9dd5-b50764b2b5cf"
        },
        "item": {
          "id": "7924a8f8-d5fe-4099-8d77-a4f9bd0d6e62",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "19b6e47c-e4e6-4b39-8830-76dd5600828b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa180000-6f61-4d97-a61d-83d1de4c0244",
        "cursor": {
          "ref": "1e3e8378-e1b2-48e0-9ae3-e6c02e7074d3",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "ea03a231-8c0c-4865-adfb-1f1cb0881a2f"
        },
        "item": {
          "id": "aa180000-6f61-4d97-a61d-83d1de4c0244",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "8841a637-c78e-4c93-bbb3-5b9b3428f0be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a73882a3-a8af-4ed1-bce9-a31350f33742",
        "cursor": {
          "ref": "03ddef2c-ee0a-4d42-9d31-d08596599cc3",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "0602154e-15c3-46ce-aaa5-96494109bd97"
        },
        "item": {
          "id": "a73882a3-a8af-4ed1-bce9-a31350f33742",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "64a7be37-57e5-40b8-9d06-2bb3ec0e9e13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b77dd8e-c193-4b3a-95f7-45c100ea49c3",
        "cursor": {
          "ref": "ccf2cc47-3e0b-4817-bfcd-ede4628ee915",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c2cbd0ba-4717-4d24-aafb-75c2142ae99f"
        },
        "item": {
          "id": "5b77dd8e-c193-4b3a-95f7-45c100ea49c3",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "89663f43-4a08-4c11-947b-31f308788578",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7546d58f-ca95-431f-9d2c-d5ab130f37da",
        "cursor": {
          "ref": "01adbd5b-3fad-4566-b591-9d744af73b4d",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "c1dba6cb-4cc4-4ffa-9744-5529df787574"
        },
        "item": {
          "id": "7546d58f-ca95-431f-9d2c-d5ab130f37da",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "b34b4694-f604-48eb-bedb-deaddc25f3e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aca76600-ba20-4ef7-b032-7db550dbb6b1",
        "cursor": {
          "ref": "55a4bdf7-3336-4a44-9ec3-3a29fc50cccd",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "a58eae6d-a846-4bc9-ba9f-7a15fe894cda"
        },
        "item": {
          "id": "aca76600-ba20-4ef7-b032-7db550dbb6b1",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "6359bde5-13e3-431e-a380-0785b1a420af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6509853-6138-49c1-b53a-2e9a02a62397",
        "cursor": {
          "ref": "f213653e-39e0-457b-b108-332a98038a62",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "3e1c244b-d93f-4704-91fd-f75aedc04e18"
        },
        "item": {
          "id": "b6509853-6138-49c1-b53a-2e9a02a62397",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "ab033590-1ff2-4c15-895b-d6ffd95cf3ce",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 808,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "7eff46ca-17fb-427a-8932-427d6a88f220",
        "cursor": {
          "ref": "345653ca-4602-4c42-8188-8fee3f33eb39",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "89bd123d-10a9-4434-a44f-22df563e4126"
        },
        "item": {
          "id": "7eff46ca-17fb-427a-8932-427d6a88f220",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "8c120e90-d9f7-4b1e-a157-c11805156f9d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 844,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "72a58031-57c4-437e-9f77-2e755a1e20ab",
        "cursor": {
          "ref": "b3d3a471-7cdc-423b-946a-6ffe2185ae24",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "08833ee0-b1b9-415f-bc2d-2e9db78f79e1"
        },
        "item": {
          "id": "72a58031-57c4-437e-9f77-2e755a1e20ab",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "f2cd9cb6-642a-49fa-a79a-8e717f16b4b3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 76,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "a7b60006-45f2-4dea-bbcb-a8255a6272a4",
        "cursor": {
          "ref": "b675a436-7fb4-46fa-97ec-e2f744bff2d1",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "6253e227-b254-49fb-ba7d-458bbd32ef68"
        },
        "item": {
          "id": "a7b60006-45f2-4dea-bbcb-a8255a6272a4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "d59aa21c-139b-4840-88d8-bbad7e61644f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 818,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "44327ba4-9591-4538-86cc-d85d56996e92",
        "cursor": {
          "ref": "0acde07d-4912-4338-8feb-e085df7571e9",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "d68d20d6-95cf-4868-93cb-595a9c925ef2"
        },
        "item": {
          "id": "44327ba4-9591-4538-86cc-d85d56996e92",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "458ab3c2-dc40-484e-95a5-1068fa530c25",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "dc028610-bb35-4c1c-af32-0e077f9e9bf8",
        "cursor": {
          "ref": "a4290b8e-afcb-4505-be8c-712dc118ffd3",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "ce62f827-06df-441c-89d9-33c4079f7040"
        },
        "item": {
          "id": "dc028610-bb35-4c1c-af32-0e077f9e9bf8",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "8a6a24e2-5176-47c3-bf46-b8ef3c089c6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfdf6e3a-7d5a-4fa9-b884-3bdb73fbc824",
        "cursor": {
          "ref": "34f22a35-d805-4fd2-b2d3-d9a05270a946",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "b435b55c-7a81-4bcc-8acc-a5f6755e9600"
        },
        "item": {
          "id": "bfdf6e3a-7d5a-4fa9-b884-3bdb73fbc824",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "125a79f3-f69e-44f6-996b-f32b1d7eec73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a94fd85d-8d24-4c36-a8f8-aaab90cb6879",
        "cursor": {
          "ref": "662d3893-f06a-40ec-9311-4a129f5d8068",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "d1bae947-ccf2-4b50-a67a-e5b4c82fbba8"
        },
        "item": {
          "id": "a94fd85d-8d24-4c36-a8f8-aaab90cb6879",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "0ef4c49d-1f8a-4df8-a797-af09db12a257",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09c4bbc6-fc16-4882-8f8f-2e47151705f2",
        "cursor": {
          "ref": "e2bd2bc5-577b-459c-9261-49c95bab1cf6",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "db258f67-91d8-43f6-8061-b572afbb7e41"
        },
        "item": {
          "id": "09c4bbc6-fc16-4882-8f8f-2e47151705f2",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "9f1996b2-a80f-47f8-80a6-8bf245bb2306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a2f225e-d00f-49d0-83ff-56cce16f822d",
        "cursor": {
          "ref": "2d26bf71-d8ee-461f-88b5-20b783063c93",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "62b122f1-d409-4fd4-937d-b1d20b08a786"
        },
        "item": {
          "id": "9a2f225e-d00f-49d0-83ff-56cce16f822d",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "e8d9a77d-6eee-467f-a1d6-d021449247b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a73b8c8-fb03-4415-af2a-56acac20ad33",
        "cursor": {
          "ref": "bceeed5f-5fd6-48c2-87cf-b11627ca3613",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "78250711-a7b4-4555-b19e-e5d6e8a7ef7b"
        },
        "item": {
          "id": "1a73b8c8-fb03-4415-af2a-56acac20ad33",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "5cec191b-4177-419b-a2cd-34e6bd0cf618",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4878dfd2-1b82-4044-8e69-08c58054645e",
        "cursor": {
          "ref": "6d552d8a-b87c-4503-9e8d-e3661212f5a1",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "8ab6f8ee-ee12-4bee-9e52-21eb25ab05a3"
        },
        "item": {
          "id": "4878dfd2-1b82-4044-8e69-08c58054645e",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "066a7d7f-6a5f-4864-81ef-6a07061357b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85724581-d5b2-40d9-8d73-e4d9427161d4",
        "cursor": {
          "ref": "ce9c9947-9760-4955-a4c7-00509e344e83",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "0d31ffa5-b535-49ce-8e1f-1c1ad94a9e7c"
        },
        "item": {
          "id": "85724581-d5b2-40d9-8d73-e4d9427161d4",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "f81447fc-ecc2-4fb2-9cec-cb416e30ebf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79f721a3-412e-4c5b-b5a6-5029705b227e",
        "cursor": {
          "ref": "7d55ceff-46f6-4d6f-928d-8f5108069ec0",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "ae845d13-6516-4a28-b837-5b1600dda111"
        },
        "item": {
          "id": "79f721a3-412e-4c5b-b5a6-5029705b227e",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "8eeddd6f-6b76-4bef-b251-a910af4fefa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff1592ba-dab4-4360-903e-a173f09d3d17",
        "cursor": {
          "ref": "f2149ac6-d5c8-4f2a-9a95-4b365664bab7",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "9e22bf2e-adda-409f-b468-72fef98a2eaf"
        },
        "item": {
          "id": "ff1592ba-dab4-4360-903e-a173f09d3d17",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "9b33cf9e-1324-4a40-b689-96b1d26efc7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28f54258-9d2c-4d26-83b7-453235900f40",
        "cursor": {
          "ref": "9d510e9e-222c-460f-afc2-1535dfd88c3c",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "f8759b24-ac43-4fe0-8c60-6e5793370e3b"
        },
        "item": {
          "id": "28f54258-9d2c-4d26-83b7-453235900f40",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "f7038885-5980-46b3-a7f7-176230b6f6c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d31c79b-bb56-4671-84ed-401fb3b9d17b",
        "cursor": {
          "ref": "7b801f66-bdcc-411a-bbf8-a97e6840dad5",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "534fe185-e4bb-4ea0-97e8-141b5ff059ac"
        },
        "item": {
          "id": "3d31c79b-bb56-4671-84ed-401fb3b9d17b",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "8d2bff7e-de70-428e-a95d-b07de4639970",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f119a28b-a08b-4525-9149-1e57197b13a2",
        "cursor": {
          "ref": "b39ce8f4-e85a-4ea7-925b-1d65f5433500",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "593d091c-f98d-454d-bd12-6d23a3279b88"
        },
        "item": {
          "id": "f119a28b-a08b-4525-9149-1e57197b13a2",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "bfff4e13-43b1-446e-a6fe-c578e81e802f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f249aab3-6c3b-4daa-a357-cf752562dea1",
        "cursor": {
          "ref": "a34292ec-20be-4caa-9a40-5fa4674aece2",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "07a712b0-d3fa-4ebe-b4cc-22fbb1530c49"
        },
        "item": {
          "id": "f249aab3-6c3b-4daa-a357-cf752562dea1",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "a5bb137b-fff2-4572-840e-ecb5402a3977",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "012ce1e3-4400-4919-a073-55790cf24603",
        "cursor": {
          "ref": "fb1e033d-e9f8-439b-bb98-75ab4b86f999",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "aa7afaaa-fc24-4531-b220-92fa8d4c05f7"
        },
        "item": {
          "id": "012ce1e3-4400-4919-a073-55790cf24603",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "876d8d67-9277-4a37-a3e3-5160b6285874",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "872b5f2c-bd7d-44ba-adc0-f5d6a33ea686",
        "cursor": {
          "ref": "76602231-f522-41e5-a5ad-6c51e9cb9b6c",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "0cc94bf8-eec0-4132-bce8-b1759d272b1b"
        },
        "item": {
          "id": "872b5f2c-bd7d-44ba-adc0-f5d6a33ea686",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "06de5cf5-6c3e-4d46-a43d-afeae1a48120",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06df2374-353a-479c-b4a0-22538f232ce0",
        "cursor": {
          "ref": "4c863b92-fa6c-479d-98c7-b8939f75a610",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "c319bbd6-ccf4-425b-aadb-db0fd6c71f69"
        },
        "item": {
          "id": "06df2374-353a-479c-b4a0-22538f232ce0",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "c457b831-cf71-4080-b92b-21a8a87ff439",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffcc1def-4065-472d-9b80-0be710cc3059",
        "cursor": {
          "ref": "1d763f3a-7bc9-4034-9cf4-021f205f0d95",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "7287750e-ec69-40c8-b3c1-e72acc7c7d00"
        },
        "item": {
          "id": "ffcc1def-4065-472d-9b80-0be710cc3059",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "130b0622-3ea2-4739-97c1-96160e10c3e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04a8c60f-0aae-4f16-a361-5540a4d943ef",
        "cursor": {
          "ref": "9625a23e-31a9-41d9-a83b-b88db58cebda",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "fa33bdee-1202-4183-9949-dd49bf5c3e51"
        },
        "item": {
          "id": "04a8c60f-0aae-4f16-a361-5540a4d943ef",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "f1eff29d-480d-4d22-963e-356ce4aa4542",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5035224d-6bb1-483e-8fa3-ec0fdfd8520c",
        "cursor": {
          "ref": "76ee19fe-9b36-4cf2-8cd3-9e7935805003",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "471d7c80-c9c1-4bbd-bda4-5f40decfaa6d"
        },
        "item": {
          "id": "5035224d-6bb1-483e-8fa3-ec0fdfd8520c",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "65fe234a-5357-4a3e-9e27-d77ae0d488bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45a89f80-059d-4fdf-b4af-47c3a0fa0bac",
        "cursor": {
          "ref": "155403da-7fa9-435f-890b-61745eba8b14",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "ef553282-67cc-450e-9af7-96de0de2b8ee"
        },
        "item": {
          "id": "45a89f80-059d-4fdf-b4af-47c3a0fa0bac",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "e31551ff-656b-448c-9601-898751389560",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2ea1d8a-6b24-4348-aa60-b2d5a1ebef1f",
        "cursor": {
          "ref": "d45da10e-b69f-48a9-84de-b483c9b42983",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "c9459dc8-ee22-4cfe-b171-0dd99bdfce59"
        },
        "item": {
          "id": "f2ea1d8a-6b24-4348-aa60-b2d5a1ebef1f",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "bb94d186-82ce-4788-a97a-f365c38d5021",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70db257f-2d18-40d7-be65-797620a604b7",
        "cursor": {
          "ref": "00907d0d-3527-441c-aa66-cbce3391685b",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "f85466d4-30f3-4ac8-a987-b10945f3ce49"
        },
        "item": {
          "id": "70db257f-2d18-40d7-be65-797620a604b7",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "1efeebe2-c40c-40ac-bb5d-9def0fb58959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b45fdc18-1978-44e0-8794-95a66e2ecd3e",
        "cursor": {
          "ref": "3f01a0a2-9964-4ce0-b369-58d628b1b462",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "39669e92-42d9-428d-b7b2-4420a2b38707"
        },
        "item": {
          "id": "b45fdc18-1978-44e0-8794-95a66e2ecd3e",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "7e479382-83f0-4206-87ca-fb4f3afdc6bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aa5d915-e7c1-44ed-865c-546c1cbad25c",
        "cursor": {
          "ref": "98bec83b-a6b1-4ef3-a8ec-6d84993ca8ee",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "21ea6f5f-3b9c-4775-8bfb-cf9193b949f6"
        },
        "item": {
          "id": "3aa5d915-e7c1-44ed-865c-546c1cbad25c",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "ad9461c6-7546-4a8c-a5cd-47d318a37c0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00fe5703-9348-4cec-8ad5-71ba3ead6318",
        "cursor": {
          "ref": "a06b5350-744d-4381-9162-24c16fb42c53",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "990f35a0-faff-4510-930e-8c799a7d101e"
        },
        "item": {
          "id": "00fe5703-9348-4cec-8ad5-71ba3ead6318",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "743df4a3-83b6-4deb-92f9-132320c5fb3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c68e938d-ab65-4f4e-8c2c-19d200b6438e",
        "cursor": {
          "ref": "182c741c-5802-49cc-b430-cce72c9bb12c",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "ca54192f-98d9-47de-8cdd-f1c21e02c001"
        },
        "item": {
          "id": "c68e938d-ab65-4f4e-8c2c-19d200b6438e",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "4dc35ccc-08fb-49ee-8837-a8782e1416f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caf9f6bb-e248-418d-951b-739f39fa9849",
        "cursor": {
          "ref": "2f5da4cf-b042-41f7-9428-a1e95ad3c6dd",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "0de43f81-a774-428b-adbb-712f2d22e4e3"
        },
        "item": {
          "id": "caf9f6bb-e248-418d-951b-739f39fa9849",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "76c4cc9d-bfc5-4f61-a59f-537241deeecc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67b07f18-40ce-4e57-a63f-8c0bb5efdb41",
        "cursor": {
          "ref": "c1532440-bc60-407e-9bc0-182073f65558",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "437c008e-c11d-4389-8977-d886f042f21e"
        },
        "item": {
          "id": "67b07f18-40ce-4e57-a63f-8c0bb5efdb41",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "5458efca-849a-43e7-bbaa-bf22952942b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3a78597-93c6-4192-a926-24015ad306fd",
        "cursor": {
          "ref": "9f42bb7b-de26-4c0b-9004-494cc287c796",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "5eeec3be-f43d-4724-a4ff-f51f23fe8bde"
        },
        "item": {
          "id": "b3a78597-93c6-4192-a926-24015ad306fd",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "6a46450a-cb9e-41a2-9059-5a5dc4024af3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f65ab14-5676-4ab5-8213-a4eb9b939719",
        "cursor": {
          "ref": "8693bdbb-8a1f-4cc8-90b4-61c125751185",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "f9339cea-f52f-45aa-a412-6a90629b7112"
        },
        "item": {
          "id": "0f65ab14-5676-4ab5-8213-a4eb9b939719",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "7703c837-49f3-4920-a847-23cf64966e6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a9a1be2-17fa-4784-a81e-7cb8aed78847",
        "cursor": {
          "ref": "ee4c223e-74b7-4b33-8259-43afb2435d81",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "44e745bc-5638-4240-aa17-220691d73ea4"
        },
        "item": {
          "id": "6a9a1be2-17fa-4784-a81e-7cb8aed78847",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "d8309a41-2c62-49c1-a410-dc8fdef2865d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b86e9bcc-568f-4e29-9152-c0b1e8461734",
        "cursor": {
          "ref": "f308d1a4-d501-4b20-9ace-6606d491a72f",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "aefc48fd-bce8-4989-adf0-63955cc288dd"
        },
        "item": {
          "id": "b86e9bcc-568f-4e29-9152-c0b1e8461734",
          "name": "credentials_issue"
        },
        "response": {
          "id": "0f9f77da-5809-4a33-a945-0190900a3510",
          "status": "Created",
          "code": 201,
          "responseTime": 1607,
          "responseSize": 749
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc3b6e13-045b-452f-a887-0f6ec8961624",
        "cursor": {
          "ref": "79a28626-d5d1-4deb-9117-bba82ebfe388",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "4a8c2e25-42a1-4605-8616-428e08ef6481"
        },
        "item": {
          "id": "dc3b6e13-045b-452f-a887-0f6ec8961624",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "3884eae2-08d6-4f1b-96cb-1443a5046bfa",
          "status": "Created",
          "code": 201,
          "responseTime": 1017,
          "responseSize": 703
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c7b62ae-d012-4b0e-89f9-bbe75aad1010",
        "cursor": {
          "ref": "5a772cee-9c2a-4b22-844a-ea299b659d3f",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "4fd52b35-deaa-44f9-b7cc-bad8f0089499"
        },
        "item": {
          "id": "1c7b62ae-d012-4b0e-89f9-bbe75aad1010",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "fd41fde6-af6e-48e9-95a9-a507f96e0f07",
          "status": "Created",
          "code": 201,
          "responseTime": 1000,
          "responseSize": 756
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fe2240a-716f-4200-9480-caa91844bfbb",
        "cursor": {
          "ref": "380bca37-3feb-48bb-9078-c60207e2b3f7",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "a0fea5b3-30ba-41fb-ae2c-e46dd492a66d"
        },
        "item": {
          "id": "2fe2240a-716f-4200-9480-caa91844bfbb",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "1c23e851-1904-4e84-9175-4472df3e6870",
          "status": "Created",
          "code": 201,
          "responseTime": 1009,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7bbe615-9197-45f4-a682-100f777a53a0",
        "cursor": {
          "ref": "75b8d2a0-63c4-4bf2-bff7-85362e6a2455",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "5f7368da-82f0-400e-965a-d21d802916dc"
        },
        "item": {
          "id": "e7bbe615-9197-45f4-a682-100f777a53a0",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "23d99ae6-554c-4809-8672-6b58dd185277",
          "status": "Created",
          "code": 201,
          "responseTime": 1001,
          "responseSize": 749
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "8301f921-b3e8-4f1d-a935-7eb0d6df7054",
        "cursor": {
          "ref": "c69573fa-867a-4837-96a6-aba5ca48043d",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "f9002fe3-8b88-4ea8-bafc-c9c3cc199ad9"
        },
        "item": {
          "id": "8301f921-b3e8-4f1d-a935-7eb0d6df7054",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "9117d821-d5a8-47d2-a07c-b0e21d2fae17",
          "status": "Created",
          "code": 201,
          "responseTime": 1154,
          "responseSize": 1082
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e10db48-085d-44cb-8194-b3fce20a1fb2",
        "cursor": {
          "ref": "0f22cfb8-e351-4338-8cec-58137b630f81",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "1a80457f-5e86-46a4-b3c7-7d91b92334a9"
        },
        "item": {
          "id": "8e10db48-085d-44cb-8194-b3fce20a1fb2",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3c341b77-32ec-4d2a-a5dc-73c54cadd524",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d65b336-127a-4abc-839c-f0dd13453be5",
        "cursor": {
          "ref": "d40fcb42-a0d5-458c-8bac-e7ea5fd63058",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "a086a2f4-495a-4f7b-a2b5-6a5dd26712eb"
        },
        "item": {
          "id": "3d65b336-127a-4abc-839c-f0dd13453be5",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "7046cb81-78cb-40de-83df-21f3d4eb8075",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a92b082c-cf09-4004-b278-0a4570fc8923",
        "cursor": {
          "ref": "b4530a51-f900-4544-babe-dc7d7a142138",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "1171838a-0a5d-4504-8cc9-73cdeafa2d95"
        },
        "item": {
          "id": "a92b082c-cf09-4004-b278-0a4570fc8923",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "83578463-8b19-41c0-bdbd-7135cb272e9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c2e492b-eb96-42bb-aa87-28d7bf5c5265",
        "cursor": {
          "ref": "6a50a226-412a-4958-88d0-48fca74c8457",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "8c487ec5-6f94-46dd-aceb-195971a1769c"
        },
        "item": {
          "id": "4c2e492b-eb96-42bb-aa87-28d7bf5c5265",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "80d479f0-87ec-4971-8563-9f64dbb04c99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d3bdda8-f4e3-486c-9f42-470fb0f2ee47",
        "cursor": {
          "ref": "40297a1b-740e-4e76-8ad3-8f10d2cb0098",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "42ad9cdc-58b3-4af0-8379-cd773306e50d"
        },
        "item": {
          "id": "0d3bdda8-f4e3-486c-9f42-470fb0f2ee47",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "eb9c0cd5-4c15-4083-8c00-b752f94c500c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99c1c42a-5f93-462a-b75c-e3a1bbe4bd08",
        "cursor": {
          "ref": "74e65982-52ba-4834-bba3-138e7c05c46d",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "7a73ba31-c46f-4487-8103-9d6c1e88abca"
        },
        "item": {
          "id": "99c1c42a-5f93-462a-b75c-e3a1bbe4bd08",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "8586ecc7-e361-45df-b63e-65443c382543",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ab68774-9f4b-4d69-b7e8-7722f06b9c9a",
        "cursor": {
          "ref": "31cf3cae-b034-42a6-9a0c-4df2f0beec33",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "86b0c965-9c7f-4182-8b95-a38a89387d59"
        },
        "item": {
          "id": "6ab68774-9f4b-4d69-b7e8-7722f06b9c9a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "207a4b31-cd19-4594-85f8-6699c105ec50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6da9a88-10ef-438e-aa0b-f052a5a84356",
        "cursor": {
          "ref": "1ce9ea47-44a7-4b5b-9bd4-4a2c687be436",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "633d072d-c073-4dc3-a8ef-5bebe948d8a7"
        },
        "item": {
          "id": "e6da9a88-10ef-438e-aa0b-f052a5a84356",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e5dfc9c9-4071-4f7f-81aa-6d139cbe7854",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31a46fd7-ed28-4e73-8105-77e173481e4b",
        "cursor": {
          "ref": "62739505-0c35-4e89-9f83-9c930af1ba73",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "8e0fc30d-6396-4601-8a80-f0c956a22300"
        },
        "item": {
          "id": "31a46fd7-ed28-4e73-8105-77e173481e4b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "e14ca0ac-28bf-4804-968e-298dd3b7cd06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec55cd24-9293-4307-b2ad-9030b8bae3f5",
        "cursor": {
          "ref": "9ec70af2-062a-4bf8-a28f-07ce04860f17",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "88984289-2b34-48a1-8244-eb4e2a97ee53"
        },
        "item": {
          "id": "ec55cd24-9293-4307-b2ad-9030b8bae3f5",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "ae3ed2a7-b838-4644-8665-e96c1360057d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c441de9-1d1b-4e23-9558-c9a8073e522f",
        "cursor": {
          "ref": "e2732f49-aefb-4d7d-b865-5654e479c04f",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "03c826e4-7f1f-4830-af5b-8c0bc2fcf96f"
        },
        "item": {
          "id": "8c441de9-1d1b-4e23-9558-c9a8073e522f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "13b5b91d-6cb7-438b-a31b-e0c71e35983c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a23f4966-1756-4d7e-9df9-38b4f376e9e3",
        "cursor": {
          "ref": "d1a6d14b-6ea8-4c4a-8fd0-8b5396eb5eed",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "fef96a59-bc82-4b0d-ba48-d6ad9eddc370"
        },
        "item": {
          "id": "a23f4966-1756-4d7e-9df9-38b4f376e9e3",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "06d12450-1975-4f79-9dbe-a40e0a048f1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdb40cf1-d2d0-432c-a599-92adfd10891d",
        "cursor": {
          "ref": "3e773d12-43ec-48c0-9ed5-33b8afc218bb",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "b572a8ad-ee25-4265-b534-b81ea34e25b3"
        },
        "item": {
          "id": "fdb40cf1-d2d0-432c-a599-92adfd10891d",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "991c866f-0de4-41e7-a717-11ec4b73086e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "886f43ad-33a4-48ec-a440-85d730a1bbd7",
        "cursor": {
          "ref": "dc95de0f-e614-4dc8-b826-ab83703d9309",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "b6df0d3a-b4f8-411a-9f29-823d1970779b"
        },
        "item": {
          "id": "886f43ad-33a4-48ec-a440-85d730a1bbd7",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "dbdba53c-aa18-4f07-b731-4fef35751bae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a0280d-27ad-4bd1-8825-979fe2e36b4e",
        "cursor": {
          "ref": "cc3465c5-693b-4600-860a-a7ed60bfb272",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "aaa9c401-6089-4fe1-a995-fa29c8afcf38"
        },
        "item": {
          "id": "b2a0280d-27ad-4bd1-8825-979fe2e36b4e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a930b062-4456-4197-9da9-f6e1dbd5642c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43580b36-dce3-4c18-b71b-928a10b081ed",
        "cursor": {
          "ref": "d7a765e0-9558-43ee-ac7c-df0eb234170b",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "abe21abf-24be-4295-bd0e-c8938cc7efb7"
        },
        "item": {
          "id": "43580b36-dce3-4c18-b71b-928a10b081ed",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "112069a1-ba28-4217-94d7-097fa54f0435",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "936d6d04-36f1-4713-92fc-afe8c048b1c2",
        "cursor": {
          "ref": "2a89289b-16b4-448a-b3f7-851a0125e251",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "c977862e-fb6c-4871-a275-99ce84eab609"
        },
        "item": {
          "id": "936d6d04-36f1-4713-92fc-afe8c048b1c2",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "3af86451-8d68-4939-a7f5-2243f0cc91d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1d6d10e-ffdc-4283-bd16-b6a93e198387",
        "cursor": {
          "ref": "8a597e72-ca9c-46c4-ac06-310c8d5037c3",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "42f5dc27-2d8f-4af9-a9f8-2ae02456643c"
        },
        "item": {
          "id": "d1d6d10e-ffdc-4283-bd16-b6a93e198387",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "6aeb200d-7a1e-441a-a81a-2a168a7e75c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee4f3645-451e-4a91-a1d5-75f1ea62df54",
        "cursor": {
          "ref": "770ac111-5bdb-4924-b8d9-fb1daf5d0772",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "143c15f7-ce55-4aeb-8cfd-88d2ac11a8e4"
        },
        "item": {
          "id": "ee4f3645-451e-4a91-a1d5-75f1ea62df54",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "e4eec143-d883-49e4-a8d5-b2de1da11052",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99dfe92a-c399-45c6-b078-00d12325cf85",
        "cursor": {
          "ref": "9507d931-1bdc-4766-9587-0a64276a31c6",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "c4b2a264-713e-41a4-b556-4792b4e2fbba"
        },
        "item": {
          "id": "99dfe92a-c399-45c6-b078-00d12325cf85",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "2bd45e93-d86f-4e29-83f7-cdcea8ee9684",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b15c635-d1df-4f97-94e4-f5d6e911f0aa",
        "cursor": {
          "ref": "8997c725-6cae-46ef-a535-d0ab02e8a744",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "b3bb16fd-b83d-45fa-b907-f2ee7b06ee35"
        },
        "item": {
          "id": "3b15c635-d1df-4f97-94e4-f5d6e911f0aa",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "3a5b0872-b8bf-44ba-b67e-8deefbbe298b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36f0bee8-1b16-4ed6-87a7-e7950891939b",
        "cursor": {
          "ref": "63d4a324-c470-461f-b077-03a8579396f4",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "fd42d8dd-bc04-4ce0-b461-344813a4c873"
        },
        "item": {
          "id": "36f0bee8-1b16-4ed6-87a7-e7950891939b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "3eb09c4d-7097-4214-9dec-8850d89f79b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4690b696-00a9-432f-a18f-4f1a9fc623df",
        "cursor": {
          "ref": "e6f1268c-7bac-436f-9078-f80513519a55",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "0b36735f-16eb-4928-934c-e6746732ef7e"
        },
        "item": {
          "id": "4690b696-00a9-432f-a18f-4f1a9fc623df",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "75fc58e3-0f4c-4b13-904b-a4502d84a473",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "725a9298-9f02-4893-b93c-2d27abe6ffd6",
        "cursor": {
          "ref": "88d14cfb-b3af-4731-a99b-54c4bec7bf28",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "842117a3-5f18-4798-8dcc-bf0eabfbf871"
        },
        "item": {
          "id": "725a9298-9f02-4893-b93c-2d27abe6ffd6",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b01a6eeb-0c3e-485b-af92-9cb75e5cd3ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fe5aee0-ab46-47b8-bfc8-5c8ebfc67b48",
        "cursor": {
          "ref": "003f9e35-de80-4a07-9351-42f470fc866d",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "b760f319-783c-4b8b-bfb1-fb7a690334f3"
        },
        "item": {
          "id": "5fe5aee0-ab46-47b8-bfc8-5c8ebfc67b48",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "b28d2d37-e8f1-45e7-9730-f46aded8e07d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a5f3282-648e-47e5-bb32-eae5c4ec914d",
        "cursor": {
          "ref": "3b023e57-ef8d-4b66-8f20-038a7bf317a0",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "34e83c07-a457-41c9-bd62-2d1c10e20096"
        },
        "item": {
          "id": "5a5f3282-648e-47e5-bb32-eae5c4ec914d",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ff4f2758-ca0a-4273-8749-95d8eb371d6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ca99db7-8e78-49d7-aed3-62abab8bb017",
        "cursor": {
          "ref": "aa4ee6a8-e617-43a5-971e-285f4b22b0e4",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "c6ac3c7d-e751-41c8-832a-3977e457bbb7"
        },
        "item": {
          "id": "6ca99db7-8e78-49d7-aed3-62abab8bb017",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c2612a25-9acc-432c-bc04-632125bd0e92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f443be9c-6e3f-44a5-8ab6-51e6c24e25d5",
        "cursor": {
          "ref": "c5514303-328f-46c7-a8d6-9339c99c2b07",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "c1656857-3c68-4ec2-bffc-978341a9ba0b"
        },
        "item": {
          "id": "f443be9c-6e3f-44a5-8ab6-51e6c24e25d5",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0571db7d-ba2a-46cb-b1ff-9a867206d7ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c029a1f-7580-413b-8d97-340a5229c1a8",
        "cursor": {
          "ref": "393ecff1-0c36-45ed-8b86-342b3d3ef704",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "9ff55c81-1373-4a5f-aaab-44482a2b4e19"
        },
        "item": {
          "id": "3c029a1f-7580-413b-8d97-340a5229c1a8",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b57dda7b-fd30-4ccb-8441-f8889a18e872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c6867c3-1389-4579-9731-f299f83b1cfd",
        "cursor": {
          "ref": "bb656a1c-3d0c-40c1-99d4-6085d7716ec3",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "b5d0bd2a-cdaa-405f-b135-173244aec96e"
        },
        "item": {
          "id": "3c6867c3-1389-4579-9731-f299f83b1cfd",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "2086cecc-f1fa-4b37-aba7-42be14fa2a3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "305f9700-7ea8-4486-8135-8c92c5b04c36",
        "cursor": {
          "ref": "7543cf8a-7076-4b3a-925d-51ad7fa69b64",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "6043f4af-1cbc-4586-8fb0-9e5ec4c58461"
        },
        "item": {
          "id": "305f9700-7ea8-4486-8135-8c92c5b04c36",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "32a6c697-2326-47f7-bbd1-76bcb94a39fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2adb436e-1ff4-418f-959b-0d72d704623b",
        "cursor": {
          "ref": "7e44376e-5b5e-4176-8784-2cd4b0721d10",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "9e9b05cd-cef9-4d30-b9e2-630f2998f216"
        },
        "item": {
          "id": "2adb436e-1ff4-418f-959b-0d72d704623b",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "d808c74f-f578-481e-b807-80b4a7dff700",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56548f9e-ad7a-48c5-9031-aad83a6ec94b",
        "cursor": {
          "ref": "a5821e93-39ce-427d-b56f-4df737623819",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "3f3734cf-39cf-4d44-8876-09d290673082"
        },
        "item": {
          "id": "56548f9e-ad7a-48c5-9031-aad83a6ec94b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "175a2929-6b66-4c98-b125-2248e925449e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10142072-db5a-41b9-ad8b-b14d55cf3f1d",
        "cursor": {
          "ref": "d103008a-b2fa-417c-82d0-3b0a4c96ea5d",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "4fe54658-b85c-457a-ba0d-362a6e4dad6f"
        },
        "item": {
          "id": "10142072-db5a-41b9-ad8b-b14d55cf3f1d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4f8557ed-bbd7-4dbe-9440-a1f0be48400e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f95d0d5f-93b6-41bb-af80-12af51d89fe8",
        "cursor": {
          "ref": "32c8b8e3-af54-4f8d-b215-8cdce5a161e0",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "05f344ab-cd10-4d63-8353-ad648cc3e53c"
        },
        "item": {
          "id": "f95d0d5f-93b6-41bb-af80-12af51d89fe8",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "75fe94e2-d294-4afe-beeb-73079ce72104",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56590d6a-fa84-4d63-a59f-bc98b0b9e3ca",
        "cursor": {
          "ref": "277ff907-a7ce-4ec4-b631-3d346768655c",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "ee46aaa3-5737-4476-87e9-276dafb35e73"
        },
        "item": {
          "id": "56590d6a-fa84-4d63-a59f-bc98b0b9e3ca",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "526f6212-5ca1-43d0-a55e-5f61d7e3e93c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34505704-8c7e-4d47-8632-7d4dfddafa35",
        "cursor": {
          "ref": "00622925-8606-4e2a-9d8d-c0ff167b4ee2",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "125c0bcf-ba49-4ba7-a3e8-e54e800b4e34"
        },
        "item": {
          "id": "34505704-8c7e-4d47-8632-7d4dfddafa35",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "0fe1ac80-bb18-4298-9e61-5e4c435eac99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ee8ca14-9455-41e5-804d-c63951333b78",
        "cursor": {
          "ref": "ab710698-09cc-4861-a668-2e1ac9098205",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "86d426c3-ecb1-4461-97ee-6264d341e22f"
        },
        "item": {
          "id": "7ee8ca14-9455-41e5-804d-c63951333b78",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "9669135a-675d-4722-aaa2-1542e6b6d550",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba133ed5-9764-4762-af1c-7d01e0028399",
        "cursor": {
          "ref": "6d8ee125-aadc-491d-9667-aced4bf35c6f",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "c49987a7-8d36-4172-a28d-3315c8d7bf85"
        },
        "item": {
          "id": "ba133ed5-9764-4762-af1c-7d01e0028399",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "42e6a0e1-2ad9-488e-9578-06cb4c1397ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e80e562d-3a4c-4d2d-bddd-373f6f45c955",
        "cursor": {
          "ref": "51022d9e-4808-43dd-b9e7-231ff461a6d0",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "406bd3aa-a2c9-4b4c-a48a-2ad475139d42"
        },
        "item": {
          "id": "e80e562d-3a4c-4d2d-bddd-373f6f45c955",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "63b4c74e-6da1-456d-9088-e9bdec2b0712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c5789b9-b448-4118-b87c-10164f4c8d41",
        "cursor": {
          "ref": "fa66d8f6-324b-473d-9385-25441eddd555",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "f3d282a0-a433-458b-a405-f34558443261"
        },
        "item": {
          "id": "3c5789b9-b448-4118-b87c-10164f4c8d41",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ce125b6c-a112-4a8c-a773-dc752ce9d34d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d6c140c-5bdc-49ad-b2d1-472f4c0f1e18",
        "cursor": {
          "ref": "a765a5b7-cedf-408b-86f4-ad33d1a1f577",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "9d3f3424-ea46-4b5c-8007-ddf1f60db30d"
        },
        "item": {
          "id": "2d6c140c-5bdc-49ad-b2d1-472f4c0f1e18",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "fdd94c91-ed11-4700-bda9-2443d9e53440",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "190eb771-e4ec-40f3-bbfd-6ec4cb5c9f8f",
        "cursor": {
          "ref": "cce05a05-ec44-48ef-9bcc-d906fc6e4fa0",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "f327784b-aac2-4571-bea4-6d736d65a3b0"
        },
        "item": {
          "id": "190eb771-e4ec-40f3-bbfd-6ec4cb5c9f8f",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "fefb906c-b45c-4e47-923b-4e08ed0cb1e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e60da0c-46dd-41d4-9f37-ed410629e315",
        "cursor": {
          "ref": "ef3e07e2-3822-4723-b5ba-478873e1dc59",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "13726f2b-6f40-44d6-9c48-0de5908d2775"
        },
        "item": {
          "id": "4e60da0c-46dd-41d4-9f37-ed410629e315",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ac505b1f-5141-449e-9f62-ee414507df06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b0b7bec-7dfc-4e62-8b87-9ad1cb3c1907",
        "cursor": {
          "ref": "b10ec41e-1957-48b3-9290-da8c1f835d8f",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "b0caa56f-0647-4c5c-b35b-5a128e922372"
        },
        "item": {
          "id": "4b0b7bec-7dfc-4e62-8b87-9ad1cb3c1907",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "3b6bba2c-2986-4a27-a4d1-0a44c73dba5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5737a16-8b1d-4e61-b122-ffe7077c1327",
        "cursor": {
          "ref": "cc9818b4-0809-4e9f-8b1d-a9e9ec41757c",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "a43d223a-e3d6-4cfc-8554-964876feff8d"
        },
        "item": {
          "id": "c5737a16-8b1d-4e61-b122-ffe7077c1327",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "2067f9f1-64b7-488a-a8ae-dbe5aa3ed0db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83c4c048-2788-4a89-b3c9-c2b6530dfbe3",
        "cursor": {
          "ref": "f7e59492-8f35-4a23-8cb5-afc047fddfc6",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "04cc08b8-fc1a-4115-ba6b-c5d0568b5b1f"
        },
        "item": {
          "id": "83c4c048-2788-4a89-b3c9-c2b6530dfbe3",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "4cda1d68-13d2-4f27-8a67-29d706db9cee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f754e8c4-efbf-409f-94c0-640a34193d53",
        "cursor": {
          "ref": "cb621655-661d-4c2f-9c0d-8b457dbb0a76",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "f4724ad6-fa36-4b83-a54e-6919bf73d81d"
        },
        "item": {
          "id": "f754e8c4-efbf-409f-94c0-640a34193d53",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "cfa7b102-a761-4950-b54c-01a1f9f23b93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b85872d9-1b3b-4742-8117-3292d48c5c03",
        "cursor": {
          "ref": "97f3d992-0aa9-4b53-9006-062574d09b01",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "198df7bc-0b1d-40c9-abce-1b79c1b3aadf"
        },
        "item": {
          "id": "b85872d9-1b3b-4742-8117-3292d48c5c03",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e5c2e6cd-f24c-4446-af2b-b0c9efbcbb23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d220e0a4-03d7-4608-9c7f-b8f3fd03c6e1",
        "cursor": {
          "ref": "8026bf62-bec2-4f7a-b774-d556165bd8a4",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "4d26622b-170a-4292-8cef-7463b8b91545"
        },
        "item": {
          "id": "d220e0a4-03d7-4608-9c7f-b8f3fd03c6e1",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "2fefde99-f0c9-4b90-a7ad-b45a336e741f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a5ea18d-d68f-45f2-b707-728a25d49306",
        "cursor": {
          "ref": "674281d3-7601-4a38-8603-644243f698e3",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "4a6aa333-669e-42aa-9c92-7d33b3b8b843"
        },
        "item": {
          "id": "1a5ea18d-d68f-45f2-b707-728a25d49306",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "4ffc22bb-ab44-4b4c-a71a-7058669f3384",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d950768b-55f2-4f92-9d27-fdb343892d49",
        "cursor": {
          "ref": "12fbb792-d510-41d7-879e-b7adf8c6f0fd",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "a81dbe33-93e9-485b-bb20-29aec18889f4"
        },
        "item": {
          "id": "d950768b-55f2-4f92-9d27-fdb343892d49",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "9d2b5b7c-0357-4951-ba6d-c513449be686",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ef96464-34bd-4756-b15d-38c2aa1ae53d",
        "cursor": {
          "ref": "e74714d6-7bc7-41de-b968-1e1b5a51b413",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "33476ea2-8be7-4e9f-82e4-2f1ed95f0d0f"
        },
        "item": {
          "id": "5ef96464-34bd-4756-b15d-38c2aa1ae53d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "75d8c349-3f9e-482a-b976-6b5220803858",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80ab4130-227d-4cd6-8d4e-c49c625d2ecf",
        "cursor": {
          "ref": "f9fbdae6-e3ef-4d74-a275-8065da82953b",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "8456ae67-346f-4998-87fb-2c855dab2a4a"
        },
        "item": {
          "id": "80ab4130-227d-4cd6-8d4e-c49c625d2ecf",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "0cdccc30-6592-46ce-b89a-c2b2021a1e60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12f83117-380a-485f-be2d-1a21d6f2331c",
        "cursor": {
          "ref": "d14f9f67-9510-4895-99d9-42eef2ee4f95",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "8fc3f23e-cd67-4695-b547-d9ab0bb6886c"
        },
        "item": {
          "id": "12f83117-380a-485f-be2d-1a21d6f2331c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "9fc4cc27-44c6-4d4e-aeef-23c3246428c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d9e9ed4-3c82-40bb-a15f-8dd9e23116aa",
        "cursor": {
          "ref": "52a8c422-86da-48de-8491-581408666f1f",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "80c3511c-10c6-48c4-874c-e78a03550435"
        },
        "item": {
          "id": "3d9e9ed4-3c82-40bb-a15f-8dd9e23116aa",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "7beef1ff-17ed-4057-a3af-fd59d7dc15b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2606e834-958a-4bca-8245-87f7308ad076",
        "cursor": {
          "ref": "4e2aabdd-a79b-45f6-ba61-09db993123d1",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "d30b54fb-2bf2-4780-8ffa-7c3012eb3e8f"
        },
        "item": {
          "id": "2606e834-958a-4bca-8245-87f7308ad076",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "13cc7381-f24c-4afc-9239-df0bfdabd8c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "102fd503-e758-45a8-a1fb-622975d52f8f",
        "cursor": {
          "ref": "8f3f9398-9db3-4f29-bb8d-1dd48490625b",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "046472d2-fb82-4b22-a124-fcd74b1868bf"
        },
        "item": {
          "id": "102fd503-e758-45a8-a1fb-622975d52f8f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "3a882d21-55b6-4bf0-9ff6-b37a06f4aa76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5f507d5-9881-4721-a9d5-8b03d3004d5f",
        "cursor": {
          "ref": "2dcee512-ffdc-493a-946a-c63623bf3ac0",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "68f1b036-a49d-4a96-b0a8-a0fb0a04405a"
        },
        "item": {
          "id": "d5f507d5-9881-4721-a9d5-8b03d3004d5f",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "2de466c1-b795-49e7-854c-0fad338aad1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d03634e5-381f-4a68-8a0d-6251d521a2e8",
        "cursor": {
          "ref": "99ee3a59-4aa0-4f76-9bdf-c0820073d4e7",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "be33cf14-8b70-4dc4-94ce-1755f19e8423"
        },
        "item": {
          "id": "d03634e5-381f-4a68-8a0d-6251d521a2e8",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c35f6387-a8e6-4386-8ada-bc0c97752b77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "328320b8-5720-4bf7-8b76-4540322aaebd",
        "cursor": {
          "ref": "afd6c7ab-a3e8-4662-bef2-c618f1f4ef18",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "5494d133-630c-4826-afdd-5518b9db9259"
        },
        "item": {
          "id": "328320b8-5720-4bf7-8b76-4540322aaebd",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "d8f6368f-e382-4ba7-9905-1b017da22d6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1092eb5b-7448-4a51-be26-3be89b5329f7",
        "cursor": {
          "ref": "5e94c179-0649-4941-9ba9-c3662e54042a",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "f5d8d5ec-eecc-4124-a56c-208d7e499a2c"
        },
        "item": {
          "id": "1092eb5b-7448-4a51-be26-3be89b5329f7",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "84d94749-4b79-451d-b881-0a19376e548d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77771cc7-7a19-4634-a449-5f6b2e3990dc",
        "cursor": {
          "ref": "7901e596-dfad-4753-95c3-faf98c149414",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "35852090-061e-418b-8585-a7fbf0df8d35"
        },
        "item": {
          "id": "77771cc7-7a19-4634-a449-5f6b2e3990dc",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "95375203-9867-455b-afc1-752a0c755257",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf021353-7a27-4c23-8710-192f44fdc093",
        "cursor": {
          "ref": "44c0aa68-1894-4102-b482-a376c2706855",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "db22c8a1-ac35-4d4e-94fe-0bf1ed74e7fd"
        },
        "item": {
          "id": "bf021353-7a27-4c23-8710-192f44fdc093",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "fe96408f-0c8a-45cc-9894-1c8f70617e2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97316083-f1d9-4c8f-a521-7828619cfea0",
        "cursor": {
          "ref": "c40d2386-2f4d-4b24-ae10-bc58e07831d7",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "6004f5d0-0da6-47ee-9564-a4ac3e123683"
        },
        "item": {
          "id": "97316083-f1d9-4c8f-a521-7828619cfea0",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "bc495d33-fa61-405d-b475-bd53d59258b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc7baead-c5e1-463d-a037-6646b5456b6c",
        "cursor": {
          "ref": "a7ffb5f1-ccb5-4ab2-99a7-1036663df296",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "7d819638-ad5f-4fc5-b740-66a95c9853c9"
        },
        "item": {
          "id": "cc7baead-c5e1-463d-a037-6646b5456b6c",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "d711bd9c-5635-4aa4-bf0a-1294f8c94959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f58a3209-999d-4130-ab54-b683013eacaa",
        "cursor": {
          "ref": "31e3b2be-c68e-45a7-b8d8-cefba298b494",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "3de86370-1f70-4865-a7d0-445c48c0e425"
        },
        "item": {
          "id": "f58a3209-999d-4130-ab54-b683013eacaa",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "f7f9c97f-d3fc-45f5-af75-ccc03a5b9714",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f5963cf-b621-46a1-83b4-f8d2e97458f7",
        "cursor": {
          "ref": "912b3ba5-9e58-437b-91fe-4683aae1ca7d",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "729ebd46-7b3a-43ad-81be-53f84ef4e4e1"
        },
        "item": {
          "id": "7f5963cf-b621-46a1-83b4-f8d2e97458f7",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "5f9bc79d-d47b-41f3-926f-66abc52e413c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd652aa5-904b-4d1b-8dfa-bac915ce6bfd",
        "cursor": {
          "ref": "ac5abab8-502d-4ef1-80e2-674fe530c2ed",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "add62cb6-d6aa-440c-b058-77e7467d46e2"
        },
        "item": {
          "id": "fd652aa5-904b-4d1b-8dfa-bac915ce6bfd",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "deddd994-a400-455a-aaa9-b538489b8b53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "066f91d8-e972-4777-b9f7-949258c4f4c6",
        "cursor": {
          "ref": "922169f1-0cc4-435f-a1c3-60b1b721eefe",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "c79a3f4c-eec6-4ee2-9b2c-19be60d78ea8"
        },
        "item": {
          "id": "066f91d8-e972-4777-b9f7-949258c4f4c6",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "42f43e9d-6722-4d71-83fe-2930ffcfb000",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "651b2f60-eaa1-40c4-9077-4258a240eb30",
        "cursor": {
          "ref": "c74f33d9-f006-4eb6-bdb9-67eb98427c7f",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "48c60edd-3332-4318-89da-93cbb7290e73"
        },
        "item": {
          "id": "651b2f60-eaa1-40c4-9077-4258a240eb30",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "83b37f98-6d58-470f-af12-b9eae73173f8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d741fa4-a7c6-4354-9bc3-44c43a77c1de",
        "cursor": {
          "ref": "c77657fb-4051-4f11-b9e2-3cfe274b72d1",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "ec3c05f0-0d01-46c1-ab8d-350e2e3d806f"
        },
        "item": {
          "id": "9d741fa4-a7c6-4354-9bc3-44c43a77c1de",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ed2600a5-52a2-48b9-88af-71bdc7d293b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2756d13b-ef0a-45df-9792-aca8a7ea52d1",
        "cursor": {
          "ref": "077d5091-cb7d-4c9e-bfbf-76ce07e25e6c",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "969422ed-819f-4179-bbc1-354acfaaa42c"
        },
        "item": {
          "id": "2756d13b-ef0a-45df-9792-aca8a7ea52d1",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "2f2a22a5-f694-4b93-a2b2-a5b100cbf488",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af9c0129-5e57-4696-8249-0902a552237a",
        "cursor": {
          "ref": "01dc70d2-9d25-48b4-9273-d3e5b8325794",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "338a04ff-050e-434b-a7b6-244e10ba06b5"
        },
        "item": {
          "id": "af9c0129-5e57-4696-8249-0902a552237a",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "fa431e71-8dfc-4c71-b1c4-77d93e033c8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f370324c-d7e3-4b44-9a3d-c185dc948a89",
        "cursor": {
          "ref": "4fc0c76e-9bae-4633-bbdc-5d47df2a73ad",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "7b40ddd6-4b9e-45d1-9ec7-7ed71adada82"
        },
        "item": {
          "id": "f370324c-d7e3-4b44-9a3d-c185dc948a89",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "1b9c0c1c-7152-4245-912d-336b0a2d712e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a286105-e43a-4bd6-a250-1a0433de5f58",
        "cursor": {
          "ref": "d2b88dce-a508-4343-b047-554a09355a9e",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "025fc0f1-bf9a-4ca7-8fc2-7cf9248cd340"
        },
        "item": {
          "id": "9a286105-e43a-4bd6-a250-1a0433de5f58",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "2047724c-29a3-4269-b96c-211be3d08d72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40a8886b-5629-4022-9066-d8da878783cf",
        "cursor": {
          "ref": "484ea477-3300-4e31-bc78-082d6dd65eda",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "dbbfc635-2dc9-4679-9fd9-c565aa3bbfa5"
        },
        "item": {
          "id": "40a8886b-5629-4022-9066-d8da878783cf",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "e449ff19-e898-4c0e-8fcb-65bde12538e7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "c2a36203-42cb-48b4-89f9-76f465b11f28",
        "cursor": {
          "ref": "5ac5d345-38eb-42ab-b0b3-7548d6b88e89",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "02f64555-8c38-4004-a080-a1b222cb8277"
        },
        "item": {
          "id": "c2a36203-42cb-48b4-89f9-76f465b11f28",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "75c7ffb0-eb66-4079-987f-5f4dc3ad071f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7761aa4-7e2c-4a5e-a251-a8b1c501701d",
        "cursor": {
          "ref": "b290fb16-b592-4615-b005-ae47a34db443",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "4a53c5f6-2760-4873-8b8d-ad65d0c5896a"
        },
        "item": {
          "id": "b7761aa4-7e2c-4a5e-a251-a8b1c501701d",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "0ae0efc6-bc90-4130-92da-c38c03d154ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72e3ff0f-7a34-4d11-9b87-95ba7cc57ddc",
        "cursor": {
          "ref": "de0e1b13-7ed1-4634-b8a2-aee88482bf7e",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "ca3ad480-7fda-43be-9305-a514470a669c"
        },
        "item": {
          "id": "72e3ff0f-7a34-4d11-9b87-95ba7cc57ddc",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "54ecc31d-979c-4663-8439-1fd8d91601d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c834ea3-0589-4ddf-bf08-c267d96771a7",
        "cursor": {
          "ref": "13edc0d3-96aa-4e46-86da-a76898151c4c",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "383d8845-ead5-4aa4-b5a4-b63cfa985270"
        },
        "item": {
          "id": "8c834ea3-0589-4ddf-bf08-c267d96771a7",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "d0ff2ebb-fd92-43fd-be0a-84822cc3fbd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "306e6c3e-4bd8-49a7-a56a-9ccc821346ee",
        "cursor": {
          "ref": "22361eb2-1f99-43fe-8207-ae5300dae4a3",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "9f435768-e4b0-4ea6-98fa-9c1bbfa8318a"
        },
        "item": {
          "id": "306e6c3e-4bd8-49a7-a56a-9ccc821346ee",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "ae648143-2188-4de3-bf23-5620c13cc769",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac5770f8-cb06-4188-915a-e6c96825eed8",
        "cursor": {
          "ref": "30be7925-eeab-4f7a-adbb-29102d3121cf",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "0035ca45-3b88-45c4-adb7-d3aef6fdac35"
        },
        "item": {
          "id": "ac5770f8-cb06-4188-915a-e6c96825eed8",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "b00482f9-21b0-4438-8dc9-fde42475efe5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b356d50d-d2ce-460d-99d3-3ddc386b4889",
        "cursor": {
          "ref": "21ac6434-8597-4ad7-b21d-15fdabe9d663",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "e0304503-8aea-48e6-8cb3-c981eb46f353"
        },
        "item": {
          "id": "b356d50d-d2ce-460d-99d3-3ddc386b4889",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "d8b42ad7-2cee-4671-a4e1-59679d77678e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fb202f0-adde-44db-8c83-070398738b8e",
        "cursor": {
          "ref": "603256c2-98c4-4dbe-b8e1-0a8a9204576d",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "6ad0a4a9-7f88-4883-baec-a516b85a9177"
        },
        "item": {
          "id": "1fb202f0-adde-44db-8c83-070398738b8e",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "97b1181c-6961-4494-ac2a-d531bcdfe958",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "966502d1-94cf-406b-a1ed-bfd1b4402a8d",
        "cursor": {
          "ref": "e681d2e3-b4e6-40b2-bb02-12398550f83b",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "cc507daa-909d-4d65-92ba-d45b3098c247"
        },
        "item": {
          "id": "966502d1-94cf-406b-a1ed-bfd1b4402a8d",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "1c6572f4-829b-4233-9877-e20d4fd2e70d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb624215-6a1e-4fc3-8245-d69b437d57ca",
        "cursor": {
          "ref": "b933b309-f0a3-4a6e-b14b-33e5fe11e820",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "5c436ef0-4423-4e0e-b1fa-060521899004"
        },
        "item": {
          "id": "fb624215-6a1e-4fc3-8245-d69b437d57ca",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "21427f13-eba1-44c8-a5ae-8ecee26495eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "828a9726-0706-4f81-b5b5-3d9a87703468",
        "cursor": {
          "ref": "4cbca12e-08dc-43cc-b283-26617b42a47f",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "78fdc396-1443-4d16-b48a-5c51c5722888"
        },
        "item": {
          "id": "828a9726-0706-4f81-b5b5-3d9a87703468",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "e22677ea-8c3b-4cba-b9a8-fb59b4d5962f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "767d1075-d7fc-48d8-80f7-20ff39c456d8",
        "cursor": {
          "ref": "11594903-1d64-4131-ae91-048eccebfd5c",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "aa7168da-767e-41ab-ab9a-212273372870"
        },
        "item": {
          "id": "767d1075-d7fc-48d8-80f7-20ff39c456d8",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "13fc2505-1252-47d9-a0bd-3a789a161caa",
          "status": "OK",
          "code": 200,
          "responseTime": 1245,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "a9107774-b012-41f3-977a-6641244ccfcf",
        "cursor": {
          "ref": "908c86ac-8736-4bb4-a1a0-6d160c14b73d",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "02fd9dd9-2685-4b22-bfc5-f8d7748bce3b"
        },
        "item": {
          "id": "a9107774-b012-41f3-977a-6641244ccfcf",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "75bb8b5b-f312-4ca9-9c5b-605754c2fd02",
          "status": "OK",
          "code": 200,
          "responseTime": 768,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "c9205752-dc07-45fd-b370-3511543e0851",
        "cursor": {
          "ref": "202e039f-c680-45b6-9ad7-78b4278a914a",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "4c9af99f-1ec9-4276-b207-07a243ecddf6"
        },
        "item": {
          "id": "c9205752-dc07-45fd-b370-3511543e0851",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "82d93d51-25bc-479d-815c-90c37bfa12bd",
          "status": "OK",
          "code": 200,
          "responseTime": 789,
          "responseSize": 131
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "2913269c-412f-4ad1-8560-4c7521eb886c",
        "cursor": {
          "ref": "a9decda3-bfb4-4372-bb5c-5570ff116f0e",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "6168eb67-26fb-4c67-bc57-ceec313c18ad"
        },
        "item": {
          "id": "2913269c-412f-4ad1-8560-4c7521eb886c",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "4c1d29e8-157a-46e3-bcd7-43234467bea3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d8d5114-e7e0-4380-8a21-34f3c8747171",
        "cursor": {
          "ref": "38401fb0-bab6-4a0b-9c37-5614354ab24d",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "c01c9d10-c3f1-4748-9048-0f770d33ace1"
        },
        "item": {
          "id": "6d8d5114-e7e0-4380-8a21-34f3c8747171",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "65dc8370-523c-4342-be28-94831f8b910d",
          "status": "OK",
          "code": 200,
          "responseTime": 789,
          "responseSize": 183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "5cf47943-3a15-4ce2-9c2f-85eb46adaa99",
        "cursor": {
          "ref": "1225ed5d-fad1-4ad4-abfa-17e59ace8e5c",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "2156d31d-3bcb-4995-a6ab-97fd0d23610a"
        },
        "item": {
          "id": "5cf47943-3a15-4ce2-9c2f-85eb46adaa99",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "69e140b8-73f9-48fa-8f07-e1a9ab2a5e0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37835211-d797-473d-b023-75e9a596f720",
        "cursor": {
          "ref": "4d1ebd14-ddfd-4019-a76d-b4331fe32e40",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "3c4e533c-e09b-454c-ba24-1e1e16bbe74a"
        },
        "item": {
          "id": "37835211-d797-473d-b023-75e9a596f720",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "88f5c53c-8560-4004-ad45-cd121771a54b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac01b648-4610-4b24-90aa-31b771194443",
        "cursor": {
          "ref": "03e8daa3-0973-4b43-9fef-fc1aa2f45cd8",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "b306532e-7441-4a7a-8e54-6b92d0cd534d"
        },
        "item": {
          "id": "ac01b648-4610-4b24-90aa-31b771194443",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "48639695-2ffc-44b1-9755-9d9f209400e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48f9b242-e2b4-46f8-ba4b-265b870002d4",
        "cursor": {
          "ref": "0ae96ad4-8aef-4f8d-b375-6987b538a1bb",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "6d2b0bdb-cae2-4cbd-a813-9bae491ab0c6"
        },
        "item": {
          "id": "48f9b242-e2b4-46f8-ba4b-265b870002d4",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "a07af1d6-5acf-4f78-a7df-c08ec84e42e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e210d23-4a19-4126-bde6-8eefd3463855",
        "cursor": {
          "ref": "1d50d8f9-8cdb-47f0-8b09-1d83852406e5",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "32c831ea-b779-4a9f-9988-eb8c2f6870f0"
        },
        "item": {
          "id": "7e210d23-4a19-4126-bde6-8eefd3463855",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "00bab86c-7a3e-45be-93fc-b8ab770f90ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f6c7c4c-7dd2-4854-a421-750747bde950",
        "cursor": {
          "ref": "3f359d7c-1af8-4c25-aef3-c9a4ab932b7e",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "10fcbe0f-48c7-4aac-85c2-4a7dfb598181"
        },
        "item": {
          "id": "6f6c7c4c-7dd2-4854-a421-750747bde950",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "34494bce-ee57-411d-bee5-bcd2250c58ea",
          "status": "OK",
          "code": 200,
          "responseTime": 830,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "46c90096-ed04-49d2-967f-afc534013035",
        "cursor": {
          "ref": "8fce2c14-7ae7-4086-bc50-c210f9f89537",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "367fdc50-5504-43e2-9a96-e8b0f94ddae6"
        },
        "item": {
          "id": "46c90096-ed04-49d2-967f-afc534013035",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "85559c10-92da-42b3-9817-f3f249146714",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "bd5a99e3-af0c-4233-88cc-a6d322c06308",
        "cursor": {
          "ref": "78faaafc-8428-43eb-b915-f13b761d980c",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "f66aa233-9a68-47ce-9789-2eaa77098d23"
        },
        "item": {
          "id": "bd5a99e3-af0c-4233-88cc-a6d322c06308",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "d5bdf275-a02c-4b78-92d8-5af878145944",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "716fd15e-1716-4b3e-b94c-17df5dbbe72a",
        "cursor": {
          "ref": "11615776-d0f1-4515-83c2-5f513cfc99dd",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "0757c133-5bf5-4c79-b5ce-e89f60f7cff9"
        },
        "item": {
          "id": "716fd15e-1716-4b3e-b94c-17df5dbbe72a",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "9cfccc9e-b787-4279-8a0a-413f292bf6fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8d52735-e900-4bf3-9ad2-dfa99d166e11",
        "cursor": {
          "ref": "432b677c-5bf9-45aa-b518-09104f5b1dce",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "1e59d8eb-a92e-4e99-962a-6612227fa35e"
        },
        "item": {
          "id": "f8d52735-e900-4bf3-9ad2-dfa99d166e11",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "a0fe67ee-967d-4558-8e62-13084d532993",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b628df6-ca8b-4a82-9308-b84bf6a824f8",
        "cursor": {
          "ref": "100c189f-279e-44d3-951a-7e6374ec9ec5",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "9a13f540-73ab-484b-a17e-3091cd85ca6f"
        },
        "item": {
          "id": "0b628df6-ca8b-4a82-9308-b84bf6a824f8",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "ab77772b-b7ae-489f-9ba5-0634e2387bcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47495995-9ce6-4b7c-bde9-42d770882881",
        "cursor": {
          "ref": "2d96f07a-7a66-46d3-87ce-9aae5060da99",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "754cc406-2894-4bdb-bbb9-8b8c1a81d770"
        },
        "item": {
          "id": "47495995-9ce6-4b7c-bde9-42d770882881",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "c62f93d2-2d7d-41e1-90b6-60ad5a39f411",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c9c1624-224b-40f5-b1e5-cc47eba3c36f",
        "cursor": {
          "ref": "69247ecc-08ef-449a-9fd4-947b10895ef7",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "e92f62c8-edb0-4e14-ad62-511922b8bfd0"
        },
        "item": {
          "id": "9c9c1624-224b-40f5-b1e5-cc47eba3c36f",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "a6df7699-8c8e-47fe-aa44-c31b825796a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6efd02f2-437c-4508-bccf-6c9d79cff678",
        "cursor": {
          "ref": "60bbda03-e175-408f-b33f-6fcd6e8bab2b",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "69bff1e2-3daf-4e03-adf4-bda98f070787"
        },
        "item": {
          "id": "6efd02f2-437c-4508-bccf-6c9d79cff678",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "4277df77-3800-480b-bd85-c99711f6e37b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1af1ec6-c54c-42f6-84db-14d0b0460a81",
        "cursor": {
          "ref": "33f8f853-d4a1-4c63-a87f-365a89e84f49",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "21032ed5-9af2-4989-9cc3-bee48b39bbc5"
        },
        "item": {
          "id": "f1af1ec6-c54c-42f6-84db-14d0b0460a81",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "c7eb95cc-1adf-4d07-b170-dbb9a8621414",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc7016ac-7a7a-4f09-b4a2-c24104c84c82",
        "cursor": {
          "ref": "b0d2838d-ba88-4feb-8596-928808c10935",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "1f32efeb-8091-4971-9624-70adde3bc196"
        },
        "item": {
          "id": "bc7016ac-7a7a-4f09-b4a2-c24104c84c82",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "d4712cb7-222b-41a9-9642-8b8a330b09b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83c51c35-5449-489b-ac23-c08eab03fa61",
        "cursor": {
          "ref": "35c8a6ca-abaf-4691-9a80-605a0ea72467",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "a1c144bf-7c98-4031-9b88-f54fc5c0a805"
        },
        "item": {
          "id": "83c51c35-5449-489b-ac23-c08eab03fa61",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "61e5d5c2-e787-4ae9-8161-b4c685aee175",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ba6b6ca-2c5e-4228-ac90-4f93df6b6c94",
        "cursor": {
          "ref": "107a6667-b30f-4797-9993-6a0fd35f4d01",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "271cde1c-b9b1-4c79-a287-5f701aa17f83"
        },
        "item": {
          "id": "9ba6b6ca-2c5e-4228-ac90-4f93df6b6c94",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "bdfd4bb9-95ee-4b78-95e5-47c2713c80a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6055a6be-f684-4666-9c11-418bc0c514d7",
        "cursor": {
          "ref": "93d37b19-8aeb-419f-9915-5314d86a00be",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "c4a19311-b132-48a7-ba0d-84626e8ee0b3"
        },
        "item": {
          "id": "6055a6be-f684-4666-9c11-418bc0c514d7",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "83d47929-6ae1-4dce-bedd-d77260eed35d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a86f607-643b-4b17-a122-f3807d4ee0ef",
        "cursor": {
          "ref": "618b3fed-9669-4a35-9db2-aea8ddd40fca",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "d47c1364-3db0-4e34-b29e-39ec4cb094b4"
        },
        "item": {
          "id": "4a86f607-643b-4b17-a122-f3807d4ee0ef",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "d4cfd4b7-a7cf-4ded-ac29-29c60f766c18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13859f56-fb06-4bca-874d-c03d3843994c",
        "cursor": {
          "ref": "0317f6e3-c8e3-455c-a931-893c45aa5d3e",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "527c57c5-08a6-4c44-ba0e-61f0239423f4"
        },
        "item": {
          "id": "13859f56-fb06-4bca-874d-c03d3843994c",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "4ba5d266-9b0b-4d44-ae95-f212fa0fad8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02648fc2-8ff9-4a41-bb50-1e280fc54fb7",
        "cursor": {
          "ref": "bf9aef26-6a94-4e1d-bdb0-6a2315851bee",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "aa95604d-0d8f-4a85-a37e-fe7c756aa366"
        },
        "item": {
          "id": "02648fc2-8ff9-4a41-bb50-1e280fc54fb7",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "692d9ef8-b4ce-4156-a7ef-b69a8beef5c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9481f177-888b-4f05-8ff3-e9c9f041a8d8",
        "cursor": {
          "ref": "16a88f00-8b90-4f70-a3d3-2a34db8d38de",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "3de31e3d-35b8-43db-8a44-ff9c6d44de48"
        },
        "item": {
          "id": "9481f177-888b-4f05-8ff3-e9c9f041a8d8",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "182e5169-c84d-4b7b-9d53-0f223db48edc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac364bdc-286b-4791-9231-3664470b58e9",
        "cursor": {
          "ref": "ccf2a91c-5b33-4274-9867-12d4c6c8a67a",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "fdadb562-c77e-4bde-9260-6e96c6335492"
        },
        "item": {
          "id": "ac364bdc-286b-4791-9231-3664470b58e9",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "4b2b3cb0-2b5a-44ac-964e-c4d3635dee65",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "fe9a2139-80b3-4cb4-8abe-07ed24ee2d9c",
        "cursor": {
          "ref": "9cf02784-8e2e-48af-b595-923620d92d14",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "bc66058d-4090-4dd5-af09-24ba851918c2"
        },
        "item": {
          "id": "fe9a2139-80b3-4cb4-8abe-07ed24ee2d9c",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "4e06a55b-02bf-4639-94a8-f4ee6df6cd82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ae718c9-ac26-4bec-9f56-eef0f9728706",
        "cursor": {
          "ref": "373baeb0-319d-4a1c-8450-043c6d185723",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "b9d17daa-cefe-4850-ac8c-945511dc7459"
        },
        "item": {
          "id": "7ae718c9-ac26-4bec-9f56-eef0f9728706",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "9fe41a96-8d44-43d6-acfc-382f63952e9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0515f34f-9a11-4472-b866-d08d3f6c66e0",
        "cursor": {
          "ref": "2ed86d84-e221-4528-b364-906af57e5b21",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "544cd051-4530-43a9-be1b-2be420b5fe31"
        },
        "item": {
          "id": "0515f34f-9a11-4472-b866-d08d3f6c66e0",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "3da349e3-4f99-4c53-95ca-80c0bdbf5d78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e70a0fc-e64a-4589-aef5-86543e614d81",
        "cursor": {
          "ref": "91db3aee-d53a-44dd-b360-85f414c8c989",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "6bb177cf-3f81-4ed3-86e0-ec82e5ee4cf8"
        },
        "item": {
          "id": "3e70a0fc-e64a-4589-aef5-86543e614d81",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "4082d176-c084-47fa-b242-cd72e783e9ab",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "5718f445-4b00-4577-8d80-dd1367757f82",
        "cursor": {
          "ref": "4e6d0c2c-0dfc-4b3b-bbb7-9c6bf367b735",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "1b7badea-411c-4b4b-a9db-9a6a2a9814c6"
        },
        "item": {
          "id": "5718f445-4b00-4577-8d80-dd1367757f82",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "e7c9b190-bb96-4cbc-840e-2533ce21a147",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b469994-d9ac-4754-be1a-23753f4a4bb4",
        "cursor": {
          "ref": "7c806934-fe49-4caa-9e75-b698d6aebeef",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "45a21d92-cea2-4627-8160-7593ebbcff86"
        },
        "item": {
          "id": "0b469994-d9ac-4754-be1a-23753f4a4bb4",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "506abe62-006b-4c98-8ee9-c630995dd1ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "180adf96-d1d9-4563-bc38-c7ec7afdb7a2",
        "cursor": {
          "ref": "22fa96eb-aa42-4e4e-acb1-0f0416b5a7af",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "600a90a7-463d-4e09-a7ea-e4f1017de850"
        },
        "item": {
          "id": "180adf96-d1d9-4563-bc38-c7ec7afdb7a2",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "af17bb94-7c77-4f8e-a5a2-b22393dd0269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c735451-d266-44d3-82e8-b375edf4e5cd",
        "cursor": {
          "ref": "ea93ff32-f855-47b5-b2bb-efbf505134a7",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "07c62f0c-d2bd-4026-ba69-761982c9035f"
        },
        "item": {
          "id": "0c735451-d266-44d3-82e8-b375edf4e5cd",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "6809c28a-535e-4a84-839f-0701abce565d",
          "status": "OK",
          "code": 200,
          "responseTime": 775,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "87a3c700-ce2f-46f5-896e-72f76bf56c40",
        "cursor": {
          "ref": "ebf1e4c2-f599-481d-8bb7-682a37ba0d10",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "b416d41d-b0e6-46cb-8d3c-0c21de2cf9e8"
        },
        "item": {
          "id": "87a3c700-ce2f-46f5-896e-72f76bf56c40",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "ce19f20a-13d9-48f6-8f41-bfd436f8bc46",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "d8f0940b-7152-4c3b-b3cf-0a29f94c64f1",
        "cursor": {
          "ref": "cf45b56f-f6a1-4d9a-9127-a5c0b9c0cb06",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "523afe3a-bf4e-42bb-ba23-d0a5e0ee949d"
        },
        "item": {
          "id": "d8f0940b-7152-4c3b-b3cf-0a29f94c64f1",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "99ce32f7-e4f0-4147-ae8f-41f3a7b5d47c",
          "status": "OK",
          "code": 200,
          "responseTime": 1210,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "04be88f1-bd4c-4bdc-a5b8-8199fb26024c",
        "cursor": {
          "ref": "66dfa4d4-f7e6-491d-a422-a203d99bbacd",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "cb50b32d-e13b-4d4b-a378-689881645577"
        },
        "item": {
          "id": "04be88f1-bd4c-4bdc-a5b8-8199fb26024c",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "9255252f-85f2-4ff8-9835-331563d71556",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c563e087-4c43-4a1d-a595-afa2d06f3324",
        "cursor": {
          "ref": "e01ce901-11a1-4a50-ad01-b55729b8c7f1",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "d1fabea9-9133-4fcd-9c14-e9f23ef5764b"
        },
        "item": {
          "id": "c563e087-4c43-4a1d-a595-afa2d06f3324",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "8781e385-eec0-4e38-a54a-71fd92f806cc",
          "status": "OK",
          "code": 200,
          "responseTime": 816,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "ddb1f288-9274-4738-948d-25f1a173cf9d",
        "cursor": {
          "ref": "8ef90c95-aff5-4741-a824-dfca434510f9",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "a8af892f-c548-426b-893d-bd22c9d06c3c"
        },
        "item": {
          "id": "ddb1f288-9274-4738-948d-25f1a173cf9d",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "e7b8b619-a324-46ae-b56d-453485bfb287",
          "status": "OK",
          "code": 200,
          "responseTime": 812,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "84661849-42b1-45c7-9c6a-a6bd8f9d0ce5",
        "cursor": {
          "ref": "bd4b8caa-8965-4362-9a5b-65db2d5a7c1c",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "4353a429-410e-40b4-8a1c-e1755ed1d079"
        },
        "item": {
          "id": "84661849-42b1-45c7-9c6a-a6bd8f9d0ce5",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "373e1884-dc96-44e1-b94b-c7c27b5f8f28",
          "status": "OK",
          "code": 200,
          "responseTime": 789,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "167f2011-5d49-49f3-9621-1f93be7a9202",
        "cursor": {
          "ref": "35b89b77-18d4-4fb7-875c-8daf898e22ec",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "13e3fc60-c48b-43db-9527-6be909ef3c4a"
        },
        "item": {
          "id": "167f2011-5d49-49f3-9621-1f93be7a9202",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "1a9aeff1-db1e-4959-971a-16af86073126",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "ad365335-b78a-4094-a3db-0180213b60b2",
        "cursor": {
          "ref": "aff074fd-eeee-4cb2-b3af-f8a2116d9e36",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "d10d07ca-ed88-45fd-9d89-848c4fdfb334"
        },
        "item": {
          "id": "ad365335-b78a-4094-a3db-0180213b60b2",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "d2a89dc2-04ff-49e2-be2e-aaece64ec872",
          "status": "OK",
          "code": 200,
          "responseTime": 818,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "8584f76d-9ec2-41e3-b96b-575fca740196",
        "cursor": {
          "ref": "675a2ee2-4bb9-40b0-925c-df86f19bd7a0",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "8097e676-20c3-4b6e-af98-d47a327fcfea"
        },
        "item": {
          "id": "8584f76d-9ec2-41e3-b96b-575fca740196",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "364e8ff7-157d-4617-a829-de1d13d8a7c3",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "3c326dc7-2e72-44b5-a35b-1e062003eda9",
        "cursor": {
          "ref": "48143e50-9c99-41bb-8a59-9f0ac3534a9b",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "a1aca87d-0657-4377-80fc-fce783404828"
        },
        "item": {
          "id": "3c326dc7-2e72-44b5-a35b-1e062003eda9",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "24b0cead-6577-447e-b5ab-10ce1282ab4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6de037fd-abe5-4053-bced-801b60fe8825",
        "cursor": {
          "ref": "a4906295-d464-4fbc-b612-ce1d57095787",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "d251a922-5445-4b06-968a-0e70548afa46"
        },
        "item": {
          "id": "6de037fd-abe5-4053-bced-801b60fe8825",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "c8b0e53e-4475-47c9-a165-930f880caf63",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "5571d6c8-8027-4fbb-a5d1-b7620794c69d",
        "cursor": {
          "ref": "cd6a8f29-6c7d-40a9-8c5d-6049378496e7",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "4412b1d4-9028-4ab5-aacd-57a6ffa7ca52"
        },
        "item": {
          "id": "5571d6c8-8027-4fbb-a5d1-b7620794c69d",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "43a148ae-f235-40e7-8c06-852fe535619f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3cef715-9253-4920-bc2b-e86708f25b50",
        "cursor": {
          "ref": "3ded1f70-aca2-4a3f-92c1-9fb000685eb4",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "aa695964-a4eb-4aaf-bfab-c8556bcb1acf"
        },
        "item": {
          "id": "f3cef715-9253-4920-bc2b-e86708f25b50",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "a4035c2b-955a-485c-8eaa-779346205a86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6e4ce79-f15f-4a0e-a06d-23e3c1ddb60e",
        "cursor": {
          "ref": "d3694749-d9a3-4f09-990c-ced24ca422fa",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "3d8c64bd-5846-4af0-8e21-39b8172c2c25"
        },
        "item": {
          "id": "c6e4ce79-f15f-4a0e-a06d-23e3c1ddb60e",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "cedb3a12-6c19-4677-98a0-b53ec45c1cd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da81e969-d880-4b8f-a8c6-48865b593fd5",
        "cursor": {
          "ref": "ef2094a7-1045-434a-9a25-b6ce8b066a81",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "c61a33d3-a6d4-47a7-974e-553bcfc3729d"
        },
        "item": {
          "id": "da81e969-d880-4b8f-a8c6-48865b593fd5",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "1f0ac609-206f-43f4-834d-00f0e0f141a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66e2dd6e-f99f-4cf6-a371-b762b002a139",
        "cursor": {
          "ref": "20ece30a-4457-4feb-9395-9276585d8de9",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "8f0ba93f-4d9d-4d64-9662-2ce31a7986e3"
        },
        "item": {
          "id": "66e2dd6e-f99f-4cf6-a371-b762b002a139",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "7127c81e-965f-4be2-84a8-d832132048e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 579
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49b812e2-5c40-4c7c-aa16-e7b14b335cf3",
        "cursor": {
          "ref": "defc4b6b-877e-4b54-8612-ae3bfffcf3c0",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "7ee651a0-04d5-4014-ae0f-37c44135cf64"
        },
        "item": {
          "id": "49b812e2-5c40-4c7c-aa16-e7b14b335cf3",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "f0e4a94b-6d1b-4d2d-917f-14a8c1405841",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1baeba6c-e2b9-4dd7-a863-731659f00e9f",
        "cursor": {
          "ref": "87ab53b6-b0e1-4923-b178-331e708a0e9c",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "37e22e83-9053-4c8f-bd21-29a1319e53a1"
        },
        "item": {
          "id": "1baeba6c-e2b9-4dd7-a863-731659f00e9f",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "d15c0467-e0ce-479f-ad0f-9243c62ec1db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a3350f7-1e85-450b-aaad-1bdef7801f21",
        "cursor": {
          "ref": "55ff6185-0441-48f9-bed7-5353813cc56d",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "c986c424-6fa7-4b7c-88ba-08fde6d582f6"
        },
        "item": {
          "id": "7a3350f7-1e85-450b-aaad-1bdef7801f21",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "aeaddcd0-c2a1-4479-92d1-9afc793765b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdceb242-dbdb-47c8-b554-2d2472ae026f",
        "cursor": {
          "ref": "676219d7-7fa9-43ee-93e5-b6f24ebe9cdc",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "160bc3af-758a-4ad3-a22e-710f95753ced"
        },
        "item": {
          "id": "cdceb242-dbdb-47c8-b554-2d2472ae026f",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "e0da19ce-5e11-4d44-8a3f-001d3d4046db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 579
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fe78261-50b7-4d91-bed8-01a3ab328b3e",
        "cursor": {
          "ref": "ff729a46-43e4-40fe-849a-fc06a85c5028",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "62abeada-dc09-4861-8772-393b2e1f565c"
        },
        "item": {
          "id": "4fe78261-50b7-4d91-bed8-01a3ab328b3e",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "da993fc6-eaa2-4a93-bda4-450104afeb3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6ad4e01-a92c-4af9-8511-d04eb09c19d5",
        "cursor": {
          "ref": "fbd08fb8-38ad-4a6a-affc-15035cfc9036",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "1a60e746-758b-4d0c-9f5f-c931b58a0d2b"
        },
        "item": {
          "id": "e6ad4e01-a92c-4af9-8511-d04eb09c19d5",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "4ccde000-4fc8-4262-b412-ef71df9d5c2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a513fdc5-5a3c-4e3c-9213-a28226e1b1ca",
        "cursor": {
          "ref": "2bfdda14-38d3-44f9-bb2b-25976b8915d3",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "ed6bfd6e-0a70-4e1f-aec7-97bf42fa68d4"
        },
        "item": {
          "id": "a513fdc5-5a3c-4e3c-9213-a28226e1b1ca",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "1233a196-ad24-456c-8487-7936eefaaa34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbe4b01b-53d4-47f7-a6b5-477767486c9a",
        "cursor": {
          "ref": "56d49c12-08d9-4820-89ba-f5d4aa9dec65",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "a11ed805-1546-4c40-9515-641d900f230a"
        },
        "item": {
          "id": "bbe4b01b-53d4-47f7-a6b5-477767486c9a",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "298b50ce-beb0-45bd-bde8-0ca1f28b5bac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5b4c1e2-f4b2-4a11-8f50-75dbbbec3dae",
        "cursor": {
          "ref": "b70e1e15-0190-4749-ae68-2cdb4f724532",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "87ecafc0-6fa9-4f2b-8fc3-7079ffebe1a0"
        },
        "item": {
          "id": "e5b4c1e2-f4b2-4a11-8f50-75dbbbec3dae",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "49cf9afe-b3cc-46cc-b3c7-63077648dc0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0a8faac-154e-4f3f-bc96-96a7ee2ed196",
        "cursor": {
          "ref": "a9c22c42-e3c3-4a02-a74f-8dbfdf499da9",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "90447a71-9d75-435f-8111-6d9f88f2eb61"
        },
        "item": {
          "id": "a0a8faac-154e-4f3f-bc96-96a7ee2ed196",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "466591fc-89fb-461d-99c4-c402c7676c58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 184,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ab13f15-5ffe-40ae-9049-882e99a531d0",
        "cursor": {
          "ref": "1536ad55-a86a-4859-9592-a7d18e87e572",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "5c3a583c-4fc4-40b5-8e0c-d2bc0339018c"
        },
        "item": {
          "id": "0ab13f15-5ffe-40ae-9049-882e99a531d0",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "831c4d14-979c-49d3-873d-66d4adedf304",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34081921-e4b3-4147-b121-bb4f8e633f99",
        "cursor": {
          "ref": "e13e807a-b160-4f1f-b7c3-f220165d82f5",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "ff0ec989-eceb-4d14-ae77-7cfa738eae6d"
        },
        "item": {
          "id": "34081921-e4b3-4147-b121-bb4f8e633f99",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "9334e3eb-c04d-4835-ae8e-0eaa4f3c622c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8a87a09-93f9-4f5c-b221-0fe2a46c537d",
        "cursor": {
          "ref": "6e155f11-5681-403e-a818-396a7a8af928",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "7bf98891-f62d-40c5-ada1-ce2a5985d268"
        },
        "item": {
          "id": "c8a87a09-93f9-4f5c-b221-0fe2a46c537d",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "12b52073-f942-4eba-b355-fe16996c972c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "658b58ba-e453-4059-b07d-4f71045d48fc",
        "cursor": {
          "ref": "1d3fcaeb-0976-4eb4-9a58-5a995c74860b",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "d59b4474-a57a-4fb8-9ba3-1f5f26f4721d"
        },
        "item": {
          "id": "658b58ba-e453-4059-b07d-4f71045d48fc",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "afb3a459-d760-4d90-b8b7-798c689be1f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c80e23b4-de15-4867-ad60-4e25246524e2",
        "cursor": {
          "ref": "1fd51c68-41dc-4aca-bd29-51cc7795a973",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "25d1b34e-91c2-4e4e-8487-c6647aa3d27e"
        },
        "item": {
          "id": "c80e23b4-de15-4867-ad60-4e25246524e2",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "d82d8f89-423f-47bf-9540-6f26a5d51188",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:263)"
            }
          }
        ]
      },
      {
        "id": "9b082606-423e-41e7-add9-0b95397957d8",
        "cursor": {
          "ref": "6d990cc4-32a8-4103-a5f1-c1795133197b",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "183f8541-0d57-4a5e-a133-4af78cf68edd"
        },
        "item": {
          "id": "9b082606-423e-41e7-add9-0b95397957d8",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "58e5941f-7b7d-4a88-92e7-a657a85a600f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba7190d8-c884-4c24-bc94-324ab08cf193",
        "cursor": {
          "ref": "b81ce5f9-9cc6-49da-80c2-04d222c6abbb",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "606af9cb-04e3-4746-91dd-06a6f675f06d"
        },
        "item": {
          "id": "ba7190d8-c884-4c24-bc94-324ab08cf193",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "8c23c2e2-c99b-48b7-9162-4de2886a8d43",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:265)"
            }
          }
        ]
      },
      {
        "id": "09eede80-9e00-41c5-9fd9-fc242d8c06b3",
        "cursor": {
          "ref": "ae5eac6f-c959-4e8f-9850-56271b4b0158",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "2ac3aa53-0bda-45ee-aeba-d24aabc44280"
        },
        "item": {
          "id": "09eede80-9e00-41c5-9fd9-fc242d8c06b3",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "1f7b5cfd-281c-4cf6-bcde-15694ad3af00",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:266)"
            }
          }
        ]
      },
      {
        "id": "d31d4431-0171-4dd3-bdf3-fb097e060a2a",
        "cursor": {
          "ref": "2c0e9826-37b7-4737-8ffb-e07a4161168d",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "f2271fe1-aa2f-4b38-929d-3cc977acf35c"
        },
        "item": {
          "id": "d31d4431-0171-4dd3-bdf3-fb097e060a2a",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "54e05620-c61f-4eb1-90dd-1903e8a5e8c8",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:267)"
            }
          }
        ]
      },
      {
        "id": "cbb35598-4337-4a1f-891d-f7cce98506a9",
        "cursor": {
          "ref": "ff81c7ed-bc1c-4758-a4ec-d241d3f5b45e",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "5a6234f9-298a-499f-94c7-68ae65bb1b2f"
        },
        "item": {
          "id": "cbb35598-4337-4a1f-891d-f7cce98506a9",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "1eb6269f-8e20-4a3a-b0b0-b2db8b6a93fe",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:268)"
            }
          }
        ]
      },
      {
        "id": "e762a8b0-1576-4f72-8b58-df50cb98d1d6",
        "cursor": {
          "ref": "76c3a430-9df8-461f-af0e-bfae67da2e6c",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "36388c4a-89ce-4df9-a6a3-ac6d2633f96b"
        },
        "item": {
          "id": "e762a8b0-1576-4f72-8b58-df50cb98d1d6",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "055480a5-1414-4a7b-a7f1-7781374e49cb",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:269)"
            }
          }
        ]
      },
      {
        "id": "1558e8ff-aec5-4944-ad1b-1acb7fc311fc",
        "cursor": {
          "ref": "daca01a4-1bdd-4061-ac0a-660a069dc236",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "ad3bc633-8feb-45d9-944c-c536bf80bbb2"
        },
        "item": {
          "id": "1558e8ff-aec5-4944-ad1b-1acb7fc311fc",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "333ff6e5-212c-477c-a442-0412cab7c43b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9e5233c-baff-4223-adfd-7ebf9fef5370",
        "cursor": {
          "ref": "f61374bb-eb8c-4264-9a7a-d2d72ae0e98a",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "8411305c-b1f5-412d-a4f2-a9cf167fc081"
        },
        "item": {
          "id": "d9e5233c-baff-4223-adfd-7ebf9fef5370",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "2e791832-6e1c-4a44-8b4f-b8b0c6ec1de8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01b44385-7776-4872-8ce8-9e7e3dbb8a87",
        "cursor": {
          "ref": "3436ca51-da42-4b52-ad3c-5afd093246a0",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "74d54f4d-243e-46ba-a46d-9a2632f8895f"
        },
        "item": {
          "id": "01b44385-7776-4872-8ce8-9e7e3dbb8a87",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "ef8c2567-ff64-4849-bda9-0828be5ebeab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22980044-dc6f-47b8-8d47-ca27abf30a60",
        "cursor": {
          "ref": "cd0dbb09-b2fa-4f29-ab38-1aacc37684e0",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "f0f8b79e-4677-4f43-8773-24436d1a8b68"
        },
        "item": {
          "id": "22980044-dc6f-47b8-8d47-ca27abf30a60",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "d1b0ef08-5115-4506-91f2-d08b56793a10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80dfec59-703c-4577-94aa-9bf75a4830d2",
        "cursor": {
          "ref": "f54762ed-b3b3-41a7-b264-16ed6c257c01",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "943ddf87-961b-4291-b4e5-c01543614b15"
        },
        "item": {
          "id": "80dfec59-703c-4577-94aa-9bf75a4830d2",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "232b6827-918f-4d89-b7f2-4b186176f6f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cf08706-646a-46b6-b736-a1f5d215b491",
        "cursor": {
          "ref": "f9e22b10-a72c-4254-a5e8-bf0aaa768d10",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "97fab41a-2f3b-4472-b845-edbe42a6366c"
        },
        "item": {
          "id": "7cf08706-646a-46b6-b736-a1f5d215b491",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "20b14503-af08-4b20-b328-ddca5c892477",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a624ba3-52c8-4a09-a5bc-46d6ed596d13",
        "cursor": {
          "ref": "4f969b39-f1a0-4544-ab64-6ee7f5b854a7",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "05467332-b7a7-4870-8d3d-c3af6bb41970"
        },
        "item": {
          "id": "8a624ba3-52c8-4a09-a5bc-46d6ed596d13",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "dbfa42b1-37b2-4d5d-9e85-1e9c4bbb2639",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b0977f5-b3f7-47a4-8fc5-2800261775fc",
        "cursor": {
          "ref": "5431c4bf-18e9-4dc7-b2be-e23dd8c8b5ef",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "927ec859-301d-4e40-aa5f-2a4437762ed3"
        },
        "item": {
          "id": "3b0977f5-b3f7-47a4-8fc5-2800261775fc",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "b209de47-8078-4eb0-ba76-48822091c817",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "97e9b662-7cdb-46a7-9700-fe4f635eaebd",
        "cursor": {
          "ref": "b7eef181-8bfe-4a9c-8302-931ab9065994",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "25750eb3-474f-49b0-9923-e52f2862e739"
        },
        "item": {
          "id": "97e9b662-7cdb-46a7-9700-fe4f635eaebd",
          "name": "credentials_verify"
        },
        "response": {
          "id": "47823d51-3f78-4c5d-9c46-a181d68b5887",
          "status": "OK",
          "code": 200,
          "responseTime": 752,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "26cf8af2-f97f-4fe9-8226-72451160a756",
        "cursor": {
          "ref": "f2aa529b-aa3f-447b-80c1-bbe8fbf7fe83",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "c4b14e14-d6c2-4553-9fcf-6b9f0fda9735"
        },
        "item": {
          "id": "26cf8af2-f97f-4fe9-8226-72451160a756",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "20b1e6ef-43fa-421b-91f1-815f4dc32fb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "b67b929c-3c89-4d39-b022-50fb3d6c23cb",
        "cursor": {
          "ref": "9c0e3ac7-f0fa-4ad1-ac0e-14455b0ccb6a",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "af5d1e16-4324-4823-b308-4f07f6df852a"
        },
        "item": {
          "id": "b67b929c-3c89-4d39-b022-50fb3d6c23cb",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d00b1bdc-2446-4692-b927-e384ade90e43",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b67b929c-3c89-4d39-b022-50fb3d6c23cb",
        "cursor": {
          "ref": "9c0e3ac7-f0fa-4ad1-ac0e-14455b0ccb6a",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "af5d1e16-4324-4823-b308-4f07f6df852a"
        },
        "item": {
          "id": "b67b929c-3c89-4d39-b022-50fb3d6c23cb",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d00b1bdc-2446-4692-b927-e384ade90e43",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec48d5e9-d90e-4a48-ad10-4597d1471479",
        "cursor": {
          "ref": "87c263b8-8c62-4b66-95b9-d867c9437603",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "0bafad3b-2417-428a-8275-33e46e485205"
        },
        "item": {
          "id": "ec48d5e9-d90e-4a48-ad10-4597d1471479",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "77749347-e21d-4bbf-ba5b-bf1edcf8a145",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7bc12bb-1b60-40b0-b9ab-9117bbbeea3f",
        "cursor": {
          "ref": "fbcaf030-9832-4851-831b-7f612cb540af",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "2d355a72-fd4a-4cae-a8bf-3daa033ef2e5"
        },
        "item": {
          "id": "a7bc12bb-1b60-40b0-b9ab-9117bbbeea3f",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "17adae6d-7e09-45a4-b402-7005a0a30196",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}