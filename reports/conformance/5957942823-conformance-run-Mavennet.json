{
  "collection": {
    "info": {
      "_postman_id": "faa02ea8-9433-45af-b9a7-893a98130da9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "9f396289-e182-4d26-9e62-7c27b1782081",
        "name": "Clear Cache",
        "item": [
          {
            "id": "0f7f7d09-f040-4658-a15c-fc5eb8c9e03b",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1c68eba4-67c3-4fca-ad7b-bafe8d2af3a4",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "694bffda-42cd-4739-9942-b646e7576ddd"
                }
              }
            ]
          },
          {
            "id": "f2440027-5f2c-493c-84fa-1affdae3b2a6",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5822d773-9801-4af1-8398-24676e9a9482",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "66c14836-e679-4eeb-9749-4a1a72be14fb"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "bbf5eb17-25b5-46e7-9942-70f606a42118",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "2f7b54c4-ee70-45c9-88f0-84270e020773",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3b6f7c3c-243f-456a-a6ea-5927fe1ae5b7",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3ed9795c-dc60-42f1-9afb-63277b32176f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4b6394d7-00e7-4138-8724-3e776e84d215"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b41a77c8-d8de-4114-a0c1-9b14e73cdbf4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "52afc6c4-8c2b-4ff7-a591-5ed5d7e37313"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "74959a1b-00db-4e41-b820-0d437ebed9b8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "eef2ff50-85c2-4a7a-a6c9-1bc577425da4"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c3012b69-c518-4394-899d-99979834aad9",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "930cb667-e9d5-429c-9131-762ebf1f4227"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0d50f310-8dff-4ab8-8caf-8302fcb67d75",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "da166ad6-4704-4fe4-ba79-3d6b3ce2ddba"
            }
          }
        ]
      },
      {
        "id": "1f4347cf-0bbe-450b-adfc-928738387cdc",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "516796fb-fa5b-440b-af16-aee08dcaba6c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "08c9e5f0-a932-4acd-bef0-8c96aef7660f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c1ed5651-4114-48f5-8f83-222661d2d927",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efcaae14-859a-4685-ad95-a5d10ee60ab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4c3e4ecf-d729-46d1-a089-796ee08b7116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffa2afa5-33ec-4654-af07-1362044ace0e",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12ff833a-213d-4129-86f7-851ff124db7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7e6a2471-d5ef-40da-a36c-0239694d7f1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5d36298-95f4-43f6-8608-a8de49403040",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94e61f8e-25db-4b9e-96a9-1c14ca94c11c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "43f13a20-a4c6-494e-be54-2fe8292a7558"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a506446d-58ea-4864-a45f-5f7c6bfcbd40",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "827b3d14-4dd6-4a53-b6d7-b3cbd5ac6042",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8effc2a1-9552-42b3-9421-d298a3ffbc2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5f517eab-7d11-4ec8-9710-3e0058b2e097"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d8d5ba3-56c4-46a5-8ff9-055aa5a1585f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f78b8086-39c6-4fa2-af62-bcccb08f98af"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6d5e7718-213f-4b47-928b-5f4ae7dcb1ee",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d40ec897-11f1-4e14-8c19-fb8504ee613c",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "247312a2-682f-401b-a94f-0873aaa2463e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "59c4e215-4e09-4bb7-8a38-62998fe0bb30"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9b307ad0-a9e0-4512-8951-a1a4fd2d3c40",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "7771d7d5-bc28-41bd-9241-91143c45ffb2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a4d1c110-d58a-490b-b3b6-75ab24c89614",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d3950e3a-0fcd-409c-95b5-b18dc68b8441"
            }
          }
        ]
      },
      {
        "id": "7f07582e-a4b3-4cb6-93c0-fe09ce334444",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "38ce7edf-5053-4c58-ba8e-05916ece44b3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e92cdb0e-0d72-436e-8da0-756aefa22e5f",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "979f0704-69b5-41a0-88e8-0b1466922f4a",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fec6e0c-1f8a-4603-9651-7fc58719e40e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7be573dd-1070-4001-b575-523f3e704fbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "884e9bf6-8b46-40af-8043-ed681770724f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e2df603e-fa3c-43a6-ac18-de5d4974ea62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1046447-66a6-4478-9e94-fe054ec98359",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0137587a-9cd0-4620-81eb-c3ed435d68bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a99a1058-cf45-4daf-8f47-58fbfd1fe0ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5df8369-eba1-44b1-acc6-db8561b9734d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5c9cb32c-ce6d-49a4-af24-133d187cd2a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a618c64-0141-48b5-bfee-3b70b23f55b8",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7d41243-5c5d-4094-bcd6-41f4f9bbb115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cbda2cd-3d5f-4f98-8477-df26b1fbc042"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2e7abe6-085e-480e-8692-39fcdb623a8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f120e8c-e417-48dc-af13-064d76f1ba0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41eec296-a7c4-4811-94a2-61fbf825979f",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "114aa7c5-ca37-423b-b4bf-a8144757b0cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da1fa7d1-66a7-4507-a0a4-d3062c2c0443"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "859f93d5-f512-448e-a356-f43a8bcb7b2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62fc806f-d621-4b42-9ec7-0442cc523374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a951a42-0591-4564-85da-e9e0872a4970",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93d1d5fb-118a-4fa7-bbd5-ec7dbe1fdee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce6d0c2b-c826-4a21-a6ab-0880d2d31e61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d15b2379-a3ab-467f-973d-3e08582dc77b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2378dd81-c422-4fa6-92e9-774fb9439ba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "123fc99a-31be-4e73-a6fb-bc9a37fa6e43",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fe9f35c-c81a-4a4e-bbbb-171d89ab11f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "191fb072-3a54-497d-8c79-75074395f162"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0f37fd8-c696-41f0-bb5a-e571365504a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "349a1eaf-c01b-4e42-8f22-f0f673f2cdbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c02c03eb-a660-4070-ac74-21b059bcab02",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a89cdd9-86d4-4168-b225-b4f16e7bc04f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40ce4655-ef9b-4244-9299-538a1a99936b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff8fe62d-bfb7-4b20-a2ac-1078cbf2ac14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6470e89c-7163-4ebd-a5d8-62612e9d4ad2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "875d1ab9-45f7-4f4d-a645-60b504cb69f2",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "031e2ba4-8a33-4f74-a7a7-a9b3d9e3e0ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0086f477-e77c-41d1-89d4-0c8c9dba54a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44945a9b-e541-4c67-97f0-43a59b4531f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0713d1db-2a88-4aae-81c0-830bde31bfc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c10350e7-331f-4eb9-80c9-cc05fe6d732b",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40237ddf-d1a2-47c7-afd7-24301ede378d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e9099bb-0343-4ebd-b54b-ff5edfbd906c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5710898a-6dd2-44d5-b2d4-b13039036407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "66df4d5b-d4aa-4543-a249-86f877b0300a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1085c08f-525c-4504-94ee-2c678a2f6eb8",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26974230-f198-4a05-bf2b-6cdbf459882e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7911b60-e8cf-4a63-905b-a0acccaa7426"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "762ca558-65b0-481d-87b2-8a8f09a56fff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5516e713-2c97-4182-ae9d-ee430d1ab1d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14749792-d6e9-4930-9919-bf84067fa137",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef96141c-d0fb-4f16-996c-104ad304c03a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e638bf7-a51f-4908-b844-47f479592775"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da161558-3e34-4741-9469-aae8f30dbbbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e5eb69fb-21b5-4c21-ab32-ed6f46744a96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c34bbd3f-4d2e-48ee-8625-08fdf8815450",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cea5ff3-3688-4fed-b26d-a5ad5bfe5daf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67ec9ac3-816c-4237-8cd3-d2d73273e23f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d50c40ae-b42d-4aa4-9b8f-39f1a366eb0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "49c41218-d14d-4077-a963-7e74b5cac99c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99947e3d-be0e-4d7b-8201-7f2072adfa77",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e713afc-d0d8-4588-9f8e-3633c6a5535b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49329e5a-e5ec-4942-8bbb-a276e61928bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1595d171-1d5d-4f3b-9ad0-5692565826cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "80ff86be-a366-4c87-b349-6aa1564f6cda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81b4424f-984e-475e-ab7f-3a93e38296ff",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02166d9c-9a6e-43a1-863c-4f16d9ec4721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9047d9f7-ed1f-4fe2-bd75-d263aa36fcb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7909df94-1bfa-42c7-b98b-2e2951af482d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c5e2cfeb-da23-42c8-95d0-32809c48993b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81816b4a-2d38-403b-be07-b793de179027",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19056fec-e295-49c4-a76d-6af69e010d61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba3feccc-30dc-4907-823f-06e2aaec61b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc7e1b9b-f072-4f0b-a544-91e70c6caabc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2785e50a-b6aa-4571-bc87-3866a38a9ee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ef234cf-b8b1-49d8-b019-bf33cf823230",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6ae2fa3-0c2a-4b1c-b639-b7a1114e9f08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c891baf-fa3e-427b-bb01-9c1e696c43c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6952565a-1c4b-4c6c-9416-3beb0e38db59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "10ba3dbe-982a-498e-b3c6-c23a07c65e39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a02bc53-e7e1-4392-9016-970d11fa3ff5",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5508335-89ed-44b9-bf62-8ba56df5f31c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e12783b-c2b1-4f46-b727-ff0db425ccf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26f354ea-97b0-473c-a127-afa83e4e7601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "61da5369-4a1c-41e2-8d15-28e4d2f9d288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78cdc1f3-4326-4625-8888-f4b7444ee705",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9033c4b-e5cd-4fdd-9c8d-34050896b477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb746a09-cddc-4cf9-b0c1-36484a0f083d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef2409f4-c13b-452b-b48f-d1850dcd480f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d936f538-9cd3-4243-8a1c-20cec448b875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b98caad8-0806-4a66-8506-f94c85d4fbe3",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c81e2bae-0661-4474-a1b7-ea4c47b13e49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ee9e5e9-3494-4bb2-9c2e-93f30cd2cd30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acb612ca-b86e-44c9-9f31-eacb5f0d72dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc081a88-e543-4aee-a5c2-c0d131b5d2f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb833796-1de5-41f2-ab58-a3a242f7eb5b",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8cb884c-a6af-4f47-98dc-dbd13936d2f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0810b4aa-2c06-436d-aa60-a90bec5049bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d0c8d64-281a-4199-b5cc-baa8ccb66b53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "00a3a5d6-b359-4d56-90a0-c3b3b19dcd6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d316bf1-d45e-43e9-aebb-eaf5f8c95dd6",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "672d2f78-7670-4466-8518-bd00d884be6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ceffeeda-67b3-4281-b34b-fd6a6f718a42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c84d33b-f910-47e7-bd13-c671617196b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f68d334a-d57c-4c91-bc0a-2baf91353921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f9ff95e-5a6e-42c9-b374-6985ef9698ad",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "886df733-82c2-4610-8198-085dec1f4acc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "658ee89c-46c5-4e97-8ab7-7d137bef4c79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d265ddeb-048d-4629-ab3d-3322a9dc33b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "986dabef-bad8-4274-ac68-37c695eb1bbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bf32aef-9ec6-4684-a29f-edf488e7fb97",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "774a5499-4dfd-4f8e-89de-c2bb2566128d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bb6a1ea-ab64-4b44-8864-7378d0642247"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2640111-3b9e-415b-8b7b-8c5e4bc7894a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "918a7ca5-bd0a-4ec9-a81d-6c6afdcdec16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5d2f1bb-9b9e-45fa-a595-72609eab52d6",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16e4f1e6-7ba3-4bdc-a55e-b90d340646d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e090fa7-3469-4239-9eb7-4ee9e9b3df7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03275ed8-11f8-4b88-a44a-208b4710461e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "35a72a0f-e7a9-4af9-b513-1a78c0e6e023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "902ab408-b7a9-4050-bb4d-1a1fa9347f23",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77d0d1ab-6ca1-4279-bf34-01f19bcea09a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ddf5022-12dc-4191-9708-c40b1c590017"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "437e3898-1751-4992-8ad6-1241bf8964f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "92c46c9c-ef35-4fc2-be1f-b74a18f547b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "599dc9b2-7d8b-4591-b5e3-d73d7bbb1a7b",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7e512c3-86e8-44d3-819f-461bbdfc9092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "177cd345-14b5-4915-9927-6f919ff7bb16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8373f7e4-fe49-479b-8e2f-c91374bc6b96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7124256-7272-4eba-9200-00dd372c22fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0df3f1ba-a49b-412b-941f-7091a832c3ab",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d824eec-c1ab-4703-b132-f6b2f57dcf48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "842d6587-5491-4acb-9dff-a8cd00c91a6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62df81ac-8751-4f0c-b974-725863dda102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "539615c8-867e-4d23-9e81-f61333d3c37d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37197bb7-4cb8-45c6-95dc-bf3d15616f1c",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67280628-04d3-4fe5-a413-6b31b6e43a4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1211e480-fb7c-4b2a-9d06-582c89eb84fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08350243-c33c-4c4c-b59d-dbefe9377baa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a45c783c-a8f2-4d6d-a389-8a7132075070"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2f1cdca-e6bb-45ac-82fd-0a49b5ff84ee",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfb8b308-70ee-4a9a-8f16-2f6647143e08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5c5693b-6529-4c72-957b-84db1ec2925c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0edf5b9-6c39-447b-a23a-3f6ae3d51acf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4492f505-b964-4ac7-aa88-41a958d9de75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa929dfc-afca-4c9b-954c-84336676acb7",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af2e1bf6-d70b-4989-9a94-635565cdc878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b110584-bc51-4c44-9a7a-0e4b438128c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb21486f-e595-4f72-bba6-6da50d3495ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "87adf4c2-d0e1-4b46-b125-cf1d3aea3e25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88b03741-5470-4aac-8568-f2021982c4df",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa388efe-169e-4bf6-b6ef-90002f0e5eba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41546288-ca69-442a-9b2a-0436eec0a1fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "856d5904-254d-4053-849b-a846b3de6b00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1cd690cc-9af3-4534-adb9-5465dc1c230e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74b1da99-2f27-477c-bfaa-443d614c1e4b",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f60f9a58-3915-4b28-91a9-a9535a594003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84bb6555-1e7e-41b9-b5c0-c15436384989"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c00ad39-e9db-4970-bf97-fefaef4b634e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd28ec8a-6896-488d-9837-5b598d787cf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b87c1a9-eafb-465a-a3a3-636d6252ae33",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b182e518-b8e5-4b01-8e41-1c02d827df59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5d5635b-755c-48e0-9c0a-e7ddd30b7ba1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc598f24-32ce-4348-952a-e3a7c95c502f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a2c62e0-2a9c-4cbe-8e68-adbed7c17bdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ee5da92-f4ec-4751-8654-10d06a83f02f",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c8b7504-6f49-4509-836e-646ec149a3dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "181f95c3-4c02-4aea-845d-77125c8cef91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e7137b4-61b6-4f42-afaa-51d2af86ef4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "462b2756-55e5-4e59-b94a-ea30cc95dc34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab4d693f-a5d1-4271-b003-76281ec0389e",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c493bd0-fbee-4d9f-835d-fb73bc25bac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11782730-f94a-45dd-9006-04d0785d3527"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ea14676-fc60-498b-8949-d760e4b21af4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "df9ed3d5-eaef-4bcc-8184-1e9c00cedbdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9855014a-9e45-4f04-873a-a61c173fa6d5",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e92190c-14b6-48c8-a546-4fbe764baedc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "05a210f3-7575-40e2-b516-8284b9faf54e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "294b825c-23e5-4007-a776-0013f9d5bcee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fe0f9b8c-43b5-451f-b648-ff9d0ff24030"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18694533-61a5-482e-bf36-53a2f36a9003",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dde40e6a-8eec-4aae-8c48-761f42a1a939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "984ee876-9132-444e-bf57-69aa82cc09d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "164f15ae-55e0-44a6-bdc7-16a9ed1dfcec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d1af2fdd-05f8-451a-8d0a-d10cbbee81a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f75e1817-2b46-4fbe-8634-4fb9f75fe5cb",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a149fa99-36cb-40ad-ab68-3c2189e320d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0d444f4-e890-4485-8e30-c182ac311b83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb341ba7-91d4-41da-aea0-8a4f928d0390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "55505391-8deb-4412-b00b-fb636afca5fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c538f91b-e1da-4196-b087-1a1ea23b992d",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "734b330e-b5b8-4dfe-b731-26705f68d390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9b81f54-18cb-480d-ba97-21f79fb86443"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce845c9a-983d-432d-a2e5-5150e783ff96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1aa768ec-f862-47bf-b2f2-db5b8c5fefc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee7c5756-09b7-48c6-80ee-90790a161b90",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff840b90-0ac6-4db0-909e-00f13096f29a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "925867de-1a91-409c-b310-eeb56dbbb894"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71b430a5-8063-4642-9d1c-21209c8b0455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "12651b85-2e3a-4314-95e7-bb8f01d2c452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e03b314-bb29-4f55-a86d-665c9cbbe08b",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a427cb87-6ed9-4ec3-935f-523216443a91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9811f60-7205-44e5-9564-b3cc226b9880"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38ab1574-a74f-4b47-941d-18ae2fad2625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "05c2e536-89d8-4a19-84fd-3ba6f75d977b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "170ef8f9-4cb2-46ac-97d0-2e8eca220fd8",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8250db30-6061-48ba-bf01-2dcbba9a258f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ceb68f7-86e8-4ce2-a28c-7123dd11158a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7232326f-c408-40eb-9993-e35569fe4c80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "6c651c3a-5a19-4f38-949e-9ba7e7868dbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8d3aa9d-893a-486b-90fd-87b2af020689",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb921ac4-9c61-4b50-b25d-ee2d20f895a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bb0d321-c84e-46b7-8873-14e748015abd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2312570b-3a28-40cf-96b9-87deb9b0fbae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1af7a987-df12-41fd-8f2e-aed55527d997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "156dc200-641f-44b1-ba5a-1f7b53e83e3b",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2981768b-7d16-4d84-9216-786051493eee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce70f33b-e788-4db5-b3cd-9994e5fa3dc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ec6ca1e-a079-4186-b93c-632629aa4331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "7dd514e1-a19d-4894-a318-d65e3a5f4d45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1f81cf5-eb2f-485c-b187-4246497d490f",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3db082b9-ab22-47b7-b951-2ffa81438eb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b473ad68-a8b2-42c5-a7b3-342092d497e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6868f3b-7405-4940-9aa7-59e42dfeec0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5fd2300-e1f1-40e9-ae69-554267d43c8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce7b4545-c586-4831-83d1-86fac94ddc6c",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d82528fd-4c6e-46a2-a4ac-24de031ded6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de79ece2-bf94-442d-8e9b-d2d649a3ee7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9524edc5-06e8-4139-ae61-6b2a71241c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e636f131-29b5-4595-b6ca-1890a1eb1e9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b64204c-212d-4dbe-a15e-84bd2baab64e",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58d995dd-6e4a-4339-985c-732944e6dc02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "beeca8fe-b2ea-4f69-bf15-5843deb33c62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ec49bc4-5c2b-44ac-8172-d618b97a58b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0441d735-0d33-4944-bfff-4913eceef533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b32efbe4-6b95-44f3-b745-d1acdb197405",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6a6d5a0-4def-4149-9621-da73e9849f47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18ecd696-adbd-4364-b0ab-4c2fef537c03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be9b7e8e-94c7-4e1b-bb1c-4d36d6b590c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "278e0f07-694d-4811-8f33-c87f9dfe42da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc7c0e4e-6b60-46a7-8b2a-86b7db79f02b",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf494a74-7e33-4ec1-b457-649621d15e56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba6351d1-d23f-4568-a2b5-c1d6bee8a759"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6389910-c9da-4ede-9b44-8729fd401261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fdf0505d-8a75-486e-83f4-8d4d1ef4f5e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdba2110-0142-4577-bc11-d31d7818863e",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34b61fee-d813-46ff-acb4-74884f57b612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbf0d763-32e9-4f82-8083-b47bfac632af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9010ec8d-fe65-4642-b47e-e64739ea85a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "96287791-2b40-4d12-9d88-b2ed069e1a70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85325c54-4d2d-406b-844a-8403c56c3137",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44764667-2987-4403-8279-8c55cc29bc11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc60025a-1d3a-444c-a698-9edb19f89c4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13997b65-416c-4c7c-bc9d-584522b6e7da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "57651f8e-bb54-401c-be8f-0841630a14da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c043dc8a-b508-4889-a693-bf7ca7ef6c53",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90e9bc9f-a370-4d11-ba5c-d60b171169c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf2a10f6-d200-4696-ab71-1413165d0664"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dd5abbd-1569-4610-80ee-580a4b73704d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6d7dbe5-ba3c-4726-a4ce-f46c65fec9fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff581260-4b4b-406b-867c-ef186e1239c6",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f72b76cc-69a7-431b-bf5a-20ba04421ab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d90605a2-66ab-4176-a1e0-393ec826b5e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fab49e87-6130-4839-9dfb-005dafe4bd7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "33ce6e08-d363-4ba1-a8a2-f2bb009e267f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0a60f83-2a54-42ea-b067-0348ab73942f",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6043a95b-c412-45ee-850f-f7db496b030a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a318c553-fed2-40cd-aa90-81766c9e5f33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22257123-64dc-4bc1-b906-2a9519b39061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d8ea00e-4c62-432a-99f8-b35a84998a76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fedb4c3-3859-4afb-950f-28dc93d9d151",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a947a0c0-56d8-462f-b301-71994c7b72fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "975fa635-652c-4ac9-a70a-ffd4c65d3a1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "450c5e2f-72b0-4d7f-9467-f79620029ac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3f9ac05-733c-4812-8969-43a26ae0ad67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecab98be-5dcf-451c-bded-47113a407565",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "515e442a-91d9-45aa-ad16-b4f27340e4a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "241289ed-569b-4ca9-b9fb-442e056f4886"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fdc9610-be4e-4409-ae62-d15eb6b457b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5a0f3cd7-f233-4973-b98b-fe4fca12ac3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05151c84-acae-4606-9da9-6ddb5f072c51",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c31b984b-5f64-4514-a1f1-32c542cc4b9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e09e9cf2-25bc-4cfa-8a55-5b915bc61fc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfe553fc-fc5f-497f-8118-5b01ad95a130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "fca1fc91-fc07-4c06-8e7e-d4022da6ceeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d0fab4d-603e-4baf-a370-ec71e9a8120d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0091767c-4761-4d98-bb1b-e8f619bf3a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b27174b-5a96-4b64-b16d-967a398821b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dd32d7f-177f-4ba5-88e2-6e5ac343811a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f2de49be-fbdc-460e-ab6b-d5c497ba3b26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aab87e78-84fe-4a0f-b5a6-8d11ebd28547",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dd5b2fb-d118-4629-8d71-263afc102249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a2a4a39-51d7-40cc-bc01-5e01dcdb3782"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be0e2a5d-f311-47c0-b3d8-4995f94a59e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "687ab050-8f2d-47be-8014-59f36de3472d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11b0dcda-fa4b-4f70-bc86-37f798778c16",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adaec16d-298b-41a7-b40a-a03307b6da0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94d0f11c-0818-4e97-bc62-54f926a1af4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34e8b599-80b3-42bc-8a93-228dd94657e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "dbdfbd6a-5384-4c1b-b3c7-a9e366394c1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11266cc5-78dd-4dc3-8692-ba2e870df4ce",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e313d4dc-2ac8-411b-a58a-837f0dbd3938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b48213e-f1ce-464c-98f9-a46d044f6604"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0f59264-92f8-46fd-b084-27e3a4f923ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "27c9d49e-cf78-4900-86c2-a5ab8db832d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a5c8a4c-028b-458d-a399-65716edc94c8",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ff0b27d-6219-4e00-ba3a-367dc135cd33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7de66d3-b775-4613-981e-74c890283487"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92104876-873b-45be-a272-3a6d65ee0296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "7dbd561f-feb9-4ece-9ffc-8d462eb9af15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b4ae231-0f07-4353-b8b8-3ce78127b0b5",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "290650f0-5afc-41c6-81fa-a82a4252261d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89aebcca-607c-4bdc-b84e-3cc01677c033"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e715b06-0684-401c-8536-1a9e8d9d33b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "991e2c10-14f6-4d97-9d74-3387dae3cb28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d95e9e2-d1a6-481b-8544-9aff47862f0c",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6936d8d-8c01-42ba-b67f-8464feede5fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8abcc147-6281-4a9f-8735-3995f968cba4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d4bfd9f-7938-4d5d-80b5-fa5275c44bd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "11a8a346-f193-413d-b371-982705673315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbe5265a-9161-4fc0-8764-9b6171129f65",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0799a5c7-f565-423f-92b2-a340416345bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db07c12c-16cc-4df9-898a-c9236f81b4da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "883537a3-d8ae-4ee2-8754-7bb369b03a13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d7c549f-c075-4d29-8d71-b488c429bbf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "432f158e-62bb-4c4b-b053-8913cc7b564c",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df25d931-92ed-4852-ae6c-65546e9f9764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f7cafb4-e0b3-40df-805c-7066fd77037d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e6e8400-b66c-473c-b659-1468fc9cb1b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "541b1050-3479-4dc2-ab22-fe0673465770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58b5d8c7-39ae-4152-9fce-9db21c4b3ca2",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aab18409-0793-4eb8-9acb-bfd075d4c94d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd06a4b3-c390-405f-8c5d-de33e72b06d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ad83454-67c7-4032-82af-f7ffb214567f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "05846874-863e-4048-bc2f-0e0fe65d204a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57e342ab-e077-4670-b23d-fec840c0da31",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1bf32ab-86a0-40b4-8d60-24f47dbdda58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe47a671-100d-4f6d-b8a1-a82d1f830347"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31c0bf38-f065-4f7f-9c97-efc3cf27d3c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1271be5-1501-4803-9b32-0f51852038d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "728ebd7b-d5e0-4562-86d2-ef980d9d3036",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45af65c8-595b-40a0-80ea-ecf6eaaeb24f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac5cd235-ba35-4847-b3ae-62eabed6c130"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef422e62-810d-4c81-af55-92101301d3d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6bb76ae5-bdca-4af2-b19a-e707de4ff044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30554e5a-f192-4804-a0ae-897fe569142d",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d393f3a-67cd-4d15-af2f-44d76563360e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27a60c51-090e-4993-9610-4abadd250357"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f431935c-54ed-41b3-b4ca-e4fd32538dfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7fc2c411-8cca-47a9-a232-45085c529827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a7427cb-0475-494c-8238-2163ae38b32a",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa26d60b-3d90-4392-848f-5c0b7132a049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1c10188-d8a2-4ae2-a41b-3bdb6cb7c032"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43cc2066-b619-42fc-9803-fa26399ea99a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5759f151-aef6-4154-8d9d-ceff4ced3202"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa7df7de-29bd-4861-9a8c-a50b58bdcc9b",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd73087c-5475-4d70-88ab-25296aea3d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0108709e-e1b5-459b-b161-ddec3497ee61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dc7971b-7373-42de-b3c4-ec9c9c19d3cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e78336d-0d40-4c7b-9fa7-7b60b39bf264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14917aa3-f00c-44cd-bf1c-da5c01e5b7ad",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "641d3ef9-45a6-461e-952d-703d005b4f52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa0eaef0-49f3-4189-9fca-8cffe18d1881"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "879c7422-2f91-41b6-9866-9b5e15bf4aa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6c44f278-4dcd-4a08-b398-ccfc5880f0ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a14afda4-bee9-4130-bed9-04cd567110c1",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fe97f64-cfab-4a69-a459-e29850d3f417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6ee2f0c-357b-4a1a-a156-f3ee1178d940"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce70c3f8-be0a-4e48-b069-4465d03f9f53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0c18868a-57bb-417f-831b-4fe369a466ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da9a61e0-dbf4-43f7-b003-5ba6545fd425",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e6cda3a-fc56-4f0a-94ab-a927e3f4c7ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fec97790-7572-41fb-a294-3e356b2b0f47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8f7c26a-b874-41e9-948c-49a7ca01c5e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "643311b9-545d-4eab-91f1-32cb03f45cea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c34fb0d-5cef-4d80-8004-54d7e12a822a",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67d13a3d-be15-4699-a8d4-4bad3b0f883f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55e7aae5-1af0-4a24-94d1-e16e73fa5882"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70a81e77-0949-4294-839f-36266091b1fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "236c33fa-29d4-47f4-b5aa-e254fab1b6e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e54e41-ac27-4a12-b193-4661b237e9ca",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4196fd4-f716-4fec-82b3-0959ea08ac77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba95a4e5-f12b-4fb6-a978-065efbdc119e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b744ec1d-f6c4-4c54-9a0b-b6ac7f2e380d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f86f92b8-c5cf-470d-aa50-8aa4d90c7f6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a381f0eb-d9df-4099-8621-90ffc8fefc2a",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e99e581-23e0-4b86-aeab-b40689fb5e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "578a3838-5445-4685-9638-9e5aff23486f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "505dafdd-768f-410b-bbd3-fcad7cc0e22c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "15b6ea5a-89da-464b-a908-e652e3081db1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "050214e4-3754-4a62-8d6d-838150db150b",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f328f23d-d681-45ee-9ff5-b327d38c2232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4bb5266-9cca-406f-9409-f6ab8a217fcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b067125e-bb96-41b6-8f87-c6a327d0bb26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fbf1eb22-7c3e-491a-8ace-6c10b7e716f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5e4090c-09b7-4e4c-8613-993de64f6033",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aa6ba4a-ad1f-49cc-bd98-b118bb89f998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48cf8bf0-0050-4391-80d4-debf3e864c5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b41fc71-d29d-4561-95cd-9c9ed76a6d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7bb3a800-3f74-429b-b36a-a1bbff7088c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0c85324-084f-455c-8d2c-ffaf83588268",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6ba5f4b-ef22-4bd4-acd2-fe0d8c175761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66737f43-1929-4808-812a-838c8cec4f11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52009c7d-380d-45bb-9ffc-1f501623ab05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e5e3edc-1e2d-4eaf-a9d1-c7552fae8c0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f4c5d0f-aab6-470c-b8d3-e00595cc2126",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2888dd4-2610-400d-bc9f-c5abf566b717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26b24309-1bdd-403e-92ee-78fa59495fd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "697da876-e52c-40e0-8296-71b6a9de2c94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a281413-79f9-46dd-9ddd-bac20060e0b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7e10b41-a4fa-490c-a8ce-66edb6a70a03",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dce75aa-903a-4859-8ebf-1981fade6bd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a8463fe-5fc5-4dfd-bb06-bc412002626e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7fbbcf8-ac7c-4d74-bb78-b2f4d1873bc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fc468ca-7fda-417b-bfd3-536f248dbec4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "518e3acf-099c-4be1-a532-088f42e505b1",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56e0d32e-b8b9-44f1-8847-a60790e8a019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a5efdc7-67dc-497d-8614-b5a6cfe50906"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e775223f-a532-480f-a729-47cbe5ebc7a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9193e42c-1faf-4ecf-93a4-36119628f3bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3e7ff0d-6ce2-4a2a-8b28-64b4d438da0d",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "886ccd95-b4ab-4f8a-983b-471908bb38d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94664774-ee49-42b9-bdf6-0d04f1235310"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dfe8a3a-d708-4f50-bb92-4949824b82c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "46762861-ad44-48db-b352-d9eb90cab394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15e484c0-072e-4afa-bf98-2c7d50a750a8",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a928b41-1a23-4ed4-bf6d-fd41225ba709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1657f2b-4a44-42eb-9550-2c250b88a7f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce3fe18d-9f4c-4cbb-9f44-56669d1a3e48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c10dd4e1-5494-4ecc-9666-22164204980a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8aadc3a-42cb-4b3c-93c7-0b6053a2604c",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abea8403-f013-428e-a9ac-274dca1c45d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a60d894b-4e6e-4d19-84cf-1ca72d195b57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9abcd902-765b-469d-b187-fc00ac37eff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9f862736-32d4-40bf-b428-80af7d03a35c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16677141-eb51-4aa9-a2ef-36b73e9bc51b",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aa19326-603f-430a-add4-3c4e5f42bf90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c12a0090-fb03-40f2-a6d5-175a1a33cc9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a579f4e9-0675-402c-a176-72c5dcef5df5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "20e154b5-1155-4299-a351-443d419e0c14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "794c8007-d0d6-4519-ab52-fc8610a10c26",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "147cbd2c-4590-4a6e-a7e0-71227293ec4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "303bbbd3-5b19-4ccb-8811-451055d07b6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b577d66c-41fe-4750-be51-aa4a49b5a181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb63bc03-be12-461b-a713-74971dd1c6d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59f0a433-ea30-410b-ae14-b5baed94d615",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fbd0755-8035-497b-bf26-9a83a6537398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49f2add3-1323-4870-ab89-87bedb24e206"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eb9c9f9-062c-477d-923a-7ba8a4c0fa52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4984e8a3-cb1f-4b2d-8a41-8cd9a12ab68c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40bb180c-3a31-4b9f-9f82-a71573b8e1b7",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f5e1ad9-12ba-4d73-98b5-53648b7bd4ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70682492-8831-46ee-a715-2b3b4ba3d3fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43c1048e-35c5-435b-9a14-7000a1e3f172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "42f226ad-7cde-472b-ab31-c02326d4dfa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc6d98be-a70c-40cb-8ee0-698a90c995ca",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee8bed25-e7ac-469a-83fe-e6f235bc27a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "66302ba9-d5bd-49a6-bf72-4c1910c88e5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21aeda63-994c-42de-9d84-c5a0676476ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "2cd9e5c2-03f4-4bdf-b12f-302419b117ec"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f2a1bad1-b86c-4fb0-b751-264e95ce8031",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "46dc60fa-4e1c-484f-a41e-1fc3183391ad",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8c33a35-9426-478e-b603-c1608f4a8908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "45e55e87-6123-4bbb-a60c-38ede641b60d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ac27869-0865-4da3-bdf5-063010338543",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "458d8830-bc05-482e-bb07-7b9144b4184a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a80b1182-d870-452e-af1f-13e27ae81d87",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "519d8487-7caf-4871-b55a-d2c02ecd06a8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "10f0a07a-e6c4-4691-864a-030e0820bc6f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "edc32ec0-ac57-4891-8d3c-bf6f9075935a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f9080a2c-0daf-4f89-84a0-33df1093027c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e3acdb5e-9323-485c-9951-846484ad6e74"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "993a4daf-b297-4fc8-940a-d01d11772d27",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "98d92efd-b0f0-446a-a1ac-129e1fb62d4d"
                }
              }
            ]
          },
          {
            "id": "7c7dc2d5-5e67-40fd-add7-0d5a4072ae26",
            "name": "Positive Testing",
            "item": [
              {
                "id": "731cf3fc-1494-41ab-a6c6-66eebb3b4b32",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0d0a39b3-e59a-4074-925a-f8ff9402c2f8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a486d228-a14b-45ee-af0a-c69ef731dc32"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "237fb88c-b5e3-45fa-9655-03893b68e67b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "610ef3d5-aea7-4131-81d2-83190a40e6e8"
                    }
                  }
                ]
              },
              {
                "id": "4f9cf2c0-1269-45b6-a0d6-0e22cefa1b67",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9efc1029-1e89-4388-a5fb-e9518b79ca0e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3d49f24a-cc30-495d-8649-41a5c112a841"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "706d9ea2-d8ba-4470-b595-021dc1e6d9f9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "71364ba9-be6e-48f3-961c-74cc50026e05"
                    }
                  }
                ]
              },
              {
                "id": "34a3ebf7-34ca-4f96-ab2f-4a9e5f7df977",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d8561143-f1ce-4933-b986-3b34fecd37ab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8ce73cb5-dcae-40c0-acd6-7bedf829b1d7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ae832f42-4d7f-433c-bcbc-fbaa23b9ac93",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "83c9630e-c902-4c1e-b905-91b61cb78708"
                    }
                  }
                ]
              },
              {
                "id": "0389e94c-4c96-4cea-880d-e8c4a7fc604d",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ca6a088-046c-4e4a-bf53-97bc4aca383d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0899b9dd-0341-4395-ad62-4fc434644e73"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4dc33fae-8916-4b5d-a97b-2d7722396538",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "19bd62ac-fe27-40f1-ad77-c184ad054e10"
                    }
                  }
                ]
              },
              {
                "id": "46450cdd-cc42-48d3-8b5d-31cd3e256277",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "47000201-649d-4df2-83b1-44cf37c4cf66",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3f2a4d2c-299e-4716-827c-37a03047cb8a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "637e6387-38ca-4051-b0bf-c7431add45ae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "f53ddc50-5467-4527-8442-d37764af36b3"
                    }
                  }
                ]
              },
              {
                "id": "ac8b4157-3b48-40c4-8463-669c16ab62a4",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c6e68451-853a-4ddb-a89a-817dcdcb4a3f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3667ed79-ea98-4420-8e52-202c28bd5d81"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9c76dcc8-b660-43c6-8901-f0ee0a9a79d7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f4a28fe0-daac-4a85-96b6-5f447da5fbbb"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1018d19d-bfa0-431e-93a3-7e89149000c5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f02af948-5aee-446d-913b-d79418de6b4c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a4b768d7-8de3-4cce-aed2-5d2eb094ed90",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0e3950e5-7e50-4e18-9112-6c6915dcd12f"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8ce0f16d-822b-4e60-ac51-716f37cc08b2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "af6e34ca-93b0-4ac3-95f4-6cf1aaca8738"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2f7c15d4-2d0c-492c-a317-e535782d8fe0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8186fd21-82ec-4ed3-b2a4-2261e6b7f0aa"
            }
          }
        ]
      },
      {
        "id": "ef923cc2-5bb0-427a-9473-c97ad28ef003",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "62a6e525-f0d6-456d-b781-b7857895fb7c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9b151d4c-fc91-478f-ab2d-9601bd45a05d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3a29fa6b-2c47-47c8-8a3a-f6eea8d61f36",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdc7d845-2323-4d5a-b3cf-d2491fe9513f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "006cb98d-06af-47c3-8fea-6dfe4b4143b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "013677bb-7f4c-486d-8d24-ffb498a3d010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ab92dcd-fdd8-4727-bbd7-c1fb03ce71c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "145f3ed5-8b21-4671-ab19-a4011053ded2",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b418214-fb0a-48ea-81bb-dddafa36b57a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55a35912-01a5-470e-bdb8-8e46bf2470da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eed4839-b0ca-41f7-ad77-899dee064faf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f58844d8-d4b4-4b9a-9434-4c7763c8a90d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba2068eb-09bb-4718-b6a5-0ec1e20d3531",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ced7ec66-5675-4bd7-86ad-3a71fa540bfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fea74f65-d616-409f-ac61-e222bc67c679"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ee81ea0-8390-40d6-9977-54edbc1f86be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e22232cd-7a67-4910-86a4-de70fa19b49d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e96472b2-28ae-4b51-aaa1-6c51b1cbb8aa",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "955f6550-1320-404b-ab89-db550fda303b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d12edb16-16eb-4727-9b15-2521e2fa2e78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "984ecf7f-0529-4780-9c1e-56b32936970b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0af8bd1-50c6-401f-a441-e45007ad47ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43dbeb30-72cf-4047-b6f6-05c28d21984c",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82ddf687-1a5f-4aaf-9a50-c5f930945bdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dd58aff-6f40-4d21-ae4c-47f06c94229d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe550b62-7fe4-4caf-9465-c75c2f8537aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c509d01-c40a-4d6d-949e-b39a278a5da1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a83c4e0-fa12-4b85-927e-397fea82edf0",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "905ec9f6-3c51-4d41-a3bc-7bb83aadb797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f60842b-4bef-454e-a8fb-aad3cf7d73f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d757455-f0ca-4447-85a3-6a082887a52f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e1c053a7-dead-43e2-acbd-b1ca788fe465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44842ea4-1b4b-4910-92a0-7a27d594139f",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfba422b-3573-40ac-a00a-2ee19ef27932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "666d71bf-99e6-4247-ad29-4dfecdc9efb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "929b743c-38de-4301-9d65-dfac2912eae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e2017e0-326a-49b4-a09d-1b27d3730a00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca98dd35-b91c-432a-9707-f6d75f56e3a5",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64e6adbc-14c6-4463-a801-6397a552c580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0d9ad74-7ebe-4670-b77f-f2c6a6523ec8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c9443c0-7e9b-479b-aec4-fb36ffab2467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd8e138a-308a-4c35-ac05-c1d9e29fc650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dba4a24-9be4-474c-866e-d0793cea7539",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b72fecf4-e7ba-474d-a1ca-7afd9b5615ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c8931ef-58a5-4868-bdb8-9d9710667f0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b82ae31-f4b6-4710-ad82-642017102952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ecf97c4-3ccc-486c-9137-30901be97ae0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c803bfb8-a207-49c6-b72b-e46f9e5f8906",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "033f9d9a-ff0b-41dc-b5e8-31b2e3b6bc7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fd21174-8811-4537-84ec-31fcfb762d61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35abf989-fb49-4244-a32a-f194f582372a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a0c6802-ea60-467b-baa7-3258e1766695"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d5e13f2-4d58-4f8c-9174-9be5d5f37cc2",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f853c55-4083-4a7c-84db-62e6c2a6b550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d243588-2e0c-421d-a708-944bdf0c1388"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56a92854-db63-4bb5-85d7-4b53bacf2175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "17f48fc4-92ed-4073-adca-c399a3f490b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83b223be-ea35-4fe1-9bab-f638142a025c",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d5316e0-180a-4528-bf66-cc69084602d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d7a5e04-bbab-4ec3-88b6-cf9bd22b021e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a730866-5d58-45ec-aca2-68e01c747d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "af318d38-cb7b-45fd-900b-24aa0a399589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce543f3a-be9f-4087-9173-145d2ec40969",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4850eb82-c021-423a-a1dc-b90d20b03b95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "285de5a4-1aea-4a81-afad-20e73c0914e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f595064-a38f-4827-905b-dc4efe01bcee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ee087d0-d6f0-49a2-a3b1-6728585ea8df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf7974b2-ff23-49be-96fa-ee4a206446e3",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69f93310-ab44-47cf-a027-d4b0c8aa14d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c071cfe6-08e9-4191-b483-6a65701c82b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f3ae8aa-8d83-43b7-9bc2-7279abde277c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "0488a3db-bf8f-4d18-8288-48200ce61236"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6882ee98-12be-44ca-ab3d-e97a1a01389f",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b7bad91-530c-41c2-bc19-938b64117f4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c2ea671-461c-4420-8292-54b66e0b8738"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdae523f-7f5c-4509-9f19-0e70d743bbd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "1adf81cc-f2e9-4bfb-a6ea-0131f1ce98bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d62e471f-e86c-4c97-8afb-98adbab4b320",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a8c762e-46a7-4007-8975-94dab4eec59a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05e97148-7d46-4566-b9a9-d71b9f37193d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df2c2ed7-4946-43c0-82a3-31c3500fcdb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "9fb3332d-999b-46d6-a39b-4bd84b99091c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa6bb1d9-2f4b-49d1-9f92-bde26b0cb2f6",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "964b9f38-6793-4064-9788-63446ad6257c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e9bf836-6410-48c4-ad87-5dc085e25f47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b473793-5d60-4bfe-9d67-707f60922fde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "47bf505a-a20a-4e1d-8bf6-34009c062013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07bfafa9-f91a-4761-a134-fdcaab267f60",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "579c6315-12d3-4aa1-b9b3-7fb0683e3802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d88efaa-e032-4736-b1df-a2416acebd60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76300abf-8c63-4c0a-9cdc-75998c1c9677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "07f885e5-6a45-482a-846b-15af2beb6d67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e785639-fcf5-4d46-9eed-bdd5cfd5a6ad",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eba964a-4a96-4950-9cdd-f7ee661bd940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c95c072-ad81-4c34-8650-6803526ae7c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c725ae42-bf32-4e1b-8b5e-ba44694be180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "457fded4-2400-4037-9950-25e31672ce4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2433e044-f284-4f4c-baf5-145460281c51",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68684c7e-52da-4a32-82e5-ea2c4edd8a77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "849c4946-952d-4b52-a8ea-24d101b46efd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2481816-526e-4dd3-918b-4b688d71dad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a0458ec-1310-4a7a-88de-b6a27ff60289"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8d17405-d5a7-4453-8f55-3e93f9a4cdf7",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d36ba9a-55c9-42be-8543-d195b6d7f74d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b2a733d-b46e-4e15-8691-724b6e9badec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b6ccae6-3801-4d78-ac68-2c1d0003f188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e133ad16-cb0e-40af-8503-435b8955f420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdbbbbde-e3a7-4eca-ae9d-99bc250bdf9c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dd3d0f2-167b-492d-b116-cce032e4629b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8573baf5-55d9-4329-8307-8c08ab785cc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2a7a14b-5190-4c10-983e-7c51a1d44468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "857e6e39-853b-41e5-984f-d72c03266e67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebc97960-8e66-4cdd-9a38-5b61e513cf14",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8b0ca20-5900-44d6-906f-71f121e997af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9204a5e-3f00-4f30-97ba-a800c15cb9e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32b50361-67fc-42b8-a333-b0c43e99e18e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "595efab2-dcb5-4d6d-9350-4c5b16a79fac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ee3f660-c617-4bcf-9916-17ce7c5e4452",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4127f83c-eccf-488a-8f27-8d489e3b05d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac8ff4e7-dd63-43df-a025-6f2e8031c9fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f6f2b19-925e-4210-8368-d69a5626f8ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9e57c1a-3145-44b6-ab3e-b710977ff270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42f28441-1dbf-4432-b603-5f59a7f73048",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4535a074-fe06-40af-b6a8-10b3e5855e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "405b97c9-c492-4d61-8fd7-7028111702e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8732b05e-bf19-4207-9637-fe7d115457a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0fe096c2-5f30-42bd-b664-b708684d2ff4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8514062d-47bc-4b85-bbc5-22d45df27a01",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0914208d-3df9-4971-b4d4-fc8c6dd5eee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92ed0b74-566d-41a3-ad38-dc8bd83f7149"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e16ad71-9ef7-49da-a61f-831a0d095ca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "89a1591c-778b-467e-b51a-5b2124800f50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cdb77e9-1d1a-403d-b146-7b33cf8e070c",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2ee39e2-7204-4d3f-9e67-dc69b4637e4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ef8196d-c76a-4f1e-a253-03141554862d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "968e3d6a-c81c-4bcf-8e8e-21a41a6aec1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "27f3201e-d7e2-4189-ace0-f2c49d781995"
                        }
                      }
                    ]
                  },
                  {
                    "id": "200c9fb0-cac1-4aef-a143-434a64ef0f5e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcd419a5-bcd0-46e8-845d-49d3bea9e8d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97436378-462c-49ec-acf4-6240c3a3063e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52fee5f1-c899-43fa-b55b-ed74c66584ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "26da95ed-ee1e-49fd-af7a-37235c826472"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08a7c00a-5dde-4de9-8feb-f235d7cb05fa",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "167aea6a-4a27-4275-a231-eab087f426ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2160666b-3140-4aa4-975b-f7d7db73500c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2186ec74-5835-4220-be93-4b90f18a2efe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "94ef40f8-8abc-4c4c-90e6-5be0ba9ae01b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb43a380-dc34-44a1-ad8a-85edc9368092",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ab2a1bb-5acd-4bda-9a47-c42133b31aaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a8815a1-1914-4712-a29c-d67664156730"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab7dd7ef-0219-4a4b-a74b-32f432975ac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c93d61bc-cc5d-410c-8198-de9582ddf1be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58a3c4cc-27e4-4cf5-a328-69691c74f54d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9424e41-539a-41a8-9bfc-73593230ecf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "544b2c2c-8778-4cb0-b622-49492f6cb5be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f125076-305d-4b4d-a347-2a38ef2a5cb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "84fa52d6-619c-48f2-9a58-8a49cf10f6ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06481438-64fe-444a-852e-312cea5d1401",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33e499c5-3795-4b95-8913-a8bbfe4f3a88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a43c9876-4e4a-4fb6-9724-de417b4031e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "930a02b8-3e59-4a5a-876c-4d2726e6f6f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c122efbc-c997-4eac-ae19-7d65c7604116"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bb17b3f3-3c57-4574-aedb-34d822d4890c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "441e2531-21cb-4dd2-ac13-916699793d06",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1509bd7-c398-48f5-ae87-0689d4dff495",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "617d4939-0b5f-416b-b7d3-4f44c09af129"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef92a509-2322-4275-8c33-6e4947d4d726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "42ab68a7-834a-45e6-a340-132ce8c21bfc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1794d5ac-893e-4aa7-8f77-62127d13d991",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4666f71c-5f61-4ecd-8573-d2c8c4903152"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fe10c0cd-89e7-4a73-b568-113337f2fe39",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0e99a8ae-b91f-4f04-b17e-9abc22999d19"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "42a4d463-de82-4640-972c-975cfe983144",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4ef0b9ff-2fe8-41e1-9ceb-56255ba1e55b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4b76b0b9-d29a-4fba-a9df-cd6373398760",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e79f7e01-4dee-44ec-b734-8e6f8c2dad71"
            }
          }
        ]
      },
      {
        "id": "aab9d419-651d-4dcb-93f8-71321f780fe9",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "80e37d1b-e3c7-4f40-b875-8a0333daa97e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "817cb0ad-4a4c-4cd4-a17a-a91e285d210c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "55361b1a-cfe1-4a67-88e7-63c5d4046fed",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11456f6c-802e-4324-b54b-6a3dd06ec684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d47d7035-179b-4a0a-aeb8-dcb7ed8021c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd1f4bf4-3461-4349-a300-cba636109a28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "fea6ec23-e640-491a-a2ea-1dd8bfc20b6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "509e48d5-e09f-45e1-bdf6-273ced6f9edb",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64795d17-47a2-4639-a63a-8db77af60b0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4507a86-8fca-4ab0-9aa3-2e85b1014678"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1440adb7-8d6b-4ce2-9085-7faef8c50bee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b9f16fa-8683-4a25-b18d-6755af50ee08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "605b8d97-fe13-415b-8d77-9f6c1a7abf95",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88f0910f-f119-4047-9839-eb1aaf2174df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e44e3bbd-f1ad-4732-a2bf-951189bbe17e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb3f1750-53f7-4926-a317-e3c857cfbf94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "258a3902-3062-4d5c-be4e-b2f1f265ef11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2d05aad-a6e4-42a8-9bf2-a121ba612baf",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0270ce8e-bc54-40a1-abbd-b48f589ecca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fc26c68-5bf9-40e3-bc49-efb664866542"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae313597-1243-4e88-b839-7b343908323c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7214b3fe-19c5-4d18-8f60-687ce498d1de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c01012a-0db2-49b8-91f4-473434ef78b9",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "498ca330-1915-47ad-8796-4030cb35aeb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87b4d8f4-0601-43cc-9028-e405737db5da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4da7889-ee58-4aa1-bdcf-3c96aacfff54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "936763f7-744b-424c-853f-4eec522d0526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2537ccca-f222-4f40-ac85-4727535350d0",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89f51a97-9acd-4003-b722-d424c38749a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ceedda5-0706-47f5-b13b-8c6be12baa6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb88ef73-090c-4dec-86da-ff11aea6be94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f2a06b03-d51f-498a-bd2f-7f0143e67da5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abf1c25c-59bb-40cf-ba8d-8716be74e96c",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8406f88e-5c15-4f7e-ad95-abe9d75be633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8f584f2-5bcd-4425-8a70-05d4ad520038"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8bf3e3c-3077-4f32-b376-d565198a4368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "fcab36a4-d8ec-49f8-96cf-a732f59300d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db23d2f8-84bb-40e6-8e09-43b5e4ae1b8e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee0f2a3-9b17-4f98-bc68-6a27eddc7553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f10ffcd-f5fd-4e20-baf2-6ac307c6f47f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98d49ca1-cdcc-46ed-8101-ffed77082742",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "76330265-f8e6-4f4c-898a-8b221032d012"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07774fca-d9b7-4567-89fd-e66a680f6ba7",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38616cda-2914-4923-b359-89db276b9c7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9e04a4e-92b3-4807-9889-2ba7a43f28ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffcdc0ef-e44c-4689-ac72-388846ae5831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f3404b0-558a-4616-a502-accb3f2604c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8a33e3c-2b9d-496f-96f6-e9d8a7b0a2b0",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27d3bb2b-320e-42d2-913c-e1127ff8538e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc54a6cf-7742-45f5-bc00-c49241e5fe5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73a7127d-a2dc-4b6a-b3b8-6257d3b93d09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b44bfb5c-d5fc-40a5-bf3d-12d16f53dc96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c240d3b4-10c7-4dab-b05c-80e1131b7dbe",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cf46d63-bd05-4f7d-93e1-464b5725004d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dd5bcb4-79d4-48f4-8757-55935e40fc66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f8cc0d8-0640-4a6a-87ea-19460257b834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "aa407184-c2dc-4254-bb7b-6b3316826612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9765aa44-08d9-4302-9486-f3dd322e8bf7",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad3ab57b-c848-4d48-8684-784f554ba27a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55387b7a-8f5b-4254-8115-1da0b3852973"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c1a435d-e6fe-4901-8f36-0894ca706ddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "eade6b0c-792d-4484-81a5-4a620d505c02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "298b6a10-7511-46fc-a954-15ccd95e066e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58a03c6a-0ced-4668-a3c3-81c58e97d149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f61422fe-c426-4723-b8b4-e0583e711aa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12d0a6d4-2678-44ba-86dd-78b0b911fe4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "933c597d-4fed-4f83-8a0d-59c53f21c54e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d4171d0-2903-4948-9e5c-948302e9a48b",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d134b9fb-3585-4224-bfbd-9c5df5230b95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e54d24b3-d019-4b15-bb37-db04a82d9b92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c577d20-8818-4036-8809-4650c53870c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c1eab76-bb5a-4f18-ab0d-52e7dfc803a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16b13f6a-8fd0-406e-a88b-81df0513b6f4",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7415c881-f6cc-4642-a6bd-70baba010940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef3383fe-d54b-4ba6-acc3-1898b0c9497c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55fe5dcc-6377-4084-9b38-9710012dcbb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ea0c941-8495-4b07-ade9-a3ac3e719747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8265b84c-1e86-497d-af80-70524b73d719",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4af9af9f-b326-4e1d-8434-d8f1f4db2de5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c60f467-ca1e-4bd8-bf36-baffe1554d0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1083d0fc-c30b-4898-92bf-2cc4149cf2ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc3abc46-8e01-466d-a31d-e7cd6489e52a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1241b6f-3681-40d3-86f4-bd575dd96119",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc3ebbe5-413e-413a-a1cf-fcd9bc4ccd0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57413304-ea63-447e-822f-a473d3465a13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6be8e6bf-bd63-49ce-8bae-77a74e16a760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e5e6728-9e84-42bf-afb0-a012b3e6182c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c1cfd16-cbb7-4c22-860d-6cf5063674dd",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "352d4877-f376-477a-9505-08b5fdaba17a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4059b90-a5bf-46ce-bac9-6c8305401456"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7881c43a-7736-4571-b3d9-c80209d72535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "02fe7a58-b663-49a1-af5b-2024a2d9c259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06977dba-81f2-462f-9cbe-eda0661d22e6",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32a89359-4a89-44a8-994a-98ed1c14300e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65554ffc-5b8d-4ee0-98e8-d5b551ef4a7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c96ed34-a585-4e59-9a2c-9bdc9c1a331b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7aa3963b-1fc2-42fd-9b3c-c84e01828a9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aeaf925-fb28-4fae-be6b-b654b587a62f",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1765236-e4bc-41f4-a1bb-20aa8fb70ab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1384409b-9647-4e7a-a6b0-8b7d4d386455"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ce8454f-2b19-4380-bb17-d7683f0ff415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da38511d-47ae-42ed-8720-50966a4901b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d299ecee-478d-4f79-bfd2-7623fbbf50fe",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12a0521c-b662-4dd2-8ef5-bae8908cee7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f3e7082-f04d-4a36-88a8-5bcd0cd0c854"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bf1dc6a-6d30-4dcb-9001-b5268bcfeb4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a41c22a2-ed26-4f00-9550-1f5a7ccd80e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acc5747c-e961-4024-8e67-4216759d8a8a",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af424d06-0fd3-4a16-982b-293303009de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb30138f-04e2-4d99-88f1-acad43b332a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26a377bf-778d-49e0-8537-f4f9e8783075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "15a88d99-9cf3-43fe-a4cb-aad456e860fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22f940d3-4541-4e69-ba7b-5311fa1592e4",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60d08d52-0324-41ae-99cf-d00498081800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42d6f626-3919-462e-8811-50740338148f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f471d6b-ed01-4256-b4e6-0bb8f50f8c77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4f6aa04-599b-4a35-bf84-d93dfd5ad1fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e81c601-f2bf-4325-9c58-cf5413d5f7af",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "040c18a9-5111-4936-86db-c2d5bee79367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "babb82e1-be16-4e29-b7ad-989c2d86f6d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36533fcc-b1ac-499d-88c8-109e576421f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a91e8fb0-661a-4654-849f-d535c475ec49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "073f0029-eda5-40a2-95ab-3a3569236527",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d11bd3d-54f1-4ff9-986a-f2dc672315dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad2cde16-9eb1-4aef-889b-94eb02703004"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aade56a-3eda-427d-8cf7-c5730ff86d87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40632171-e57b-4f48-ac59-2cf9a478697a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4703927e-9957-4513-a259-a6c8c09467d2",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a43f4a7-5e92-463b-8194-14a8e3913bdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "184c0538-b51e-4325-97e5-a262076ff8f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a45663f5-4ab4-4e0e-988e-fcec7005393d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a81f897f-c851-4dcd-b1f9-f9d69578ed6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dd2bd77-6bbb-4a87-b359-7b40ecaf80f1",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bd4e7d9-b8aa-4456-b795-c9f3d2d453eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9d9f145-3fd1-4bd4-860d-45516cacc192"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74a33ee0-7fc5-4c85-86ab-8fb51f1c222d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "11b6b203-8e36-4bb0-8a55-0b1d12e1efe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57da3ceb-0ee8-4711-83a1-1541aa8739b8",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7169c917-f368-41c5-98fc-a4562085d000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8aba1b9-0cde-4b54-8c73-3dc50eb11456"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "697cca1a-a313-41bb-8573-c823054a31f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b0a6950-6302-4c99-9b9f-d41c7c95c73b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cc0d3c2-4455-414e-bd25-5794f328c9c3",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0293b5f9-3809-4314-9682-f3c40ed12ffd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83bdbdb2-4afe-4aea-9a4d-388dc22de92c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d0accd1-12ea-43c7-a813-7c9553e8d01c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e2bc4eb-abbd-4b3b-ac26-0bc3451c8684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46a78348-7d7d-4bf2-8ac8-03cdacf66258",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0118e2f-c6ed-4928-b88a-5b4a13a4b430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71f05f80-d2b9-4153-8cf0-684a619fd58c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5f29223-cd46-436b-b1d8-4259644ada52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "943382b4-e566-4487-ab1c-c36c8f9111d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c73fb7a-1e65-4868-9855-dbe7294c21f6",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "545697d9-b0b3-4fe7-8557-aacf21a6d0ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32ee8521-675d-4674-afe9-3be38241836e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db0587a7-2b0e-496c-95ab-1ecee3bf8573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6595869-67b2-4b71-869a-9ef34e579617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a9f33a1-8239-4a2b-bbdb-4b7f0eebf686",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3315cc70-fb5e-4eb3-b887-082e8bd70caf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2aee62b-4c57-441d-a928-8eea5f79db30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ca42778-863a-472c-938e-4fd0454a970b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "73d0c1f8-5f60-487f-9946-5aa7bf6c7440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72aa630e-298d-40ad-9fc4-b7ff5e0a4027",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3d27db4-39df-4cba-9edf-ad752f18f02d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b540a50-7094-4907-a090-3fce091a1d0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4e1e40d-0f43-44e4-b27c-4fde49b4a960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "edd3f6e5-dd4a-4e58-a8d8-a1c25f45127f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04959d64-f6c6-4bce-ad31-c36aed83af88",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "775d97fb-2657-442e-8e71-87d708b24729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad930329-da79-4f9a-945a-7da5c40bb254"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b3f6516-bc16-4478-a45b-da12c55bc599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb71902a-e631-4790-8f50-3389f0124140"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b789a86-9e14-42b9-87c4-cbedd4bd8819",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c4c8223-e983-4ba9-826e-4e452b020d36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2030f9cf-d68c-45ec-abf8-1c067cf00544"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ef212d6-9d13-4ab4-b6c3-58e6a5c5694c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ce82124-b4c1-413e-be4f-ce9aa44762d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecd2f3a7-a58e-497c-943a-fa68a59ab608",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66cde427-bcde-42bb-8af7-923846edda73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bb595b1-47ad-4580-8059-9fa3024405b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d353e8e-711a-42bb-a2fe-521f6f89a127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1469ee7-7e1e-433d-b0ca-19448e0723f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a92fd65-3cd2-4717-afaf-eb51d3667e97",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4327fadb-9e30-433e-945b-707415fea212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae8091ba-9dd6-4329-9f69-eb57e694fe4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39920800-8318-45ea-ad95-f0ef3ddd01e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1e04a27-7086-4154-b475-cfe85bf610bb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9beee2a6-5b58-4bdc-a334-ca532aec7302",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "527718ac-f862-4ef5-b043-f485bcb23f4c",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "767d1b80-9617-4710-82c5-79d7ece7023b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "baa78a48-125f-413b-bf29-ca396371258c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4982b66b-6b08-4af3-a7ef-595ce3d78b6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "00d5bcba-4971-4553-82cd-e7085b2eed65"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4c61a505-9382-410a-9c90-61d97b8bf36f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f2510520-9ced-431b-b5a7-84978ce0c033"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "272bc5a4-5d09-4df6-bbdf-0e16fe85b8ac",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "adf437b5-bef0-40a7-97a9-427fbab3150e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "467c370b-5cdd-4190-a9fc-1c45b62fecb3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6985bd42-11a3-4785-bf7a-8b86b4d49e7f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "205c6d52-71cf-4620-8025-8be86521fa48",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e18e1c71-5d10-4c65-90f1-f3def2dc6a3e"
            }
          }
        ]
      },
      {
        "id": "3d7f4f8e-8aea-4172-a978-8522c2658c34",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "f938bd5d-84ab-4071-a9fa-37f1b76f7aa3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "82e9453a-e931-4c08-913f-402e3d082cb4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "420b7d4e-72f5-46fe-a708-fbb79b19947a",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "727744d0-f4ce-48e8-a12c-c10903a48a46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a824c1b7-009d-4dd2-a866-18dd6827494f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84ce3480-a389-4fd9-8a47-029d1660b085",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a7b5baa-4109-451b-b938-13fc092fb5d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44f745d8-6e15-450c-8b26-4ff2c40f7cb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "810ba0a8-f065-4b50-9d9e-21bd0ef77529",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5c14dcc-bf1d-4cbb-afa1-815d1247da42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f648e899-dbe2-4f20-a198-1ea8218e43bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb093488-105f-4cba-89f0-04a94cf9fa3b",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee74bdf9-c161-4f99-b88a-66471d99fa1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91f2101c-ca45-4ae4-bb27-0bfe185ef32b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6b8780d-6a63-49f7-8481-9780477a3e42",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "235c3665-af13-4861-b359-7e77a0870c61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7bc5be1-85f4-4d59-bfb6-1300843bde76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dea0c2b-0e6c-46c9-8d70-3c8f0f6aa607",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34ce41af-98eb-48c2-a893-aa93009fbd69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efb7ac11-db12-4a94-88e0-dd3a7fa9fe4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75021a7d-47f6-4be9-975b-722c08da5b8e",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abbd56e3-d3ed-4b6f-bb3a-bb8b8c8ce1d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54bbd1c9-e540-4ec4-85f5-2d2600ef09a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efe788fa-1d17-47dc-961b-153f2de62501",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4a04ad2-9d77-44e5-91db-a81dd74aa6dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f0b2231-2926-4fcd-bcc2-f6e7df416a28",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfff9c4a-29a7-4676-b5fa-8d9cfacfc26c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ccbb80d-baa7-45d0-977e-99a81176f52e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16646a41-e74c-48a2-9a01-26c1ca32e83b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8397cfa-c6b0-4144-b0ce-2382a6b9c133"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25bd7746-c441-46df-90e7-24a8cb4d61d9",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18b9b9c5-bb4e-461e-aa9d-c7537618db60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e2def94-15b2-45c1-bf6e-7dd0c8ff0185"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edc3a2c0-f319-4048-b986-59ae6a1376bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c8a58dc-71fc-4c95-8eaf-4b55187f309b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "609cf261-c8e2-443c-a931-4e9fcde23d18",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac871a63-60d2-4e32-ba61-cb246bc1ce53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87f3bb85-bf7a-45bd-827a-5524d762d0ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "449b4fb3-34de-415b-aa16-ed06bbf9ac7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b17d9ac-b6b5-488e-966a-4fcbd5e2486b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "662331fc-c29f-4d2d-b24c-2c94d217ca3d",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f108b80d-af76-46d1-83c7-2687b166554c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c905d218-faca-426d-9dc1-ceee598fb309"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a1a55c5-82da-431b-9b7c-d404ff182106",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06b7f993-f789-403f-a4f2-392921ba6187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3328c118-5e89-4bb0-95fa-24a1218aa831",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2aad78a-59ec-490e-97d0-24aaae07b023",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f523111-8587-4ce0-8ed2-9521becd36e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b4ac48a-7f94-482b-9f93-2c3492f9d641",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d216c403-d1a4-40a8-a8e6-8e4732af41ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c8fae23-f0e1-484f-a7a2-22b0c16ab7f6",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d879115-3f4b-4ca4-8f4f-cc0533e57d3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "649aec03-fbf7-4f40-b3e8-d0f0b4cf69cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28a7c1fc-d2b2-4ada-a3ef-4f44aadc9b0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3ace09e-c0bf-4bfe-a014-16a31ecb19c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0834c994-c797-45cf-b15d-c79d4466e013",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0caeb1b9-ccbc-4451-9ccc-11ab10274e50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d9d7d1a-c26d-4efd-8ff6-5924bb1dee37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6862bad-3cf0-4ee2-9468-ae0164ca84d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b52d32b-1e43-41ca-aaec-0cb683618cfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6728692-a91b-4cfe-aabc-6dea49c46b43",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9511d818-88cf-46e6-83d7-02d287b5fff6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c56a39c4-9bcf-445b-b218-c8e12e890852"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e12aea12-2c0c-4317-9f81-e86662c194fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da8e684f-621e-473e-bc2f-aff8ad3da455"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88e763fb-365a-47f6-a433-4f878b34771f",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1e95e31-0700-4726-a4d4-74bdf4b3513b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63b6aeb8-ba55-4a0a-8739-8dfa84729c2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1371e413-c5e9-484e-abc5-fe761a104c85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24f130ca-1b14-4392-bf0a-ff6c97c7d070"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd850a65-53a7-47aa-8fc9-be165761b7da",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "039d56c3-2f03-4a00-8c0c-e0b28c9135d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b079a8c-054e-4569-b728-3880396d7831"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2cb9da8-816c-43d5-bc66-6a5b5eab5198",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1105728-5ed5-4bd5-bea4-6b5fbde23a71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ca53088-1733-4318-92be-e418beee61fc",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5f6f133-8ebb-4d26-8b2c-c04d1c580334",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3454cce-0557-412c-bebe-593377311d2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0ccb198-c094-4f9d-bbea-86f316cf1c21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ba88650-ecbf-4d56-aeba-742ecf699818"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f34299-fa3e-4a26-a230-fbfd4bfb239d",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dd18151-ab41-4cfa-b0da-c592a055da19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8a63383-4898-4c01-8eff-972a5e0572db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee62994e-1b0b-4be1-a645-db91cec77ed3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c5cb44d-5e2e-4736-b8c9-e2527b128df8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f7f9df9-293a-4936-8f82-5a387f5e7597",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4c84ef2-5dd9-4095-84f4-e7b79234c32c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dfc8155-ce7e-4f7c-b24c-f7f92889c0b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40db95f1-c22f-4b30-af6b-a00af3aa0f88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8f634a1-6468-418c-9f74-f8214cd6ec65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5bd79f3-1b72-459f-b05c-111fd832fe20",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4381cf29-cbc3-4c1f-84f9-6c244307660c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45e4f7ce-564a-4d43-955b-280cfeef395c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "853195c4-1f23-4ddf-86de-e5c7b0653e52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08c5b86f-b36d-42b4-9eaf-15ea76d61c2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8687f5f-ee4b-4182-bda2-830cddb714a8",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65ea13cb-4c64-4a1e-8656-b03b6f845632",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6d92c30-1699-4747-9d8d-5dc59c74f156"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "888de015-c9c4-4430-bd90-703a04a37c4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e278740-c48c-406c-bfe1-154fb788b064"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cd72577-bb1f-4381-b90a-2d7eff60ee0b",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd2a08ab-9baf-40dc-9ff3-7fc8880e05be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b094912-33e9-4908-89e8-20b1e5226492"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f8ca202-5931-4a63-8545-bf348401a3be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95f428a4-4e28-4ba5-91c7-cc80ee04636b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f6ec3c5-b089-4493-a2ed-b44258709a2f",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d95272c0-061b-449c-80fd-de562e5402b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31cc8cdc-a9df-441a-add3-044ea8ac321a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cd918c2-1596-4711-b80c-43ed20e4f312",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "beec5b56-b8d7-4b70-82de-afe89699b5c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28a76e64-00b8-4a32-8a67-80d78435725e",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fea5294-a322-490d-830d-28bc4b329d1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0bb2ea4f-8701-4604-99dc-568229f420a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "512d6278-da62-41cd-a268-6073795aefe8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96b7b6f5-cf79-4c23-a8c9-63eb228e59c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c83f14a-959b-47f8-8024-90577723756b",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63bb6ed3-2244-4f8f-b859-110f76320beb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b643711e-39a2-42bb-92f9-fb411003b4aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "008dd7b3-5c02-4a41-9fac-e1eada1fa87c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7747868f-ed11-42bd-af99-60172284dff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "514ddefd-a029-4f23-8202-ccebb8a8d026",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05a5bc46-303c-4f84-8125-7c8903e8fdba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0aed00f7-5b99-441e-a075-38d851ff650c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b9bce2a-56a8-45f5-85aa-d6690b34e48d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc0184e5-f98c-4fbc-a74b-8ca4087d6f34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a89ceca2-b871-4373-b790-71f3a20dc1b6",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a5aa1d1-8317-458b-bf3c-3824501c9e95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fb79aed-a870-42a5-aada-4d5513e527d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bb6e1cf-365d-4ec3-a431-8359dca218d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfcd873f-327a-4890-81a1-c94981ac333e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc668f2a-1a48-4db2-ad80-1a0ca1533f84",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ecf6d67-a016-4b94-9b5c-0377459e1348",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fe65b4a-dffa-4b3f-aee1-c1ffe92912fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aa3b1b1-576a-478b-8faf-3bf21c001d21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08cf9cc5-12de-40b5-b2a6-909056244b2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2b389e2-3ecf-4315-ac1a-a8fc936b4281",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "270b9c6b-f16c-4aa9-b5f4-971de7d9442c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0c71285-7846-44c9-94e3-e57851a79fb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f74d0163-413f-4699-b0ca-285c8feff7bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51ff6015-4410-4c4a-bf9b-1290c4286406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "966895f5-2b4b-4ae3-b181-661ce28b61de",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc0f15ec-ba29-4775-b309-d4c1f580e54d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3a4583d-d5b6-41b7-97a4-2fb6ba71eed7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93a9dbcd-b571-40ad-bb25-14d214dd5002",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cf9622d-bb26-462d-8182-c768e950266c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6a594d1-7c28-463b-a2e1-b79dc7eeed67",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f183e7e-202a-4087-881d-b1d3916bcf7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd383016-ed29-4ad4-a284-0d4659565e9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da9eeffd-b84b-4159-b2a1-72d4ca17ddd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a77f5942-ebb8-4755-8a88-3dcfb222592d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d19b4c35-2f97-4163-94f0-4f64d89c3687",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c42d37d2-1c66-4103-a732-16e720af63b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fbb64a6-fda4-4b91-866a-13123e716969"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de3dbb64-8829-41cb-b601-7603f0d80b26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b913fae7-299d-4fd4-83b1-9001255b4a56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5280bcdf-29a1-442e-980b-e94876bd95dd",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1d02891-ed9c-4cbc-a07c-79e87a695761",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b23bd79-32c2-4b16-ae71-29d97ed57e0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "932f0803-f6a9-4ec1-ab94-5452961c563f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5aa66b3-001e-4268-8b8f-59cacbc3abc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff9d556a-1ee8-4f1e-abe5-44af7660555e",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "596f4348-94d4-43f5-9eef-3f9dedc7671e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17ee7b60-3ea8-4c1b-b768-e32d807254fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a565bf87-214b-4ae0-9afd-741c560425d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6346b644-af8f-431b-b352-abcd1becf4a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fc02a33-3094-4884-89c0-c77971af3096",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84d1834f-c65e-4d43-bf7d-ad9a4a404996",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e70b6dda-7f0b-436c-8453-3a2bb9371738"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab44d12f-ca3e-45ff-8947-0a66faa2d877",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79e516bb-31a7-4936-b867-62fe1d7d22a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e060b9ea-570b-4422-b32f-492569977973",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70bd839c-5d85-4d0d-8607-46443c7fc1e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cbac44b-85f7-4dd6-b0e5-81635ed19ce5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9174b0b-d79c-468c-a864-9a01f3ca8195",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a38d5b45-79a7-48d2-9da0-feacd7f6d165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "240355a5-04ef-422e-a1e1-ada038b8f3ed",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2b191b8-e3cf-43f5-85c7-6e3452e0e3ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "956c8a02-2293-4b70-a29c-1be70fdf5225"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "462a1e53-dc1f-4e58-bcc9-4b5ec9ffce5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd76670f-0b85-4b41-8cba-b8a0f02ded10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca821596-058e-4e92-a85f-9c3396c51d24",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15a270db-32e8-46ea-b9df-25147d4d5639",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63a41993-0e4a-47d2-9705-92b44fee0e6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa74d3d5-50c5-4ff3-8275-aff8b272918f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa9370f1-068d-4f54-adb7-f36a1c2d5a90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c497f60-25d2-4b77-8f90-be6f1ada51ed",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc2e8b05-1304-46b8-a002-7765bcf51dd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e440e5c7-6e49-44ca-999f-aa81c9dfdbb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "436d7b53-3d8c-49f0-aedc-130fb05e3c25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9becb043-8dc1-466e-b1e8-d9439b59ad0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63233111-6cd7-46fb-b2b0-ed3ab3ffcb43",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5f32861-8107-4f44-a8fd-beaf268e933b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60dce8dd-d1ed-4f3f-8720-e88dc551cdfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "359a6a66-bba1-4bb0-8b93-13a88d94b12d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa5b8c28-ed6e-490e-8d24-3d16dfd385ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b35e10f-f400-4278-b1f9-b895ca0e0b38",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24ebda43-0394-4955-b818-68db2c011fc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c18532b5-a34b-43bd-81e6-1a5c0a951edf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa942cc0-57fc-4984-9f6f-a2928d356041",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cefea02b-c7c8-4cbe-b7ad-d108e94c02b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d83ce1ba-1497-4b49-b9f7-0bb3789b9acb",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dda2c527-c495-4144-989f-ff37ba6b0089",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1730d04-a236-457c-a928-4ed9c372aaa8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11f1f142-194c-4f1c-80db-0be4e6731d97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e1bfed3-e8b8-466a-a658-43ef68e9642d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2b97a62-cba5-49dc-bea1-8d7c9d98bc35",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1ba7a61-4d12-4ae7-acf9-b50bebafac90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bbd9e9c-9786-4469-9729-676a85584e3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5f3f8ec-c68a-4c68-8138-25180263862f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0863c63b-34c6-46d2-912e-65ea12a362d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72892dcb-2563-422b-b4c4-ac0210af0efb",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c1d7e28-169e-44b4-9083-ee7dd052b292",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01a062f2-6f6f-4add-8245-23480fb7cd50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "269946f5-8999-4ca7-b0c1-6286ce4bbc88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0668bdc-289a-41e5-900d-c6a9466e0b3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f17c8f2a-1143-445a-9418-57b1d08a845f",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8768f5c-c077-432c-ab57-a2983d279b72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fbe9240-f5fa-44b1-946c-729d7471b2b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aa9ef26-39bc-45c8-b1fa-90efccaae4b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cc62d65-6c35-47c2-a55f-6315f7bfd3e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2b9b5e7-78d0-4cbd-84c8-644ffc6b0fd5",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bde9e698-6421-4640-95de-007ef62e43f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6eadab47-933b-4303-99a6-c18fb59ae1eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d69cb1d-9260-42a6-b2e5-79c6dd51d7f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6d52355-27f5-4e71-9eb0-12b4d00460c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1dfbf80-7a56-4974-ae03-c1e6a385f875",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "368cbf77-b815-4236-86d7-274d7e53d2f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57f620a1-5645-4001-8912-85f247a2879f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26604daa-2c14-4a7e-a6a8-ef54b4838eeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c1c0250-a166-4a5b-a8ee-518fdacce750"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d8417a3-2fb1-46e9-9d55-b6fc6acda295",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee31e4a5-3622-4e27-9808-6c2bdb00f4a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea86ba7f-f7b7-4ec6-8f6f-d3f773663d1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79abb49d-c684-4550-8e19-52b06b9f11b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94020952-3411-4569-a631-cc6f55dd2f4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28fee1f8-838e-4a87-b78f-6e96fd1a1394",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ea08b93-dcaf-4b07-8120-295de399bb3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1969900b-c072-4089-96b1-831d586e5704"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c605fbd8-b81d-4860-aae8-1d81e3f794be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b496b6a-0fce-4c22-98e0-165c93d79a60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "401961c8-11c6-4b90-b7e9-dd3ae7c21415",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f961f7b4-d28b-4256-9f18-e872e509548a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a32cfd3a-b0dd-4573-908a-fdf4e2e4e164"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9ac92fe-43ca-46e5-a738-19da25247e3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8147e18-3dd5-4d64-8a75-18e7719469e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4af30aa-2e15-4e99-9567-c23f519c6d76",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76bdd678-4742-46d5-8ca5-873bcc35be80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11c6513b-25e1-4412-8ef6-904b97e3b952"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6544a6f5-77fe-45e9-bdaf-bc17744be453",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa0f8975-d6f0-4568-a17a-b8463b3d99f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd3e41fa-eb05-4e6b-9421-8f5c12e837aa",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25da3487-c9f3-4283-949f-08eb04b780dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8251460d-371c-4144-95da-ef3933bf68cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9c77156-819f-42f6-ad1f-bec864e9e3fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f717e965-eeb5-4838-9f27-92ecaefdf355"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3a035eb-dbb9-42ed-a9a6-2bf6323bc97e",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ffda29e-4baf-45bf-84a0-9308379a0623",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ebc355a-af9e-4450-bdb7-5c7c1d11ff9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11a7e973-8246-4abc-a19a-bdbe1e6501c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b31ff14-f74a-47bd-8dc4-5812382e0ecf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf32d364-53df-4af1-b743-a7b66bd9fcdf",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5c01088-9443-4490-b5f8-6a595863e264",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2971f514-bb92-46a4-a4fd-6e4f30d7911d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3dbe46b-2f15-43d8-a181-14938993d16a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14e36ea9-07c9-4b11-af62-0b4e6988d9fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80fc9f6d-cc0f-4559-a542-77b3f7403f2f",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "499e63af-fcb9-45eb-a656-3453976e61c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d81fe2f0-517a-4bf1-b652-379878323c51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "223ef77e-66a8-4d1a-bc3f-3f0dc0704d24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0948d0bb-e3ec-4cd4-9403-bc755250df67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60744489-638b-417e-8be8-9ab0ab1d1a25",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4339816f-258a-423c-ab45-5fd2634e6c77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2f0ebbe-a45a-4e9a-94bf-20a2198ab1f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6b0dbf7-42ad-41bc-83db-2abcbbed9bf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0f93961-a417-4b76-8b4b-df8fe4b7e57f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13167988-ef17-4d07-b3f6-f85e1b8dcdd4",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a305e7b-e4c6-41ae-b56e-284cf6689fa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29779be7-9897-4c03-8d74-1b29a2bd8b55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "655f4c06-6515-43dd-922f-b054b31de799",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "461e817a-6b5d-465c-8e70-aa1182982f71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c88f5032-8cb9-4720-8961-2b75200f5d6f",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83b82073-3c4e-4c20-a050-1457aa220294",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab141c97-e18e-48b7-bff4-6c268e0ac980"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dfffcf9-88c4-4bb2-8c1a-a2e1fc4c2ddd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac9704ae-3409-4d80-9246-6ce780e4a98b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bd0bdfa-d9aa-440a-b789-44ae8ec2b560",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d6ad85b-f666-46e6-ad3a-551b4b747567",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ac8032f-5c29-4e73-b7ba-32746e098a7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6434752-c62a-4140-85a1-1d81819a8307",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf7e238f-32a8-48fe-8cb5-9198a80cf452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3aab5bd-43e2-4bdc-a40c-b746facaf89c",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69102e03-56a0-4779-9fe1-22ee2a7262ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f69c6f50-adc3-44bc-a3d3-89ba2847c70d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4db83267-c6d7-440b-877a-d1cc72cd0aa7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faa6eef9-151f-4f88-862e-dd52d5dbac4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc601cf4-c471-41ca-939f-b7eed50c8422",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3b5e253-2443-4296-bb67-fb2c546f6be8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c470ff1-4a2e-4a64-b674-743fbe37326f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3086d808-489a-4e04-a972-0d824ead0a90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6bcab4b-2597-4915-851e-fec65c0fbeb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c1cf981-da06-44ff-b43c-a9a6f827492d",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbc26bd4-3ebb-419a-a546-c5e612171911",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a469fe2d-5b2b-48d5-b967-1cd0da5db100"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48b9e7d6-14e0-4686-abfa-d8d2d1524ea6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21c6b336-d79c-4413-91f3-e12bf318e610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2edaa875-5c36-417e-ab3e-f4c8772232e6",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af9d1c8e-7d20-454b-8ea2-3838384cada6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad9abe98-b2ed-4776-975b-2544b40425ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f4f329a-ac6f-47e3-9db6-bde10268b99e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28535884-f9f6-4800-a5c6-65390ded04ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12f4a204-1bd3-4ed4-baaa-0852b3728406",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bc5e33d-e917-44ae-b46c-6b45a25b689b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8bcc99f-7d4b-43ae-abf5-b95348397e38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36dc7d50-541d-4aab-9683-d2350561b79f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b8dbcc4-a300-4c4f-9f88-29c48c5b1474"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edaaf583-bf94-4f4a-8399-ddf6e95ed8d6",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ff8c7f2-edf2-484e-890f-fb53e0daf6d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "360b949d-350b-41ec-8da9-f39b08488f2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9ebf042-4906-4196-a1f6-b339bb87c5a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee76eeb2-edc1-47cd-9b8f-0728e63d9be1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5a6705e-cb55-48bc-9f0f-cc676027034d",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf7b2aa6-5183-4407-b1c7-7b8a3737ea01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2140f828-7422-42a0-8927-4c30c4128fcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbc8774d-1577-4b4e-8326-aaf89d28c7d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1da3205f-65b5-4553-856b-06e531ddf0ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1965051c-a4cc-466d-8e0c-ba954f01e1ed",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b89a26ec-c6e4-432c-aca5-99eed4d6f50a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3db73bf-a729-41f3-893b-6dab0e1f4d59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4834a7c1-06f7-4f45-9dc7-849f3073fb1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67223413-3d33-4a85-af4f-74aef0dbc81f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79c94d62-905e-4877-b628-9ea7a9dca101",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80ff6e38-0738-47f9-93cb-f205fec6a06d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62976161-4a46-472a-97fa-5244581f378b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3085577-6d45-4fa9-b4f6-812ad4f91025",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "725e8640-bb2d-4ab4-a858-44f1cec9f207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0ad1543-e5e9-483e-af8d-bab39d836254",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b56af0e-c429-4bf4-a844-da642e63c134",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "deac75e2-ef06-46ca-832b-a122adf8e723"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d02f0b68-fad5-47d9-a396-5149494aa85b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36698622-ffec-487d-81ee-f605b54f063e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aabb0e01-3a76-4563-a841-ff279ebfaa53",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5da6552e-0fd6-4be6-b4fd-e2f26ca67439",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3f87183-841d-4382-aee3-9bb13d8279b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b343230a-21e4-4f7d-953f-66bc49a2b19b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2ef59fa-b763-4bc4-a93d-d8eae316c9fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ec94b69-764d-4a44-841e-102a5d9e1f0d",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c88596d-72b8-4cca-aed8-1163a4f9d2ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b03e594-ac0d-49cc-aa96-a34b54b77627"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fde5665-d590-4254-aa87-f9ac7a797561",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07847050-c76f-4ce3-ad94-5477659f652e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f3b1ebb-c835-467b-bd54-760975f7a1eb",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8c0de1f-5514-47ca-9a07-06a258daf7a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fef5c09-c528-4607-89f8-4d2c8f86e3dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e8f611b-fca1-4e4a-8ab0-dfc3e6143f3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22a7abb5-aedf-4c0f-837b-501ce4b1e7d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be1ce995-48ae-419c-a05a-2bb7b2fb4fb2",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbf27af7-2cd2-46cf-81f3-9775d2809da3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd42f7cc-e204-4966-8f33-a249af34a7ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bebbed74-5d76-4819-b57b-80e6fb1a14ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3a15a61-2c7a-4994-8ffe-d970a9802fd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8ae60ab-4eec-4e52-9d97-dc915289bb47",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51178810-fe30-4875-b1ea-4d20e2ac59d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2bbe94f4-0c1c-414e-9772-3ec05d06ff3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d72f3c08-bc17-4f51-a337-f5e9d5e02bd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "586829eb-6401-45bc-915e-dd5be8b90796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d66c509f-577a-4974-82ca-8468b9e4d9e6",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "616f0486-399c-412b-8e85-87704fa896c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8a6a2a3-ae72-4c39-8eaa-199a57d762f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92a240c8-6b1c-4a50-8cb5-f2feee21b975",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c655f731-79f2-4e09-8731-2f428ce57747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e5661fa-9f91-475e-9f32-3b9ee402aaf9",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c186d676-a541-481e-a315-78dc57e9fb88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53d4d65d-8f48-4920-9e52-2bd91befe6b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e13234ae-406d-48ce-9a9e-4e2156f54f16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f135b76-bfc7-4a28-8788-5732d4c1840b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c364982e-f989-49a0-9bcd-9f1c108efc50",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4353d5ec-c188-430b-b187-72a3cd75c573",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2fb9ece-bf0d-41d4-af94-545bda728ac5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e739d02-eae1-43cb-b748-e72cc946db48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8e0a2e0-1e55-447a-bdc4-07d811946230"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2133f34-ee05-4064-a3a9-ee707d465f42",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dd60508-86a0-423e-9049-53aa5a0c6ec1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9330eba-18c5-4a84-af2e-b37fa0bbc504"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ca4dcb1-7483-408e-80ab-3141f6b36743",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa383ac4-4116-4302-b056-9ddfed4477be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2146e49-726f-47f0-9255-c7d0fbd10a25",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e59c63f-ee6b-4b87-b9d2-154edbbcaed2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52f9cc84-4dc9-4cb8-ac99-81afdcf77294"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52efbb62-500d-4fbc-8644-1f6f36449e32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4e5571d-602b-44aa-aadb-44799ebe75d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48f6da6e-11fa-4c0b-aa6e-84a9d2b610d5",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad7f31c5-6787-4e0a-a2cf-be5adb4c031d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a6e742d-7d2d-45d5-83b9-cb7ce3222bde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "349c7786-8b52-4bd3-a974-5014f62ab661",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cf0be70-2408-4ad4-a402-832b79a747c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0492fa6-bfa7-425f-ac9d-56a0f84808ee",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "911be6d8-6b1c-4302-93ec-6ef96ebcc128",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95e6e565-a1ad-4173-b51d-ab6f1fab1e97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53a6b979-aa12-441d-9ebf-cffda96ea524",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f31b68a-6c74-44d1-b36c-35e199bf7a4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26a63eda-872e-4858-8a8e-3155f69d21d7",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d02bf1f-f482-484b-8a26-e268e0759380",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "081ebb5c-0d8a-43ee-8da7-2263a20ce9a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31e93aa7-9b4a-4ce9-bdf6-1feae7702b80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc3a7aa9-7776-44ef-833c-473e5845d716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "238c6175-2c69-485c-ad6c-16913913aa4b",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22553cf8-5438-4262-8dfa-5cf116a765ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8f9a211-b369-416f-a516-7c769bd9eae7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b96b9201-2494-43a8-a3d6-f6401e2ec58b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dc89a6e-474f-4a10-8b1f-f6181afda23c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b150b66b-42cd-444c-b7c8-fd946586c7ec",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ff22ee0-db75-4c2d-ae06-1d8010aeab5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc85dcf5-80b9-4e3c-a3b2-5dbf74f794d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66e4e22d-79a3-40a2-9a2c-13a8cf646b7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42589628-5042-4c4f-bb14-0c435b55789a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04d8c661-8f98-4cdd-9b09-2580958f8dca",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "340b1fe7-94e2-4f75-a2c9-74cbb0954444",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "646375df-c28d-4d61-a0c8-64d2a462ea54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "769af74a-c404-4c2d-8d38-c6f5f65d904d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10c01873-48b2-46e1-8586-250648a9d942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21dd20f2-0048-4252-9f94-b1f8368cb682",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5d34b0d-a039-45ac-ba3a-0c11eb13f95e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2da57fd-d59e-42e7-a973-974e7fbd6399"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b97a5f-8951-45c7-abc3-89de55f87612",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "536300dd-5342-4205-b715-db86f44b3ccb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9de23229-cf5e-4f93-8eb3-a7ecbd898ce9",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c101b2d4-a133-4ecc-81bd-24327004cebd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77d6f01c-6ceb-4208-b689-7f55cf8f58c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "777d2efc-c0a7-47cc-9ce4-11258aa306b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bfeceb9-dfcc-4d4e-b593-1273be8aadef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "329de290-c9b5-4ccb-ad32-f6bde967e22b",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "616b6d94-5c82-4488-a704-bf8520c0f7d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92e822da-5ac2-4034-ad74-c6cb406b6bc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e52401e2-93af-45b0-a7a2-41db1c5e1510",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08c7fafa-4471-4ce5-9743-b5fa2064c4e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa97ef31-28a4-4898-9ac1-89a1ea01b1a5",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3954a5d9-2cf6-495f-9d2a-77334b8b63b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a392094-7f0c-4298-9010-4d416d7ec216"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da79db47-701b-47f3-acf4-a3653d59d900",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e839d7c4-0719-4cd8-9c22-019e8544d751"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c71a709-eae2-4b18-9217-76ad158bcb34",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7913ff35-eb3e-4326-9627-c90b98ed36f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcce592b-865f-448b-9948-1624735a5b7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b5fb97c-ab5f-4763-9af0-1d00c568eead",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3b88d54-b86e-4769-a4d5-34c064c9c97d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88ade1a9-3f7d-4c7f-8c5e-e96d32883a0d",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb0f5769-5ace-43b6-ba09-f3ee21a3925c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8539f905-83af-49e5-bdb3-9ff08dac6d4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de47a051-313e-4b94-b3d9-bed8d0594683",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4efe23dc-f454-4fa7-8201-d9a7d4116b65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee96f631-88a0-4f7d-a956-989ee2ed55e1",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7e533b3-8597-43de-a108-d058b1c5a3e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "425eda8a-4e60-43bd-b96c-f8a7f3f82e4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15049d94-3bd9-41f3-ae09-4aa42b95abb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a21ba741-560e-4e71-8fa5-c682cbeab4ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd60096f-e18d-4a3a-b46b-9fdc3d1601af",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f76c48a-4db5-4626-8f5b-3077cf0a851f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f503eb6b-f7f2-4bcf-b2f4-958a168fa163"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcd5d39d-e017-4725-a39e-12f10ca0be0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b510c70-0b47-4c34-94fa-81609a152572"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5eebc34-4fea-4328-b067-184c6e171d9d",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2672afac-c69e-4604-a705-2fd4fe182183",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8374cf1-b3ff-4f80-acd2-2a041f5d4ef5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7747aa4-29f5-467b-822a-b2a5b1ec7f9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0e60c33-d8a3-4ce4-a276-4f5230225b0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae593d2e-9b07-4ade-bb38-f91984e00c9f",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61f26105-4115-4433-a563-d79db105b182",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6770796b-eb8f-4327-bf9b-29248b714401"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4a81c95-ef18-45f0-b78f-660bf6d11d27",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18b66aae-271f-4dd9-9db6-59f44b4579ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7c4c569-1908-4511-a60d-c4e6c5d50a70",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36489fcf-ad58-4dcf-baac-39750819a849",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0604ba06-3e93-4bc6-a9bc-3e2c3e17ffab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b1c618e-ae27-4242-968d-001f63a8ef34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b08da2cb-429d-487d-a6f4-b6256fab5f12"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f9a7eefd-4418-4a37-8ad2-2e8a6538a2bc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1dd0e616-6292-471c-a224-f5cdaa45f911"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed699d34-9ab2-4f6e-b31e-f398b3f60443",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e5b44f00-67ed-4d11-912f-5e5932161158"
                    }
                  }
                ]
              },
              {
                "id": "2bed8086-6a7f-42d6-8a7c-862c6c276fd4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "831038c5-4329-40f9-be6a-d59f5d7e70c0",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58c160fb-5ca2-493c-89e0-95eecc93d538",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "4fa0f246-8560-46f1-8767-b0c2dc5526f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dcc3604-9507-4e5c-9705-9d9cc43c91bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "60af0a1c-73f7-4220-97a3-26bbd40795c1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b5b69473-2b04-4344-9a00-f53ecf461225",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7995361f-1fa6-438d-b208-fcc3ed9c55a0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7b974c97-759d-43b9-8cb1-7c9820007431",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ee144a90-02c6-48cf-a756-d65bd8087bc5"
                    }
                  }
                ]
              },
              {
                "id": "719c4d7e-5800-4831-839c-868383666de1",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "1faaeee1-d102-40d1-a8c6-65a56b6632dc",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed734d2e-22cf-490e-9abd-16dfe3b52de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "90874909-2f47-41c5-a836-ced4d778f4cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b622ce15-c161-4e02-88ac-56951e5c2d9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e17106f-2148-4992-82ab-82981bbd3df5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1d3a8d86-2a2b-4665-8f04-f72f37ea1b92",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f3e7683e-6e96-4f8f-b0a1-4f1bc3b48e62",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7adcd4dc-570d-4644-9604-ee787ead6e3e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d906c10f-f452-423b-b8f6-8f898ee5c5b6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "43646677-83fc-4a45-ac9f-1d09486dec61",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "938aab66-e5d8-4935-9977-543decb6656b"
                    }
                  }
                ]
              },
              {
                "id": "d0a7653a-fc39-466e-bb96-bda15ab55a01",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e8d93e60-1d28-4535-8ad3-f988d25fbd74",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8ddee93b-8715-43f5-9b4b-875b533a3114"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4f358f1d-9e47-4ab4-9b5f-309b30eeee75",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "22b2a03b-1a8b-42e9-ab63-edeb03f13022"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0bf590b6-7087-42d9-86ee-33917fd73462",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "f19fbd72-2cf0-4c09-8ae0-4126041a775b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d8404c4d-4d8d-447d-8142-21372601b043",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a5347548-d337-4ea4-9dda-5244a6c3b8eb"
            }
          }
        ]
      },
      {
        "id": "2d43271b-6f2f-43f9-a5a1-0ff84bb18d80",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "56cb6957-75b1-4d9f-9672-badc3101bc12",
            "name": "Negative Testing",
            "item": [
              {
                "id": "95f06f61-8719-40a3-a129-862594fcb768",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "40cdd67a-6733-4ebe-adb2-8af8513fb1d9",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f9c6433-5854-4603-be41-58d390286a58",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "277aed10-0bb8-4bc9-935f-35654f0b095e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51a3ff7e-29b7-4b07-9a68-1e3a9130b501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "683e71b9-e525-44ea-9504-483c40dced2c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0789a703-0490-4080-84f8-d9a06d1d88dd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "deddb4c4-aba4-48c2-a15b-7555730f579f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e723726-95ab-4389-8f18-153cbdb2bc4b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c8b856e7-a04d-4e01-ab6c-91a408b0ff02"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "11b2aa91-ca4c-47e2-bdd7-494f5b14c807",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "37bade8f-036f-45d2-a777-6cc555848961"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4522da25-1b58-4225-a17b-7851ec82c5fe",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "aedf6fb5-42e8-4ebd-8435-771c7721e932"
            }
          }
        ]
      },
      {
        "id": "8e5fa3d8-0f19-4ec9-8ef9-ecac69915664",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "33a3449d-ca63-479b-b44f-4bc4ba7b0ecd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fc3c733a-583c-492a-8460-58e1e2f0ed21",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dc3b0951-6f2d-4eab-b742-62c345bcbdc8",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba58871e-45b2-4665-b573-a64907ee710d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "18a090a9-43d1-4958-9ffe-9a631119bee4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e9bab99-2d0b-446a-b525-c2b3cb1d65a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cada0213-6bb2-439f-9941-758df5a60bdb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "15a80f3a-1e7a-4f8f-8916-e513b916c029",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9e09ff5e-496d-43ce-8db6-03cf1b22da02"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a6da9537-b69a-4ed1-9a14-1cc4daf33ca2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5fd0eb11-0b34-47b9-a8ef-0feea6388a8c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fed19337-3521-4cc5-83f9-f490a91bcf0c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "137877f4-538b-4b98-8b26-92ccf9943d33"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6005a08c-9bae-4cb9-b930-bd8825e2ea53",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9cc7b746-1a45-45ee-ae03-e8a6f62858e0"
            }
          }
        ]
      },
      {
        "id": "b8148c19-b61e-4926-ac2e-cb7faa83ebd0",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "643d7e49-1599-4e3d-be62-c65e21700b5e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "85a80fb0-86be-4964-a013-791e13a8ebbf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "07fd4ea7-b97a-4210-92de-5ffb95e4e493",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f69a5721-d6b5-497d-90e6-c6e7a20d95b6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c9617eb8-3695-48c7-849e-36fb452b7e4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d7147ae-3b89-40a6-8f53-f196e4bc8733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fcfe369c-b120-437c-bada-2bc78c00f4eb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d1b5a3f5-d64c-4b69-9f21-060e5351e12d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a459f411-0c47-4ccf-8395-09e029499e9b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "70755d0a-34bb-4429-8399-1362004e72c7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6a580476-2d45-4cd0-9757-191e843e88be"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6a0fd198-7415-4aa1-bee5-f90a50157716",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "060d0270-a26d-43fb-b883-e0a8719ed3e1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4a3bf430-9d03-4b28-812e-1426f6d3e607",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "16ce150b-652b-4ef0-8bbf-6744b211d1d1"
            }
          }
        ]
      },
      {
        "id": "947e545a-c8c6-4660-9132-2ffcc1105c8a",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7818fc65-819d-4458-b5c3-e08a39c80797",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0e35c920-1a2f-450e-9bdb-bb027c6b0d3b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "57f41552-71ba-41b2-a59d-f2fb7e85d10a",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ce8e4009-9af8-4488-bbd8-df34b10672e6",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "43e6f7fb-47e9-42f9-8900-c2f0e291fe8b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 45
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 114.4859154929577,
      "responseMin": 13,
      "responseMax": 2179,
      "responseSd": 234.612618559919,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1692837101232,
      "completed": 1692837147339
    },
    "executions": [
      {
        "id": "0f7f7d09-f040-4658-a15c-fc5eb8c9e03b",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "73ee837a-fe44-491e-8da3-324db5aa70f0",
          "httpRequestId": "4a6c3b1d-203f-46a9-a459-06bf3da300d6"
        },
        "item": {
          "id": "0f7f7d09-f040-4658-a15c-fc5eb8c9e03b",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "b9f153b7-8f59-4f08-84be-bcc246e753c2",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 0
        }
      },
      {
        "id": "f2440027-5f2c-493c-84fa-1affdae3b2a6",
        "cursor": {
          "ref": "e6fb7e6a-b002-44e9-96fc-ad86b26f3d93",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "4c6812ac-211f-49a9-bc2f-8236fc6c8163"
        },
        "item": {
          "id": "f2440027-5f2c-493c-84fa-1affdae3b2a6",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "2ea884d6-f0cb-4c2f-a59a-824441f3be0a",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 0
        }
      },
      {
        "id": "3b6f7c3c-243f-456a-a6ea-5927fe1ae5b7",
        "cursor": {
          "ref": "02848159-cd2a-42e1-acd3-7c3bac750518",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ab3ea550-49e3-42a4-adcf-ad855ca95a36"
        },
        "item": {
          "id": "3b6f7c3c-243f-456a-a6ea-5927fe1ae5b7",
          "name": "did_json"
        },
        "response": {
          "id": "c81f0244-d15d-4169-b45b-8373716d696a",
          "status": "OK",
          "code": 200,
          "responseTime": 350,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1ed5651-4114-48f5-8f83-222661d2d927",
        "cursor": {
          "ref": "ed6c1f63-d8b6-4ceb-92dd-50d9fe255445",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a2769601-b656-45dd-8f09-1d9ac6fc601f"
        },
        "item": {
          "id": "c1ed5651-4114-48f5-8f83-222661d2d927",
          "name": "did:invalid"
        },
        "response": {
          "id": "266834ac-09fc-462b-bb4d-462b1b304a8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1ed5651-4114-48f5-8f83-222661d2d927",
        "cursor": {
          "ref": "ed6c1f63-d8b6-4ceb-92dd-50d9fe255445",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a2769601-b656-45dd-8f09-1d9ac6fc601f"
        },
        "item": {
          "id": "c1ed5651-4114-48f5-8f83-222661d2d927",
          "name": "did:invalid"
        },
        "response": {
          "id": "266834ac-09fc-462b-bb4d-462b1b304a8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffa2afa5-33ec-4654-af07-1362044ace0e",
        "cursor": {
          "ref": "fce355f4-ebb7-43f0-bcb9-7a9dd8e85c68",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a5d6d0d5-f772-453f-ac4f-5713f53e86fd"
        },
        "item": {
          "id": "ffa2afa5-33ec-4654-af07-1362044ace0e",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "d7295fa0-2ca7-40fd-8f70-fe7f409a0f3e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 115,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5d36298-95f4-43f6-8608-a8de49403040",
        "cursor": {
          "ref": "d18ffb87-2496-4637-bdbf-2a656e0461d1",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "c6919486-d8d3-4052-9a63-13f180608c37"
        },
        "item": {
          "id": "e5d36298-95f4-43f6-8608-a8de49403040",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "89adb46a-9751-4f42-a06c-fbd54f0d2984",
          "status": "Not Found",
          "code": 404,
          "responseTime": 71,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "827b3d14-4dd6-4a53-b6d7-b3cbd5ac6042",
        "cursor": {
          "ref": "96429c83-f5e2-4be1-a717-8b4a6f67f4a1",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "3897e195-9558-4f3c-bef9-0ac36fbb73b4"
        },
        "item": {
          "id": "827b3d14-4dd6-4a53-b6d7-b3cbd5ac6042",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "ef8ca15f-4b30-403d-b3d2-2cd0d2b9d524",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d40ec897-11f1-4e14-8c19-fb8504ee613c",
        "cursor": {
          "ref": "a8dd3db2-c920-4b7e-91ac-541dada76302",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "44e9bf95-5cd4-4d9d-9b88-2336dba05ed3"
        },
        "item": {
          "id": "d40ec897-11f1-4e14-8c19-fb8504ee613c",
          "name": "identifiers"
        },
        "response": {
          "id": "e2f0ffb6-a5e6-4149-8c3e-ce96f373c54c",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "979f0704-69b5-41a0-88e8-0b1466922f4a",
        "cursor": {
          "ref": "ae8d3f71-2ced-4c64-9daa-fc4be0530517",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f875c378-e1e5-43d9-a869-0988cd1eeb71"
        },
        "item": {
          "id": "979f0704-69b5-41a0-88e8-0b1466922f4a",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "6ad934d4-1b71-4738-99f0-470957e63b6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1046447-66a6-4478-9e94-fe054ec98359",
        "cursor": {
          "ref": "a54da6e0-d8d0-4000-a798-b90ded24e80a",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "99d91592-9052-4719-a106-23fb6b298caa"
        },
        "item": {
          "id": "b1046447-66a6-4478-9e94-fe054ec98359",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "9a2f35f2-b379-4308-b86d-f8049ebe955e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a618c64-0141-48b5-bfee-3b70b23f55b8",
        "cursor": {
          "ref": "5bb090e4-cd18-4c58-8168-a71171328239",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "7b6d9d1d-8471-4e75-8dc6-4458a445ab2f"
        },
        "item": {
          "id": "7a618c64-0141-48b5-bfee-3b70b23f55b8",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "3a1504b4-73eb-405d-9637-5cd331cdd014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41eec296-a7c4-4811-94a2-61fbf825979f",
        "cursor": {
          "ref": "dd392d2b-1b99-4904-829a-b587716cfb37",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "829a2a08-6a40-421f-a3b2-48af878edb98"
        },
        "item": {
          "id": "41eec296-a7c4-4811-94a2-61fbf825979f",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "562cd5d9-227a-47f7-83ce-eb0dfd358d95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a951a42-0591-4564-85da-e9e0872a4970",
        "cursor": {
          "ref": "5d207da4-b5f1-4425-8b33-e35f9f93dd5d",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "d8005b6a-0643-4b07-9e78-2299e8287b91"
        },
        "item": {
          "id": "5a951a42-0591-4564-85da-e9e0872a4970",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "3cb77dcf-398c-4aed-9902-af4d50a06f44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "123fc99a-31be-4e73-a6fb-bc9a37fa6e43",
        "cursor": {
          "ref": "560c516b-189a-4826-ae1e-d9281e6c9979",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "0de073cb-7cc1-4f8d-9e53-43582913c6d7"
        },
        "item": {
          "id": "123fc99a-31be-4e73-a6fb-bc9a37fa6e43",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "5f997c4d-07f5-47f0-81b5-5de1c41427db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c02c03eb-a660-4070-ac74-21b059bcab02",
        "cursor": {
          "ref": "dfcd94c1-14a7-4ff9-8df4-f431f55d64b0",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "91799949-e8a1-41fa-a1c8-d47ae8158bcd"
        },
        "item": {
          "id": "c02c03eb-a660-4070-ac74-21b059bcab02",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "b850aee6-e98b-447d-8ce2-11917ce967a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 152,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "875d1ab9-45f7-4f4d-a645-60b504cb69f2",
        "cursor": {
          "ref": "40065bd1-450c-4e9f-a33e-53fbfadd5628",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "a545a85b-a765-4820-8f7b-665ebb481128"
        },
        "item": {
          "id": "875d1ab9-45f7-4f4d-a645-60b504cb69f2",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "67d6c6a9-5b5d-416f-a33b-ed6164c4e5e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 157,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c10350e7-331f-4eb9-80c9-cc05fe6d732b",
        "cursor": {
          "ref": "f3d85067-7ac6-42a3-b651-100699641f7e",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "c5b8c4c4-5291-4081-9f6a-9dfd3ad121db"
        },
        "item": {
          "id": "c10350e7-331f-4eb9-80c9-cc05fe6d732b",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "e9566c30-a2c1-4e44-9960-71418d51686b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1085c08f-525c-4504-94ee-2c678a2f6eb8",
        "cursor": {
          "ref": "ffd28e83-045d-476d-a571-c0bfd464e570",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "3425d29c-783c-4ad1-b556-23899fe06641"
        },
        "item": {
          "id": "1085c08f-525c-4504-94ee-2c678a2f6eb8",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "2901ce3c-fcc5-461a-ba31-99ff43b6dde0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14749792-d6e9-4930-9919-bf84067fa137",
        "cursor": {
          "ref": "f8edd575-dc8a-4500-98fc-913d6c2ddddd",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "15850e4a-c0b8-4edc-a3bf-60117cc2a0ea"
        },
        "item": {
          "id": "14749792-d6e9-4930-9919-bf84067fa137",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "808d1cc3-df4b-4bdc-87e2-c7c73ed8320e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c34bbd3f-4d2e-48ee-8625-08fdf8815450",
        "cursor": {
          "ref": "2529988f-6d59-46b7-b22a-1b5aab06d2be",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "b086932b-6d97-4a82-a457-2860c45e4d13"
        },
        "item": {
          "id": "c34bbd3f-4d2e-48ee-8625-08fdf8815450",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "4bf6b9d2-ae2b-42a0-af30-0dd732b118f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99947e3d-be0e-4d7b-8201-7f2072adfa77",
        "cursor": {
          "ref": "3e8f0e80-553a-470f-adbb-f274d4484e10",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "8892f813-d7a2-4c60-bf87-57bd153f6dc2"
        },
        "item": {
          "id": "99947e3d-be0e-4d7b-8201-7f2072adfa77",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "f9052704-58bc-4e7c-b0b9-e61363503137",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81b4424f-984e-475e-ab7f-3a93e38296ff",
        "cursor": {
          "ref": "d1d1370a-589a-4b04-8f64-3ce25108bdbe",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ef711219-fbc1-478f-9d42-0eda09eb2af0"
        },
        "item": {
          "id": "81b4424f-984e-475e-ab7f-3a93e38296ff",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "4b12425d-228a-4732-9499-e2f1d490015d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81816b4a-2d38-403b-be07-b793de179027",
        "cursor": {
          "ref": "ea696f5c-65c3-4559-85cb-d8a25052544f",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "0c9b6f7b-3fb7-404e-b11b-5616a04f6c6a"
        },
        "item": {
          "id": "81816b4a-2d38-403b-be07-b793de179027",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "304103a5-a966-4226-ad51-38fdfa0f5fb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ef234cf-b8b1-49d8-b019-bf33cf823230",
        "cursor": {
          "ref": "02dd8dae-2377-4fb3-8017-d1b6e579562b",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "e019875f-c97c-4e64-a3b3-4c485d8333b3"
        },
        "item": {
          "id": "0ef234cf-b8b1-49d8-b019-bf33cf823230",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "76e5c21b-7ca9-4b61-85b5-dedce1e3d93a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a02bc53-e7e1-4392-9016-970d11fa3ff5",
        "cursor": {
          "ref": "e006e17c-f38a-4405-80a7-17814088c6c5",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "a2764eef-05bb-46d8-95a4-cc1862996c12"
        },
        "item": {
          "id": "7a02bc53-e7e1-4392-9016-970d11fa3ff5",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "b8c3fb47-7d2e-45d4-9959-6ecc248ef99e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78cdc1f3-4326-4625-8888-f4b7444ee705",
        "cursor": {
          "ref": "12336fe4-70eb-466d-8937-a2845f033d17",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "d1676e6e-a6dc-493a-a31c-22bd35f53e23"
        },
        "item": {
          "id": "78cdc1f3-4326-4625-8888-f4b7444ee705",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "f6119f9d-6470-4089-97fd-930a5e4386d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b98caad8-0806-4a66-8506-f94c85d4fbe3",
        "cursor": {
          "ref": "2da6ec2e-b811-41f0-8368-4daacc66e21c",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "10ede993-44c4-4bd9-9069-ca3de78a0d9a"
        },
        "item": {
          "id": "b98caad8-0806-4a66-8506-f94c85d4fbe3",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "4ca2489f-c70f-450a-93d6-f10c9d15447a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb833796-1de5-41f2-ab58-a3a242f7eb5b",
        "cursor": {
          "ref": "e8dc5d85-c310-48dd-bd5b-09f339cd5e77",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "00700a2c-0366-418c-89b6-af561169c68c"
        },
        "item": {
          "id": "fb833796-1de5-41f2-ab58-a3a242f7eb5b",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "1fd58cc6-d0b1-4f86-b137-154c956d5718",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d316bf1-d45e-43e9-aebb-eaf5f8c95dd6",
        "cursor": {
          "ref": "ca3ff524-c184-4b66-b1ac-4940c085e0e8",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "7fb7634c-c0cf-447e-9794-ec6417aac191"
        },
        "item": {
          "id": "0d316bf1-d45e-43e9-aebb-eaf5f8c95dd6",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "6cf41324-89bc-4441-89f1-e0c2599367b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f9ff95e-5a6e-42c9-b374-6985ef9698ad",
        "cursor": {
          "ref": "8e6431f4-711b-484f-977e-7f92361c533b",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "771d7e74-1b79-42d0-9deb-43dfb9da1d9c"
        },
        "item": {
          "id": "5f9ff95e-5a6e-42c9-b374-6985ef9698ad",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "a2b55bfa-f485-4181-aa24-41086a3de295",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bf32aef-9ec6-4684-a29f-edf488e7fb97",
        "cursor": {
          "ref": "2072a50e-473d-4a6d-944d-6549001eb0ff",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "2cbb496b-08ed-47b6-bfd5-c3aa06d1b717"
        },
        "item": {
          "id": "6bf32aef-9ec6-4684-a29f-edf488e7fb97",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "10b3024a-7070-42a8-ad2c-cd2a001d0396",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5d2f1bb-9b9e-45fa-a595-72609eab52d6",
        "cursor": {
          "ref": "0b49c1dd-efa9-452c-9313-cfb7eb991d7f",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "d12e1143-6cb0-4485-8667-f5b7a4b13ee2"
        },
        "item": {
          "id": "b5d2f1bb-9b9e-45fa-a595-72609eab52d6",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "5532eae6-eda9-4985-b54b-6f08a2f702b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "902ab408-b7a9-4050-bb4d-1a1fa9347f23",
        "cursor": {
          "ref": "21974a2a-ac7c-40f2-b87a-ddf75d79b8c2",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ecd0e386-f750-4e92-9cd1-6d350fa8a936"
        },
        "item": {
          "id": "902ab408-b7a9-4050-bb4d-1a1fa9347f23",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "907dd251-6d34-4281-b9b9-dd5c33a88563",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "599dc9b2-7d8b-4591-b5e3-d73d7bbb1a7b",
        "cursor": {
          "ref": "ebd54fe2-8d6a-4f0b-9728-a8925d77460d",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "3e9937b5-a318-49ab-afa0-4bedbf9e965d"
        },
        "item": {
          "id": "599dc9b2-7d8b-4591-b5e3-d73d7bbb1a7b",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "7dcab58e-be56-4e8d-83d2-2b484517919f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0df3f1ba-a49b-412b-941f-7091a832c3ab",
        "cursor": {
          "ref": "9f0a3df5-5122-495c-bc2d-6bb9a84319bb",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "1c272fb9-2ad5-44d6-83b2-dff8295c2a38"
        },
        "item": {
          "id": "0df3f1ba-a49b-412b-941f-7091a832c3ab",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "623268ea-aef6-47cb-98e1-1855254c0a50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37197bb7-4cb8-45c6-95dc-bf3d15616f1c",
        "cursor": {
          "ref": "c2ce585b-6570-4808-a047-52d7c05bcd06",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "cf0b9f20-746f-4a15-bf93-57e9cc1d3aae"
        },
        "item": {
          "id": "37197bb7-4cb8-45c6-95dc-bf3d15616f1c",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "dff5a6c7-f5d5-4682-b030-06f787c3b99b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2f1cdca-e6bb-45ac-82fd-0a49b5ff84ee",
        "cursor": {
          "ref": "25e1b33b-6508-4e9e-ad5a-742824dbbf3a",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "3d48021a-5223-40ec-af1d-7cb2fc717611"
        },
        "item": {
          "id": "d2f1cdca-e6bb-45ac-82fd-0a49b5ff84ee",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "6811ae27-0ca4-466a-b8dd-27d5c2cec9dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa929dfc-afca-4c9b-954c-84336676acb7",
        "cursor": {
          "ref": "61c27bf7-175a-4040-a518-3966fea50df0",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "9142e0f4-b28b-48c4-ae24-e57cd9778b89"
        },
        "item": {
          "id": "aa929dfc-afca-4c9b-954c-84336676acb7",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "34843e47-97a8-4e1d-8b0f-27dd152c7372",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88b03741-5470-4aac-8568-f2021982c4df",
        "cursor": {
          "ref": "cadf518d-8ed0-4dfe-8043-810b36668da1",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "60a1e8b9-8bbb-4712-bdaa-943d7364d908"
        },
        "item": {
          "id": "88b03741-5470-4aac-8568-f2021982c4df",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "724d76e5-27dd-4c2a-96df-21651a40f211",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 78,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "74b1da99-2f27-477c-bfaa-443d614c1e4b",
        "cursor": {
          "ref": "d9601d50-e74b-4238-8776-14b57d4f7f66",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b042d6f8-0168-4417-bcf7-db44102f867f"
        },
        "item": {
          "id": "74b1da99-2f27-477c-bfaa-443d614c1e4b",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "79ca83c3-2efb-4455-b96c-91f7b082c27e",
          "status": "Created",
          "code": 201,
          "responseTime": 2179,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "5b87c1a9-eafb-465a-a3a3-636d6252ae33",
        "cursor": {
          "ref": "b3a3d0e8-40f4-4a95-9cb0-73e7b3e09781",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "b701f5d1-da84-4708-bc90-ef2d2d6768d8"
        },
        "item": {
          "id": "5b87c1a9-eafb-465a-a3a3-636d6252ae33",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "fedcbc80-4e16-407a-89b2-b2775fadcf1d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "3ee5da92-f4ec-4751-8654-10d06a83f02f",
        "cursor": {
          "ref": "267a23ea-f342-4151-9d06-bec314bf76b8",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "769d11fc-6dcb-4fef-8ac8-5c382c2113cd"
        },
        "item": {
          "id": "3ee5da92-f4ec-4751-8654-10d06a83f02f",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "f2540234-3787-4501-bd3e-1f0c6739fb7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab4d693f-a5d1-4271-b003-76281ec0389e",
        "cursor": {
          "ref": "69cce795-9ef2-403a-9914-ea7e9bac41f1",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c4659816-3d8a-48b0-b094-033d8290064e"
        },
        "item": {
          "id": "ab4d693f-a5d1-4271-b003-76281ec0389e",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "54575c8f-b3cd-4d49-83b8-4b128ca5a009",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "9855014a-9e45-4f04-873a-a61c173fa6d5",
        "cursor": {
          "ref": "94501aea-36b8-4774-9103-67f9e3c579e3",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "5c3b5f87-0764-4bf5-8907-f6f943875b50"
        },
        "item": {
          "id": "9855014a-9e45-4f04-873a-a61c173fa6d5",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "12fdb947-bff6-417c-a62f-9342c7e0fe8f",
          "status": "Created",
          "code": 201,
          "responseTime": 1577,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "18694533-61a5-482e-bf36-53a2f36a9003",
        "cursor": {
          "ref": "988c479e-952c-40ca-b48b-b1a8a37b7429",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "029dbbcd-0446-4c7b-8998-1b4a16b617c2"
        },
        "item": {
          "id": "18694533-61a5-482e-bf36-53a2f36a9003",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "93f64ace-1b20-4d5c-8e72-5884df9b3f75",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "f75e1817-2b46-4fbe-8634-4fb9f75fe5cb",
        "cursor": {
          "ref": "b9c1b764-bb1e-4bfa-a4ca-46a3b4705f1a",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "3e2eea60-2799-47c9-ba7b-634d7a0a398a"
        },
        "item": {
          "id": "f75e1817-2b46-4fbe-8634-4fb9f75fe5cb",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "254b0f7a-fed3-4e5f-8d36-b5004cc1f6b8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 775,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "c538f91b-e1da-4196-b087-1a1ea23b992d",
        "cursor": {
          "ref": "583ec707-d60b-4ac9-8654-ddb78048c15c",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "88d163ce-4b36-4ff3-a901-7c79dbe6d953"
        },
        "item": {
          "id": "c538f91b-e1da-4196-b087-1a1ea23b992d",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "51c73241-6f2f-4b61-8c6a-88d987cb9090",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "ee7c5756-09b7-48c6-80ee-90790a161b90",
        "cursor": {
          "ref": "e9828522-256e-4f2d-9549-1c6c86a52402",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "96d02946-91f6-4350-beac-914d3bc3001c"
        },
        "item": {
          "id": "ee7c5756-09b7-48c6-80ee-90790a161b90",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "21d96d09-509f-4580-aaa3-b6b0b5967c4e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "3e03b314-bb29-4f55-a86d-665c9cbbe08b",
        "cursor": {
          "ref": "2041d391-bf1e-4ef8-a9a9-76c48ae9f015",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "6060e46e-8b3d-4a61-92f3-78cea7339353"
        },
        "item": {
          "id": "3e03b314-bb29-4f55-a86d-665c9cbbe08b",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "28df6804-7ee4-40e6-a702-6421de4d04bd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "170ef8f9-4cb2-46ac-97d0-2e8eca220fd8",
        "cursor": {
          "ref": "4a1f3393-b42d-46bc-a243-cbb2cb75b12c",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "adae6069-dd42-4641-8019-2888b1567ce4"
        },
        "item": {
          "id": "170ef8f9-4cb2-46ac-97d0-2e8eca220fd8",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "9b04c3a6-21b6-4f49-b6fb-0e74e7150bdb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "c8d3aa9d-893a-486b-90fd-87b2af020689",
        "cursor": {
          "ref": "02a7840a-6ff6-4298-a0b1-ac3e3c12a341",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "6fb09662-2c82-4259-84da-7991de232034"
        },
        "item": {
          "id": "c8d3aa9d-893a-486b-90fd-87b2af020689",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "1bad0750-b383-4099-b1da-dace7825f210",
          "status": "Created",
          "code": 201,
          "responseTime": 1016,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "156dc200-641f-44b1-ba5a-1f7b53e83e3b",
        "cursor": {
          "ref": "ca5a8004-f6f3-4f78-9831-1b8b369db78e",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "88df4fbf-683e-44bf-9b52-676a5b1848db"
        },
        "item": {
          "id": "156dc200-641f-44b1-ba5a-1f7b53e83e3b",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "3da1c16d-5de4-4e5c-b670-65c2bc1f996c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1f81cf5-eb2f-485c-b187-4246497d490f",
        "cursor": {
          "ref": "bccb7917-dc3d-45e5-ac22-e47ed5a926e2",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "a1d87495-9bd9-4e0a-9234-25eee9e435ea"
        },
        "item": {
          "id": "c1f81cf5-eb2f-485c-b187-4246497d490f",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "bfdc7f04-5af3-435f-87b7-f7e00a92688f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce7b4545-c586-4831-83d1-86fac94ddc6c",
        "cursor": {
          "ref": "0b8a4894-1111-46e2-883e-21658f8c2fb9",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "b7582cb6-20e1-4a8e-8e81-d1161fd2bb92"
        },
        "item": {
          "id": "ce7b4545-c586-4831-83d1-86fac94ddc6c",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "4fc8a305-8ccf-4232-a5b2-f36e621250ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b64204c-212d-4dbe-a15e-84bd2baab64e",
        "cursor": {
          "ref": "85339e46-4992-46c5-89b9-fa0caee7c999",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "73a02094-4473-489d-ac1c-4958f2946df7"
        },
        "item": {
          "id": "7b64204c-212d-4dbe-a15e-84bd2baab64e",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "4ad089d5-9006-4de9-9e2b-e9a05e0f2140",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b32efbe4-6b95-44f3-b745-d1acdb197405",
        "cursor": {
          "ref": "dc48e066-6545-4d5a-824e-b5f0744c63e1",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "36c82789-fc42-444d-824c-e19fcdee5a48"
        },
        "item": {
          "id": "b32efbe4-6b95-44f3-b745-d1acdb197405",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "c70c118f-90ee-47e2-b0df-109deb610bae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc7c0e4e-6b60-46a7-8b2a-86b7db79f02b",
        "cursor": {
          "ref": "a28fd6d2-2730-47db-8b22-3af84d41e040",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "e8fd305e-a05b-4c1d-a6cb-3edde2da6016"
        },
        "item": {
          "id": "bc7c0e4e-6b60-46a7-8b2a-86b7db79f02b",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "1794145c-8481-4026-83d1-e888065a309f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdba2110-0142-4577-bc11-d31d7818863e",
        "cursor": {
          "ref": "aafd4357-8f05-40af-8485-42e20c8fa439",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "92545062-c631-431f-baf7-6e11ff8f5f29"
        },
        "item": {
          "id": "bdba2110-0142-4577-bc11-d31d7818863e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "e46b5e9c-4cc6-4c81-a818-6c87445aa6f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85325c54-4d2d-406b-844a-8403c56c3137",
        "cursor": {
          "ref": "506c4cc7-4de5-4b97-9f63-c14dff28248a",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "bb149ea3-d2e7-429c-87be-18d89ff3e66a"
        },
        "item": {
          "id": "85325c54-4d2d-406b-844a-8403c56c3137",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "ca4e2243-b1b9-4bbe-aa62-0c459ca2e09d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c043dc8a-b508-4889-a693-bf7ca7ef6c53",
        "cursor": {
          "ref": "30ce0a31-8cab-498d-8724-4ceadb8282a0",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "6d421489-8e86-40c3-a2fc-55a8c9d64010"
        },
        "item": {
          "id": "c043dc8a-b508-4889-a693-bf7ca7ef6c53",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "99107603-9db4-41e6-b548-c3d78149d2ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff581260-4b4b-406b-867c-ef186e1239c6",
        "cursor": {
          "ref": "eda6a95f-7317-4955-b74d-ecea216ad2ad",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "b977faef-11ed-4f10-8355-a96105558ea6"
        },
        "item": {
          "id": "ff581260-4b4b-406b-867c-ef186e1239c6",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "557a2ae2-00af-4742-b5f4-adeaee2b9c85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0a60f83-2a54-42ea-b067-0348ab73942f",
        "cursor": {
          "ref": "82722882-857d-47d2-b136-873e400d19b2",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "a9cdc94a-977d-44e4-970f-912b6b27decf"
        },
        "item": {
          "id": "f0a60f83-2a54-42ea-b067-0348ab73942f",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "d49d13b7-cc3a-4fd9-a990-7bcfe9f64821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fedb4c3-3859-4afb-950f-28dc93d9d151",
        "cursor": {
          "ref": "6c1fb21f-7545-44ba-9d2d-92f15bcb90ab",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "db37eab3-b950-45e5-b71b-bcd9ca54b952"
        },
        "item": {
          "id": "7fedb4c3-3859-4afb-950f-28dc93d9d151",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "3d0169b0-e770-476d-84f7-8e21c76a8ae3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecab98be-5dcf-451c-bded-47113a407565",
        "cursor": {
          "ref": "3eb57c6f-6390-43f8-b931-22215dcfee43",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "50c48ab3-f5cc-434a-b50c-bfc28d3f37ee"
        },
        "item": {
          "id": "ecab98be-5dcf-451c-bded-47113a407565",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "22dca4e8-94eb-4c5a-a975-70c1cf69958b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05151c84-acae-4606-9da9-6ddb5f072c51",
        "cursor": {
          "ref": "0b5a5b0c-cd93-4929-9b73-88c47044bf87",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "a5cc107d-f97c-407f-8c65-d24ce9f9611b"
        },
        "item": {
          "id": "05151c84-acae-4606-9da9-6ddb5f072c51",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "575a0f55-818a-48df-939f-5ab827c8dbcf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 772,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "3d0fab4d-603e-4baf-a370-ec71e9a8120d",
        "cursor": {
          "ref": "cdb1e617-b1cf-424c-89e9-db0d21637dc1",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "0bd9ea23-bc44-4aa2-ad99-f0c4e5048cc0"
        },
        "item": {
          "id": "3d0fab4d-603e-4baf-a370-ec71e9a8120d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "6ace5e5a-8019-401f-8676-e9e38d355134",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 749,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "aab87e78-84fe-4a0f-b5a6-8d11ebd28547",
        "cursor": {
          "ref": "d07b292a-77ae-458c-a812-4d1777cac81b",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "9cdf870a-2dae-4607-8495-47dc05757355"
        },
        "item": {
          "id": "aab87e78-84fe-4a0f-b5a6-8d11ebd28547",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "323e68dc-bece-47ec-a4ea-aae2d2729369",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "11b0dcda-fa4b-4f70-bc86-37f798778c16",
        "cursor": {
          "ref": "2da5457d-4cba-4d94-991c-a757941d819f",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "a81185d1-6679-44cd-ba69-d41861ef1a18"
        },
        "item": {
          "id": "11b0dcda-fa4b-4f70-bc86-37f798778c16",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "06e6e658-6e82-4d97-adfe-18ccbc24c643",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 734,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "11266cc5-78dd-4dc3-8692-ba2e870df4ce",
        "cursor": {
          "ref": "f8c045e4-8a77-4df4-a167-20a359eb06b0",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "47ea3a23-0554-4a61-97bb-f7c75fe61a70"
        },
        "item": {
          "id": "11266cc5-78dd-4dc3-8692-ba2e870df4ce",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "5b032651-609e-41a1-a6af-d37886bb6c5c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "3a5c8a4c-028b-458d-a399-65716edc94c8",
        "cursor": {
          "ref": "26963ee5-078d-476c-8e6e-7d358d2d7f96",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "64fba732-1a6f-41db-a301-0ab924978400"
        },
        "item": {
          "id": "3a5c8a4c-028b-458d-a399-65716edc94c8",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "c93262bb-0a00-4210-98d7-eff8b4d8564c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b4ae231-0f07-4353-b8b8-3ce78127b0b5",
        "cursor": {
          "ref": "d7afa29b-af9e-4ac4-a9cc-5d3a2b2807c1",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "df013ae4-88c5-41ea-adea-18aea8ee5448"
        },
        "item": {
          "id": "0b4ae231-0f07-4353-b8b8-3ce78127b0b5",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "2b5accab-c074-4ca1-a0bf-8d48661fa569",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d95e9e2-d1a6-481b-8544-9aff47862f0c",
        "cursor": {
          "ref": "4dadd237-a13a-458c-b554-338b47805a0f",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "7928efc2-30a7-4949-926f-28c3f6ad1617"
        },
        "item": {
          "id": "1d95e9e2-d1a6-481b-8544-9aff47862f0c",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "8f1faac1-4db3-42d6-9081-f191d98a04d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbe5265a-9161-4fc0-8764-9b6171129f65",
        "cursor": {
          "ref": "9852c141-f65f-43f6-aad1-99d1d277f780",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "59a1f85f-7de9-4721-b96d-0ac5bf86ce84"
        },
        "item": {
          "id": "bbe5265a-9161-4fc0-8764-9b6171129f65",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "05828f8f-95dc-43f5-bb49-4f6043a8e918",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "432f158e-62bb-4c4b-b053-8913cc7b564c",
        "cursor": {
          "ref": "84f03d7d-7445-4dc8-9fad-93a5ee530771",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "ce5b2d22-ac31-42b3-95cf-f2ad44af192c"
        },
        "item": {
          "id": "432f158e-62bb-4c4b-b053-8913cc7b564c",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "1396ab1b-391f-44f9-a1bb-d98d58896262",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58b5d8c7-39ae-4152-9fce-9db21c4b3ca2",
        "cursor": {
          "ref": "10581165-5887-4128-a0c6-ab3ee1be237b",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "0d3007cc-8951-452a-8b60-51297a5de73f"
        },
        "item": {
          "id": "58b5d8c7-39ae-4152-9fce-9db21c4b3ca2",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "50839aad-0d5b-4560-bbe0-0213f269127b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57e342ab-e077-4670-b23d-fec840c0da31",
        "cursor": {
          "ref": "2202a07e-f235-4c95-9fc1-a6a5b2daf399",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "aae7c14c-5e26-445f-baa3-6cc9536821be"
        },
        "item": {
          "id": "57e342ab-e077-4670-b23d-fec840c0da31",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "5a16778b-9d2a-4928-8f25-a1fcf6a3a0a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "728ebd7b-d5e0-4562-86d2-ef980d9d3036",
        "cursor": {
          "ref": "3723db31-a401-4d19-8230-d802480b54f4",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "1c2f6bab-44bb-4d30-bf61-7b9226b4a09f"
        },
        "item": {
          "id": "728ebd7b-d5e0-4562-86d2-ef980d9d3036",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "e3285068-cbc8-436b-9c16-a71e8aec2e48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30554e5a-f192-4804-a0ae-897fe569142d",
        "cursor": {
          "ref": "21792790-9c4c-45f1-a96a-e68dcfa4d34d",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "44e56c99-a480-4758-b333-b6bd58d704bf"
        },
        "item": {
          "id": "30554e5a-f192-4804-a0ae-897fe569142d",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "ea3dd180-b533-47d2-be63-ef4e41a8bb55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a7427cb-0475-494c-8238-2163ae38b32a",
        "cursor": {
          "ref": "11ae6996-c0e1-4cab-8942-fd05875d5f39",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "1d6d24e3-8b6e-4f58-be96-a82b144abc1f"
        },
        "item": {
          "id": "5a7427cb-0475-494c-8238-2163ae38b32a",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "b4b61556-3967-4d9a-be10-961ed40f0563",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa7df7de-29bd-4861-9a8c-a50b58bdcc9b",
        "cursor": {
          "ref": "7605e720-db81-46af-b58c-66ed7caa9d0c",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "2fe6d455-3bf6-4c81-b6d3-0353bfbf2dfb"
        },
        "item": {
          "id": "aa7df7de-29bd-4861-9a8c-a50b58bdcc9b",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "dba70cfe-5472-43f2-98a7-2d1080c82d04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14917aa3-f00c-44cd-bf1c-da5c01e5b7ad",
        "cursor": {
          "ref": "c6b288f5-3edb-4c8c-872b-14d19573ecd9",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "d76aed99-c6a0-4482-b8f9-ef4fc0a3c983"
        },
        "item": {
          "id": "14917aa3-f00c-44cd-bf1c-da5c01e5b7ad",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "01b7aec8-ecbf-4b13-b7eb-580b1e4efbc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a14afda4-bee9-4130-bed9-04cd567110c1",
        "cursor": {
          "ref": "3927afa9-3af5-47e0-9f43-9a843db5a748",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "1f9ceb7a-e2d3-4f56-9905-ba74faebae50"
        },
        "item": {
          "id": "a14afda4-bee9-4130-bed9-04cd567110c1",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "6433e630-16ea-476c-b663-e0fe1fbbe291",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da9a61e0-dbf4-43f7-b003-5ba6545fd425",
        "cursor": {
          "ref": "f9693526-a392-49be-9dd9-97d246b49bae",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "b6c19871-135d-460b-9959-55180f8d9198"
        },
        "item": {
          "id": "da9a61e0-dbf4-43f7-b003-5ba6545fd425",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "3095c957-5c77-4df6-bea6-99a0971ce6ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c34fb0d-5cef-4d80-8004-54d7e12a822a",
        "cursor": {
          "ref": "7d3b82ee-5abe-4dfc-b587-e15efc5fb6ad",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "8d80a315-a865-4618-9bf6-3b88cd197dfb"
        },
        "item": {
          "id": "4c34fb0d-5cef-4d80-8004-54d7e12a822a",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "15cf4b0b-1661-43b7-9003-279575730e0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17e54e41-ac27-4a12-b193-4661b237e9ca",
        "cursor": {
          "ref": "6e747cd6-bc89-4eef-96ac-8923b5aa73cc",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "84a9cdc7-911a-44b7-bab9-7d2500366fb4"
        },
        "item": {
          "id": "17e54e41-ac27-4a12-b193-4661b237e9ca",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "eaf2bf5b-4516-4838-8ca4-21a54244400c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a381f0eb-d9df-4099-8621-90ffc8fefc2a",
        "cursor": {
          "ref": "1447e9c4-cb59-484c-8f77-d10a5a28adba",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "e9c9f5a0-0499-4307-a746-d19a71484203"
        },
        "item": {
          "id": "a381f0eb-d9df-4099-8621-90ffc8fefc2a",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "5dac65ea-976e-4382-bb1e-13e2920a9cc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "050214e4-3754-4a62-8d6d-838150db150b",
        "cursor": {
          "ref": "b6efb57c-f30e-4bea-82d1-3e0ad0029d8f",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "595bc20c-a0d8-4ed4-bcaf-483d750e4952"
        },
        "item": {
          "id": "050214e4-3754-4a62-8d6d-838150db150b",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "67c201a7-ecd0-40da-97dc-a8e2a9849cc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5e4090c-09b7-4e4c-8613-993de64f6033",
        "cursor": {
          "ref": "fd6b9772-e072-4373-8d42-cfaf64d6b722",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "9df80c09-c59c-477a-a88c-97f04aea4959"
        },
        "item": {
          "id": "d5e4090c-09b7-4e4c-8613-993de64f6033",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "b36a09b2-3d41-4fb3-8e28-6e355a3d2c4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0c85324-084f-455c-8d2c-ffaf83588268",
        "cursor": {
          "ref": "8a0e4eb0-f317-48a6-ad6f-5cc9de6664b7",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "e6ef888b-7ae6-438c-8da9-e855bd3424cd"
        },
        "item": {
          "id": "e0c85324-084f-455c-8d2c-ffaf83588268",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "309a0512-f00d-4557-9689-049c151581f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f4c5d0f-aab6-470c-b8d3-e00595cc2126",
        "cursor": {
          "ref": "baf2f3fc-dbe7-4ea5-b4c5-d88de8a9e454",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "bf4c55c6-f60b-4ebb-be8e-07cd5cde197f"
        },
        "item": {
          "id": "6f4c5d0f-aab6-470c-b8d3-e00595cc2126",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "ee3190e5-b476-48e8-acdd-cbf7fa301fe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7e10b41-a4fa-490c-a8ce-66edb6a70a03",
        "cursor": {
          "ref": "43c2f379-1839-4887-8fe1-950c442c7a6c",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "a9c1ce92-c56a-48b8-9b45-8e0adb49aade"
        },
        "item": {
          "id": "c7e10b41-a4fa-490c-a8ce-66edb6a70a03",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "1778d9c1-fe72-4d2d-872f-a5b18bbd603d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "518e3acf-099c-4be1-a532-088f42e505b1",
        "cursor": {
          "ref": "b65cdf29-8dae-4b82-a162-7ce43b525325",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "50b3eb34-29ae-45dd-85af-827c7d3d3908"
        },
        "item": {
          "id": "518e3acf-099c-4be1-a532-088f42e505b1",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "b778ed75-9e25-4c18-935c-0dac4bc47fb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3e7ff0d-6ce2-4a2a-8b28-64b4d438da0d",
        "cursor": {
          "ref": "31c42e3f-c8d9-43c9-885e-e43191a26946",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "9e3ca3de-73e5-447e-bfe8-ffd18cf1d07b"
        },
        "item": {
          "id": "c3e7ff0d-6ce2-4a2a-8b28-64b4d438da0d",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "8c15d455-968a-4102-bed4-ff64d5aeb352",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15e484c0-072e-4afa-bf98-2c7d50a750a8",
        "cursor": {
          "ref": "6c88d708-2eef-4c02-b848-1ad2cd09bbe4",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "efc4a429-1d5e-417b-8516-367564463aec"
        },
        "item": {
          "id": "15e484c0-072e-4afa-bf98-2c7d50a750a8",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "a0f2add4-7a63-41ab-b23b-bbe6013fe2e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8aadc3a-42cb-4b3c-93c7-0b6053a2604c",
        "cursor": {
          "ref": "418978e3-ab46-4436-b2d1-5952fb01c66a",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "d46853ef-4b49-40ee-9aec-aa824a5cc4c0"
        },
        "item": {
          "id": "b8aadc3a-42cb-4b3c-93c7-0b6053a2604c",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "ce0f9abf-fc10-49f3-be7a-38e04eace08a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16677141-eb51-4aa9-a2ef-36b73e9bc51b",
        "cursor": {
          "ref": "0529460e-5278-4ca8-a395-9721211d57ed",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "58a64032-4e88-427f-b4d1-f297c9782ad7"
        },
        "item": {
          "id": "16677141-eb51-4aa9-a2ef-36b73e9bc51b",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "9aca9d7e-b2c5-47fb-af24-38b32eb4fac3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "794c8007-d0d6-4519-ab52-fc8610a10c26",
        "cursor": {
          "ref": "cace6859-ad25-47dc-bfea-522ceb4eb6e3",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "cf237975-d4c7-4071-9894-93b169cf5ea2"
        },
        "item": {
          "id": "794c8007-d0d6-4519-ab52-fc8610a10c26",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "263e6327-b559-4d8e-801f-b83fb383719d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59f0a433-ea30-410b-ae14-b5baed94d615",
        "cursor": {
          "ref": "14303ec7-273d-4ee4-afe8-5ac627a62c44",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "3943c41d-d9fa-41d0-b10f-cc24548390f5"
        },
        "item": {
          "id": "59f0a433-ea30-410b-ae14-b5baed94d615",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "d72b1d23-e0c6-4184-b05b-828c06d33007",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40bb180c-3a31-4b9f-9f82-a71573b8e1b7",
        "cursor": {
          "ref": "eac5b700-2340-4f9b-b82f-7df197e3efec",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "765ea231-57f7-48f6-8552-7d822a98062d"
        },
        "item": {
          "id": "40bb180c-3a31-4b9f-9f82-a71573b8e1b7",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "4146133e-25d2-41fe-95d6-9d817476866c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc6d98be-a70c-40cb-8ee0-698a90c995ca",
        "cursor": {
          "ref": "52310147-c649-461f-8cb8-d1a406da470a",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "25466a44-9000-4fb2-8e80-74681a35d086"
        },
        "item": {
          "id": "cc6d98be-a70c-40cb-8ee0-698a90c995ca",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "e2b4d000-0577-45a5-a7fa-124a495e1929",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46dc60fa-4e1c-484f-a41e-1fc3183391ad",
        "cursor": {
          "ref": "2be6508a-38f0-4c4c-8d25-7f3e1c87388f",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "0c858aad-5ac2-4aeb-80e3-f61fc139b6db"
        },
        "item": {
          "id": "46dc60fa-4e1c-484f-a41e-1fc3183391ad",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "955ed60c-e49c-4510-bc8e-e1f84759fc4c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "731cf3fc-1494-41ab-a6c6-66eebb3b4b32",
        "cursor": {
          "ref": "c24ae895-560f-4abd-882f-07ea62a1c6f3",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "5ecce9a6-8973-4389-afe6-6edc920d4859"
        },
        "item": {
          "id": "731cf3fc-1494-41ab-a6c6-66eebb3b4b32",
          "name": "credentials_issue"
        },
        "response": {
          "id": "4f8ee969-d405-4b47-9dd0-ab8c28eaf409",
          "status": "Created",
          "code": 201,
          "responseTime": 1567,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f9cf2c0-1269-45b6-a0d6-0e22cefa1b67",
        "cursor": {
          "ref": "681c0722-8843-42a6-8e15-a32af3686e96",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "68a18dc9-3736-47b4-b061-8047c822e70c"
        },
        "item": {
          "id": "4f9cf2c0-1269-45b6-a0d6-0e22cefa1b67",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "8200972e-923d-493d-888f-ee82ce3fc1ab",
          "status": "Created",
          "code": 201,
          "responseTime": 1004,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "34a3ebf7-34ca-4f96-ab2f-4a9e5f7df977",
        "cursor": {
          "ref": "eedf0270-c05e-482c-b02c-471f8abb1b7f",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "5ed55acc-a38f-45ed-94af-e1bca90b00e3"
        },
        "item": {
          "id": "34a3ebf7-34ca-4f96-ab2f-4a9e5f7df977",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "c8145c1f-93f7-426a-b13e-6648b1d9e1da",
          "status": "Created",
          "code": 201,
          "responseTime": 968,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0389e94c-4c96-4cea-880d-e8c4a7fc604d",
        "cursor": {
          "ref": "281a7cec-e95d-4d15-8f9f-8650d45543ce",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "65fb457c-3cdd-4c5a-8127-709c5aa182ce"
        },
        "item": {
          "id": "0389e94c-4c96-4cea-880d-e8c4a7fc604d",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "cfc5b9f8-0fba-43fa-929c-e8f7dc58bc46",
          "status": "Created",
          "code": 201,
          "responseTime": 1023,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "46450cdd-cc42-48d3-8b5d-31cd3e256277",
        "cursor": {
          "ref": "03a69130-78ac-4a10-95f8-c925f7f82945",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "2962b24d-e339-42ed-a0bd-c582612ae19b"
        },
        "item": {
          "id": "46450cdd-cc42-48d3-8b5d-31cd3e256277",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "a610ffa3-0e4c-4b26-b1da-472a54643b54",
          "status": "Created",
          "code": 201,
          "responseTime": 974,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac8b4157-3b48-40c4-8463-669c16ab62a4",
        "cursor": {
          "ref": "67f59826-cec0-437f-8c70-3d7964d14b96",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "89bed0cb-1bd7-415e-a179-02a553480d13"
        },
        "item": {
          "id": "ac8b4157-3b48-40c4-8463-669c16ab62a4",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "ff2e7b5c-d28a-43d2-a4b8-b3ced25eecaa",
          "status": "Created",
          "code": 201,
          "responseTime": 1014,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a29fa6b-2c47-47c8-8a3a-f6eea8d61f36",
        "cursor": {
          "ref": "6b1acc25-c8aa-4a50-a123-28486730836b",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "4fe7c413-f862-4359-8092-dac58de4d7e5"
        },
        "item": {
          "id": "3a29fa6b-2c47-47c8-8a3a-f6eea8d61f36",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4d90907f-9c02-45cb-8047-432c1074b387",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 189,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "145f3ed5-8b21-4671-ab19-a4011053ded2",
        "cursor": {
          "ref": "185aa2ae-4f5f-40c0-bd1e-de7002453a7b",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "880435bb-fd71-4265-9502-c467d2d3a33b"
        },
        "item": {
          "id": "145f3ed5-8b21-4671-ab19-a4011053ded2",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "c337a7c9-bf18-4741-baf2-947f247b34ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba2068eb-09bb-4718-b6a5-0ec1e20d3531",
        "cursor": {
          "ref": "1f766275-19ff-450a-9be3-aefff680fbee",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "fce2fd64-065a-4f0f-8710-4ed05720ea1e"
        },
        "item": {
          "id": "ba2068eb-09bb-4718-b6a5-0ec1e20d3531",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "6d1c635b-dbe3-413d-be18-d448248b72b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e96472b2-28ae-4b51-aaa1-6c51b1cbb8aa",
        "cursor": {
          "ref": "bed4cf26-2e73-4960-852d-1170ea26108f",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "c2e1ae92-7fab-4551-89e0-fce40635c559"
        },
        "item": {
          "id": "e96472b2-28ae-4b51-aaa1-6c51b1cbb8aa",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "95ed81e8-a4c7-43df-b373-1ffb174859c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43dbeb30-72cf-4047-b6f6-05c28d21984c",
        "cursor": {
          "ref": "82134e9a-e028-4246-b912-574a68213bb9",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a272bb60-e3b0-4fb4-848c-20f7f010a5fc"
        },
        "item": {
          "id": "43dbeb30-72cf-4047-b6f6-05c28d21984c",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "b842397c-3e83-428a-af6a-cdbc2d9e250d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a83c4e0-fa12-4b85-927e-397fea82edf0",
        "cursor": {
          "ref": "73db1c30-013c-4c6e-ad7b-32d9b8f37f37",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "1841573d-0e8f-4f2c-bcc6-dfe2051d773b"
        },
        "item": {
          "id": "6a83c4e0-fa12-4b85-927e-397fea82edf0",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "798d2134-265c-4f1d-b3b4-c2937f8a42e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44842ea4-1b4b-4910-92a0-7a27d594139f",
        "cursor": {
          "ref": "0bf37fb3-ccbf-4314-9181-008350661db3",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "dd8a10c9-3054-415a-a9d0-82c0a8e5e756"
        },
        "item": {
          "id": "44842ea4-1b4b-4910-92a0-7a27d594139f",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "59fcf295-eb59-4b49-aadc-a60e239b14bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca98dd35-b91c-432a-9707-f6d75f56e3a5",
        "cursor": {
          "ref": "d047e83e-e3e1-4364-bf73-05df5c1d59dd",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "faa83163-b4f5-48d7-9ee3-54b1d8acad7f"
        },
        "item": {
          "id": "ca98dd35-b91c-432a-9707-f6d75f56e3a5",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "80c05920-ce55-43fa-ac3c-1d7a9d2cfb8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dba4a24-9be4-474c-866e-d0793cea7539",
        "cursor": {
          "ref": "a1c84ecb-bf05-4b26-a6a8-a2b9d1264b51",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "9906a742-e39a-46ca-a17c-1ada2a52c85f"
        },
        "item": {
          "id": "1dba4a24-9be4-474c-866e-d0793cea7539",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "aab969a1-96ba-4807-a7f3-e4aae032adb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c803bfb8-a207-49c6-b72b-e46f9e5f8906",
        "cursor": {
          "ref": "4c0517bd-33ba-48ad-9830-b3e2711838f3",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "c1324327-33f1-4a65-bf19-3f96fff5303c"
        },
        "item": {
          "id": "c803bfb8-a207-49c6-b72b-e46f9e5f8906",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "a5c22508-fa59-4117-a9e8-3e400884fd1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d5e13f2-4d58-4f8c-9174-9be5d5f37cc2",
        "cursor": {
          "ref": "f34157fa-59f7-4b52-a0e4-b1a917f269ed",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "50249310-488c-4447-8dec-61a60669b163"
        },
        "item": {
          "id": "1d5e13f2-4d58-4f8c-9174-9be5d5f37cc2",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "43e208cd-5d43-49df-9092-1eb430354a8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83b223be-ea35-4fe1-9bab-f638142a025c",
        "cursor": {
          "ref": "98731e2c-ab91-4929-a933-a6aded243e90",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "77ffac7f-98fa-45ba-b8a7-b49035f5ef02"
        },
        "item": {
          "id": "83b223be-ea35-4fe1-9bab-f638142a025c",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "fb0952d3-d65d-4e85-b222-f051feecad38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce543f3a-be9f-4087-9173-145d2ec40969",
        "cursor": {
          "ref": "46b8fff5-e586-4b5c-980e-dd20cbb59533",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "2157cbb8-98f2-4aff-872b-2743cb51a254"
        },
        "item": {
          "id": "ce543f3a-be9f-4087-9173-145d2ec40969",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "fafcb0a8-7ea9-4991-9abb-a54ee733e662",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf7974b2-ff23-49be-96fa-ee4a206446e3",
        "cursor": {
          "ref": "d1dde9a7-86a6-40a1-91f0-adfaab9e81b0",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "52f8e73b-e9d8-4a63-b204-ef28d98e0a22"
        },
        "item": {
          "id": "bf7974b2-ff23-49be-96fa-ee4a206446e3",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "c1279381-9fe8-4187-9ae5-4bcc0dedafa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6882ee98-12be-44ca-ab3d-e97a1a01389f",
        "cursor": {
          "ref": "a35a01c6-3735-487d-9fb9-05ea85159fea",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "868e51ba-d60a-4dd8-be56-9da8d08c096c"
        },
        "item": {
          "id": "6882ee98-12be-44ca-ab3d-e97a1a01389f",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a002f849-b793-4ed8-bf05-b0d5a75ad0c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d62e471f-e86c-4c97-8afb-98adbab4b320",
        "cursor": {
          "ref": "1926fc3a-36a1-4fa9-883f-931a8938451e",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "19441e19-d5ba-40b6-a208-a113339a19cd"
        },
        "item": {
          "id": "d62e471f-e86c-4c97-8afb-98adbab4b320",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "bdcc9343-3bf7-41b4-bf22-63d5ca61ab40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa6bb1d9-2f4b-49d1-9f92-bde26b0cb2f6",
        "cursor": {
          "ref": "73a1b1e4-7bc8-42c8-905b-84dc72325f46",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "53faebca-ed00-449b-9e8d-4260f5d9a093"
        },
        "item": {
          "id": "fa6bb1d9-2f4b-49d1-9f92-bde26b0cb2f6",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b5345428-8717-4a52-b8f2-76ea2ebf368d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07bfafa9-f91a-4761-a134-fdcaab267f60",
        "cursor": {
          "ref": "18b3d02b-dbb6-49db-8e19-447443ce678d",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "46ff6c89-9a0c-49b8-aa63-5e4160a3fa16"
        },
        "item": {
          "id": "07bfafa9-f91a-4761-a134-fdcaab267f60",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "e963016c-99e5-4fc5-ad5f-922ac1a41fc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e785639-fcf5-4d46-9eed-bdd5cfd5a6ad",
        "cursor": {
          "ref": "86e05e9f-f1d4-4d22-bc2e-1a719f030143",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "5914c71c-1a00-47c4-b468-1154f6b3cd3c"
        },
        "item": {
          "id": "8e785639-fcf5-4d46-9eed-bdd5cfd5a6ad",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "2ebd40a4-4132-46a7-885d-0f3a44842ac3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2433e044-f284-4f4c-baf5-145460281c51",
        "cursor": {
          "ref": "092335fc-d0b3-4e0a-bba3-27e89fdcb935",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "7a6be73d-2cb7-4064-ac9b-389b2abc01b6"
        },
        "item": {
          "id": "2433e044-f284-4f4c-baf5-145460281c51",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "71e1c16e-7249-408d-b15d-5a8333f85f6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8d17405-d5a7-4453-8f55-3e93f9a4cdf7",
        "cursor": {
          "ref": "b30dd343-a74b-43d3-a6cd-61e5a5cc9f25",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "8cdf5d94-8ed3-4773-87e9-0b51eaa6245b"
        },
        "item": {
          "id": "e8d17405-d5a7-4453-8f55-3e93f9a4cdf7",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b20f632f-7de7-4fba-8cdd-025cfb98eb9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdbbbbde-e3a7-4eca-ae9d-99bc250bdf9c",
        "cursor": {
          "ref": "9834a638-e3ca-437b-9053-3965f67eb945",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "529fcf65-775f-4a50-b252-cbe307262be9"
        },
        "item": {
          "id": "fdbbbbde-e3a7-4eca-ae9d-99bc250bdf9c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "35d76c58-c52e-4098-aeb0-d4a789487417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebc97960-8e66-4cdd-9a38-5b61e513cf14",
        "cursor": {
          "ref": "ca0678d4-b935-402a-a868-6990c5d1a7d4",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "dd4e1b59-8ef6-4baa-ad65-3196c1ca347e"
        },
        "item": {
          "id": "ebc97960-8e66-4cdd-9a38-5b61e513cf14",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "3e295350-9944-48d6-b6f3-b83b8b389f48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ee3f660-c617-4bcf-9916-17ce7c5e4452",
        "cursor": {
          "ref": "ec835de6-e587-44c0-9b31-5e82b1c22a8b",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "fdce2e0a-6fbd-4a4e-8473-7f06ba9a58ba"
        },
        "item": {
          "id": "7ee3f660-c617-4bcf-9916-17ce7c5e4452",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "48f72214-c239-45b0-97f9-366c23bb0580",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42f28441-1dbf-4432-b603-5f59a7f73048",
        "cursor": {
          "ref": "40eb3e74-e0ae-49d3-91cc-4dd8d6c8d52e",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "6d17cd73-5930-4dec-9917-4f9093a81d4d"
        },
        "item": {
          "id": "42f28441-1dbf-4432-b603-5f59a7f73048",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "3725a65a-3e6d-4597-807d-785a5d42d6a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8514062d-47bc-4b85-bbc5-22d45df27a01",
        "cursor": {
          "ref": "3d67491c-714a-4c6e-a6e3-0d3b3e7c9ee6",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "2f605bf2-f8f6-4c93-92b7-0d6c658ef6f2"
        },
        "item": {
          "id": "8514062d-47bc-4b85-bbc5-22d45df27a01",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "80181ae7-4596-43be-b151-2aef17297d04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cdb77e9-1d1a-403d-b146-7b33cf8e070c",
        "cursor": {
          "ref": "cd5e9d18-ddc6-4982-b8bf-f382441bd747",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "dc4e9ff2-1d98-4d05-9088-095584602512"
        },
        "item": {
          "id": "5cdb77e9-1d1a-403d-b146-7b33cf8e070c",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "92c8fbfd-454f-4a53-bdf6-02f9a56b547f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "200c9fb0-cac1-4aef-a143-434a64ef0f5e",
        "cursor": {
          "ref": "59b68093-7d7e-47a4-94a0-521533afb20f",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "2bed21c9-7770-4567-bd80-d9284732978e"
        },
        "item": {
          "id": "200c9fb0-cac1-4aef-a143-434a64ef0f5e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "d56e187b-3e7c-41f9-83b5-f38bdc347885",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08a7c00a-5dde-4de9-8feb-f235d7cb05fa",
        "cursor": {
          "ref": "6a462664-80d2-4581-aea4-3940f5ea95d6",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "7d67c093-578b-445d-8097-5b9ad9b10c29"
        },
        "item": {
          "id": "08a7c00a-5dde-4de9-8feb-f235d7cb05fa",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ae854447-4123-423d-a2e3-65560857ed92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb43a380-dc34-44a1-ad8a-85edc9368092",
        "cursor": {
          "ref": "6be91f6d-c1aa-45d5-874b-e22d3b4d3c1a",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "2c17e5a8-b190-453d-aaad-03169c0639a8"
        },
        "item": {
          "id": "cb43a380-dc34-44a1-ad8a-85edc9368092",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a98cc17f-2a6a-427a-835e-3789b91b0f7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58a3c4cc-27e4-4cf5-a328-69691c74f54d",
        "cursor": {
          "ref": "d4b46bb1-5db2-4542-9496-77e43af94e8c",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "9f3dbb99-cf5b-4e32-a515-5e3a78acf8bb"
        },
        "item": {
          "id": "58a3c4cc-27e4-4cf5-a328-69691c74f54d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "cdf56ad7-57c0-425f-81a6-d18c2d2819ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06481438-64fe-444a-852e-312cea5d1401",
        "cursor": {
          "ref": "ffcd23b8-5d74-46a6-a778-e83008db3aba",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "dbed8dc7-1f86-47a5-b731-cf5ba9cce12f"
        },
        "item": {
          "id": "06481438-64fe-444a-852e-312cea5d1401",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "cc036f9a-9e11-4606-a66f-80e9bdd59d5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "441e2531-21cb-4dd2-ac13-916699793d06",
        "cursor": {
          "ref": "ef45cf03-e2c9-4519-93e7-fb20aa0ffeab",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "8b7e7586-f97e-4eb9-9c75-ec96156432f5"
        },
        "item": {
          "id": "441e2531-21cb-4dd2-ac13-916699793d06",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "28191206-2b14-4cc0-ac11-da2217f55946",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55361b1a-cfe1-4a67-88e7-63c5d4046fed",
        "cursor": {
          "ref": "6770b898-2cc5-4d85-90ba-632adeddab3d",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "0cd86c7a-53b4-4a29-a4a3-50b3a0cca186"
        },
        "item": {
          "id": "55361b1a-cfe1-4a67-88e7-63c5d4046fed",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "8fc1d358-49ec-4ae2-a0f6-b6ca9b969010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "509e48d5-e09f-45e1-bdf6-273ced6f9edb",
        "cursor": {
          "ref": "bf06dbf3-3645-4f7c-a09d-9b3fe4332f93",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "f916a3d3-7b1a-44f4-adb2-f7c6dd207a71"
        },
        "item": {
          "id": "509e48d5-e09f-45e1-bdf6-273ced6f9edb",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "9aa2e1bf-d66c-4c3a-8536-d0ca1f6996ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "605b8d97-fe13-415b-8d77-9f6c1a7abf95",
        "cursor": {
          "ref": "51110cac-b34d-4199-967c-0e774daa2123",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "abc173da-013b-465a-86ca-9f53d8f645ea"
        },
        "item": {
          "id": "605b8d97-fe13-415b-8d77-9f6c1a7abf95",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "6f6fda5f-4ab5-48ba-a9fa-f2773a15b5fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2d05aad-a6e4-42a8-9bf2-a121ba612baf",
        "cursor": {
          "ref": "6ff11218-d79e-4bbc-9c74-5bb99d263d12",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "f84b036d-49f8-4db6-ae4a-ce7d68765b6f"
        },
        "item": {
          "id": "d2d05aad-a6e4-42a8-9bf2-a121ba612baf",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "d36fdf9e-0edd-4b7c-bffc-b1e09e00a361",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c01012a-0db2-49b8-91f4-473434ef78b9",
        "cursor": {
          "ref": "db3c1257-6006-4156-99ec-39ec57528dbb",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "8cc0e012-5abc-4fcb-91d0-362c1d40dd4c"
        },
        "item": {
          "id": "7c01012a-0db2-49b8-91f4-473434ef78b9",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "86c46d3b-e6f1-43d1-8bf7-f549cc7f3a02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2537ccca-f222-4f40-ac85-4727535350d0",
        "cursor": {
          "ref": "c2a47075-92ca-4df5-b73e-1f7f0e11a161",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "a5e46ea6-2663-494d-b7a9-d092f60cf9c0"
        },
        "item": {
          "id": "2537ccca-f222-4f40-ac85-4727535350d0",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "b7861e9e-79a9-40be-8963-fdf014b878d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abf1c25c-59bb-40cf-ba8d-8716be74e96c",
        "cursor": {
          "ref": "33861878-c0c5-4cd5-9542-cfb39feab561",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "8ae8093e-eea0-4ee9-a4f7-a1452e1663e3"
        },
        "item": {
          "id": "abf1c25c-59bb-40cf-ba8d-8716be74e96c",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "cd484d09-3be6-47d4-90d8-0fa693eb136d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db23d2f8-84bb-40e6-8e09-43b5e4ae1b8e",
        "cursor": {
          "ref": "8345696e-b866-4c2d-b501-69166e76fcd3",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "df51f41c-3c19-4795-8085-6a9b1062f3d7"
        },
        "item": {
          "id": "db23d2f8-84bb-40e6-8e09-43b5e4ae1b8e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "1db4b34b-d968-45da-a5fc-216170d23d79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07774fca-d9b7-4567-89fd-e66a680f6ba7",
        "cursor": {
          "ref": "56911d1f-96d0-4784-92e4-6f0201bea2bf",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "c8b0e8f7-8648-4ad5-88d9-a709fc90ea36"
        },
        "item": {
          "id": "07774fca-d9b7-4567-89fd-e66a680f6ba7",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c1b6aca0-b0c9-4e07-bfe4-f5c5bf401b7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8a33e3c-2b9d-496f-96f6-e9d8a7b0a2b0",
        "cursor": {
          "ref": "6382a509-7689-4bd4-b8d7-01f47b6dd79c",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "dc013c44-574c-40bb-a59e-99139cc68e19"
        },
        "item": {
          "id": "f8a33e3c-2b9d-496f-96f6-e9d8a7b0a2b0",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "fb8baecd-9e46-4b92-9db3-a59cf935c947",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c240d3b4-10c7-4dab-b05c-80e1131b7dbe",
        "cursor": {
          "ref": "edc23389-df1c-4f48-9709-ac0486f1f28b",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "65af43af-79ba-47f5-adde-15257723ad4f"
        },
        "item": {
          "id": "c240d3b4-10c7-4dab-b05c-80e1131b7dbe",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a9a2f8ec-2a6c-4ce5-ba10-2705a7976093",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9765aa44-08d9-4302-9486-f3dd322e8bf7",
        "cursor": {
          "ref": "83c176a6-1693-4e63-98e3-e75e136d07bf",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "c09bf916-7a50-4ce1-a397-82d3ecd93b8d"
        },
        "item": {
          "id": "9765aa44-08d9-4302-9486-f3dd322e8bf7",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "70c3ad43-bc1a-41ed-821c-5461d4a6192e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "298b6a10-7511-46fc-a954-15ccd95e066e",
        "cursor": {
          "ref": "f1d57f18-38fc-4918-b013-07f1b31b6118",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "6891200b-f43b-432b-9b33-20665fc43675"
        },
        "item": {
          "id": "298b6a10-7511-46fc-a954-15ccd95e066e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "4150b0c2-7c6d-47dd-85f5-60a0d9c713e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d4171d0-2903-4948-9e5c-948302e9a48b",
        "cursor": {
          "ref": "5fff6baa-a5ea-4c4a-9da5-325d0bed9ca1",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "4fcf5579-082f-4273-b133-50fd4feef55b"
        },
        "item": {
          "id": "8d4171d0-2903-4948-9e5c-948302e9a48b",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "22791ab5-532a-407a-ba0e-aa48cc409c7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16b13f6a-8fd0-406e-a88b-81df0513b6f4",
        "cursor": {
          "ref": "8c77dda0-409b-4198-b46b-af55dff0a327",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "bafe547e-2601-46db-bc9f-442469a1ad99"
        },
        "item": {
          "id": "16b13f6a-8fd0-406e-a88b-81df0513b6f4",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c1465eb3-2cc3-4d79-b032-d46822c3df36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8265b84c-1e86-497d-af80-70524b73d719",
        "cursor": {
          "ref": "5728090c-0bd9-4901-9700-57b28c0104be",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "3f271fef-048f-4fd0-bcc9-fe1c22a79f04"
        },
        "item": {
          "id": "8265b84c-1e86-497d-af80-70524b73d719",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "74af7f88-2390-4d38-94fe-e99befee0230",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1241b6f-3681-40d3-86f4-bd575dd96119",
        "cursor": {
          "ref": "63ae9144-4aa2-41e0-bc43-d08f15f58a6d",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "6fb1035e-f8dd-4500-b518-b9e72a7dd5ac"
        },
        "item": {
          "id": "a1241b6f-3681-40d3-86f4-bd575dd96119",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "3ae228bd-b1e9-413c-9bea-4c1682922147",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c1cfd16-cbb7-4c22-860d-6cf5063674dd",
        "cursor": {
          "ref": "71c4d1b4-447f-4f8d-921b-dbddead60594",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "5ce94791-3825-46d8-9413-62279125af62"
        },
        "item": {
          "id": "4c1cfd16-cbb7-4c22-860d-6cf5063674dd",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "57303eea-7b2a-4d94-8f97-d865cc22089f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06977dba-81f2-462f-9cbe-eda0661d22e6",
        "cursor": {
          "ref": "808a820f-546a-4d4a-8e24-598509987262",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "949fae80-c705-48cf-80d8-d194137783da"
        },
        "item": {
          "id": "06977dba-81f2-462f-9cbe-eda0661d22e6",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "022f8a8b-2c10-457c-ae30-55c0ae5d13f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aeaf925-fb28-4fae-be6b-b654b587a62f",
        "cursor": {
          "ref": "09982c64-66ef-42f7-ad33-373c65d19b86",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "f14ebcb5-3b3f-43aa-a985-2a0814d46003"
        },
        "item": {
          "id": "8aeaf925-fb28-4fae-be6b-b654b587a62f",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "fc2468cb-f939-47ea-8eb0-126acc1605dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d299ecee-478d-4f79-bfd2-7623fbbf50fe",
        "cursor": {
          "ref": "86db2234-d3fd-4f53-bf9e-2832d611b82d",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "d20bd577-55a5-45c0-8f33-7163caef754f"
        },
        "item": {
          "id": "d299ecee-478d-4f79-bfd2-7623fbbf50fe",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "133604f1-4517-471c-bf4a-784d07ff374e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acc5747c-e961-4024-8e67-4216759d8a8a",
        "cursor": {
          "ref": "6599804f-3686-4d8d-a0f2-ca36d1d99dc6",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "4032860c-ef15-44c9-8728-83af46fb63a7"
        },
        "item": {
          "id": "acc5747c-e961-4024-8e67-4216759d8a8a",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "fb6c1446-08c4-403c-a5c7-a7db844b84cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22f940d3-4541-4e69-ba7b-5311fa1592e4",
        "cursor": {
          "ref": "4933ddaf-a81c-4ddd-8d65-c3d5c076072a",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "a75ad55d-e79b-4991-94e9-b5bedb32ee88"
        },
        "item": {
          "id": "22f940d3-4541-4e69-ba7b-5311fa1592e4",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "87619186-e0f3-4507-a4cf-919af7950fc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e81c601-f2bf-4325-9c58-cf5413d5f7af",
        "cursor": {
          "ref": "b4749846-1d60-4bb3-b2d0-8515583cf663",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "e30ec1a2-0d1e-4f3b-b4a1-d1ec6be6aef7"
        },
        "item": {
          "id": "3e81c601-f2bf-4325-9c58-cf5413d5f7af",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "5bad3d0e-03c6-4e28-96ad-031199229ac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "073f0029-eda5-40a2-95ab-3a3569236527",
        "cursor": {
          "ref": "c738d42e-5338-4503-860d-9c9fc7179060",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "6942380c-2a22-4cc3-8479-e69988eddd38"
        },
        "item": {
          "id": "073f0029-eda5-40a2-95ab-3a3569236527",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "2a25a3d2-6a8b-4177-be19-dcaf364f60fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4703927e-9957-4513-a259-a6c8c09467d2",
        "cursor": {
          "ref": "938042c8-1812-49e9-bfb7-7f3ac3ea8823",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "5dcf8aea-e065-498c-b9e8-d061981130af"
        },
        "item": {
          "id": "4703927e-9957-4513-a259-a6c8c09467d2",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "71e95ae5-6845-46f1-8cbd-c443461e4446",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dd2bd77-6bbb-4a87-b359-7b40ecaf80f1",
        "cursor": {
          "ref": "25623aec-63da-4a43-8729-af59c45c3bcf",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "afaa8ae0-48e2-4fdc-8970-614099f17ea8"
        },
        "item": {
          "id": "3dd2bd77-6bbb-4a87-b359-7b40ecaf80f1",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c86fe001-70a8-4501-a3e0-af8aefc52ceb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57da3ceb-0ee8-4711-83a1-1541aa8739b8",
        "cursor": {
          "ref": "e843ea64-429d-413e-9972-22cbd990b929",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "40a4176d-dd52-4ffd-a8ee-04009f5d8f31"
        },
        "item": {
          "id": "57da3ceb-0ee8-4711-83a1-1541aa8739b8",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "b92e7f60-5899-4e7d-8d28-26e6daabd888",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cc0d3c2-4455-414e-bd25-5794f328c9c3",
        "cursor": {
          "ref": "1efe08fc-9b7b-42bc-aa54-0887e607fd88",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "b8ae6970-2f8c-4ed7-bb45-d046a3b22f58"
        },
        "item": {
          "id": "4cc0d3c2-4455-414e-bd25-5794f328c9c3",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "6659ae4f-8722-4f9a-a9ff-2b711c39c8ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46a78348-7d7d-4bf2-8ac8-03cdacf66258",
        "cursor": {
          "ref": "d83ae75a-464b-4dbf-b966-d5c430e6791d",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "eb65300a-bcfb-46b4-942f-fe69f0dc21c3"
        },
        "item": {
          "id": "46a78348-7d7d-4bf2-8ac8-03cdacf66258",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "46d07659-99de-425b-bc3b-ece4e18b5635",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c73fb7a-1e65-4868-9855-dbe7294c21f6",
        "cursor": {
          "ref": "7331e786-db17-40e7-a25f-cfaac7d6a7bb",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "db576188-9d6e-468b-a979-d67693634681"
        },
        "item": {
          "id": "9c73fb7a-1e65-4868-9855-dbe7294c21f6",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "c3771b0f-46a9-4e0b-983f-38cc1fde8c6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a9f33a1-8239-4a2b-bbdb-4b7f0eebf686",
        "cursor": {
          "ref": "9f814507-11ee-4969-89f5-a325098b75f7",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "e49d98b5-9c68-4e38-b296-9f825a794261"
        },
        "item": {
          "id": "2a9f33a1-8239-4a2b-bbdb-4b7f0eebf686",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "026d7bff-53de-49cc-b329-8e82243448ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72aa630e-298d-40ad-9fc4-b7ff5e0a4027",
        "cursor": {
          "ref": "66ec8741-0d0e-4461-97ed-1ad1e531916f",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "d18987d5-0d7e-450f-9f86-d58eb89eed44"
        },
        "item": {
          "id": "72aa630e-298d-40ad-9fc4-b7ff5e0a4027",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "6280e1b9-2bc4-40d4-9367-a24f244ec8f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04959d64-f6c6-4bce-ad31-c36aed83af88",
        "cursor": {
          "ref": "26953f04-3a15-488e-b659-394ff707ec1d",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "b8e66ba1-8138-4fc8-90ee-963e62473422"
        },
        "item": {
          "id": "04959d64-f6c6-4bce-ad31-c36aed83af88",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "8dad405d-1390-46a3-ac6b-ef7f86977cd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b789a86-9e14-42b9-87c4-cbedd4bd8819",
        "cursor": {
          "ref": "6c1b5751-de11-4664-97ef-7eb4ac04c68c",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "2c2cf71d-ac16-49d2-be83-986c6960a716"
        },
        "item": {
          "id": "1b789a86-9e14-42b9-87c4-cbedd4bd8819",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "ca0dfda8-fcab-4b99-9020-819ba4e26276",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecd2f3a7-a58e-497c-943a-fa68a59ab608",
        "cursor": {
          "ref": "43992dc6-2b84-41c9-b8ed-d8cf200be0e8",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "eefe0129-a1c9-4280-8fc3-62e999653cbd"
        },
        "item": {
          "id": "ecd2f3a7-a58e-497c-943a-fa68a59ab608",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "3918fa35-75ef-4e30-9bc5-070a2f1b1e4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a92fd65-3cd2-4717-afaf-eb51d3667e97",
        "cursor": {
          "ref": "10d6e24f-ca48-4732-9784-ac04b3c0a826",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "2668879b-2348-4edf-9427-7c8587898e69"
        },
        "item": {
          "id": "4a92fd65-3cd2-4717-afaf-eb51d3667e97",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "623eeb95-cdd8-4eed-a439-b86717a1d81f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "527718ac-f862-4ef5-b043-f485bcb23f4c",
        "cursor": {
          "ref": "33e45cf4-56ab-4930-a7ad-73a8443637c3",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "e3a81435-f695-4433-a441-227c1f1865f8"
        },
        "item": {
          "id": "527718ac-f862-4ef5-b043-f485bcb23f4c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "5e91f788-645c-4bff-b4cd-3fa5e60f8460",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "420b7d4e-72f5-46fe-a708-fbb79b19947a",
        "cursor": {
          "ref": "721f2c5a-6642-40a8-9329-ba8eec810358",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "7d153e2d-a228-45a4-83dd-0da2915dbe8f"
        },
        "item": {
          "id": "420b7d4e-72f5-46fe-a708-fbb79b19947a",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "74e1bae9-9ca9-44d0-a56f-2f29a8234968",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84ce3480-a389-4fd9-8a47-029d1660b085",
        "cursor": {
          "ref": "4139b5bf-5e53-4d13-9ea4-8ae2b36f84e4",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "a3ee75d0-a9b2-4293-9c5d-0876740b6abe"
        },
        "item": {
          "id": "84ce3480-a389-4fd9-8a47-029d1660b085",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "88ff2547-0cdb-44d1-b98a-35503a0bc380",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "810ba0a8-f065-4b50-9d9e-21bd0ef77529",
        "cursor": {
          "ref": "731b8eb8-955f-470e-ad74-cb064a2568d6",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "b52e66b5-d2e2-4528-ada9-2cc239e80052"
        },
        "item": {
          "id": "810ba0a8-f065-4b50-9d9e-21bd0ef77529",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "4666f32b-49ac-449f-9163-0aa946b9479e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb093488-105f-4cba-89f0-04a94cf9fa3b",
        "cursor": {
          "ref": "6dfd87be-791b-4931-b12a-e18d763050e5",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "70a63056-e0e3-43eb-b843-9a9a07657ced"
        },
        "item": {
          "id": "eb093488-105f-4cba-89f0-04a94cf9fa3b",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "7a769346-e34e-453e-a3eb-30e53e9117ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6b8780d-6a63-49f7-8481-9780477a3e42",
        "cursor": {
          "ref": "453bb39f-f2b3-4586-a503-0cfee35ed416",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "0384cafa-9bf0-4821-91f2-df004860538c"
        },
        "item": {
          "id": "a6b8780d-6a63-49f7-8481-9780477a3e42",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "96d2b218-8242-4950-bd06-0c5181fde09c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dea0c2b-0e6c-46c9-8d70-3c8f0f6aa607",
        "cursor": {
          "ref": "31ca4127-1d7d-4868-8d7f-5207fdabb296",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "5c283502-0906-40dc-b3d5-c24d4daeb55d"
        },
        "item": {
          "id": "0dea0c2b-0e6c-46c9-8d70-3c8f0f6aa607",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "40f3795a-888d-4b78-b168-0045dce1c2f1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "75021a7d-47f6-4be9-975b-722c08da5b8e",
        "cursor": {
          "ref": "09917b12-d6dc-4f76-84e1-b37cdaa4603c",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "922b79dd-3840-4253-9459-7be8a80f09de"
        },
        "item": {
          "id": "75021a7d-47f6-4be9-975b-722c08da5b8e",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "14962830-d416-4fb1-a7e6-7446d9e3b31e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 304
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f0b2231-2926-4fcd-bcc2-f6e7df416a28",
        "cursor": {
          "ref": "0d6c101f-4fd3-4960-ba72-fc40496e3b9f",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "34fdc8f6-eba0-4650-bc6b-8db103d6208b"
        },
        "item": {
          "id": "7f0b2231-2926-4fcd-bcc2-f6e7df416a28",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "1903dbef-0783-4770-8fe1-45a4b1944ff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25bd7746-c441-46df-90e7-24a8cb4d61d9",
        "cursor": {
          "ref": "b1634a08-4356-4352-a8a4-12d064b5616b",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "b1434a62-deda-4450-ac0c-acf6d91916ed"
        },
        "item": {
          "id": "25bd7746-c441-46df-90e7-24a8cb4d61d9",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "8874ebc3-71ff-4a78-9931-b46ecb5eb777",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "609cf261-c8e2-443c-a931-4e9fcde23d18",
        "cursor": {
          "ref": "75a92b42-cd21-41ce-bcd7-85ad0e03f5d3",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "02bac5a5-630c-4497-9966-dbbf6f248582"
        },
        "item": {
          "id": "609cf261-c8e2-443c-a931-4e9fcde23d18",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "35cf8821-0db7-4396-8337-219f813c5907",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "662331fc-c29f-4d2d-b24c-2c94d217ca3d",
        "cursor": {
          "ref": "a8d9ebc2-353e-438f-a094-e803900f830f",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "0729024e-e953-416e-aa32-7b3890a41ea7"
        },
        "item": {
          "id": "662331fc-c29f-4d2d-b24c-2c94d217ca3d",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "e11c3420-6acc-4dd2-b460-8b78da0c5a6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 304
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3328c118-5e89-4bb0-95fa-24a1218aa831",
        "cursor": {
          "ref": "67798cdd-f821-4d8f-908a-11aab7c43fa7",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "cf08af5a-bc5c-4d94-b307-73b2a748a51e"
        },
        "item": {
          "id": "3328c118-5e89-4bb0-95fa-24a1218aa831",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "411489af-9a54-4f85-807d-e400563d43e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c8fae23-f0e1-484f-a7a2-22b0c16ab7f6",
        "cursor": {
          "ref": "d96dcf47-6f4f-4dac-b670-1029487263d6",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "4f34fe85-fcfd-43ff-81f6-e66a2417bac8"
        },
        "item": {
          "id": "4c8fae23-f0e1-484f-a7a2-22b0c16ab7f6",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "589be057-3383-443f-90de-945edf566984",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0834c994-c797-45cf-b15d-c79d4466e013",
        "cursor": {
          "ref": "9a266eab-4f79-41c2-b466-8f6061c9e8ae",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "7765fd95-6e95-4808-ba05-5dc81ad69988"
        },
        "item": {
          "id": "0834c994-c797-45cf-b15d-c79d4466e013",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "8bb1482c-c95c-4070-85a8-47aa7cfa9f04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6728692-a91b-4cfe-aabc-6dea49c46b43",
        "cursor": {
          "ref": "2f82dabb-b89e-44c5-ac23-42048996079c",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "66a3d1d7-2217-4614-87a7-f39817e71193"
        },
        "item": {
          "id": "b6728692-a91b-4cfe-aabc-6dea49c46b43",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "72a07ad9-f2b9-4633-bf61-844b16424800",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88e763fb-365a-47f6-a433-4f878b34771f",
        "cursor": {
          "ref": "5498ed5a-bde4-47a9-a8c5-b480968b1558",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "be2c33ac-d62f-44b5-9364-cc497a6804f4"
        },
        "item": {
          "id": "88e763fb-365a-47f6-a433-4f878b34771f",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "fdfba997-4fa5-4fdc-8d57-fd1ec326de6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd850a65-53a7-47aa-8fc9-be165761b7da",
        "cursor": {
          "ref": "8b3c18c7-77c9-49c3-bea8-f7722d57b8f6",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "ea4c7c61-7377-4d07-a27f-04b43686a1c3"
        },
        "item": {
          "id": "dd850a65-53a7-47aa-8fc9-be165761b7da",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "171315fd-fe14-4a08-b633-43d255d178a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 186
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ca53088-1733-4318-92be-e418beee61fc",
        "cursor": {
          "ref": "f34fe769-a9dd-4824-a409-caf0ca918299",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "b542abf8-e035-416a-bd6c-6918ceb656d1"
        },
        "item": {
          "id": "0ca53088-1733-4318-92be-e418beee61fc",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "8483ce5e-2656-4764-9e5b-a8bd11627a28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50f34299-fa3e-4a26-a230-fbfd4bfb239d",
        "cursor": {
          "ref": "bcfab071-97cf-4cce-9c3e-7b5964ac7fae",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "cf478c42-91aa-4712-bef5-4c538c28c968"
        },
        "item": {
          "id": "50f34299-fa3e-4a26-a230-fbfd4bfb239d",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "06ef424f-bf07-48f5-9896-3aaf660a192f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f7f9df9-293a-4936-8f82-5a387f5e7597",
        "cursor": {
          "ref": "9340b25d-dab5-4aea-a645-55f18eedf0f6",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "1e7489b2-218e-4a3c-910c-78966a72bc8f"
        },
        "item": {
          "id": "9f7f9df9-293a-4936-8f82-5a387f5e7597",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "db3b8f3f-b522-4071-8e23-951c83e85257",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5bd79f3-1b72-459f-b05c-111fd832fe20",
        "cursor": {
          "ref": "a43e73aa-4486-4e53-9731-53a741ed29c4",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "58f08a67-5267-46c6-906f-5aa603194c27"
        },
        "item": {
          "id": "b5bd79f3-1b72-459f-b05c-111fd832fe20",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "49417518-3a32-45b2-ad9c-afacfe25bd30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8687f5f-ee4b-4182-bda2-830cddb714a8",
        "cursor": {
          "ref": "2fbed6c1-c194-4305-a5f9-ac3f2eb9cf22",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "cb98f36e-3bea-4620-a8a1-455b37245c94"
        },
        "item": {
          "id": "d8687f5f-ee4b-4182-bda2-830cddb714a8",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "a6c80d2d-57f2-4518-91e9-489c8ab3aa16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cd72577-bb1f-4381-b90a-2d7eff60ee0b",
        "cursor": {
          "ref": "855da2ce-9c3d-45fd-9e75-9e0098785a73",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "662e5f5a-08c0-470d-938b-0e8560d9e506"
        },
        "item": {
          "id": "2cd72577-bb1f-4381-b90a-2d7eff60ee0b",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "eb0ca3aa-fe8a-4729-9b90-58872cbab3b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f6ec3c5-b089-4493-a2ed-b44258709a2f",
        "cursor": {
          "ref": "26fa01d9-9bf0-485b-9f85-89cc19648e51",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "8e4745ef-23e0-46bb-acdb-18bb037d1891"
        },
        "item": {
          "id": "8f6ec3c5-b089-4493-a2ed-b44258709a2f",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "d08e2b66-dd8c-4b9a-8eb6-54c9969c0806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28a76e64-00b8-4a32-8a67-80d78435725e",
        "cursor": {
          "ref": "b4da8c0d-972b-4102-8c16-948560dd9bde",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "c2202993-5ce8-4974-b6d4-fe471df8ee1e"
        },
        "item": {
          "id": "28a76e64-00b8-4a32-8a67-80d78435725e",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "af573781-3662-40ff-91c0-1935bac4c0da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c83f14a-959b-47f8-8024-90577723756b",
        "cursor": {
          "ref": "598f15e0-e800-4d3b-aee8-852e04b3542c",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "5fdd1d57-9242-4ce4-bee8-2036e2d51033"
        },
        "item": {
          "id": "6c83f14a-959b-47f8-8024-90577723756b",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "89c54149-8675-48bc-b46e-7c666610a719",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "514ddefd-a029-4f23-8202-ccebb8a8d026",
        "cursor": {
          "ref": "66aa38ca-8f43-4d35-97a3-aeddf040a725",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "389b29c8-2998-4fb8-b019-918f614e4048"
        },
        "item": {
          "id": "514ddefd-a029-4f23-8202-ccebb8a8d026",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "ebfba8ce-92fa-4348-a98d-2d4f8fd49348",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a89ceca2-b871-4373-b790-71f3a20dc1b6",
        "cursor": {
          "ref": "9a1c2955-dfa6-4842-a146-c8346ceca080",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "631f2a93-5e94-4598-bbbd-d254df750829"
        },
        "item": {
          "id": "a89ceca2-b871-4373-b790-71f3a20dc1b6",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "ab4980a2-c91b-4fd5-b663-27405a532bfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc668f2a-1a48-4db2-ad80-1a0ca1533f84",
        "cursor": {
          "ref": "4f169ba9-7b3a-4eb5-a9cf-754eeab91863",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "91891f5d-4ab1-4d8f-ae19-426e289bfdcc"
        },
        "item": {
          "id": "cc668f2a-1a48-4db2-ad80-1a0ca1533f84",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "3da8b7b1-9c0a-4dbe-a311-62360b94f8e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2b389e2-3ecf-4315-ac1a-a8fc936b4281",
        "cursor": {
          "ref": "162fa0e4-f791-4cf6-90d5-a13f83939008",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "fb9fe87d-d040-4930-be55-7d3a574251cb"
        },
        "item": {
          "id": "c2b389e2-3ecf-4315-ac1a-a8fc936b4281",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "bacaf9dd-a04e-4444-929a-95b97908673e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "966895f5-2b4b-4ae3-b181-661ce28b61de",
        "cursor": {
          "ref": "991e6e6b-88dc-49c2-8dcd-efd07c344232",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "dd4323c2-2bd4-4cf8-8da4-b68a07b38e90"
        },
        "item": {
          "id": "966895f5-2b4b-4ae3-b181-661ce28b61de",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "172e7541-415c-4d5a-ba9f-54a4c89819c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6a594d1-7c28-463b-a2e1-b79dc7eeed67",
        "cursor": {
          "ref": "a6ac2ca6-cd02-4feb-8e81-6fa824c573ea",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "57718823-d136-49f7-a336-c1d57188341c"
        },
        "item": {
          "id": "a6a594d1-7c28-463b-a2e1-b79dc7eeed67",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "32aab0a0-68ed-4b67-a99c-5682c694c389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d19b4c35-2f97-4163-94f0-4f64d89c3687",
        "cursor": {
          "ref": "8b218c20-2d49-449b-a398-5f3d5607d844",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "d6a025f5-f229-4157-bc0d-7bff645cf969"
        },
        "item": {
          "id": "d19b4c35-2f97-4163-94f0-4f64d89c3687",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "e9510dbd-ef56-4345-8dac-e2f2d32005ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5280bcdf-29a1-442e-980b-e94876bd95dd",
        "cursor": {
          "ref": "8fde5d04-e4fc-45fd-a0a4-75ee10930fe7",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "d159f45d-231c-4488-b916-71b393ff40e0"
        },
        "item": {
          "id": "5280bcdf-29a1-442e-980b-e94876bd95dd",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "b1aefc42-4340-43f7-bf28-53700bb6a210",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff9d556a-1ee8-4f1e-abe5-44af7660555e",
        "cursor": {
          "ref": "90c4ce3e-6a7f-4e42-a7b8-e7f02d8a7a02",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "8c763b58-df5b-4a3a-b971-2bf930aa2079"
        },
        "item": {
          "id": "ff9d556a-1ee8-4f1e-abe5-44af7660555e",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "628572e6-ada1-4732-adcf-f6f647b576d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fc02a33-3094-4884-89c0-c77971af3096",
        "cursor": {
          "ref": "6a0a8ed5-34cf-450a-b6b6-eab0f206e14f",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "52ed52bf-4698-4f46-b119-059ae0a091cc"
        },
        "item": {
          "id": "5fc02a33-3094-4884-89c0-c77971af3096",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "f643522e-3714-4818-bee1-e473efef410e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e060b9ea-570b-4422-b32f-492569977973",
        "cursor": {
          "ref": "850216fb-9bc4-4670-8217-9e439c49b42c",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "559e07c7-5356-496d-8f94-73a1aa5f0ec4"
        },
        "item": {
          "id": "e060b9ea-570b-4422-b32f-492569977973",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "4c729967-82b9-46f1-9c42-ce120c2bfe0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "240355a5-04ef-422e-a1e1-ada038b8f3ed",
        "cursor": {
          "ref": "a585cd9f-2d5f-4a99-9507-6b9371fd2b9c",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "75db7c15-96e4-408f-a15e-847be60d59f0"
        },
        "item": {
          "id": "240355a5-04ef-422e-a1e1-ada038b8f3ed",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "c8f91c7b-5ea9-40e6-b445-55f2a3d92383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca821596-058e-4e92-a85f-9c3396c51d24",
        "cursor": {
          "ref": "5b68611f-30a0-47f8-aab2-ec93e005efba",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "bb76dfd4-8f0e-4e8c-88ef-6f1cb32b265b"
        },
        "item": {
          "id": "ca821596-058e-4e92-a85f-9c3396c51d24",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "3ec0305d-599c-47f5-a19e-673d6028b3fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c497f60-25d2-4b77-8f90-be6f1ada51ed",
        "cursor": {
          "ref": "c189a68b-b33e-4e37-a195-f59612549686",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "610c4e7d-3328-43bd-b14f-25f197a6d246"
        },
        "item": {
          "id": "7c497f60-25d2-4b77-8f90-be6f1ada51ed",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "fc8ef2d7-3239-42c4-88b4-70486c771e85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63233111-6cd7-46fb-b2b0-ed3ab3ffcb43",
        "cursor": {
          "ref": "84198037-e51f-4900-b362-7a659701b474",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "a4cad8e3-5cd8-421e-8220-45ea7ff88c80"
        },
        "item": {
          "id": "63233111-6cd7-46fb-b2b0-ed3ab3ffcb43",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "b1385e93-c03b-45af-92cf-3b11776c9c00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b35e10f-f400-4278-b1f9-b895ca0e0b38",
        "cursor": {
          "ref": "a7e9c823-167a-46d6-a1ee-a10f50c3c1d6",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "e3564d8f-e4a0-4118-a480-0db990832efc"
        },
        "item": {
          "id": "6b35e10f-f400-4278-b1f9-b895ca0e0b38",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "86b7969f-4197-4faa-bdbc-7f7da456a942",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d83ce1ba-1497-4b49-b9f7-0bb3789b9acb",
        "cursor": {
          "ref": "dc2d586c-7675-4905-adc1-7d029c1a7f85",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "861b589c-b753-44a0-b266-30858489ba16"
        },
        "item": {
          "id": "d83ce1ba-1497-4b49-b9f7-0bb3789b9acb",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "f408cafd-5e9b-4edb-8edc-bb4c0b24b4e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2b97a62-cba5-49dc-bea1-8d7c9d98bc35",
        "cursor": {
          "ref": "b92a6fbc-1132-420e-82f0-9b18c39d5bab",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "e58c77fd-817c-4679-97b8-2138ec4046a2"
        },
        "item": {
          "id": "a2b97a62-cba5-49dc-bea1-8d7c9d98bc35",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "c4528ea7-cf06-41d1-8460-8e93c027496d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72892dcb-2563-422b-b4c4-ac0210af0efb",
        "cursor": {
          "ref": "1fc8a4a1-21a5-4e3f-8637-238343dc35ac",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "f67bcd31-89a4-4aef-a2ba-48fed849beee"
        },
        "item": {
          "id": "72892dcb-2563-422b-b4c4-ac0210af0efb",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "e1763ef2-4eaf-4193-a56b-687a19cd13f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f17c8f2a-1143-445a-9418-57b1d08a845f",
        "cursor": {
          "ref": "a5d1e8fc-e32c-4fa7-a300-00cb593d9a38",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "56ae1e94-a55c-41a0-9b69-9e72b49f4c7c"
        },
        "item": {
          "id": "f17c8f2a-1143-445a-9418-57b1d08a845f",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "095600ee-6929-4def-ae78-0ec5ba9c7469",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2b9b5e7-78d0-4cbd-84c8-644ffc6b0fd5",
        "cursor": {
          "ref": "e023a670-0fe6-4361-8cfc-66d6ba06f291",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "5e59fe22-2b68-46e2-8aad-e8949aa6c9da"
        },
        "item": {
          "id": "f2b9b5e7-78d0-4cbd-84c8-644ffc6b0fd5",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "e9e9b8d3-8f81-45ef-af64-1f034262a341",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1dfbf80-7a56-4974-ae03-c1e6a385f875",
        "cursor": {
          "ref": "a40174e0-5171-4353-a4b7-ad14132ed1cc",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "9c9d793a-9ace-42ed-96df-99fb9e5ee2dd"
        },
        "item": {
          "id": "b1dfbf80-7a56-4974-ae03-c1e6a385f875",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "0785c630-4f7a-4e8a-8326-ea5fdaef8d5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d8417a3-2fb1-46e9-9d55-b6fc6acda295",
        "cursor": {
          "ref": "f87b61af-295b-459e-b75d-c7de9a1c48df",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "76b3c832-417d-402d-8b06-fc8eaebe664c"
        },
        "item": {
          "id": "4d8417a3-2fb1-46e9-9d55-b6fc6acda295",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "9405790d-b7ed-42ff-9a00-5b06a88bb50c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28fee1f8-838e-4a87-b78f-6e96fd1a1394",
        "cursor": {
          "ref": "ad3f9af4-6650-440a-8867-20764dab5bc1",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "36711ae6-c085-4cef-96c6-69858b31a6b2"
        },
        "item": {
          "id": "28fee1f8-838e-4a87-b78f-6e96fd1a1394",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "7693aeef-33b5-4440-aa49-07caf3757724",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "401961c8-11c6-4b90-b7e9-dd3ae7c21415",
        "cursor": {
          "ref": "ad0b7808-5083-4eba-aeed-ec63b492262c",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "42340164-3df3-46d6-b81b-b46e4995aeec"
        },
        "item": {
          "id": "401961c8-11c6-4b90-b7e9-dd3ae7c21415",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "dac2eedb-002b-4aab-af26-2fc62d502ecf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4af30aa-2e15-4e99-9567-c23f519c6d76",
        "cursor": {
          "ref": "25d7ec4f-7a3f-4927-8060-370e0713457d",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "999a508d-b43f-48a1-b03d-28178954f1a5"
        },
        "item": {
          "id": "a4af30aa-2e15-4e99-9567-c23f519c6d76",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "91424fed-e292-4be7-a5d4-91a430562724",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd3e41fa-eb05-4e6b-9421-8f5c12e837aa",
        "cursor": {
          "ref": "309ac228-0977-4a01-a4e9-bf7bb58a37c2",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "c6c77194-aa12-4105-ad19-99dc60fb191a"
        },
        "item": {
          "id": "fd3e41fa-eb05-4e6b-9421-8f5c12e837aa",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "891ab976-48e2-4b92-bdc8-e431c006aa7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3a035eb-dbb9-42ed-a9a6-2bf6323bc97e",
        "cursor": {
          "ref": "85753056-1e4e-4835-90d9-26d28e403307",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "18071f7f-8763-4b1f-9f35-391afb4c2caa"
        },
        "item": {
          "id": "a3a035eb-dbb9-42ed-a9a6-2bf6323bc97e",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "b31e2a8a-7208-46c9-95fc-4b326868fa9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf32d364-53df-4af1-b743-a7b66bd9fcdf",
        "cursor": {
          "ref": "06692be0-9df3-43b2-939c-2fed5c8f8e83",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "1ed31704-c7a4-4257-8ca7-ef1e1ae851b8"
        },
        "item": {
          "id": "cf32d364-53df-4af1-b743-a7b66bd9fcdf",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "fb80d583-d273-497e-a95f-409b31285b1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80fc9f6d-cc0f-4559-a542-77b3f7403f2f",
        "cursor": {
          "ref": "b5210ed1-a202-4496-bb91-c6f8762d5043",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "a9358e09-0413-4338-83df-f475ae92a244"
        },
        "item": {
          "id": "80fc9f6d-cc0f-4559-a542-77b3f7403f2f",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "b7bfca44-94dd-45fc-8bce-31948965678d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60744489-638b-417e-8be8-9ab0ab1d1a25",
        "cursor": {
          "ref": "c87af80d-5701-4120-9feb-c6c2ea237a43",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "64901b37-b9ad-4efd-a001-d72d2d3912cd"
        },
        "item": {
          "id": "60744489-638b-417e-8be8-9ab0ab1d1a25",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "47692b84-e077-42c5-b6f0-dfa6e9887564",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 330
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13167988-ef17-4d07-b3f6-f85e1b8dcdd4",
        "cursor": {
          "ref": "a68deabf-3f7e-4ee3-8788-cffa8b5a838a",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "50839549-a6f6-47f4-935d-c5a2d884f88c"
        },
        "item": {
          "id": "13167988-ef17-4d07-b3f6-f85e1b8dcdd4",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "e80edc33-c3e6-4c64-adc9-c838e91e94ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c88f5032-8cb9-4720-8961-2b75200f5d6f",
        "cursor": {
          "ref": "afcdd338-d74b-4f4c-9990-3d9dd6b8debb",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "479db17e-4091-43f7-a040-58fb5edb0984"
        },
        "item": {
          "id": "c88f5032-8cb9-4720-8961-2b75200f5d6f",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "c6ea0d93-3b2b-4148-9168-4da34ec3bda7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bd0bdfa-d9aa-440a-b789-44ae8ec2b560",
        "cursor": {
          "ref": "b5e00e4d-6c4b-4e2a-9d03-c58f78e8c451",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "66bff15e-59a2-41ce-83a7-9801ed3cc404"
        },
        "item": {
          "id": "6bd0bdfa-d9aa-440a-b789-44ae8ec2b560",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "b2e9169c-ee4a-4db7-8543-fdda279021ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3aab5bd-43e2-4bdc-a40c-b746facaf89c",
        "cursor": {
          "ref": "1a120cf5-5cef-4fb9-a32e-5a9c50cbef14",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "fba5ec35-12ec-4f85-87df-a9a7f8eb771c"
        },
        "item": {
          "id": "f3aab5bd-43e2-4bdc-a40c-b746facaf89c",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "e9865ee0-fe32-44c4-9b0e-eaa31c4c011d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc601cf4-c471-41ca-939f-b7eed50c8422",
        "cursor": {
          "ref": "955b9b94-dd7d-471d-9cee-e622ec653aee",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "00d8fb7e-532b-4ed4-93a4-0dfc5153144a"
        },
        "item": {
          "id": "bc601cf4-c471-41ca-939f-b7eed50c8422",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "4f25ddac-e0c5-416f-ba53-5955b72756a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c1cf981-da06-44ff-b43c-a9a6f827492d",
        "cursor": {
          "ref": "c1a7fb3c-1a62-44d2-8a3c-550027c63598",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "c7bdbc81-d89f-4a50-a4b5-bf78ca0776cb"
        },
        "item": {
          "id": "7c1cf981-da06-44ff-b43c-a9a6f827492d",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "c9ee2165-dc20-4bde-b650-732fa6e374d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2edaa875-5c36-417e-ab3e-f4c8772232e6",
        "cursor": {
          "ref": "5d0c4dbd-844d-47ea-a67f-9e65dfc05bd4",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "c93cabad-6561-4e3e-a602-34b2158e110c"
        },
        "item": {
          "id": "2edaa875-5c36-417e-ab3e-f4c8772232e6",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "f228bf04-f04b-4e9d-a140-1262eb70ffd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12f4a204-1bd3-4ed4-baaa-0852b3728406",
        "cursor": {
          "ref": "7ccfb08c-cca6-4450-abf7-ce7d8ba90fa2",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "4453641e-eb3a-437a-a35a-ab4a0853118f"
        },
        "item": {
          "id": "12f4a204-1bd3-4ed4-baaa-0852b3728406",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "8beab5eb-3259-433a-bda9-227984fb1a61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edaaf583-bf94-4f4a-8399-ddf6e95ed8d6",
        "cursor": {
          "ref": "6facc027-e282-4411-9c91-7117761d3a3f",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "10456bff-7cd0-4e1f-b0f3-82664f70ce2a"
        },
        "item": {
          "id": "edaaf583-bf94-4f4a-8399-ddf6e95ed8d6",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "5b7a223c-bc7b-4dd0-8d69-dea60fbcfecc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5a6705e-cb55-48bc-9f0f-cc676027034d",
        "cursor": {
          "ref": "efc0599d-3e77-486e-9c17-7500b3e9ddea",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "22baff32-4a78-4a96-8ac2-96ff4eb82592"
        },
        "item": {
          "id": "b5a6705e-cb55-48bc-9f0f-cc676027034d",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "054a1422-a6f3-41e0-acc6-020e4cf8ee8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1965051c-a4cc-466d-8e0c-ba954f01e1ed",
        "cursor": {
          "ref": "357623f6-ba4a-466a-a1fb-fd17444a9dde",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "2427df78-98ef-40c2-a7da-58e1161f3018"
        },
        "item": {
          "id": "1965051c-a4cc-466d-8e0c-ba954f01e1ed",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "bf13b3a0-d55c-4860-8cbc-9390f90be3d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79c94d62-905e-4877-b628-9ea7a9dca101",
        "cursor": {
          "ref": "8373968b-370c-49ea-b810-f423609f8030",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "25d4e676-3b40-4b57-9f26-24f887921304"
        },
        "item": {
          "id": "79c94d62-905e-4877-b628-9ea7a9dca101",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "a30870d7-6cc7-4e5e-9bec-51818f1c7aab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0ad1543-e5e9-483e-af8d-bab39d836254",
        "cursor": {
          "ref": "3cfa43c1-b288-469f-a970-28bded3ccac6",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "98d347fe-86b6-4ce1-8398-5333a82753d8"
        },
        "item": {
          "id": "b0ad1543-e5e9-483e-af8d-bab39d836254",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "57ac3584-8dee-4efa-88d2-296809f0293c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 717
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aabb0e01-3a76-4563-a841-ff279ebfaa53",
        "cursor": {
          "ref": "3d630b73-55dc-4992-a2dd-e2ee2b7a298f",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "26490b0a-e66e-48a5-ac3a-85f8a41a3f13"
        },
        "item": {
          "id": "aabb0e01-3a76-4563-a841-ff279ebfaa53",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "abc566d0-57f3-4032-9c2b-f2fc9eed0d4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ec94b69-764d-4a44-841e-102a5d9e1f0d",
        "cursor": {
          "ref": "e018991b-4ee7-444f-830f-dc7d07d0dce1",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "6194afea-42e5-49a7-9051-ecfce0fa20aa"
        },
        "item": {
          "id": "2ec94b69-764d-4a44-841e-102a5d9e1f0d",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "8a8c0331-b08b-48ad-bc22-3085b7d0bb43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f3b1ebb-c835-467b-bd54-760975f7a1eb",
        "cursor": {
          "ref": "7673fdae-c73b-4696-906d-51b665e714d2",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "60abfb7d-c48a-4eb3-a57e-dae1d6e85580"
        },
        "item": {
          "id": "5f3b1ebb-c835-467b-bd54-760975f7a1eb",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "71090320-aada-4c23-86ed-eb34b75fbe36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be1ce995-48ae-419c-a05a-2bb7b2fb4fb2",
        "cursor": {
          "ref": "77a4da59-4ceb-4504-ae90-a4c8bb38df87",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "3ea044a6-8804-4ca9-852b-135a4656355f"
        },
        "item": {
          "id": "be1ce995-48ae-419c-a05a-2bb7b2fb4fb2",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "7b81d165-51e3-40ee-a93e-e181359b2981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 717
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8ae60ab-4eec-4e52-9d97-dc915289bb47",
        "cursor": {
          "ref": "f50f4b08-7653-4713-a43f-5eda6d37f202",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "e78cdeac-53e8-4e2c-a384-c560b1c935b0"
        },
        "item": {
          "id": "f8ae60ab-4eec-4e52-9d97-dc915289bb47",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "a07ec44e-2c4c-419f-9b13-38be853eacde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d66c509f-577a-4974-82ca-8468b9e4d9e6",
        "cursor": {
          "ref": "98926ea7-3d8f-401e-88b2-2aca6f81de65",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "59199f29-70c4-4f7a-b951-97dd413c66d8"
        },
        "item": {
          "id": "d66c509f-577a-4974-82ca-8468b9e4d9e6",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "0a8ba852-8fc6-4fb9-a03f-2f548e04daab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e5661fa-9f91-475e-9f32-3b9ee402aaf9",
        "cursor": {
          "ref": "4f6e9e77-1476-48bf-a793-01cd2a057622",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "c81b232d-fe4c-417d-b9fe-04508ce103ad"
        },
        "item": {
          "id": "0e5661fa-9f91-475e-9f32-3b9ee402aaf9",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "68cc0790-89a8-4337-be25-6c4032aefb27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c364982e-f989-49a0-9bcd-9f1c108efc50",
        "cursor": {
          "ref": "c3829b68-4900-4eb5-bea3-8b87b262a282",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "ace21523-62ee-4231-8d88-5c2c60e187c0"
        },
        "item": {
          "id": "c364982e-f989-49a0-9bcd-9f1c108efc50",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "a1ad0aea-addd-481c-8a79-4bc29ae9b3ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2133f34-ee05-4064-a3a9-ee707d465f42",
        "cursor": {
          "ref": "2be55e5c-c3bb-4297-9724-fa7f6bda9f29",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "03be9dd7-20be-43b8-b120-b9a6658518f9"
        },
        "item": {
          "id": "c2133f34-ee05-4064-a3a9-ee707d465f42",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "7288eb8c-362f-4ad0-b57c-e875281363d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2146e49-726f-47f0-9255-c7d0fbd10a25",
        "cursor": {
          "ref": "910be05a-1414-40eb-b1a3-0494960f9117",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "07797d48-7049-49b4-9c93-96152a103dab"
        },
        "item": {
          "id": "a2146e49-726f-47f0-9255-c7d0fbd10a25",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "3083f67a-c6f7-453a-b3fd-3e3d72c8c51a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 314
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48f6da6e-11fa-4c0b-aa6e-84a9d2b610d5",
        "cursor": {
          "ref": "7210f1e8-02b9-4806-bf31-170c6cb4e8b0",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "799c351b-d49b-4860-a9b5-bce2a4ebbcb0"
        },
        "item": {
          "id": "48f6da6e-11fa-4c0b-aa6e-84a9d2b610d5",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "486c11c1-9702-4902-aef4-d888d812ce69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0492fa6-bfa7-425f-ac9d-56a0f84808ee",
        "cursor": {
          "ref": "9618451e-f3fb-4652-a1fe-1a2784d8267f",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "11040922-a99f-48cc-b9f5-1d1a22a7b4b5"
        },
        "item": {
          "id": "c0492fa6-bfa7-425f-ac9d-56a0f84808ee",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "a50ed749-d768-4b42-95f3-7da2e4265e4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26a63eda-872e-4858-8a8e-3155f69d21d7",
        "cursor": {
          "ref": "f9e013de-3873-4a10-b669-408471de0718",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "b8a1267c-b9ba-4d67-8432-0e662d831815"
        },
        "item": {
          "id": "26a63eda-872e-4858-8a8e-3155f69d21d7",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "27fe3c0c-eb20-4265-b8e2-8810eb22b5f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "238c6175-2c69-485c-ad6c-16913913aa4b",
        "cursor": {
          "ref": "b7e2ada7-ff57-4d2e-9690-c54c2d4597c7",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "80219f2d-40c7-40cd-ba2c-6112af579032"
        },
        "item": {
          "id": "238c6175-2c69-485c-ad6c-16913913aa4b",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "3796e204-daba-4fc6-b8a0-3420e95aa3e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b150b66b-42cd-444c-b7c8-fd946586c7ec",
        "cursor": {
          "ref": "d0501559-a01e-4a47-aea8-22acdaad03c9",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "bbe1d0ba-446f-4cf6-aae0-5f38f0544b88"
        },
        "item": {
          "id": "b150b66b-42cd-444c-b7c8-fd946586c7ec",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "00202dce-af2e-411a-9058-5bb9020925e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04d8c661-8f98-4cdd-9b09-2580958f8dca",
        "cursor": {
          "ref": "cfea2e2c-4ac0-412e-a708-7d8a55cc10ff",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "e458a433-92cf-4148-b800-b763b17cf2ec"
        },
        "item": {
          "id": "04d8c661-8f98-4cdd-9b09-2580958f8dca",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "6398a58d-6380-44f7-9b48-39cc10cc8fff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21dd20f2-0048-4252-9f94-b1f8368cb682",
        "cursor": {
          "ref": "fc2f799d-ec97-47c3-b2a0-768ded0ba94c",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "91a11823-b8c9-4257-9f95-cf5618348496"
        },
        "item": {
          "id": "21dd20f2-0048-4252-9f94-b1f8368cb682",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "0745ba27-2581-4efb-87c3-9a41f1ddb545",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9de23229-cf5e-4f93-8eb3-a7ecbd898ce9",
        "cursor": {
          "ref": "b0c752ea-8c32-419d-9666-cfc6e2d8f51d",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "98c3dd4a-1f0e-4cf3-b7ee-cbef81af94dd"
        },
        "item": {
          "id": "9de23229-cf5e-4f93-8eb3-a7ecbd898ce9",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "75223437-88e3-4b27-96c3-68317a798d30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "329de290-c9b5-4ccb-ad32-f6bde967e22b",
        "cursor": {
          "ref": "a863d47d-80e7-4705-9a89-a9fc4b5b0793",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "88713897-0d9f-40bf-a374-a52cf92abd90"
        },
        "item": {
          "id": "329de290-c9b5-4ccb-ad32-f6bde967e22b",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "56b29cae-fbf1-4602-a35c-1c9e6c43d43f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa97ef31-28a4-4898-9ac1-89a1ea01b1a5",
        "cursor": {
          "ref": "07b2595f-ab70-41a4-a4f1-28c382ecec95",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "4c21ece9-69e6-4098-8b9e-8d4185d15c6c"
        },
        "item": {
          "id": "fa97ef31-28a4-4898-9ac1-89a1ea01b1a5",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "76831928-90b2-47cf-8f9a-8b34a53521d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c71a709-eae2-4b18-9217-76ad158bcb34",
        "cursor": {
          "ref": "7eec3f9f-a561-4280-82d0-a23bc9759056",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "014c42ff-46c7-42a9-9bf4-298119dd83de"
        },
        "item": {
          "id": "6c71a709-eae2-4b18-9217-76ad158bcb34",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "180e5b73-69a9-48ba-888b-264b8c5a5031",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88ade1a9-3f7d-4c7f-8c5e-e96d32883a0d",
        "cursor": {
          "ref": "afdea4d8-2af1-4b66-948e-68587c0b4d6b",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "4e4e1e4d-90e7-4d95-ae2c-f0f02c9d55c5"
        },
        "item": {
          "id": "88ade1a9-3f7d-4c7f-8c5e-e96d32883a0d",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "d0cab747-54be-4594-9a55-489ce9cc0573",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee96f631-88a0-4f7d-a956-989ee2ed55e1",
        "cursor": {
          "ref": "4161fd44-a267-41b8-a555-1f30604f413d",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "bb32b64a-3944-4f88-988d-bd80654e6ecd"
        },
        "item": {
          "id": "ee96f631-88a0-4f7d-a956-989ee2ed55e1",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "d1ab5be1-cf8b-45bf-929a-5082a64c37c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd60096f-e18d-4a3a-b46b-9fdc3d1601af",
        "cursor": {
          "ref": "77c189bc-64b1-4c5b-a1bb-46ce2933c651",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "fa0b5d83-78fa-4aac-b1c4-052f640b3531"
        },
        "item": {
          "id": "fd60096f-e18d-4a3a-b46b-9fdc3d1601af",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "0e055322-7ccf-4bca-b949-266f76efa544",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5eebc34-4fea-4328-b067-184c6e171d9d",
        "cursor": {
          "ref": "689b684a-8dfa-48a3-83ef-88894598d2e5",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "3d53fb80-ac61-4f6f-9b2e-96d842f95f4d"
        },
        "item": {
          "id": "e5eebc34-4fea-4328-b067-184c6e171d9d",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "0e865281-fdac-4b06-ba29-10ecf33d55e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae593d2e-9b07-4ade-bb38-f91984e00c9f",
        "cursor": {
          "ref": "407591ef-63a8-4128-aa4e-652d4442aef4",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "41c3b083-499d-4a01-a48e-7d740ce25292"
        },
        "item": {
          "id": "ae593d2e-9b07-4ade-bb38-f91984e00c9f",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "288f2593-0a90-4930-9414-fa9b7a748d82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7c4c569-1908-4511-a60d-c4e6c5d50a70",
        "cursor": {
          "ref": "03fb1595-0c3d-4278-9bc0-bef43a7fec88",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "521963b2-3e31-444f-a673-9825f2f065a9"
        },
        "item": {
          "id": "d7c4c569-1908-4511-a60d-c4e6c5d50a70",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "ed202889-96bc-4c69-9491-8c673a03ebef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "831038c5-4329-40f9-be6a-d59f5d7e70c0",
        "cursor": {
          "ref": "c843f9c9-e923-4fcf-ab35-ad75100937aa",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "278577f6-38e9-44e3-9a15-54ae672ffc81"
        },
        "item": {
          "id": "831038c5-4329-40f9-be6a-d59f5d7e70c0",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "f8a713e4-d35f-4c38-b5fc-6e94a6be60fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1faaeee1-d102-40d1-a8c6-65a56b6632dc",
        "cursor": {
          "ref": "e79e5126-0765-4f81-a44e-f682139b27c6",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "df900090-f954-4dc4-8750-a3a070d6c3d1"
        },
        "item": {
          "id": "1faaeee1-d102-40d1-a8c6-65a56b6632dc",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "5ed79fb4-7864-434f-8633-89e7f82905de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:277)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:277)"
            }
          }
        ]
      },
      {
        "id": "f3e7683e-6e96-4f8f-b0a1-4f1bc3b48e62",
        "cursor": {
          "ref": "40b70527-a552-4a8d-b5c0-eba92c395816",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "5a35d094-99fb-408d-bb2e-d523a0d2353f"
        },
        "item": {
          "id": "f3e7683e-6e96-4f8f-b0a1-4f1bc3b48e62",
          "name": "credentials_verify"
        },
        "response": {
          "id": "f23fb318-f380-4888-bd41-fea841bcdf68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "d0a7653a-fc39-466e-bb96-bda15ab55a01",
        "cursor": {
          "ref": "800a2a2c-d831-4725-9b9b-eb09a59818b9",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "882b27a1-9938-45be-bf77-71eb9cb6cb66"
        },
        "item": {
          "id": "d0a7653a-fc39-466e-bb96-bda15ab55a01",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "e4378a53-50e6-490b-a70a-59303a13b481",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "40cdd67a-6733-4ebe-adb2-8af8513fb1d9",
        "cursor": {
          "ref": "48a0384c-0d36-43c4-83e4-c14e995b6a01",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "80d98b6e-488d-4500-984b-1ac129ee6dd9"
        },
        "item": {
          "id": "40cdd67a-6733-4ebe-adb2-8af8513fb1d9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1407ff21-9c47-4a67-8fda-a00c2335678f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40cdd67a-6733-4ebe-adb2-8af8513fb1d9",
        "cursor": {
          "ref": "48a0384c-0d36-43c4-83e4-c14e995b6a01",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "80d98b6e-488d-4500-984b-1ac129ee6dd9"
        },
        "item": {
          "id": "40cdd67a-6733-4ebe-adb2-8af8513fb1d9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1407ff21-9c47-4a67-8fda-a00c2335678f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc3b0951-6f2d-4eab-b742-62c345bcbdc8",
        "cursor": {
          "ref": "834b3225-4503-40c1-b5f7-102e95d0d802",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "3b84ff06-25cd-40d8-a56b-33cb4fbd6b1d"
        },
        "item": {
          "id": "dc3b0951-6f2d-4eab-b742-62c345bcbdc8",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "296c5768-d759-427c-a6b6-7b7271985fc1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07fd4ea7-b97a-4210-92de-5ffb95e4e493",
        "cursor": {
          "ref": "5c744d1d-55cc-401b-8b4f-8d6d9a17142f",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "65f08f4e-37f6-4a64-adfc-8f190e6303c3"
        },
        "item": {
          "id": "07fd4ea7-b97a-4210-92de-5ffb95e4e493",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "61da76b2-25ee-4974-9cfb-77d7672c848e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}