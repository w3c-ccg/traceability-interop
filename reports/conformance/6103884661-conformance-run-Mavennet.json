{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "228f8bcb-73f4-441e-bfd4-9e7e4af460df",
        "name": "Clear Cache",
        "item": [
          {
            "id": "bfa27dd6-4dc2-4fbe-96af-a7f7fe20b482",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "51dde30d-fab2-4fe6-983d-1392450e7cb1",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "907ac4ff-9959-49fb-9310-87ee6758d8c4"
                }
              }
            ]
          },
          {
            "id": "abe7612f-6698-4d85-8c45-dc2449fd444a",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "513d0dd4-b183-43b3-ab20-8bd478963b0d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e7adb654-d691-484b-911e-54644700de19"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b89a0e14-c0e5-471c-b8b0-b4048abf053f",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "c0941a94-1a6e-49ee-8432-93d1aeb48f02",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c79db6fa-d828-4ba8-86b6-a6b3d96c4005",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f48b5576-59d5-4183-92b0-22d103468639",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f03f9c99-6cc0-4f7d-8d7a-2d642a481c58"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3dee958b-9070-462a-914d-403db658647d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "db16a642-73b0-4260-82f9-d1dc7fd80d38"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f4ecdcda-a7e3-471b-81cf-fcd51406a20d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "43e21dca-fb26-47a5-881b-89afc442d349"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "94825014-e2fa-40d7-92e0-6498d27fe820",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "53515954-cab0-41ef-9771-714b7f6eb68a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "25e510ab-da91-4194-9288-b4f846c8cd82",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "66c6f6bc-08dc-4725-92a9-43695d0ecb38"
            }
          }
        ]
      },
      {
        "id": "b8597a48-b6cd-4c25-84c6-34fa28ff56cb",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "8a049b6a-075b-4255-a89c-3812b5f72a02",
            "name": "Negative Testing",
            "item": [
              {
                "id": "639307a8-c9e4-48a8-beb9-e98906364f44",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bd0f2a5c-8a80-43d1-a930-04e28ace96bd",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f754f994-5078-4536-ac06-00cadf099f5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b863ce18-6246-4f65-bc2c-5beee7fa4083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a889275c-a92a-4e26-a29d-3fbd47f26abf",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de9ab690-0c5b-426d-8d50-f800da14d86e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a56daee3-5083-4cb5-9d9c-00cbbcb4f058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65d5775f-cc3a-4756-a677-2be168d85e71",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a3ba078-e2d3-4ef4-a691-52b607beb23b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "429dbc4a-e7c0-4ca0-a5b2-e9fb3edb14ae"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6a05195f-c4c2-40a9-afd8-4fdec0edea41",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5ef4d606-7de8-4240-b17b-39dc2ab5f170",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d04b02e-57cf-4d5d-a071-20a74b31ef99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3b412c7f-4031-4f72-98db-5c44b241d6e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "294c376d-6c0b-4742-b915-fd305e35efbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8c2a230-f2fc-41cc-a7a0-0009dd1a1970"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a366e80d-494b-4f42-8418-c33cf6a7989f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a2f2373a-3c5e-4d30-a8dc-7adac2c2f18c",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ac81e57d-9d22-4aba-8d48-8abf0d9dc410",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "67b1e69b-b139-4be7-8cfe-19407eecebac"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c97426dc-e9f2-41e7-8639-ef4e8c9f3f2d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "987fc955-1d06-4bfb-847c-572813551d05"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cec0bade-0afe-4bc1-8737-92320cfbdd69",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4592086d-c240-455b-8725-120c383d05fd"
            }
          }
        ]
      },
      {
        "id": "ad5043d2-1597-4b13-8369-f7ea66de1b3c",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "4aee6306-4e2f-4d94-837c-782cf68eb305",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1e5d5010-8cbd-4168-b4c8-0c35a1a8d57b",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "2d81bb55-2a22-4ef2-ad52-ac2508fca2a1",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d5ad80c-1747-4249-8af6-8097480979af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "893d6689-243a-4d7c-94ea-38b913859dcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66d3e03c-e7b8-494a-b525-8a511b496c4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "da1d31ac-10fb-450a-a6b9-ca38aa0dfb73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f39e3e7-453b-41aa-8048-9300d79f3d83",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e18cb78-b462-41fc-a2ce-c8acfabbda70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ffbdcd6-26c0-41d2-a188-a1159ebfb716"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f3b3350-5d87-41b5-9142-ee00524c64fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "31becf89-fa08-4206-aa3c-44c87b7e0206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51f1d756-b5aa-434a-b607-4ed7d5ad15b1",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51e1e751-4a1c-4f5b-91d8-444098fc965a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "142dcb23-778a-43fd-a0ac-699d8de259e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46b5714f-ff9b-4305-a728-605d9f8eb1ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "41f46e8b-d736-4fec-8330-468a358a1296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ee0e17b-3dc8-488d-b1f8-adf203fe2c5d",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6348604-179e-473a-92ce-e794044ae5c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02a1b35d-292a-4d2a-bc46-d3fc3077e3cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dc4089e-496d-4c14-9efa-7ea6a8bb2855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cbef290a-a9f0-44c0-9c95-7eecb9024977"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9f04d84-438f-4b7d-a707-3af22d0d1d73",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e9e7e3c-f652-481b-8616-c5fd5ca97dcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "377e79ce-6b2c-49cf-afc2-ad2f6e8b9b8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c703287-4359-4e5a-9ff8-77b3791133e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c47bbf39-7460-4e46-97e3-a95ab48a6f47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4da55b3d-74cf-4c5f-9788-f102a47d91e4",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3155a491-1255-4210-a4dd-bc696dbceffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be9e91d0-5f1c-4a84-95ad-f0759bc21892"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bc8d1cb-5348-4ee3-966f-da4a8b21e608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d8df704b-a82c-4468-956b-9d66d26482d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d93d9396-2fbf-40c1-a82b-5f5909bd741b",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4339f4a-2e86-4596-8ed5-fa921fa0d6d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca03b038-a8b8-41e4-953d-b1d9fe311bb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "329ba000-6c7b-4e2b-9d04-cdbfa6e1dfa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e680d100-0407-4fd3-98d1-414fd260cf65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05f7b78f-d184-47e4-ac77-b02f3c8a4f2e",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2abd0166-ba7e-49de-844f-aa3dba86207a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46d454ad-adeb-4a98-8466-c47dbda7a035"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18db8f7f-a938-4e7a-b448-d3ad1dff8633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3e20f5b9-bd41-4710-9bac-0c7b193dfe68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffc1e463-40d8-4a0c-a18e-d0234ac346dd",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f1367e4-8826-4133-b4fd-e73f3bd98ee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07f32d88-84a1-4549-a630-d9b9558b8330"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0740285f-4117-4c7d-b8f2-10968fff3a3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3ff8a152-09d1-4753-ab85-228d6a1200d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f454409c-25ae-461f-bd41-a3d9ec856101",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "509e0b74-0f59-486b-85f4-43165cb69869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80c6b29f-b5cd-4b8c-882d-7b768361a150"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbfeb06c-e655-4894-91f8-cd344e4c97fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "df75a554-f795-4843-8823-aaee255526f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34fbc96d-0065-4941-a8e9-9e691ea2db1e",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b94764f-b96f-45f2-aca9-dc6d294fab16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c0e6de2-bcd9-4675-9fb2-d4f164f031f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c19e3fed-3d18-4bca-b108-9483ebf5bb38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6f2567c8-5200-40be-932a-61df6bfe8460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fe6ccbe-a83d-47a1-b513-e39145ee3f6e",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a17c045-7417-477b-9a48-8e9af79a0c45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cf5b0ec-9b48-45f6-9b3c-185a23432f1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46ae724c-550a-4bff-b414-d0926c2bc2e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ddd0daa9-5ec5-4c8b-9605-5dfb1acd738c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00b999a7-34ed-411a-8e2b-cbee8432d9d7",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a0d9519-8fe1-47cd-8abb-63818fcae822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0385ea47-2ee1-436f-90e2-27b2cdfc3ca6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3136167f-6ce1-4c7e-aefa-ade69fc07549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d206b78a-6efc-46ce-bf64-1de8cae63145"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2ec3e11-0862-4e95-a235-137d8f8f41d9",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc7a1949-6784-4ae3-ad4f-e0344080c24c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4419cc8d-faf2-410a-bd27-582274a374a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c3430e7-1fb0-4d2a-9f42-c0a9705e36c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "52568651-ada9-49c3-9154-7c6b58f49e9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35679231-3586-4f14-9875-02006820e589",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6658b964-3312-47ba-a161-1bd499f4665b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aef4da67-01b6-4886-9915-a404b0346914"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0783417a-4376-4800-929a-ee6ab40556db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f2b5317b-e0bc-4b7b-abd5-dda116fba136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7af76da1-01a5-420b-a1e4-8cd3edb7ca94",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1da1c116-9131-47e3-9fe7-3e85736ae6f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c2a83a8-00cd-4352-bbdc-64d3610ef432"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3025476e-3470-4aae-9097-6d887a40d551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6737e205-6b71-40a6-9a8e-608379aed2d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94518807-4382-4686-969a-244024b208ad",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f1c70b5-602d-4ea5-814b-5204bdc78084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a2a1dde-cd82-40c1-9004-29e3a63ce828"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d423df8-e50f-4977-8374-cd1c69e11dd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ab0110d7-91ee-4f00-a43d-f90f6440be3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfc7f61e-5f47-46fa-a8f5-b0be99bdb840",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11911365-e67b-4bde-a821-9c41be42edc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b13d0ec-d88f-4e19-9b8d-b7ba6927f626"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65857346-50d9-4556-92d7-a49ba90031e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2011591c-73ca-445b-a9d2-fef8d50950a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45e87b14-3e04-4e0f-89cf-eb869aaca1a2",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca5375f1-b366-476a-96ad-995f6f713b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7890e60-013d-44ff-b9cc-88c3e1185283"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38a3339d-eba3-4034-a3d0-33a6cecff816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "de94606c-ef0f-4f27-ada1-0785135c7d9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbb42399-69e4-4d72-9256-14c2c909054e",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d065080-e1b5-44b5-9d39-0aa083839b41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd237712-e79d-4acc-9a72-c62573d169e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88c5e7ca-10dd-4589-b0b9-818c01b8da5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "38beb500-4d80-4838-84ea-28f885f95c19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c72250d4-76df-4ba8-b37b-948466053636",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bddf9471-6be0-46a3-8393-991a7937a72f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2121390f-da44-4b26-a9ae-2289e72921fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e2e5bcd-f4b2-4e92-bdab-a92a64589874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "af6f4cb1-0403-4542-9cba-03c74aef4bc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "589d06e3-0147-46a8-9408-dc8cf28ee174",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "202c52ba-ee1f-4a09-abc3-c860adc7e60e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5de76371-3422-4a9a-9c2c-a021f33d9870"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59330446-16e9-4beb-b6e2-314fc3a6bedf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a1803460-3381-4ada-ac83-5485272dbd00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbe4fa4d-dd2a-430b-a65a-2d322dfcd481",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08d3975b-5cf0-4c90-8a96-3ffd9e4a911b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47a32c34-1303-4a5d-8a49-ed1b256d93c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d13d76d-f317-4fb7-bb11-2c582f93a34b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "75e412b7-4c32-49e8-8d07-b0511392faea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10d6b69c-b95f-4e3f-99cc-8ad63223499c",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "965489ae-0068-4f4d-81de-f1921441479d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3560a692-63a8-4ce9-8b01-53aab1062461"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eb05837-0526-4c7c-9cb9-e634ca9f0a5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbcc1c55-eb26-4e80-9e21-ac22db483e8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e22d7268-d861-45a5-8dbc-c7f39d5254f0",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38ea91c3-ee0e-44e4-a222-410a72e9fe52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b11b440-7293-474b-88b9-89c3b6de1c4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69f226af-e282-4940-b7e9-9a897b7fcd27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a71474b1-cd75-4b9f-8f0f-fa86ce5479e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9949b71-338c-4e3b-a348-8cc001821ef3",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0009cf26-95a5-49cc-89b1-1dfa0849588d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9211c33e-e295-4312-9da9-77b265143cc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bedd549-d642-466d-b706-37417f6becb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e845b83f-e578-4788-b9a5-d484c4418228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55acf356-1733-489a-9969-01d6c78b08a3",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4b8d16c-3cdf-480c-895a-1ea9816f5483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "821d4afd-0c58-4aae-b2d1-71aa47a52f4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5407fff8-708d-4b7d-9abe-680896a61a38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "940a066b-5fcd-4a2f-b2e8-b3b18d087a9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1ed4d9f-1b62-4280-9799-08a663fd15aa",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d94c8405-9b3d-4b75-ac1f-3e9eb5c4ef6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4850d232-ad61-4b1c-a4b6-dc4e6523d252"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aaa4676-1f7a-40ae-9e9c-ebf9f4875562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0e9aa0d-aff3-46bc-b04e-7a842dd4d389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d30cbc81-c441-46d0-9dda-562f90f385f2",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f464afd-5e8b-4a05-b566-978d9146d47b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40e2d2ef-8b58-457b-877d-3f68f9ec842a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0afe5f98-e092-4859-8f31-800967cf67d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9866e4d-e273-456d-82b5-19a9c6a151de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3dfa634-b41a-4d3d-b4bc-eab327463119",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0f95f66-227c-49a7-8f1d-c22dd02e7ea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09447d62-3428-4197-9fc0-d219370bf19a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba51e93a-3351-4013-805e-a60a758d5308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "fcb48e78-fa7d-43ab-afa5-97abb02822e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "387f2afd-92a9-4cfb-b4df-e84bcb97fc9c",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c46d926-174a-498d-9b6f-a6a92dc1ab40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2647168-5150-483f-8ed1-501ec0ff05ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afedd354-9767-42d6-82b4-951e2a21a68d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "47924ca6-9f08-477d-a63f-6ffc4cbf0f2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12a11dd2-2616-4ae4-8902-fa52dc250f05",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59d46549-d067-417f-8ab2-f85236c49d3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59f97748-31d4-4b38-9302-0b304b2faace"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe5cd58c-2be8-4395-8d89-750f455669ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d86fb5fc-79a8-456e-983a-5666b4d6b066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34f279dc-0c22-45e1-88e8-6a0d03b252f3",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd9f3269-4b1f-4dee-a78a-109a2cfc77d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9a198e7-7e88-4b18-a535-d515b28e4f17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be371b46-f6dc-44f4-98c2-d1580bb88209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e926d2b4-1fc9-48de-8b05-e9fd068cd356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c02cfd86-f39d-4fad-be04-7a7a53cdc497",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8650cb56-00ec-44be-82da-30e4121dd155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2718b608-b6d7-4b5a-bc38-914d110b4744"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80b27dfb-587b-4e9e-8778-4f47cebe9b4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "edd72702-130f-4065-82ac-b6439172c9d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1239a321-3e4a-48fe-9e00-99bc44e3f44a",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4fad265-f965-44ce-bef2-50d55861b285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fc87393-47fb-424e-9e26-69c17b15c8fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a49d8a0-eb91-4e75-96fd-093081464635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "1e0177c6-0ee1-4e2f-a297-437038c32395"
                        }
                      }
                    ]
                  },
                  {
                    "id": "696268b7-6323-49ba-8795-af4952521346",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5746875-153e-4f7f-b272-40357238014e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d965de2c-29c4-488d-a018-402b8930d97f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e122a17-cbc4-46b7-b65c-0d3a9d0a33b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7dab1d3e-194d-4594-aa0d-70e248a749d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e07ca1c-7595-4793-9834-37e52ff46885",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e0cba2c-3103-4005-8ba4-44570477d002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46510373-4124-4188-aa66-673b01c7377c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9811281c-f301-40b0-89fd-f2947078ddd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2a2a777-964b-4384-a9c7-1bbee8417c71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "965f36e8-fe9e-422e-8fd2-0df43fcd2996",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fb4fb98-6516-4b82-bfed-e055d0e50225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bddccfcd-e237-463d-a90d-04a3cfc79ad4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "211a88f4-efe6-4821-aa46-9738732df54a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d10696ac-eb3d-494b-bdb0-61ab2fc1d0d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e242ad37-4ef8-445e-b6d0-cb523fa1b0f4",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ecbe5fd-1a81-4b50-ac87-a2f318930649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e231c527-b241-4013-86d7-5d5b9a6d128d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93ceac3b-8ae9-4be5-9e54-5a1429b67c4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5e317e8e-b9b8-453a-944f-adc006a514fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1dcfc20-b803-4adb-b148-75a6ffd67150",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "782980f0-25da-4b87-a3ea-354e3e78772f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24ed22b5-eea3-4bc9-a817-52401eee234d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91b12493-8b22-4f60-8fa3-6ac91be37bc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d7b5bdb7-e695-4254-ba3f-f25682f8923e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0344d05b-24d9-47e9-a580-6330d29faa2d",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "327959fb-2e0a-4e5e-82a8-32a0bdd08f57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0de5fee2-bf4e-43af-ac2e-29ec9d17ed5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc0fae10-6a74-4f87-a8d4-7e87ae76559a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d8afa0f7-162d-49fd-87e5-cc4da4013030"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23577e96-7c89-4ebf-b645-dea0399e3e57",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9775b561-bdd6-4e79-98e8-2068c8a765b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47d8c3ef-14ba-4abb-9071-b57ed5505ff7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b11c3d74-ab78-4f1e-a13a-2ac6846173d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "3d77a5d0-e075-46df-adec-68b340488536"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9c98df6-1e91-47d6-a5c3-adea26fc7980",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "276f3c41-3bc2-44d8-845b-6f7cdbbf033d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9035e630-9351-403e-8a54-60432f96ba48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3152ce94-e66b-455e-964c-8e0f1a413ade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "34697a59-2c6a-47ee-a762-46c1e4c6b2e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8761b0a1-b979-4931-b104-2bfb41dfd8de",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b29d3d7-1742-4ec3-ad37-639c471e8066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33063203-319b-4c84-8e1d-23dfe1de274f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74fff632-5e45-47fc-92f7-d10e08146bf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "8fe0c257-713c-422c-87d9-278d98e93a22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bb94a54-fe24-43db-b933-5c6aedc85828",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c7639ce-2116-4f6c-9b9d-a0d2f166c9cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47419054-a511-44ba-bb07-72f5fdc085ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7693043f-3f24-44c7-a261-83d3acac3b85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "52a52985-2bba-4bc7-b052-7b7b6ab1472d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f16cea1e-acfb-4050-8f92-77a273d79111",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9438bd54-a8c1-44bb-8ddf-fa77e1270fc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a432ec8-89a3-49db-a972-5b9233a7569e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "446c08f9-e4c3-4c5f-bab6-e57c37b53c63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2d97dda-17e4-4beb-a9ed-07b022a6842e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "426e611a-ba05-480e-9147-478b27891c57",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67302bf9-d2e5-4d3b-82fd-99dcbb4fe4b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55d10cd1-d71a-44f0-9718-92cb78afe8ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6b0264c-66a1-41c5-ae97-84cc3f9b090c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "412814b0-e2bb-406d-a120-4dda7dc32663"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44daf93e-70b5-4474-aacc-f147a1a000ad",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "084963a1-d254-4e7d-9520-ebd1a852d454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9be08e28-6b5f-4477-8c39-c1053d6cd4f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57267f8c-c1c5-4367-b6e7-c91f9044d683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1002082e-3050-4b7c-bfaf-3261c307f5a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d65b08e-340d-4229-9d7d-7d72d2a9bc86",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7600789c-0140-42d8-8dd3-a2c4ee5b9f55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb5b409f-d7c0-4dc1-942d-7df6f6df241b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89caa983-0317-4d68-8cfa-66224037b9ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c7ee4c76-6058-4b19-bf99-5458f5b49341"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce906939-d3cf-41f3-b9a5-dcba9b4f8221",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d59eeda0-4c80-4935-bafa-f8e243fdf404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5703c7e-4005-4b1f-b942-5db7f5643367"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ddfade4-b462-499d-b02f-9737dad3b239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "58c27cdd-1fc7-400b-be3e-a1d1e3181fbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e0ccb36-95db-4a0e-ad54-f3935e6aa09d",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0f4cede-fb17-42e7-9fae-f23ae9b53de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ace9409-a058-4afb-b7d7-17787630c415"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50cea611-7ce0-4a0f-9cc1-2216469d2fe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "207d5e8e-b6bc-440a-a9ce-76a810bb026b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7252d59-7f9b-448c-83da-273a4b2c255a",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ac36579-c611-4805-8b2b-abc71d0333f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bf2f9e6-0a2f-40aa-acb0-d9deba357eea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60f86a41-98c4-4e09-a5d9-194a526a2cad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb7a7483-8429-4344-a236-489cb2d24e34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b236c9d3-08a6-4d31-9f12-a44846564478",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e736a53-a846-4c19-bad3-9c84ae6008c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78fa2aa2-f265-4287-92d9-8ff765d8c8dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e669aaf2-8554-4e60-93fc-bf25caeff2cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "22574f88-5370-402a-bda1-338cd5af83d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3dd67d0-ad6c-4ba7-80d4-9a2d684374b0",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a8accae-60c4-453c-aa9f-cbd31106b234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dbcb3fd-9db3-4828-bf50-15f68146ceac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a737fba7-9f3b-4b7c-8446-2b2f15592900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0f06827-ee60-473b-8481-2132995c39dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64ed212a-5b2b-4ea1-8e40-4600b14d0bfe",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a12b2e3a-1f11-48ba-ba0e-a3077ccab5e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d394dda-a4aa-4882-a417-6bd6928f852c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57cd69de-f242-47e7-9d99-bad1c7d18547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "152f1c12-57ce-4795-a545-2969644f41e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65684d5b-3497-4d3a-91f8-d5ab7d984b78",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f37f7dc-2192-49d1-85e0-a274ee85457c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dad96553-1e16-4651-b907-fefbe7c9f5f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b0f6f9b-146a-4284-8edf-fb652b32c0ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "4e0d5061-8b72-4530-9c5a-2d82d4762100"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55d4c917-4749-4880-bb6b-d5168c0a360f",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78eb800f-be53-4ba1-b4fb-344bea026dd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7685cb83-ebf8-4dd0-bb5d-66bca4dca38a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fce9f566-6c82-4d01-b54e-06f27f6ad387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "90cf154a-4729-4e08-b2e7-8261b77034de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac48ea09-d5ac-42f7-a6f8-9f791521cf27",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25ebb78c-3bf7-426b-aac4-3f5db982d006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbfba9f4-4da6-46a5-8f4e-c8211511027a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e3c4e99-baaf-4e11-8bcb-ec4ff753a8da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5d885b46-c46c-4a2c-88bc-21fe1b92706f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fcb4cf2-65ce-48cd-93ad-2ee6f73892b9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c3fbd5c-2e51-4c02-83c0-f9151c1c7a1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab6eb8ee-cba9-4e0f-b0ad-b1f9f910a2b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ee8667c-01e9-40fc-bf05-89b7cafb4266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c61e936-d6ae-46c0-8c88-95265a2d0c46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9bedad3-6f89-4794-94a1-9dfef673d726",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a80dfcbd-5064-4d8b-8fde-bc7bf2f79115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "700c7a56-107a-4ba8-8a4a-58c424240595"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24ad8bf3-022d-45bc-b82c-8f7457a16f93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "00cb389e-5871-4fd6-be1e-182d9948d34b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "668c036e-0d6d-4f62-8fd1-429a7226ab54",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0c2a47d-b7c1-4e0d-a534-63779357eeaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "347d7b4f-1c9f-4c74-9684-d1a5b93c053b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cd53f28-afb2-4213-9880-f106184b7da4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "0c15f91d-4361-4def-bb01-65ec08d3143d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13104ffa-a424-40c9-96b0-cac47bb0120f",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e560c383-e098-4d88-8ef1-2781566aac0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ba28e7c-cd4e-47df-b650-411628c2899f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8419f1f-e00b-4366-9c7a-74b42bf54e31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "2fc2712d-7b22-45f3-81a4-6180cf409506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aea3b157-7a1d-4477-a238-a782a544821f",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8b86108-eb2c-4fdf-9617-c8beeac54b31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ac5953a-b2a1-4ea5-b3dd-bd259e418e3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66a0ea9e-1492-4bd6-8471-4856debfefe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "aabab505-e01f-4718-984b-c3cb35641fca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48b90348-7b42-465c-8547-0aede368f18b",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0eb1ff2-0ed0-41b9-af06-7709a573320a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "662671dc-9ba6-49b4-a7c4-4423d3f83b1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73a94a75-8678-4dac-aaf6-fd32c1a415f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2fffeebc-dc36-459d-b32d-d4f429f00013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "379a0414-272a-44b8-b3da-24d139e77706",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74aee292-e47d-4948-8230-305eb9763df9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a34fe9e-3c58-43c2-8e0a-032508422ce7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db2bb2ca-2d6f-4297-85c9-a46c4c323dda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1fbccfe4-2bc0-4e24-a86a-0906b9a61241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fb8df37-d8f1-4732-b20d-0db328918fb0",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ed1ccd4-bb5e-4feb-bcd2-d1da53373ad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a35f67e-7b0d-420d-8ce5-e2b7e87b4be7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65fe6de7-3a47-4677-bcfe-f16b3bc47ad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cacb5fd4-2ac6-4110-8cbb-bc636e137b68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03353b1f-81b7-4609-bccf-8ed9af18fc37",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28e5aea1-ff20-4c94-9c5d-56e78b8d9faf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2ad93ed-ea38-4805-a35a-7a8c439f8818"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ecb32d9-37fb-4125-9206-437b6621aa1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "66c41fdb-f309-4d48-a8e7-0739ec1c882b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3fd96a6-ba6d-41a8-bdd0-37d586b2458e",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62573abd-a5a4-488c-b299-f942c9649a16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b6d2a42-91fa-42b1-8fdb-0ef999711fcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ec46059-ed9b-487e-96ce-0a92dae57eb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "066d4099-11eb-4a0f-9f40-ef98d7f6d022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44e72ba8-308a-4a6b-ba76-cc1c877a4dc2",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f064951-224f-419d-a592-01db7203bd4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d5ac5ab-9717-40a6-8153-dcf8e0966669"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89013eb0-9d60-4d10-8449-bd042b5ff336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ad6a07a-a3e6-4911-87bc-57fbd7a60050"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2b71917-6061-4091-8282-faf1fee5af7a",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54478312-2c5f-4e54-84fd-3f812c95d2c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b8557a9-289b-4ec2-bc28-fff0ba061cd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bf5cf91-532c-4389-881d-9e3da6a65e68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "82641cd7-6516-4fc8-8f97-38e0e05e8253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2f52d92-13ba-4686-b196-cb51e329d14b",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "088d1ba4-ca1e-4516-8bcb-b3f836557f30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd6e183c-a88d-40f4-beae-a743c2e914d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c503018-d582-4cee-86bd-6bb70d27e880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b513d0a6-6d39-4d4a-8653-1afccc002efc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b1e5156-b359-437c-907d-ab0b5a8685b2",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "753d8cc9-286e-4e38-b66a-b8f2f2b736d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6413384c-c66e-414c-9adc-1cc7b934e124"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f310489-10ac-430e-9f18-ac59fbeabebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "761474af-5708-4b5f-a019-5545a641b65a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62926a07-3e54-4d3a-b478-d9384b34e3e0",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b21add1-809d-4ca8-abae-fd713b964852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdc74cbc-cdf8-4d24-96b5-d25532fd155f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c129097f-5f31-4a4f-a666-bd22f90ea5a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7b99bb3d-4db7-4976-a3e8-951391ee43c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1829b9b6-cf6d-4c90-bb07-7f7bad3a3cb7",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "621f023d-f5da-491b-932f-48a64690dfac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f865210-bc8d-4de7-8917-785d7ab47460"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e06bd27-602b-467b-bc6a-1c7250c8d06c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f60caed6-656b-42b7-b7fa-90de1af77f51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8b31e6d-7522-48af-8532-bc76c532780a",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c540221-3bc4-4231-8c0e-c8ee3659c45e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90b5c84f-faae-4d3c-b1f8-ecc892f85f4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1178f011-af4b-4200-9fdf-22ebbc27c973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc858b95-a7f2-477c-aa85-2703d3f4a516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "250c5fd5-95ea-4675-864d-4f3fe335a2e3",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e98e0d1-5e01-4bc5-854d-86da0cb1002c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ff13c87-ed3c-438a-8193-47f880bb19f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f3fce86-23b1-454f-8e60-cd8f995132d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "834ea037-b374-4e6d-9442-57c0ce3996be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba2a0a9-8abd-4633-bcc5-810a6fdb7804",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "784bd7c8-4a88-42f0-b0a1-9963caa0c448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "234569db-abc6-4ab5-a71f-5525969b0672"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7a2e31c-93f1-4b81-a6ae-0f431b328aa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bede14d9-0102-46da-861d-107390012e10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d729acff-3935-462f-a417-787955afeb9d",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cb36063-1ddf-43e1-88be-09e151bfce20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1e2be8f-59a6-47da-9cbf-5e1479ed4697"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38ad944e-0839-411b-8907-df5ba59b6e4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "21104249-d32f-4df1-aaec-62b0c5167adf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6c5c5de-549b-454d-97af-95b63720591a",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83f18d17-943e-4663-9aaa-fe8b959f78ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db48ca03-7162-4a30-bce2-b7e4053b52e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ea81ef6-9b94-4600-ba7a-4bafbfb234e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bec000bb-a781-454d-83da-07150f763c99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd8cc43a-f8c4-4f64-b238-3c8f8fdc50d4",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4686b1c6-c55c-40c4-a48c-453678814992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d558effc-c2d8-41e7-8261-698c3b6c1f2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8776394c-9c7d-4352-b390-10867d93b27f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bc838526-4cc1-4058-b8b4-ebaf9fcd5a37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1b2092c-2419-458a-ad5b-c982e646414e",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0c91071-dca1-4c6e-b0a1-873224a0c7a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00ade60a-8b30-4a21-9e9b-9373d20fdedf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72ac3064-0fb4-42e5-b95a-28a9abaa1584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "178fadda-9cf7-4785-b0c3-1989fdffd7aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aed9fd8-d34e-4561-9567-fa9aa7670f66",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "314a859b-d1cf-44c1-929f-0657144e7841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0b6b855-5bd3-4295-aa70-1100bf383793"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d132a2fb-8918-498c-80be-1a3bff645d53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a87003f5-592b-4881-b211-919d34566032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8978c93-aade-4870-9d1b-aeb628cb4260",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a504fa4-6764-42bc-92e9-e7bc1f1de1fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "225383c7-3a40-4008-bcc4-a7136a0df4e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90dcb8c8-2e87-4c15-947e-296ad87e80a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "24fd3d24-5d39-427b-8afa-73a1463fdf6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7af3a32-a23d-4774-9f95-3819745e2959",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c5a80aa-d92f-4164-95f0-3cbfac58a71c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "973fb45f-5ec3-47a0-999a-69db115d73a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a36dc619-b9d4-4a52-ad2e-f9c6bccf4b14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "33439214-da34-440d-a16f-f111bb3f135b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f67e7ec7-bff7-4b58-9ccc-de7ae200a733",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5cb8cae-63f0-4543-bd16-400a84eab114",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0bb7376-d5f1-4d78-8b7b-0cf8abfd1c6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a99cc9f-5dce-4f9e-9607-c9653ade137a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d1578a06-7511-4907-9588-3f34e8436950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "224d9a6f-7d82-496d-82bb-87480f714075",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dda7371e-e7e1-4a88-8aee-d7a48c2e7233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5991c9ec-bd42-4ed0-b3f5-61e352c07d13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78516c28-62f8-45d1-82a9-455beaa9c268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2e8ff469-03a1-4267-bf1e-692f93cf7ed8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "815673b2-e796-4a5f-baf7-23265afe4396",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "506f59b9-2639-4501-970c-8fa26b8edd6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d78c043b-ab8d-4935-a031-1222e74dffea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9395a4dd-adcd-404a-b6b6-e42f69f00c06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "be622b89-c421-40d7-be02-50deb5f54275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e48ba71-4026-45dd-9abe-6097379c7f1d",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a423417c-45d6-4eec-bc2d-57d382f17342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14786f91-b094-4833-b4d7-98caa78db00a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dc439d8-5e4e-45bd-b3e3-ef64956d2e4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e14faf6c-5248-4221-a5b1-29d74c4cbc28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf37bb9e-2554-4306-acba-e3741cbd0946",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f16dd9b9-50e2-474b-9b82-95aa1898dcd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0ab58a1-a2ff-4a9f-a37b-67a465c5dd28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27056822-8dc4-46a0-b24d-af588cdccd3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a4efa517-8e69-4bdb-b034-b5d6d6499538"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96dcd444-8c12-4d70-80e3-0d89faf9596a",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2ad3452-7033-40e3-8985-2dde5f35b7c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3823b810-45ef-49a0-92e1-66dc05ccfb3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "992d1758-8679-4f19-b87d-59409945f502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "fd6796f8-3d84-4212-a8fe-96644cc1226e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad493f5b-4ed1-4c5b-a5a6-e0893c55dddf",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcf4998e-a66c-46ec-9dbd-2b40044e6008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e696b825-f291-4a3a-b230-28215647cdd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03f1f2e0-5a3e-4c88-8598-3eeb0d0b8939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "429b3fe1-d02b-4509-b324-bdf87f1f3773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "590b1565-af7f-4c91-84dc-800e1b72cd97",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8225d375-679a-4917-9831-8741592771a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "a59e0234-b3bd-4f17-8a80-d87ca29b1e9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78902d65-f830-4888-8f34-6a0514c6a7bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "703817ff-33bc-4915-ac88-eb32c2cf141d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2e1363b0-b4d1-41b8-9cac-0f7f02520146",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e73902ac-10b3-450c-b1ab-b4c458fb986f",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52de5653-6c0e-4433-932c-5d531a608485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3071ceed-827f-4f0d-80b5-92cec076700e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77af003d-6818-4204-b89d-755cf6f8588b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b1693da7-bb20-4d8c-9875-6002db874a90"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5b1ec0f7-7ec5-4610-9379-7909eb3c3e54",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6a939dd8-327d-45f1-b5c8-3aa4c9329723"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "535bbcd7-fa16-41a4-9e0b-0b6371d94dfa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8e544a1b-ca01-418f-b293-3be679f9ed51"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f34bb697-bfe9-4b60-b28a-cbde10a76025",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "69f7ec8f-0e9a-455d-94b0-d25ec8dc515e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "32009206-377e-4fc4-89f1-71428bcb9c41",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "eb12e55c-e1a3-424a-b228-a7cf6f82877a"
                }
              }
            ]
          },
          {
            "id": "0f144d6b-0216-4a66-a909-ac3858d3e984",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b27db8ab-c72c-4b65-b85c-7572ce75e2b8",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a0c0159c-2b38-4f6f-8560-b8151018a19c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a2cb54e7-244a-4eba-a21b-4726c866865e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dc57b929-22cf-459f-995a-a3ce69a95ae2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9df4e501-7e24-4292-ae51-718563261fe9"
                    }
                  }
                ]
              },
              {
                "id": "993761ad-746a-4151-b5ce-72f31484e1e8",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "65495cbc-d63b-4aae-9f27-a01989099e27",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1f6507b1-b86d-4172-8c8a-82beb0dff89c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b6b3f1ba-f209-4555-a4ab-f35770396871",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c78299bb-6401-4a94-a92b-7600ff88c166"
                    }
                  }
                ]
              },
              {
                "id": "e70fb0cf-de02-4b3f-893a-05a3cae0774e",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b789d0c3-e532-453a-9d2e-989de7948835",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0b59880e-c91f-4180-933b-a7d11ebfeb3b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "58a3d465-6884-45a5-9c16-87412be1d8ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "edd9c974-ef09-4c84-b5fa-4a7e1bb9edfb"
                    }
                  }
                ]
              },
              {
                "id": "388b46a1-d3d5-4795-b813-d84cc35d1744",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "61507ede-69f5-4ad2-9082-21baeacf36a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d4773d82-dfcd-4f09-90ce-8388a265d573"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3f2baa4a-78bb-490f-b231-ff0391b0ca48",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "e2b78ddf-3c89-4f1b-a70d-b34f01285781"
                    }
                  }
                ]
              },
              {
                "id": "ef8d0303-2672-4ceb-b172-f6e5a8801bde",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c8010f7d-5c32-4f1d-ae8d-898e6bbbc531",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1e981177-d6eb-47e4-8044-b4c22b4f8c02"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "df1860f7-4279-48c3-9515-b4ea4a51ffe4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "b4a39db1-4dc4-42fd-9b09-4e83019d2b25"
                    }
                  }
                ]
              },
              {
                "id": "9f32e860-6047-405e-b24e-d768f52c72f0",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "af60620f-ff06-4541-b669-7c829de2f001",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "38015aac-61d3-4122-9e18-c8bfd75ae87a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "57e2f09d-2cf4-4955-97cf-00ebbc843935",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fa586e18-5c25-461f-aaed-c8bc0da242c9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9bd83fa6-ed25-4278-a913-56705a2c38be",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "76e843c3-d1e4-40f4-8780-171ce69ae1e1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "41cb8c57-6b15-42fe-b720-3f9a47bd16b1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3eb3d609-f96e-40db-bfb2-92ede70ca79a"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0dd7101c-14dc-4419-a4b7-53f98d05bb67",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "f62449cd-6f86-4d26-83c7-b0daea0554cb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bf6c8848-5c6a-448f-a116-a22453a4173b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3a7b3841-e77d-421e-ae5e-7f059058513a"
            }
          }
        ]
      },
      {
        "id": "d1cf83cc-fd7e-4f21-8c2c-8050e22b4f4a",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "1ba800d8-6bcd-4796-8eb0-8e21bf50180d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "899ffdc2-2238-49de-838a-7f90d8ab107a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5cba0a4f-f3f9-4e60-8bc3-4b89ec3d24bb",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "794af8c4-fefb-4c99-a82f-5b2c22914039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c45d38e-ee95-4e0b-86f2-37d995365286"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9018a95d-1d46-402e-ac64-7e901b4d9b62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "7cd029ff-8553-4a44-8fa8-55f05bab6d86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f4b256c-fd82-4733-806a-c526a167982d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0e3db66-0585-4886-84e8-56d129ff9702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58660394-5474-4243-95bd-18e3b92d517a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0763840-f117-4ee5-9446-2e36f18fb8ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "889149ad-fc6c-4f13-9149-e8cf9be3f845"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8dad1e2-7f0f-4307-b096-4989d505ef72",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0c267f3-40f9-46e5-a357-a590f9c064a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91fc1b4c-657a-4e28-9317-26fae6cf1d2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13cab85a-d836-452d-b2c2-2f56d8586cd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dfc3766d-6a87-49bf-ad3b-38990f495646"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fffced7c-7b79-4f9a-811e-c87a02fa3899",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bd8233a-e85c-4571-a13a-dc9c3eb3f62a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb4ab5a8-31ea-4bad-8dd8-50e5c6c3308e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa73220d-9f01-42c4-bc0b-6f7822c8769e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c774bc7-7acf-4c81-abc6-0a2580f5c857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e49e41a6-4b2e-4790-b28b-5033c57f9fac",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d533d17d-b946-4476-8e26-2ecd58accb58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fae4e5cb-3dd5-42b0-a992-57517ef6f759"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b4597cb-9eff-45db-9d0d-29240455abc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "43234098-e92e-4215-b628-059f2b0fe1d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2b1768e-f26c-4380-84d5-8ef54798a38b",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1db7519-8823-42a9-b1b1-d34ed6b6c27b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "615ddf00-8723-4846-bce0-c0a83d83a562"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3c0f237-1b15-4a32-b25e-bf44b67687bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c90d88a-b3bf-46d2-b215-50955a0caba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ead756b-ff81-44e8-8a55-c0f9bbe79a85",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "721825e2-e0b6-4c7c-a43c-90ede35d1464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f1d58df-715b-40f2-a2bd-81c9ba8d87c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfe61d9d-e23e-4731-84a0-249dc680dd5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3d4cc0e-ed1f-435b-813b-cce86f5e097a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d087dc9-10aa-4eb9-9337-cfb0f2d0ee86",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a69e3fbb-c94a-4d2d-96b3-546abb84679e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b4fdaba-12dd-45bf-9749-cdc0c759d73d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3e16b5e-a534-4fb8-8af5-08afd27c2173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "59d5f3c5-da16-46ea-85fd-66a223851cb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3606f104-3a8c-418b-a758-1f60f8677a45",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "680e2482-8788-4b41-8188-a635952c656f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d9a501b-a808-4d6e-9b29-baa97203acc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20bc0524-18e5-4e85-a542-9093b30c021d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a5bf288-b659-4038-8822-3255dd01c12d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93306ec2-6b07-430f-a6db-b964c6f24dc1",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7191712-8c6d-4944-89c7-ff4e8fead37c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9e859da-06f0-471b-8948-8d04da9082db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6992e08f-09df-40e0-bb84-fd9a2ad4f8ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "564beec0-c552-41c3-bae1-93486107f324"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bf708d0-3f21-4e81-8077-e0e363654eea",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5beacc38-13b4-415e-b27f-a9a100f8f8ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "382da6ca-d0c4-42da-9a90-42f26926baeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8bd7272-690a-445c-8559-1ccff046ae5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "ebd89122-5302-46e3-9f03-7bd0c626873b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5472bab6-e312-4950-b59d-9de3d54f7696",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc7ca62d-26b4-4d89-b3dd-aa4fcc60a056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "139ac286-65a0-4c24-bd76-94b701d084e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86764bc6-a19f-490b-9656-3261bba29bff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5184a5a2-7d43-447f-a9ef-03b9a0a2c033"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4599516-c69f-4582-be1e-83a7b24eddde",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c83ff7a-9c96-4939-9d92-4f92aad8947c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b333c4c1-6da3-403f-9387-ecda6e4eb2b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07108848-42d9-41fa-a365-34b356f176f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1903d4e-836e-422d-ad03-ba7dec2927ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f095017-541d-49ec-92b3-71a07d21a423",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f78212bf-20fe-4e28-a41a-8351d3f9ddd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "920aa076-3e5f-4235-9d17-37cd137edfdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15653443-aeda-46f7-bb15-2b4e23a05d9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "dfcbe011-14e7-4aba-8647-48bc0733d088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b8c21cf-451e-41b6-972d-fd6f49298191",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74dc346a-00f9-4fee-9255-d82aac5bc43a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b3bb0fd-d36d-4909-aee7-173b94cd5783"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21cda7eb-306f-4935-b01f-380fa9e6d90a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "600dd27f-c4ff-4e9a-9edf-5de64d735368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4e15d05-df84-4e37-9ec7-68095b450f76",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dde70265-3d87-4d72-9377-bbc123a94ccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a65875b-d8a0-48aa-97e9-c2b38e4903e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30ac9db1-5f8d-4cb0-8d15-0b4d13ac0f09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "231a5adc-9e2b-481c-ab56-d1ea4c828089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bc448df-4fb5-4683-9389-f003794e00de",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9f3a85c-6d21-45e5-bb93-12d579675dae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65917076-5fbe-4046-a7cf-918835698b0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0d52a10-06c6-4fa7-bba0-44e64221427f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "7827f31b-17c5-4123-81b5-fb42f94e0af4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c1cb9e6-2ee8-446c-8391-103ec279b03d",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bc5b153-c685-46e8-bf15-8c6736e6f07a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38ec9e9f-5864-4e42-a90e-e52a47a60784"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78f92848-d9bf-4959-863d-c5268f5a2f01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "516a77df-86e4-4eba-89a3-b0f1b7ad325b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e049940-3fc5-4eb0-b966-d687d64af6e7",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba5d9afa-f8a5-4294-9e79-7243733411eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57cb89b5-59e4-4248-9c39-083e71a176d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ec7ad2a-3ffa-4bf9-b2a1-58dc623d0cd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d47f290-4903-4633-80f3-e9cd7adbd0f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f38a746-bbec-41b0-9dd9-ab21790bd196",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e1b9c3c-8fc9-4a18-a0aa-e3f8cda517df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ff050c2-9485-428a-b8b3-b3613c3b1ee2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a372655a-e32d-46f3-bd50-6a7bcd11bf0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b13d258-d650-4544-b94e-fd8243012b9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb43c25e-ee54-4c07-ade9-a7b5f328649f",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92c4837b-aad1-43a5-8145-50d9a9c7aafe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5919cae3-c461-46cc-8aaf-9edb43bd7951"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15acf069-21e3-49e9-8c97-d7d937712c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c54dbe6e-42ec-4371-a5c2-614538e05909"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da51c5b9-83bb-4cda-b15e-189347197e0a",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e87be558-1241-4d2c-b3c5-6b6abc7b691c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ef69c33-0435-41d3-9ebd-38e407610d85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86070147-dff4-4edb-b97a-993a931aef2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "95d85445-0311-4e72-a295-17f291ea3ad2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee6fca69-c998-4a78-bb15-58b6d15596e9",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d1d615b-0146-4404-a9c2-59a3f3f5fcf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0459cf8e-671c-4fe4-a1b1-cacd503fa68c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "699e5d60-dfa8-489a-bf79-f047767553d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6df7d94c-bff6-4f09-b3bf-29f6d5e4c479"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2967a08b-4586-4835-bb6e-1e7d6b92fc44",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64520d5c-9f0e-4794-8600-ba2e048a149a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a441a26-259b-4bbb-8cee-4c59c387441d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "826a8342-6ccd-4874-8992-9a2f1f97f6d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "70203a21-4d42-441d-9871-f6bd90e1caf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5136d01a-e034-47d0-8383-363e1971d37b",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e507271-987b-4272-a5eb-94a2050ea706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b972084-f530-4410-ad55-89e744b6be79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b61c7507-7762-424a-8d65-238a5beace24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2634026f-d919-4304-8f3a-d269ad836955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6ce3e26-ba25-4a84-a80d-c949bad72956",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d193b911-8ac3-4239-b7e0-5717f31cc089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4149a619-975f-41be-acdf-44c4825eadc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0fa0dcc-aa2e-40d6-b74d-8248d574d9f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd6b411a-03c9-43c0-a8bf-2d6e1586c7b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b142814-b35e-4b07-b16e-5ff98b518022",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4bf7c3d-7ca5-41bb-98a9-b6a454d072ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b84e5065-f3eb-4c1f-a2be-333e31ce9227"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76be6987-d1b9-4e91-912e-c937dbe40793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d93c7757-14ae-4172-bda2-c43d27312b06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f06be61-9325-4b9d-b58c-4ba281ab9adf",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7dd88e3-3985-4de5-9fa6-c92fcb66e6fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89a1e641-fd15-488e-b802-eeaef89523b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5298f3d2-013a-406e-84a0-348d4181aa05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc6e0a28-ab42-4f7a-905c-a02292e3fe60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45718127-2b65-46a5-9cd5-f10b5e130619",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "977f8b6a-5bd9-4052-b37b-ec5a63f60c08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec2e6e59-58ee-4567-8644-e78528b92e84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "420dc98a-5807-43a6-88ff-65b285cf963c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "477480bb-56e3-4523-9d9f-701bc1ec3c36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbc629c6-6b55-43d5-93a1-ae30c37fb095",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2362b84-221f-4d5d-801a-9f0f5f4a1cf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dcdffbb-c02e-47c7-98cd-c5d2a514dbe8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fa9cfa9-8907-4706-b210-fbb607859ef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "17ba9d33-17cc-4ed8-beb3-c1887977eff6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69ea494b-d432-4f73-b9c7-c8c2f961c726",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "283e248b-ab83-4cdc-8f6e-2bb6c9b9455e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3de3ced-a95e-4715-9d0c-9c683715a855"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "921aa2f0-e4a5-406d-9501-39385adef288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d2776ba-b9ec-4436-b4d6-63692783e7a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5a48edc-094e-4ee7-b15d-4c9a791a5624",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2374d442-795b-43eb-99c1-88020a1b85cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e40c533a-bb74-4b53-8d03-daaa49c394f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05cbc4f0-3ada-445d-89cc-da6d455089b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a67e514-51c2-43ea-972e-63adce1893e4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "db89f250-b4f8-4c7a-98d7-87b059deeb1b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fdde488e-8708-4b29-81b4-d6280496c97f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55f5b658-af09-46af-a121-eb06d2ae0b10",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "5bb9dfa6-39a6-4980-b242-d61f2a59e8be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "537769d7-275b-4f93-9ef8-41ebd312926b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4fa9032f-c132-483a-aeb6-277750862282"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4ee35a64-00d4-4a43-b836-123710492cbd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "157fc0f2-8985-44db-8fe4-5bf51c60d13e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "db0fdb9e-90f8-40f1-9fe6-2c4ecdb197d8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2a8de20b-d54d-495a-a731-99c58396a94d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d8e447c3-053b-40f5-93ec-7407363266d1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d5794faa-b190-440a-872b-9e2c74c22e00"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "24006648-7a65-4fdd-aa81-ad94459317b5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8775cd66-230b-461c-8251-5739b70e3284"
            }
          }
        ]
      },
      {
        "id": "b32beece-6edf-4585-99f9-9428cfe394e9",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "2e1af006-0fee-4ca4-8a21-a4a3f4697087",
            "name": "Negative Testing",
            "item": [
              {
                "id": "757bdc0b-6e71-45d6-838f-683582f0c55f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c1e473fe-e6bc-4af5-913d-96ec9fac0c11",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd9eb631-64f9-4f00-9885-350092041698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4caf778-e122-4e67-bed0-bde839ccdc50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43cb5347-fca8-451e-a7cb-88cdb63376e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "54101481-69ee-4eb3-afa2-84491ee042cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f8676e0-840a-40a4-86ca-eedd79981a40",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "901315a6-f65c-4f69-b34c-6c98e889ec12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e974570b-e1c6-4a71-a660-480f51b205d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "968de8ab-128b-4666-a28a-9d27b3a2c1af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f92b9c1-3db5-466e-9c5e-e9aa7f3640a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ba94414-f76e-4cae-bc70-023b15dabb49",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "138a4cbe-5487-4c5a-b701-1632606d0785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cea69534-2105-42e4-9b70-32631065c824"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fcfad32-e1d5-4108-b9a7-ab56260ab00f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e40f6dfc-2333-48ba-badc-066ffbcfabd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12bf84fd-313e-4091-8d85-883633609464",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5d6a923-9789-442e-b7a7-07bf70044210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "912138a9-d13b-49a0-bb73-f19477f55ed5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52c1dbf3-9ea3-4e99-8f81-6136067a0c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0034dfcc-05ad-41e4-acc4-a5b8d1770def"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e48808ad-fadb-4ee0-aa71-033ed75aea83",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b42ffb7-c3d5-425b-91fd-55219bc8ce3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c6ef9c4-7720-4964-8a9b-5112a49bc934"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99e84b6c-6608-4c24-9b2d-58aaf70b0a30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ca09bec-0884-4354-8ac8-8092efd973ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8be4342-2d4b-463b-bd9c-ec05b6fd0c08",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "083b15f3-2c76-4ecf-a701-0825da65601f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3935344b-35b4-4928-92bd-cde736428691"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "145ccd1c-4425-42dd-ac86-64bbf41528e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5153f3f2-8b0c-409c-92e0-96bfcc7885de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0245d79-a9b4-4763-9e27-9555766e8b8c",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b287621b-626f-4b4b-a478-b4ba4930ccfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34d5bf21-b05d-467b-baf4-eed189e75fb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2285bf95-db45-447c-8926-3dd8700161e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "acf98148-1278-42d6-837f-4b89b29f238c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72beb592-4e49-49a5-8203-599fc1e24ae3",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a62d84c-983a-44e2-9f49-d46702f560ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49139374-9691-4ac6-9c16-3ef8271eb3b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4247b864-6531-4605-99c0-f76b87fc96bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc3cc656-95e6-4dbf-b5df-2f50924b728d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68c723ce-2356-4d65-9541-a8a2ba530544",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30780f5a-7b82-4578-8795-c0504137763d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "149c8df7-7b03-45a1-bf46-2b95f9f3a580"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcab23ef-57a2-4a77-a1a2-7fe74f130d45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6277fe94-a5d4-4dbd-9d0e-d80bcc0cf924"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30be9032-4a9c-4c85-b254-7a6cdbcd119b",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc08a9b8-2ec8-424e-a7cf-1521452ba37c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c64bacb8-ccd0-44e2-b469-dfb3996e5280"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c0ea9d5-1b54-45ec-96a0-6dc41beb0b99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "98e85e02-fe8e-4eb0-901e-066d18b662d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "230cb579-49b7-4d8f-aa43-a0541b3a6710",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df697f0f-242d-4eca-9b5c-e054adf5818e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "050cd4ec-c8fb-49c4-a428-3f22e3dbe9b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2714d36e-a2a5-4402-b5d5-a19df136ef7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "ddba75e0-9a0a-40b3-8966-061249f9eeef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5589c24-da7c-4239-ab4c-80a6fdd5d6a0",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e64d29e-22e5-44b4-9286-ec1479c41cae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b8db241-5121-43a1-90f4-c825ea75589d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5f0f334-6d76-487f-8f95-cc15f6e36484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "602c3a7c-34ee-43d0-a5e9-53907745e08e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96e1af9e-1d1a-4a6c-9903-bd12787e150e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae6b0d49-d5b5-4b09-998e-87c08f8644e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b26adc7-d002-450b-8d22-3dc98693aa1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df869448-5375-4199-a338-cbe3e60a0efa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2a9b508-f6b4-4965-937a-e0d9212eee30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "828f85a6-3c23-48bf-a172-5dbdfa9c49ec",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7f84e20-6cc1-48f8-b0ac-6182ed9031dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5216b3a-e1ac-445c-895e-fa66d7175f33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63e37f4d-9be1-4336-be05-acfd288e4d76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d3ed74d-53a1-420c-9e11-3adbfdeeb5bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4180c85-e165-42cb-961b-ac285c285b4e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "255cdf52-e41e-4cda-8fc1-83308dff11c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "820a5e9a-2a28-4f5e-8b22-09597f30c5a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e73106e0-893d-412e-9f70-b82dc8c68eab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "db20eea8-ecd9-4382-8513-5e5158e09116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e86966d5-4fc8-41b8-b0af-2bf553733f64",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27a0ba56-7457-4120-93b8-b6f45a8131ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1229a8eb-8dbf-4680-9794-9dbc4dce18f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25364e4c-8933-4e76-802e-f5eb760b1c1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e32b646-de15-4398-9451-ceeebbc43382"
                        }
                      }
                    ]
                  },
                  {
                    "id": "408f1452-e76c-4f53-810e-39ad15a38b77",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7858b362-51fd-44bf-b5bf-e5e637668c88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dfd91de-7b6e-4e4f-963c-b00e6a15e296"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bccab76-63b6-42a0-b3c9-b6e43c64b37c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "67b262ad-e339-42dd-bf2d-2b76bac008dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b0d6901-9ba9-425c-86d4-c1627b429529",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cdc6d4e-201b-438a-a6af-0b599c6738c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c691193-7321-40ed-9560-467d2f8eee6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8c4afd2-359b-4245-8ecc-ef07df989167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "90de03a7-927f-418f-95c6-51344dacb34b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8440dab9-e7ab-4b53-90c6-8489aaf798fa",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19e5898a-fc19-4c67-8d01-3e3f915f6a3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e803b59-82b8-49a4-9552-825f29ee9262"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44a8e2df-724c-4967-acd1-301bc13d6250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffe9c8fe-1456-46b5-8c24-668b43998b83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa875999-9f49-41f3-a6b2-01689a85e003",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6374e868-692a-4b93-9871-f0942ec6cdfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f323252-7b0d-4530-85fc-ad161ebf44d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1325bfef-336f-4068-8424-64d52f7d416a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "68f2aca2-67fb-4022-aba3-dd81c4d90a1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23f817de-07bf-4c3f-941a-4b788066f066",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ade6ec14-b6ee-4061-a8ac-2b03750bf046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b613ffe-419f-43a5-8d6b-8e95b4884832"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3d90baa-2b7d-4c7c-bf26-a5a131db4e6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f8f7c44-23de-4af2-8dad-e21c6ec6b5eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be9ece0b-02d0-482a-9925-6bf8acb9b568",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87162a83-4a98-4feb-89e7-5f9250d4c7f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddb82947-833c-44e4-a44c-f7bd3f11c03a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bb59906-cfcc-40b4-998d-8054bf3f3a36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "16e3f391-e3e2-42b7-991f-66fb6d9aaf67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fe3957f-125e-49b5-bd87-fa2e60feb0d4",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d45d9fcb-db4d-4a1f-b879-e76a80b1c3d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df636a4a-6215-4766-88d0-c1a507f6d990"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e94167a4-320c-452c-b2ee-2c4e3c0135a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "51fdf037-8999-4cd8-9098-7b56b4f74fef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e85750d-a36a-4625-b63d-8d2734c57e66",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01476ef3-5ac9-4e3c-b6cd-ab23c794a771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "000712f0-5196-4b39-a194-61e2b43c6dca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ba1657-beda-4681-9cb0-6fcb13a06356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "072416e5-c6c4-4ad3-ac58-d5ecdda2a617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2807210e-43ec-4e75-86a4-47f40868aa63",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "970ba6e3-0f5a-41a8-8794-aa4c31a852d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bab277f-bf61-44b8-80cc-24dbcc86e50c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d2c99bc-4a4f-447b-889d-e558eda01361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "92569fa8-602a-4353-98c2-84611700918a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da27e832-9990-44c2-8a69-12424798e238",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fc626ad-5b9b-4a7c-9661-f065be261a91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff1d8e54-5297-4ea5-974c-40d19b0b66d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3fd5b96-ffb3-4816-bde2-266b5e3733f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0318a4ba-165f-4e9e-9723-944b4de68a96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99996557-6cbe-4486-a700-c1ec1af4ecc2",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82ff95ef-ad5e-4fa0-ae97-bde25a343404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bf69a29-8a49-47d9-9c8e-74d035541767"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc3bb295-88d3-4d04-b6c3-4bf67433c0ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "70cbfd7d-1d24-4702-82cb-0d3ff3c13e5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73191dd4-5c7d-4217-995f-0e30dc5042b9",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82605f09-c9d1-4002-b03d-dc62769a04ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cde18f0-995c-4f89-b873-3d60826351bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cca5b02a-d44e-4c2d-8a30-0bed1efc1e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a62197b-3c34-444a-bfa5-22c97ef12890"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bf261c3-6a23-40dc-8ee0-8332dcbb7cf0",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b44230d-255d-4ecf-82b0-38a9f0003926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bd09b80-282e-43cb-b024-fc7b6fc8e03d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc29d8c7-ec94-494e-a547-98f046168afa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e6128d9-c10b-417a-a1e8-050211392b34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d7264fa-f607-4ee4-a801-ded691780251",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38fe1c4e-2cc1-4e96-9571-2c56b6ac7e82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "653ee96f-daba-4b99-b0f5-b9e1e4964c78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0323c63a-ae5a-48fa-92b2-e7833a91d2dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53f50e45-9bf8-4df9-af5d-78e31d53dc1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b72f5467-535f-40db-af5b-ae1ae089f1e5",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91a75623-f382-44a6-9e7b-f8ead7031563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de5bc70b-c818-4d3b-9c00-58c19c4b6af4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48e99b1f-f764-4b28-aacf-89169527ab9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "295256a9-fd90-40b3-ac4d-713bfebbd831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d333e1e7-39ea-4a37-9a85-dcfc4cc8537e",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "807161e9-082e-4c16-9649-af6add5feba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e77377a-053d-4d6e-82ff-74ce80721c0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e668609c-1445-4f1c-a27f-21605140d703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6645f8fb-ae98-4dee-acf3-d59d0f932bf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2819d0f-1f15-4638-beb1-31c1373308dd",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3156f562-10f1-4190-a898-30ee3d8dac0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b360a76e-b134-4466-bf17-79e04e154ac8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de7acf2f-67e7-4f0c-b805-27895f08f54d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "961c7163-f23c-4734-b735-06ffcf57caaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e241deed-9af1-472b-9ca6-93e807f9155f",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18d32ba2-b6af-4286-ba90-bf0fc2968a64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06df7d9f-7046-4f60-9243-3f2d49cab273"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4255b375-416d-4b7a-8f91-1b75332ce780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c77949c8-dd06-44c1-9600-e75e2e568e11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdaa5d35-6365-470f-a7cb-ff6adb3d5a60",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96dcdf61-5210-470b-ab73-cc3da133b4d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffe4ebca-30ba-4cad-89e7-abe82c06a70e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "506c2a4c-66df-4c38-94df-34abac4b6fcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0164727-fc12-41bd-8049-205e88210070"
                        }
                      }
                    ]
                  },
                  {
                    "id": "418548b8-d4c9-437c-9e5c-ef491a6668ab",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49e76e53-6971-4bec-a478-3784fc78dda3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a8af4e7-59ac-47f8-8d1a-61685e70f025"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1349f0eb-9ef4-4336-bf2f-e97c52eef5cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b244cb7-5d2b-4c5a-85c0-c36241b0d02b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dddbb32-1671-41b4-a334-15d0c1d30272",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "323f2693-a874-4bbc-b6bf-8bad65109b3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9a6d27a-923c-4781-96ca-8f83d309e627"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "280fc010-fab4-40f1-8bf7-c52577e2bd87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2cc561a4-5d24-4f5b-8fe8-46ba82cd77d4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4c754c60-e9c9-4a31-83e1-0edf197645fe",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "26122964-4a68-4e41-972a-da326447af8c",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2fbe9ab-0e7c-48d0-a8f3-d510e12683cc",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "9d50672d-651d-4992-ab67-54508871d199"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3801ce2-22f5-486f-86ab-c207f956a3b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e68e0c23-930f-49c9-93bd-01eaf812ae9e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9d28b7d2-e9e8-49f1-b0d2-90c45d611d4d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "04ebd47d-aeb2-4f3a-a9a2-71f813379162"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3cc3fb25-cd7d-4bc0-9e6c-ffab01f45b7b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ee240b43-5cfb-4b12-a411-a6b28fc48f0b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "444c4273-693c-4743-8971-294392b32b43",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "27cba28a-d48d-4e39-8484-79cea516f1b2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "77a87deb-a530-462a-aae5-53388b6f5ca2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f3c52d1e-5a39-4214-9935-5560e10991ea"
            }
          }
        ]
      },
      {
        "id": "16b792ad-9bf2-4cbc-83a8-800f5eeafe95",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "88b027cb-875f-4054-b2b1-b9b1a6494e93",
            "name": "Negative Testing",
            "item": [
              {
                "id": "41522d9e-804d-4e29-bfef-eacbc7f27d05",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3e16d87b-1bd4-45f6-aceb-baecbcb001ef",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e48be062-a621-41c6-a335-8af2670e4c92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c12c75ec-0da3-4641-a88e-9ba0680d7b17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2528b440-7303-4c20-87e8-3691f060b7f3",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75fe6113-9ad8-42b8-bea9-be7eac086a93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5c70d84-020b-44c5-a04d-ddf85fcd72c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "088cfafd-2b04-47be-bf73-9012757c539f",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac5c033d-be6d-430d-92cb-89e977c1b348",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c40536e-265a-48df-89ba-d0326f80c9bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "688bed62-f1a3-444a-9c83-c2fa4198f1b2",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43a23d0a-e7cd-4167-8df2-7ef0fed3dca9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a567a903-4917-43cc-8949-9b07d8a26f21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2de807c7-445e-4b92-aece-8f6fb485bd28",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb22e9a5-c808-4843-a22d-37ab922c2247",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4dd8c83-bb6f-4a3d-a19b-1dc9d14c8044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1496f830-4bb1-49c3-80b3-acb7ec1f18c7",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75cb07a8-efd7-40c8-9d85-272b520ddd82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d7c8613-d281-4775-aefa-8504cca0c462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba4bf0dd-7e25-4255-b0a0-d7689c809b8c",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db3c4c55-7395-4994-bd96-563f0a299fb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "119ec6b2-e91a-4939-acf5-a84517d22f91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ccfb71e-7c0d-4a04-b9c9-943c81756da2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55eddf64-0ebc-4c21-b090-70f26d999511"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc492eca-9369-424b-adac-305b4eeeaf51",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdae837d-d63b-4374-ac8b-a076f9c7aeae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb45de84-cd93-46ae-aaea-d1ada03c34d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65236634-5540-4f46-9434-979085d8a3be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25212f7b-f826-42fe-86be-bd7caaaba9ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0164a118-d74a-47fc-a8ab-4b09e822ead8",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35fcbeff-f8ba-49e2-879b-5461c8659035",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5fc9061e-8d03-4064-a232-73df1bed6e3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "150bc72c-cd1b-4309-9fe3-392941faf426",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af144a01-e57b-4118-a3a1-b209a14fe2be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ef8c6c9-3aa5-4a1d-910e-c5b4dbf2d2f3",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ada2169-f48d-472e-9f38-85d5571ab453",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95431e14-e5c6-4ba9-95a8-49e6bb1d4d38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96cfee75-13e2-437b-901f-3750a770be46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fbb5379-1632-44a8-8f1a-67908b3a296e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da51d1aa-1131-424f-aea8-33d7bbc6b395",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce6d59a3-f8e7-4518-846f-2d7e6e78f9bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec4e08d9-07ac-4990-98dc-0693bcdb9aac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02fb00f6-78ce-42d8-a5d6-37803cc759fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66466016-7a97-4657-b7f7-79e0aca80da1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a0cce25-7a2c-4ebc-95a4-09a512e6f57d",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5baf7528-46f8-480c-878e-e474157b2b8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bf1c59c-f21b-4cc6-8841-7c01f752225b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "641e8006-193a-451a-b242-c2fdcfa8907b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69946ad9-7eb3-4dad-b8a8-15d98c00d82a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12fcd1b7-ec8a-4bc5-903f-0d0389409f0e",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cad1ed4b-50ca-4400-aa7c-8487ccd54d14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0470c544-c3b8-4beb-a4c0-bc6ecd04f43a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d45907e2-a1c9-45e2-b1fd-9fdb86b7e443",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2356337-adbb-4f77-862d-524a0764b8fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d72efad-66bb-4eed-92e4-e72e0aec27f7",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1d44e09-2c5b-44c8-9fa8-287b3a8317e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8763bd58-541c-4aec-82c3-980466ca0789"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2cef032-0983-401e-bb3a-c5e89f75dee1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2046627b-24ba-4951-bbff-6b80c7b6ce68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c784291-d3d0-4a09-ae97-8f1b5bc35a56",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cff6f86-336e-41b4-8abd-6da394ba390e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "883b92fe-b4ea-4fff-b995-f99d885c169f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "179d7ed6-1177-4cb0-84b8-a4077f7ca650",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bccee8c-b26f-4885-b767-5a2ccda1e8fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bbb75d6-bbe0-4da0-a4d9-4c8c16e9c005",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1872ebaa-6d5c-4d06-95e1-9b25233840e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d3e7083-04cb-49e6-b16e-36f4a81a422d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccbaef49-4127-4618-811f-2ccc034d22c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0c3ece4-0c74-4100-89df-c4ceafb645da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "994746b2-316c-447e-bae3-3b85a45894e2",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf9f7879-77d1-4858-b1de-95edf3a9740c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05d5c7fb-1f23-492d-aa93-ee25a2189d6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b2512bb-96ad-4492-bcdc-e979591befaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6d79ddd-f96d-4678-a650-431a13acab05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f49de82-547d-466d-87de-aa8f3067a7b2",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a4e9225-0a8e-4216-98dd-751ac0cc6125",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6c324b8-3067-4cfa-af19-c79b481dc1b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d47b83e8-d7cf-4b00-ae02-0395af7b506f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f704f56-60a1-4657-bfe8-01080e11d109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bb0b0b0-76c3-4a81-aa86-cecce76ff054",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c408216e-d22e-4c9a-9541-d81b865d05ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb51daa3-c723-4c2f-8bfd-bc03cc412806"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a328a50-21e8-4cd4-8d3d-e6b48a04afbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1b55695-3d5d-4bad-8b1e-059ebbbbe777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a5d7534-1264-40a7-b34a-a3c3663c8cd1",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e53b3610-de37-4ae7-a493-6bfa47fb0d37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f95f091-9fb1-43b8-b9a3-c674d6daeddf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3efe3745-2cd5-41c9-912c-ae630a7fab7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a299275-0278-40eb-b0f7-3a9cd7ebc03f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c283f5c7-8aed-4066-877b-bc9f95726d3d",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dae8bfb-75da-4ca5-8501-e95420ed8d1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8831953e-5380-414e-a9d3-57b574e816c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa5a9061-cac9-4760-96cb-7673380bbe84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76fe7412-b39d-44f1-9cd8-cf1357abba41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "978f727a-2874-469d-96fd-35b27bf35018",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da7bfa4d-0de3-4eff-806e-e65749ea900e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7375faad-d57f-4a82-84b8-346e99ba02fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "058e8107-cbf7-4a0d-8f48-75c69a5a68dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29505e75-cb50-4ac8-abe1-edb1e206ea60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83b2118c-8463-4194-9830-8843122c4e59",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff579352-344c-42be-bd6d-50f7086aefb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67cbf393-9ebc-405a-8d49-d8aedb92a5b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2909da2-2e61-4970-8ae1-66a38fb731f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4620be31-1e05-4dd5-97da-bac30952fdac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b10506e-4c24-4e97-be16-bacb4c5ba8e8",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfe5de51-354e-48a6-88da-2c4b4e298e7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ecf47de-3bad-4caf-831c-480842f5d301"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bf37d8e-2e54-45d5-a043-718776226726",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "893c2d16-9ff0-4114-9f68-aacc62cf9c8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "109de71e-a5a7-4cc7-90f4-13236deeefbc",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a40cbe8-4e24-4333-afb0-456de4561616",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b431e35a-e57f-43b9-838a-c56e6cff17a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18e7af59-ce66-4862-a8b6-51ae5a24c9ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b5dde78-92c4-40e7-890b-44fd2cb1c152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fbeee4d-333c-4eb2-8159-c444b6d2df74",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8598cee6-5578-4fcd-ae8b-fa5fbc838ac1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58491355-c896-476d-a875-0a196a3a50ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1536f433-d5cc-4d67-979e-7e51b8e3899c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a6c0c95-41cb-4bd8-ba15-49ec4482e163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0261202a-9092-49e1-a5d0-dd8f62d18b3e",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e0d0d33-1494-4da4-90e0-d9ca4cf135b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb20e6a3-6629-4b55-8f07-a3486bd42b0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36834ce4-d88a-45c2-9edb-d117024638e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "912db121-7a70-43a4-a652-3d0ac5c80240"
                        }
                      }
                    ]
                  },
                  {
                    "id": "163795f6-8a44-4978-a336-819b4a9c4dba",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7b37839-dd41-4c28-9179-f2207fcffe6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6edbccb6-4f96-4d9d-b333-de5b02c46225"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45b7c2a7-fcb3-43fb-a4fa-3bbd06c023b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97285d71-2641-4c0a-9763-56460cfcb36d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "130def72-4e0b-42b4-97d3-0f8a4829d1d4",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b87ab714-cf38-4841-9b07-5c23a69fc69f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8be2832b-6995-47f4-9afc-27a459ff537d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a862fc64-5a07-4002-b445-56873f18671f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95643554-f20a-428e-9c63-5e1f96dc9049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03bd4ec4-7f02-41e8-a7cb-b8e7c06ab814",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "745fb8ff-f7bf-4215-87ae-164076e4c7d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "236d1258-7ef6-4de0-95d1-2f62811e8340"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f58587a-1a4a-47dd-bb24-e0a46269ad70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35de461c-ee9a-4bf2-be23-34f67afff5dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc93add2-b45a-4885-868f-ce7a57292459",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fa08328-0a82-478a-95f2-3132cc663458",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "139322aa-6347-4ffc-9156-5ef7298d5e51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "178997ee-b289-48b8-8c01-fd2e0ad012f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66008b04-8d40-47a5-a820-2c8b107c125b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "860f32b3-5d98-473a-bf13-9e9d7fd2623f",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeaa3498-e4c8-420a-94f2-03b620e1db8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f524d986-6c39-4984-b797-857ebb4ae217"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17a13cb7-39b2-4744-a230-443bf33b5b21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62557b13-c842-42b0-beaf-ff5bd70f391a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9df2f171-a305-4339-8cf0-810314920f33",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2faaefd-7560-4da5-b6e3-3fffe2b7ac37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a3f9669-e50f-4ec1-af5f-a645e851a27c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a83606f-6e9c-42ee-9d75-94bc07a7d9a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ac51785-dc0c-467c-93ba-8f65c524c274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0895c32c-145a-4405-aa52-8180316598ba",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0032fa9c-c3ab-40ab-977a-1741964d732a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a96cada-524b-4f80-a164-2937db507661"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "234fbd03-ab32-4660-aa1a-b8f4b145c02d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35a94065-1655-4768-9985-545a622050da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a2f5961-14cb-437d-8a3c-d690e2105f04",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80e4f574-3583-49dc-adb5-77a7d1ccfbaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74a067b0-98e0-4d0a-9831-1d64657011c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46dc915d-30a9-48ce-bc78-3c11dd8825b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f146fa3e-a484-458d-8ff1-070186d7a590"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bd6dcef-3749-4864-bc49-ac2f74e61cec",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa99ea42-bc1f-467a-b76f-296deaf54e61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b036366-1ea4-40dc-90a6-ad15a141ecc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "153f8aa7-ce4b-458f-8ef3-0c8f6e73e2e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40eb5139-cb4a-4ef8-955e-36c0491e3d09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47601453-ad00-42b6-a894-7b5c5e6d978b",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f821e1a-22bd-4108-9a48-38378cf7215c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fd5b638-faa5-4d20-9fb5-19bd0509aedd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bb526e0-10ed-4bd5-907a-96ef1894b5f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "767286ea-79a8-4054-a90c-f423988f0716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "532228e0-4eae-49e5-b92f-6417c42f56a1",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3fe2640-c601-469a-98c3-bd3cca97bf01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9259a75d-f33f-4411-95c0-eeff42952817"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ab2aee-d070-4d0d-a06a-80023aa06ff1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04b0027d-c62e-44ee-b45a-4889f35898c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6045b612-4b75-426b-afb6-ecef37fb4e54",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f73545b-cfb8-438c-b6c7-ffc614500d82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fc2b285-4299-44f3-9b90-42a256eb63ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b49cb01f-2ebc-457d-b685-c23d7e8d062f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05c0cff5-4c89-4b06-a993-3bf16be7161f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6cd1576-287a-4619-8221-9191fc923185",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20c99813-eb95-43e1-acb1-fabec4be3fef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a76de6ad-13a4-4cd9-951b-10e681cac0e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a583256b-d491-46d6-9c2d-e47aa487330a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce437fdf-7af7-4ac1-875a-28324eee95fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52a676bc-f240-4a6d-96d4-62c10f0cdf20",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5d52a93-7d8b-4b7c-9d57-1eccd0fd99aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6140937b-ffa4-4122-ba17-5c4a84adf7e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "481f15ba-ac17-44b9-8dd1-1f7feedcdfd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9be1c1e3-39be-4d7a-a2d2-864dd9dbab8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29920704-1cfe-479b-85e1-0f2977de59bc",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3118a43f-7dec-49e0-b46b-2fe4d60b4d22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "354958b8-b8f5-4f43-9d08-86e67c398a96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b510ed73-ea2e-446f-88dc-fb31d4e28e41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8aedf56-62cb-44d3-90f8-5ba58c923bf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a618cf2-df97-438d-b04e-3b031aca1f15",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46e5cec6-5ea1-4fa6-bde6-dea960edf943",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38e86683-1f7d-4f37-a634-0ab91289f7bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d8708f0-06a2-4876-b302-ca53d1164221",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "100e2446-cb1a-410b-a2ce-8d55523873f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91c75c99-d555-4c57-a3a5-3aa149e22a00",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a39b0505-cc20-46e2-8f30-4818c6a74941",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1940eac-f89a-45fa-afff-2574fc66f242"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04fd9510-6330-4336-aaa9-73f800f1bfab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bc8afa4-bb32-4b2e-895f-2a9cfffd92f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8447001c-33be-4131-bb35-c446104e8545",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16b4f29c-bccc-4fb2-a820-bcde3a5e4a4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfc77d9d-0764-4165-a2b9-8840a0c4d3fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28f3087f-5234-4be0-956d-ce21600f806b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1635a2f2-7a20-4578-b03a-b160916a7c53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df0502b7-f039-45e0-a4e5-8032eb08f0f9",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "866f4094-93ea-48ef-a1cd-ed7a8b8575d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4641706b-3d3d-430c-a596-dc448fd38e7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34870bd8-f08e-4475-9f85-7187790174ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ac4a4e5-89e4-49f3-bd50-7f6f0cba8fa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3e8671c-026a-4f47-b32b-20e928ff37ae",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91e084f1-e863-4646-a983-9200e8bd0ba8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9a6c0e3-406a-454a-8254-f2457d337724"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e38bf961-7e73-4421-bcd7-4f361ef664dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd5c49cc-fcc7-41a5-a6df-ee6083686545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34761304-ffa5-49fa-913d-8e82c879f4c1",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e05e0ad6-3b91-46fe-8ca9-bd5536f05ba8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2952ffa4-1aac-42a2-aeb0-7d0073585531"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "737362b6-42bf-4821-a11f-9740d849b52c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d691161c-580a-4b73-b444-9e1e928c0e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "307ff331-cecc-4814-90e1-f38ba362e096",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a605f52-4ac2-4dde-afa9-7f55aa435672",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ca47dbe-e5d7-4c2a-9d69-51a9a319edbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "924550dd-12b1-474d-9a75-274e7f7872da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72552c4d-ccf4-4e37-a5ca-e4177845ab73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75c68bc3-e135-475f-a5ba-0bf06e574446",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f70ec0d-4dd1-451a-8333-8b8a9e9137ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "381e2a8c-4f86-4fe4-a90f-fdde5f275312"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81302f52-acc1-4988-8a4e-32ffad513f02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eea108d4-56c1-47c4-82f6-94c8954ca87e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "610b7bb2-b63a-433a-bf14-b30bb5a8d768",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f6fa4c0-2d50-45a2-8a24-5cd7ddc21a91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "beb14f80-7a63-441e-89ef-ae4b8853a4d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac8b04fa-b1ca-4879-a3d2-660edcda6d1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7654562a-abee-4f59-ba67-c6ed33a200b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "795fc9b4-9717-4df6-8e63-72a01f6c0aa1",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bd68ad2-4936-45c8-bea7-e7d7a87c796a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20e3db7f-2165-40d7-89aa-fbefc669a444"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfb6a688-11b1-4ac4-b6e7-cf48840120f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6a7fe1f-127d-46b9-bfc5-b7ded1800a47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "004db7ed-f098-4f39-9cee-06947d91abe6",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f1fcefc-d6f5-430b-bc2b-0b873d90de7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb2e1394-cfcb-4d42-9732-91d5275f9bb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcfc856c-c597-4ec2-a516-232b38e6511a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37eca25b-c88c-4a36-b156-c8b2585d6a67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07083588-98b0-426b-9fcf-f81d5033bad0",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33f9c422-9a86-4ec0-b406-8d05f3e24106",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "397337a6-c40d-43f7-8b61-d28608e09759"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2e09bfb-ee07-415d-9810-656291d03c1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc72d3b3-d8d3-41ff-ab39-f28540484f53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6481f573-ba08-4700-99d6-afe44ef5221c",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e2dcab8-bb0c-45ec-8ffc-f564204f1b7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dcec8a3-76a2-44ce-a33b-f848ba16ce96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "712aabc3-affc-4992-8751-e0d21b2e00cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1660dee9-d249-4c60-ab70-1fb97f8af2f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ecc5e1f-f858-4683-be7d-b6ddb65bb409",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72451fd9-a8cc-43ab-af32-a4f5a343b908",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "946b57c9-feca-4667-8230-83b581e00a0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab63c202-4f98-4b76-a724-ec0ea796be9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49a6ac7e-3420-4295-a139-a4e9dff623a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c211326-b7ca-484a-b040-e500e8110c9a",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eb046bd-4628-4e8c-9abd-83b9b839195e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "804c100b-1fa0-4ddc-a2f8-4c20dcd44958"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ec01e42-8e57-4dbe-9bb9-3163af65456a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea18084f-9733-4bae-8e78-0d3c291974c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52f08caa-d57a-4ecd-bf8d-83c65d2a0eb0",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e1770f8-78f0-49be-8e5b-6a41b4ee15ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39363c97-31ab-4ba6-aca5-6b2603f606e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9c9ba2e-3a18-4300-928a-f4bfc06a1ab1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a752f72-8538-4d25-b856-0a12a3a5ae2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d50f4650-33d4-4797-8f1d-dfe89e3903fb",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d0e66cf-bbf9-4119-b7a4-ed8fb4a94b48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19e390ff-af6e-4927-b912-8f0be3b440a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b352eede-7acf-4617-ae4f-5db39fc72200",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fe7732e-a724-4b5f-860a-b0e944f72e4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34bc8793-a6c9-4d36-89ed-300a20b43d15",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdde1040-0db8-42c9-99ef-635c2610f0dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34393a8a-8ba1-4ab9-8ccc-0aa2942224eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7ecd4f5-2c1f-4d4e-af45-8c069ef01f36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3560ca0f-bf6c-4bb7-a99b-5cf9ad9d0d78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "306025dc-17e6-4ac5-a232-4e4cda2cbd6b",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a47e6ea3-f6a3-45f0-b37f-5246e8afd73b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6d0ef01-30a5-41fe-937e-94537e354d8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c219325-8a1a-4079-b27c-fd52a05adfeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e16da59-587e-4181-8bb6-1b79e649eefc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf98ee06-9726-496d-8228-254a9f39cea9",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67c469ad-3969-4a79-8672-5d61b8f6f6ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2858a059-fdeb-480b-9a79-5c33ef78c22d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "132b79d4-be3b-4381-8a38-9c30bfd100da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a6e634c-b032-46d2-b96b-626a3ff1b7bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6959c8ba-58bb-40b9-8057-ef734aa4bfcc",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f6cba74-51da-49e0-9e1b-22711c0baadc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dbdbfec-1d73-462e-b67f-f85cb88d194a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a85a858-d329-485e-92e5-a4a1e7dc14a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3205aeb-1ce3-4226-bb6b-4b7bbb20fb0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8cb5d35-7287-4ee3-b45c-ec6eb4feb9ca",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eef6d6f-c5d3-4912-bdc6-599dddf3e604",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f433212-e535-455c-b465-adc93f41413b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fe27fc8-c7c5-4928-862a-ea78d0fda093",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87caebfb-4fbe-4ec8-a8bb-12a159a5498e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f4dabd8-af91-4bca-9e37-fa24f7603ca0",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d024888-b2bc-49c9-bc4e-dfb7d12a728f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54cecac8-8c5c-4ac1-a8e8-abf55a1c2667"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "254393cf-aea1-4298-b5fe-1a8fbf6f7f7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48bddcf8-6a10-4c77-81ec-92f12b2d0233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f951bd0-0200-4d7c-a660-a4e2b855ff81",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa315d93-cecb-44fa-836c-0411f967d91d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "013401d6-ecee-4481-b27d-09fdc80bb7a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb2080a7-3d98-4a6e-a9eb-dca64c4e3f97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41540312-fd2d-405e-8b16-0515eb33c304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84a231c1-4c6f-40d4-99e6-069e690c151f",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "276f6d77-0aed-4c74-896f-763a48e5f312",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec1eefa5-bc1f-4043-b4aa-0289b6e234fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98eae256-6d51-46fb-97c9-fb96771ec7f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60562971-0f45-4d1b-aa1e-121a1ef0c377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa65df62-3079-4a24-9d29-4f3609cb92a9",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5615f929-1354-493f-b9fa-bb89eda8eece",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f7ba507-54e0-4115-adbc-4d5a126dcb33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3138ea6d-fc34-4648-8274-4aa532b15e2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0277de5-2aa5-41b7-8938-19b69d9f0524"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9da11d03-93bb-46c0-8fe4-08ea53311c1c",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2737ceb-f10e-406b-98c0-2337684f5894",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a9631b2-5a1e-4310-98d0-4ad0cb7ef725"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bf8ea65-e418-40f3-bf23-d330667a6733",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6aa26de-30e2-4f88-8f5d-4f28a37d7cab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a3d0883-2a33-4ab2-bcae-d947f3d976d7",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91bcefe8-58d3-4ef6-914f-454f39888c4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a2e820b-0ab2-4f64-9b43-d906f7fd28fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "011518cd-87cb-4360-b847-fb6584081dd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da6b3078-683b-4409-8733-341f9af437df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "328c599c-8935-497e-8ace-89cecf2caccc",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "611f9054-f4e5-4f63-8b7a-5dcfd7f6372a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0127dccf-1675-4ae2-bc89-152ea2a90980"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04b2542a-e6fd-49e7-bae1-a857f2882793",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11ad4037-d185-4efa-b958-707807e00550"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd4483cb-1bad-496c-8b3e-329d6797af37",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45d1903b-357d-42f2-bc9a-3ccd735de07d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be7ee1c5-14d5-440e-8309-c40321b3c4c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac8d3031-6171-4104-b386-33a6213a14a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e9bdfde-57dc-4405-beec-e6bedc0a9f87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4367f7d-d775-469b-9a0c-4cefa34095cc",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e14bacb-0142-445e-8d7d-0309624cf60d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7230feb-87e2-49bd-87e9-0a61bc9ca35b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "974c3f0e-9b01-47be-ba61-e8fbfd789765",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af9d0280-71a9-4fd4-9b9a-4472ff59ebf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa891d34-f08f-4889-ac0b-9b262524652b",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee883c47-8331-47c0-83a3-5171892b372a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6ca5ec8-dcaf-4748-acc6-67a4570ac583"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2468bd8-e557-4023-a8c6-c771abf2b410",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88219efa-5d32-45b9-8a39-77a6aafbfc5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ad69098-7546-4ebc-bd22-5b311388970d",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "186e2399-5044-4178-ad48-be6763f826fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6776b70-5f85-4cd6-8ea1-a14b765efc73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a45b6e4-06af-42e3-b24d-6dd783309541",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ded63de8-389f-4af7-940e-085aa2a674ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5cdce9a-9b6e-4188-8556-e02c1c5035b2",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "376f8ca6-4dce-451d-9ff1-e1e30da55c4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "490fcee8-ef1e-4751-a571-e3e1b5a6e011"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb38e620-fffe-4d96-828e-eda8ff14ab81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ef3cb9a-630f-4a3e-9609-df717af1fcb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ef9df7c-f16c-4f6d-ab70-2545214acfb9",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fdc69fa-8a14-4f4d-8481-2aa0205fe9cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fb9e803-b19a-4f89-950e-8fd679ff2c95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "860a6023-5c8d-48ad-b7d1-0348ecbbaf81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8375932d-50d2-43b2-a6e5-9414a297fdde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d45fe2c2-66b5-4e89-bc3c-8b923d358150",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d0aa5da-0451-4827-b8a8-0ab76b9b53e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0b10194-7ebc-4537-9fd2-24e13213d1ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8326d8c-6968-4e5a-bfb2-5386b95e0a3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "473aa375-6bbf-4ca3-926e-5bb85b90821e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ca611ff-ed9e-4718-afaa-a61c9a8364b6",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79cabd9b-161d-4695-afa6-182bf3210936",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fac797c2-20b7-4aa4-807f-1aaf6dfe3037"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a903524f-73e5-477f-a5f9-07bc8145d4c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b15760e-adc7-4f83-a848-bfe4a36d7c8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3e7d5d9-5467-4253-b63e-99ca53e38cb3",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "342b6775-7ca7-4f4f-8b5b-f360fceec530",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36b772b5-98d5-4b2e-ba51-6f76a61bf7c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36f666ad-a71d-4107-941b-6f2c62aa3b69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f01462e-7ce3-47a6-909c-6cdb2eb53fb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3863c53b-ef1a-4ee2-8f51-153bd48bc1f0",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75a3d308-8f67-4377-a724-2b041c070da9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c1b017c-bbf4-41f8-9d73-f4018e4a9657"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b10a8cae-7766-4843-b3f4-41b32d08310a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d576b03-3072-4c2c-bd02-1da5684f11c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e74e585-55e3-442a-aa20-d43a6606d139",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4cb1dda-3b5d-4186-8d5d-d2452c0c3219",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85286c78-1b69-47a6-91a1-90c5e6fae5af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72c66639-f1ef-4aef-b465-a06b3f487124",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1168a223-8ca2-4091-aecb-7b8843d570fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9950b87f-6225-4ff2-923a-df679b8b9ad7",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fffed76d-bace-41ce-9f2b-1c0d50b81517",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aff833a9-475f-4b82-9de6-90160913e61d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa6d8cdf-33dc-42da-b622-36e1895b5f1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "954544b1-8656-4610-8e5a-a09f4b0524c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f37d0b90-3d7b-4787-ae13-87170e8cd2ef",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ddc1e7a-c10f-4853-ad15-c11754a88731",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "308ac67d-1935-42cd-89d3-d055e0966962"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9c54b4d-78f8-4f00-b188-9a389632edae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea03f0e3-db66-4053-9549-e535144b8f0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37f0adac-9fc7-4543-9357-e7eef661b9bb",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "021919b2-3d31-4254-9e1d-33cd23c4984a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3b85f8f-d143-4aa5-87ef-4a97cb6bdb88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d0c566f-12bb-4eb6-8f88-7b3bbeaf320a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc2c75e8-0648-4f21-8bb3-5592ae51ca9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "024d88e2-654c-44d7-bd8f-c85e8564e349",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "652bbd3b-aef4-44ef-a5c0-a039923b0af3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21f0d767-6dff-4e64-859d-187850fd4acc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c84b9f00-98a2-4eb9-b388-79eb5d7b264e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09bbf2ad-6ea8-4245-83a5-ea663d81f31c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "532353a7-6979-41f7-a3ef-d91e3dcc3679",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efe63b3f-9a7d-4b03-8be0-ce9a17b126f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "151c9482-da1a-4f5a-8a58-b69145d940fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e04cb64-f1a4-46b1-bf75-dd02b9f86e6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0c7be10-7254-4317-a64f-6b975774b7a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45437364-a8e8-4c18-8bb5-a72e744a0f54",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba560c23-c1c8-4f6b-b01a-73d3e205a41f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fd16b42-b898-402d-a80f-001cf6341879"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fda2a2a-af3f-48e8-a795-5dfa9234fd1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1722dde-7378-4406-a60a-14d651259855"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16d2be2d-c7a8-4dca-a119-40f28b855ace",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab657ff6-56cf-4c25-8952-e788c233ca0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25116c7d-3f73-4583-b775-3add493df9b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4415259-2059-4abf-8bb0-7044aef57f90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5f127a4-a518-433f-af97-7d0cebb06c3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37032713-905a-4095-b881-b1ab1ba440dc",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08473889-9789-44df-a383-95128a47004a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f41f348-c896-46f8-8df6-f45be4c10471"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "447452cd-649c-4f60-97a1-b4cdbab0b070",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19273e47-6dd0-48b4-b13c-ffb1cd70ba28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58f69fdf-3761-4711-87bc-9f7fc9d9ef4f",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa71c71c-04ff-479f-811f-02a5fc520634",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f4fadee-0325-4b74-a183-137c2dc02e7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1e55492-d30a-4daa-93d8-a1eeca4755f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73c914aa-02ec-47ba-b5b8-11b895b4686b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05db3ed8-8952-4b1f-bd4e-214fad1c549a",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8354b4e4-c574-4ae5-80ae-227ca16791de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a4a21b8-9cb6-4fc9-8cdb-2c29b3729e40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "826d170b-50ca-4d8b-be6d-3414f241426d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaba8e86-f67a-41b8-83c4-6d0a53829d9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f52ca1d9-0d26-4a53-8bc8-64aa2bc1b215",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe7a3157-44ca-44f9-bf7b-d511d69ba7a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3700660-a7a8-4bd5-bd69-a5158f142174"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0d7ba21-7336-4e4a-9271-10e2986f2260",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f58a1e76-40fa-4e36-beaa-18125979c856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "045a47b4-bb96-4b33-90e1-3e6c24d0e6bc",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68c8d662-92c6-4361-8832-c37f001fd420",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e239156-3877-48a1-9f2e-ab5fdf36b36b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d179c0e6-bf7b-4bb1-9ed3-704d903713bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bda18e3-f1e0-450f-ab11-2be0ff98f450"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1054b208-bf1d-4ec6-9a09-1944a1df1fe4",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81184396-4161-4958-95ed-10be9d34a1f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3fc01a9-5959-486b-a807-2c4a6b2bf8ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7146b060-a2bf-4ad1-9339-d73bc7e71510",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce723f21-e2f7-4f5f-a18e-f4906c6ed6b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "818168f9-43b1-4b59-99ef-302e247cc64e",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d9fa67a-1d5a-453d-86d7-1bc9ac3b53fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "baef56c9-c3f4-4262-ae0f-1d5e56617230"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea8d7d32-9806-427b-b525-31e33caabd4b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18089513-6d1b-497a-bdee-98b0bd653ce8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b23af27-2bf5-495c-bb99-b44a6fd2407b",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8d1448d-a3ca-41db-8f6a-a7ff1f00cd6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95304349-3ad5-40d2-b788-fdd325a1d932"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e06c3c4-7d5f-487d-aa44-d9d21ff73b09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18c091f1-a9db-478d-b98f-e6168911bc2b"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "80b1831d-d8a5-4eb0-84ac-463d88e1ce71",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7711e311-ebc7-442d-a889-da40f37f4450"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "63907de1-36bb-4ba7-a63f-99950f9ef319",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "da374078-5f99-4688-9df5-ce5b9a2d0ddb"
                    }
                  }
                ]
              },
              {
                "id": "702e014f-a2c8-4bd7-8594-d60253a7195f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fad5c622-3ef3-4bfa-a1df-105d6b31632d",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f61dc69-f270-4001-8485-c8fd9085138d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "14e8e524-468c-4a12-bc9d-e1b4909d5c21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00cd94ac-e7f5-4c78-a5c7-bcfbe61739d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "96071c52-844a-4f44-a6f1-9e3f7ab8e21d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "658b0ae9-952b-47ab-b95f-d79d4cd3534d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b91ed9ad-6f9d-47a1-945a-eeca0e8e03cf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2d669bda-2851-4cb8-8539-106c29c9e68f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "21bc4865-94a9-414f-81a5-4ea035f288ec"
                    }
                  }
                ]
              },
              {
                "id": "15a2979d-4ad8-45c1-a21d-ac200816ab59",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "633e90c9-e5d0-4644-a3c3-a627d011382b",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83f8df95-2b5d-4b78-b281-a303a24d43d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "a12250b1-17fa-48aa-be19-20e3300812c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fdec057-0092-4fcb-8b6b-2197286d3ec1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "092d0704-d078-4d33-ba5d-9e47e6fc5125"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "138da521-67bb-4547-92e5-5f62eb3c8081",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e3550bc9-05d4-4044-bca9-95f344336238",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9c4933f0-e0e2-41e4-9172-1d6571e3b115",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "667eee27-115f-4988-b398-7b6837a72e86"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d1a79ef5-0007-4ada-91bd-1fd2d4cdf39b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a7458540-58b1-4961-b789-02727228e5e6"
                    }
                  }
                ]
              },
              {
                "id": "316792e9-f3d5-4fb8-8453-e7a4c187c039",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f9d58e31-a86f-414c-8e07-24a5e06f1dee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "1b6430c5-07ab-4007-ad8b-4d0f284ebf93"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "73bfcd66-1783-4a72-ba78-2150859c859d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b04f807f-61ea-468a-8647-5552925bbffb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e52abe38-b09f-4c50-91ab-21e57bec13a9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "cc78eab4-c20e-46c9-949e-0b88d5d74aff"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eb8a6c70-90ba-4a7b-bc3f-6ab8f1ed1566",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1b028693-f1b5-435b-8121-ac6fcae9e236"
            }
          }
        ]
      },
      {
        "id": "c9c9e221-b945-47f2-8594-b823515ea1cb",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "a50f560d-0f2d-4412-ab20-d66694308141",
            "name": "Negative Testing",
            "item": [
              {
                "id": "97d0e224-d09a-4d51-8f4a-6b7974d8b071",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4fe1b7d5-db0f-4835-b4f7-eb95885df9a2",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d0c69ad-8d9b-4257-b127-5615fe57c609",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b547f9cd-cabb-4b26-8726-d65abd686abd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55e97ae2-a070-430b-9f71-1b5a43fce84e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "962ec583-709b-4dc1-b176-b1506a3b6353"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ba514bd9-8d87-45a0-ac52-71a5db203912",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bb94d882-a0c0-49fe-9ee2-4c25721f6c15"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b2ac6fce-c628-475b-bd3f-705255e126dd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "25a851d6-ffe2-479a-af49-294e6628d6dd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cba61ea5-d0bf-4f68-9899-97e4be22f26e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "5963602a-f50a-4285-8b82-3993c06c1612"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "95e087fe-27c2-4ae7-8967-35915b61d83c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "01bbc4c4-dc3e-45e3-9b8c-d01ac4e7eec6"
            }
          }
        ]
      },
      {
        "id": "da140aa6-2297-49cc-815a-a6abcf413441",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "953f9bf3-7ad4-471c-90df-68eae31e6627",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0af48ed7-5cea-4a3f-97e9-b39b50e737b5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9931d1de-e957-4f43-8b9a-e19c9bf1c412",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54bda65c-dbfe-439d-a801-40f1d091d42c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ea9bad70-2685-4ef9-b64d-4f319715a4f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3869b64-77e0-44a9-8bec-e1ac35a0d622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e064969e-24d1-4ba8-8fe8-b456bf0cbb86"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2cf36d67-a67a-446b-be9e-f7525fa68c93",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "84d2b04d-b3f0-46e8-9910-25367a88836c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "df790a77-339e-412e-85d7-5334b9e669aa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "07c15c0f-ac38-4f33-b646-ad4cbe93e5d5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bfb1c038-fccf-48a1-b705-1a3d37bec454",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "062d425f-8ca8-4635-97e1-fdf1d79a1941"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f3bd6c04-944d-4d13-a007-2812c980ba53",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "545fb5e8-3bf2-41a0-a4c8-4778dfd96bfa"
            }
          }
        ]
      },
      {
        "id": "97ab7b3f-01d7-4eba-ad58-526dbcfbaa58",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "d9426511-7eae-4d3a-b0a8-b75627a68cec",
            "name": "Negative Testing",
            "item": [
              {
                "id": "25f6f8b1-9d20-4bb6-898c-3077baaabd5b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "899d6fad-d30c-4609-a7f4-901f0d81e1b6",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba539ac3-695c-4716-aa21-654e96721e23",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a3354446-cdcd-4dab-8b75-f8380a7253ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10a11b9b-64ba-491e-b81f-1716c9711696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0f442284-ea08-4e67-b969-ee06470d9dde"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ff59905-9106-4ac3-8f39-7809cb087fa6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "37558448-c264-4b39-a659-872500f54645"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4eed9a5a-71a6-45fa-a699-dd8cea478132",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c58eaadb-d172-49c4-ba52-9a6485211c03"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b4848b89-07c2-4f17-a040-4286e933a56d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "30d86776-a9b5-401b-aebc-0b427835f984"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "215df94a-fc13-4d8a-ac9d-cae746d2bb13",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d245b39c-b6e2-49d5-b6b0-dfd476d52ba8"
            }
          }
        ]
      },
      {
        "id": "ef215d47-2d39-4022-bc32-d677cebf1a4a",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "28ba18cc-0b3b-42a9-b93d-58af03c9664e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "76aad879-f95e-4199-8d52-22c3dc0ab435",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "8278d624-d82d-4063-9100-4e23aff04a25",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8a3f10da-f83e-4a85-873a-bf150e268aa8",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8f6ebe3e-2b6a-4716-8a08-7dd6cb9fe3bf",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 51
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 132.10563380281693,
      "responseMin": 11,
      "responseMax": 2292,
      "responseSd": 283.943599531208,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1694046736660,
      "completed": 1694046786349
    },
    "executions": [
      {
        "id": "bfa27dd6-4dc2-4fbe-96af-a7f7fe20b482",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "31acc68f-c3df-4364-aa14-57b6aebb722d",
          "httpRequestId": "a94f0993-bbe5-4bf5-90fd-c73d01c1eccb"
        },
        "item": {
          "id": "bfa27dd6-4dc2-4fbe-96af-a7f7fe20b482",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "826639cf-8485-4beb-b732-2e3db309a96e",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 0
        }
      },
      {
        "id": "abe7612f-6698-4d85-8c45-dc2449fd444a",
        "cursor": {
          "ref": "81d9f121-e8f4-4e74-9932-68e076722dc8",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "80bb1c53-382d-4de8-b2c7-9f2f442ea961"
        },
        "item": {
          "id": "abe7612f-6698-4d85-8c45-dc2449fd444a",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "f8a196ec-f9a0-4c29-82f2-561d630f76eb",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 0
        }
      },
      {
        "id": "c79db6fa-d828-4ba8-86b6-a6b3d96c4005",
        "cursor": {
          "ref": "f6daa6b6-9080-4e6d-934b-0ef392c351fc",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "481639cd-ebe6-472b-900f-6ec8f60eaa90"
        },
        "item": {
          "id": "c79db6fa-d828-4ba8-86b6-a6b3d96c4005",
          "name": "did_json"
        },
        "response": {
          "id": "6aa63192-4d69-496a-8754-3d97fc6a6bc2",
          "status": "OK",
          "code": 200,
          "responseTime": 567,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd0f2a5c-8a80-43d1-a930-04e28ace96bd",
        "cursor": {
          "ref": "20893902-ee2f-4e54-ae92-b2398cd529eb",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1c57771a-f79f-4fae-8cbe-26576313d8bd"
        },
        "item": {
          "id": "bd0f2a5c-8a80-43d1-a930-04e28ace96bd",
          "name": "did:invalid"
        },
        "response": {
          "id": "7a96d44a-26c9-4302-a5c3-55f70dc9b800",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd0f2a5c-8a80-43d1-a930-04e28ace96bd",
        "cursor": {
          "ref": "20893902-ee2f-4e54-ae92-b2398cd529eb",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1c57771a-f79f-4fae-8cbe-26576313d8bd"
        },
        "item": {
          "id": "bd0f2a5c-8a80-43d1-a930-04e28ace96bd",
          "name": "did:invalid"
        },
        "response": {
          "id": "7a96d44a-26c9-4302-a5c3-55f70dc9b800",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a889275c-a92a-4e26-a29d-3fbd47f26abf",
        "cursor": {
          "ref": "71f3caf5-6510-4eb8-bf87-cbdf8962684a",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "c5662607-1d8d-4eb8-9d64-89b5ddf8e57d"
        },
        "item": {
          "id": "a889275c-a92a-4e26-a29d-3fbd47f26abf",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "bb6b63e6-d5cc-4cf2-8358-459e4ea6b2ed",
          "status": "Not Found",
          "code": 404,
          "responseTime": 112,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65d5775f-cc3a-4756-a677-2be168d85e71",
        "cursor": {
          "ref": "cc50fa36-e4d7-4193-9297-2d0777068111",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "c39845e3-1ba3-4cef-919f-3689f2bb79d4"
        },
        "item": {
          "id": "65d5775f-cc3a-4756-a677-2be168d85e71",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "27d40720-4336-4b34-960d-631d91c151ff",
          "status": "Not Found",
          "code": 404,
          "responseTime": 62,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ef4d606-7de8-4240-b17b-39dc2ab5f170",
        "cursor": {
          "ref": "1932baaf-cac4-40a8-bc09-754963726cef",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c47b3b0d-0f4f-4ff1-a1eb-b8814953bccf"
        },
        "item": {
          "id": "5ef4d606-7de8-4240-b17b-39dc2ab5f170",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "d149083b-7068-4ea6-9c59-3d836c68f82f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2f2373a-3c5e-4d30-a8dc-7adac2c2f18c",
        "cursor": {
          "ref": "b5232c20-d5c3-4e32-b322-324a7031e701",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f21801b6-8f9b-4895-abac-9d92b784ab70"
        },
        "item": {
          "id": "a2f2373a-3c5e-4d30-a8dc-7adac2c2f18c",
          "name": "identifiers"
        },
        "response": {
          "id": "51e9e18a-7c3c-42bb-b6df-d6527f10786a",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d81bb55-2a22-4ef2-ad52-ac2508fca2a1",
        "cursor": {
          "ref": "8322943b-b2b1-40fe-bc7b-797aa66b320a",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4a86819f-0654-4c58-b2b2-800a22a8167f"
        },
        "item": {
          "id": "2d81bb55-2a22-4ef2-ad52-ac2508fca2a1",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "7e182ed9-900d-4960-a865-c7510ef9ba16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f39e3e7-453b-41aa-8048-9300d79f3d83",
        "cursor": {
          "ref": "d0afc77b-1b95-440f-8ada-6c776fa53cfb",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "7bbebd20-d6f3-44c7-84df-69d522bf1c65"
        },
        "item": {
          "id": "4f39e3e7-453b-41aa-8048-9300d79f3d83",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "7f241582-8750-49a8-86f2-03cf91eae088",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51f1d756-b5aa-434a-b607-4ed7d5ad15b1",
        "cursor": {
          "ref": "23bb03f4-6991-4139-bdb8-a8354ffc91c5",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "f6a40221-2023-4123-ba74-944a6865ada7"
        },
        "item": {
          "id": "51f1d756-b5aa-434a-b607-4ed7d5ad15b1",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "8c63c66d-ee3b-4b22-83e9-f6a4dacabf35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ee0e17b-3dc8-488d-b1f8-adf203fe2c5d",
        "cursor": {
          "ref": "e022122d-26b3-4b27-83e6-bdf7c45dacd0",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "a8dbe03f-ab58-4133-8d39-2cc4a71d57b7"
        },
        "item": {
          "id": "9ee0e17b-3dc8-488d-b1f8-adf203fe2c5d",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "1da232f1-c633-4bd3-9bc7-22e6501b44ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9f04d84-438f-4b7d-a707-3af22d0d1d73",
        "cursor": {
          "ref": "1cee69fc-7d2a-4e54-a1f5-a9330e13ea3e",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "045a2cbd-7362-4e0d-a9be-69fe4c974454"
        },
        "item": {
          "id": "d9f04d84-438f-4b7d-a707-3af22d0d1d73",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "1994457f-8862-4ee7-a2cd-692c2387a0f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4da55b3d-74cf-4c5f-9788-f102a47d91e4",
        "cursor": {
          "ref": "ed0f80fb-4186-4e91-817e-59e3613201b2",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "505e200a-c4a6-4661-8710-bc457244ca60"
        },
        "item": {
          "id": "4da55b3d-74cf-4c5f-9788-f102a47d91e4",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "bd7a8417-bd5c-4589-a68f-3199ac1c070a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d93d9396-2fbf-40c1-a82b-5f5909bd741b",
        "cursor": {
          "ref": "276158ec-d90c-4ffc-98ad-dcce0b6fb9c3",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "db677676-2c1e-481f-bf87-074ff76ca154"
        },
        "item": {
          "id": "d93d9396-2fbf-40c1-a82b-5f5909bd741b",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "4fdee0f9-3f9f-46f9-82bc-fe66036ccca3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05f7b78f-d184-47e4-ac77-b02f3c8a4f2e",
        "cursor": {
          "ref": "2161ae64-b3a5-403f-83ef-0cc797e002cf",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "ffceba6e-40bd-42bd-9ea8-0d400aa23e32"
        },
        "item": {
          "id": "05f7b78f-d184-47e4-ac77-b02f3c8a4f2e",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "ecaa81f8-debd-4cfe-a2d1-0095a07c80cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffc1e463-40d8-4a0c-a18e-d0234ac346dd",
        "cursor": {
          "ref": "8bb12e45-08f7-44cb-8436-1b29d051a61c",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "832b7d7c-b991-41f6-861a-eb1412f34ab4"
        },
        "item": {
          "id": "ffc1e463-40d8-4a0c-a18e-d0234ac346dd",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "1199ccaa-2ccb-43a2-82d5-ca467bec2b1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f454409c-25ae-461f-bd41-a3d9ec856101",
        "cursor": {
          "ref": "095e83c6-9dcb-4395-ba39-0744fc435c01",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "85a154fd-1d08-4bd7-84d2-a30c0b7d63a1"
        },
        "item": {
          "id": "f454409c-25ae-461f-bd41-a3d9ec856101",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "986ca3f5-8e0c-4d10-9c34-9fa870618153",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34fbc96d-0065-4941-a8e9-9e691ea2db1e",
        "cursor": {
          "ref": "f378e93d-5d68-4011-9a12-aa62e52fda79",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "200d602e-8222-4e3b-9e40-b8454b12bab4"
        },
        "item": {
          "id": "34fbc96d-0065-4941-a8e9-9e691ea2db1e",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "18250eb6-0a00-4c05-b220-05469eab9966",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fe6ccbe-a83d-47a1-b513-e39145ee3f6e",
        "cursor": {
          "ref": "217ccf5c-ab97-4167-a42f-1b3347fcf86f",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "71fd48a3-0ea4-4a74-8b6a-15620f0dee31"
        },
        "item": {
          "id": "5fe6ccbe-a83d-47a1-b513-e39145ee3f6e",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "e14f5344-7fca-48f7-901b-8286911e60fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00b999a7-34ed-411a-8e2b-cbee8432d9d7",
        "cursor": {
          "ref": "9da60dcc-ad9c-4098-a8a2-01dc6cb550f8",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "b18488e3-e435-4237-9e7a-401b19e7cc14"
        },
        "item": {
          "id": "00b999a7-34ed-411a-8e2b-cbee8432d9d7",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "7eadc789-2484-49fb-8700-05338b3a482c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2ec3e11-0862-4e95-a235-137d8f8f41d9",
        "cursor": {
          "ref": "1aad59b4-e7f7-4f9b-9b13-1e430649f0aa",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "be3bd019-3a34-4f60-8143-7af0ba7886cc"
        },
        "item": {
          "id": "b2ec3e11-0862-4e95-a235-137d8f8f41d9",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "1bd1ed33-eeb5-4404-86b3-5ba08ad3a201",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35679231-3586-4f14-9875-02006820e589",
        "cursor": {
          "ref": "0a90d140-c2d8-40bb-a159-7492277f2636",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "8c3dfaff-5f27-4797-8add-f2cb90e360f4"
        },
        "item": {
          "id": "35679231-3586-4f14-9875-02006820e589",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "f1e64c45-e785-4b22-bc4e-9e61457a9472",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7af76da1-01a5-420b-a1e4-8cd3edb7ca94",
        "cursor": {
          "ref": "30c035ed-f855-4a9e-b319-3e8f38fb52a1",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "e3521152-3677-4826-83c1-8bebee2b4a89"
        },
        "item": {
          "id": "7af76da1-01a5-420b-a1e4-8cd3edb7ca94",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "74c1ab4b-e9f8-44b8-9ddf-83201e06eb5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94518807-4382-4686-969a-244024b208ad",
        "cursor": {
          "ref": "60481868-6e9b-43fc-813f-ac532dfe7aae",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d3dfd559-8541-4ec6-80a2-6614ad475f18"
        },
        "item": {
          "id": "94518807-4382-4686-969a-244024b208ad",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "e54200d6-9cc7-46db-962e-81aa918455c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfc7f61e-5f47-46fa-a8f5-b0be99bdb840",
        "cursor": {
          "ref": "6912faec-39c8-4a4f-9097-a98eee405b2c",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "039e5612-5da9-4edc-9de9-a5d9f9cd10d3"
        },
        "item": {
          "id": "bfc7f61e-5f47-46fa-a8f5-b0be99bdb840",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "946f264d-4b9e-43da-8c2b-862c8941f04b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45e87b14-3e04-4e0f-89cf-eb869aaca1a2",
        "cursor": {
          "ref": "f2793d1a-a4f1-4d3c-b68e-6de35fff902a",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "aa56519f-6c2d-432a-85a8-5dd798ed7329"
        },
        "item": {
          "id": "45e87b14-3e04-4e0f-89cf-eb869aaca1a2",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "3afd4103-dd34-4ade-b2a1-592fdeb3080b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbb42399-69e4-4d72-9256-14c2c909054e",
        "cursor": {
          "ref": "0e50a02f-8474-45ab-a5a0-d66b20d68cfa",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "32e25aaa-ea13-4952-997c-df53b47add0e"
        },
        "item": {
          "id": "bbb42399-69e4-4d72-9256-14c2c909054e",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "27644716-c8a6-4e38-ad00-6502ef29d14c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c72250d4-76df-4ba8-b37b-948466053636",
        "cursor": {
          "ref": "950d5ec5-341a-4771-8511-8e73a1d3e926",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "f3e1e4bf-d297-401a-9920-e5f92553759c"
        },
        "item": {
          "id": "c72250d4-76df-4ba8-b37b-948466053636",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "4a58146e-c21b-428d-ab5b-4a2765915234",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "589d06e3-0147-46a8-9408-dc8cf28ee174",
        "cursor": {
          "ref": "d71dc12c-ca55-4263-bcc9-5a4aad09d9d7",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "b09d1e4c-6d08-4d32-b7b4-f02395293a79"
        },
        "item": {
          "id": "589d06e3-0147-46a8-9408-dc8cf28ee174",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "3aba120f-b7e5-4d9a-a46d-2d273fd09659",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbe4fa4d-dd2a-430b-a65a-2d322dfcd481",
        "cursor": {
          "ref": "63edc0dc-9551-4592-8b6d-31103c948651",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "8899c055-9c38-4d7c-af6d-1a4408e266f2"
        },
        "item": {
          "id": "dbe4fa4d-dd2a-430b-a65a-2d322dfcd481",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "cddb8f18-3f33-4576-b084-9f88c3f24434",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10d6b69c-b95f-4e3f-99cc-8ad63223499c",
        "cursor": {
          "ref": "c91b67b0-f426-4fcb-b7e8-7db1780c1638",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "3c7abf3a-3f45-4231-922d-53e831ad3926"
        },
        "item": {
          "id": "10d6b69c-b95f-4e3f-99cc-8ad63223499c",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "002efb8f-fb0f-4167-900f-8173d07ce1d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e22d7268-d861-45a5-8dbc-c7f39d5254f0",
        "cursor": {
          "ref": "73f2f309-9275-42ab-8438-f9030650021e",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "f376ff97-5909-4ba7-8bbf-4ca268c6d97e"
        },
        "item": {
          "id": "e22d7268-d861-45a5-8dbc-c7f39d5254f0",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "38f22642-3713-478e-8fc3-e1f559c1d376",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9949b71-338c-4e3b-a348-8cc001821ef3",
        "cursor": {
          "ref": "85d862e9-ecba-4968-97f6-32f49cfdbbaf",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "25e07a0e-c2e9-470c-b8a8-022f1bcc9c99"
        },
        "item": {
          "id": "a9949b71-338c-4e3b-a348-8cc001821ef3",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "e1fe64a2-5e99-4136-a247-c05be1fb2064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55acf356-1733-489a-9969-01d6c78b08a3",
        "cursor": {
          "ref": "d5bf90d3-cfae-41c9-809d-4cfa73f3e1aa",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "c5563483-a3da-4370-9cab-73bf67e00ddb"
        },
        "item": {
          "id": "55acf356-1733-489a-9969-01d6c78b08a3",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "668fa64b-0e09-4d05-917d-05ee56aa9bc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1ed4d9f-1b62-4280-9799-08a663fd15aa",
        "cursor": {
          "ref": "4d4f1f62-827c-4efc-a298-e950f86c255c",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "e1d37248-92a3-4e7d-9226-7d32a1a39082"
        },
        "item": {
          "id": "c1ed4d9f-1b62-4280-9799-08a663fd15aa",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "e8c76b30-f1e6-451f-9cf7-397a1b0b2555",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d30cbc81-c441-46d0-9dda-562f90f385f2",
        "cursor": {
          "ref": "108a4b71-de07-40bc-839e-292818a09530",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "2561a964-8191-48aa-8684-d303ad2dc5d5"
        },
        "item": {
          "id": "d30cbc81-c441-46d0-9dda-562f90f385f2",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "0837cd0b-2ba6-4795-8380-ddbc74da44cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3dfa634-b41a-4d3d-b4bc-eab327463119",
        "cursor": {
          "ref": "a9621cc9-8aec-449d-9774-eda2b4d4c345",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "dfbb04c7-e94a-490c-8f4b-093c531cd0fc"
        },
        "item": {
          "id": "c3dfa634-b41a-4d3d-b4bc-eab327463119",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "d07c76f1-35e1-476b-8b6d-1f4833c2d1d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "387f2afd-92a9-4cfb-b4df-e84bcb97fc9c",
        "cursor": {
          "ref": "d946247f-344f-4355-98a3-7150873d5260",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "bdd30467-da53-4087-80b7-e0846f6d231b"
        },
        "item": {
          "id": "387f2afd-92a9-4cfb-b4df-e84bcb97fc9c",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "8c903ad7-3cc1-4576-bb61-27bb034eced1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "12a11dd2-2616-4ae4-8902-fa52dc250f05",
        "cursor": {
          "ref": "2fa93618-a86b-4078-9108-cbf819e0377e",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "6e4888a4-536f-408d-8fba-3b55a7edeedc"
        },
        "item": {
          "id": "12a11dd2-2616-4ae4-8902-fa52dc250f05",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "3ccf56e0-f428-43b6-a5d6-c94bd95909c2",
          "status": "Created",
          "code": 201,
          "responseTime": 2292,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "34f279dc-0c22-45e1-88e8-6a0d03b252f3",
        "cursor": {
          "ref": "52b9f0d4-d665-49f7-8a16-494e37de7c0f",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "58c288cb-e69b-4980-9790-1e144008915b"
        },
        "item": {
          "id": "34f279dc-0c22-45e1-88e8-6a0d03b252f3",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "11264e1e-e136-4ff0-b38a-a430b5327572",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "c02cfd86-f39d-4fad-be04-7a7a53cdc497",
        "cursor": {
          "ref": "e1bd4dbf-55cd-4c71-bdbb-731ec7045f53",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "53821a22-fd67-41be-88d5-069eea428cde"
        },
        "item": {
          "id": "c02cfd86-f39d-4fad-be04-7a7a53cdc497",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "f07d6963-c0ea-4ac2-b97d-4b73674da501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1239a321-3e4a-48fe-9e00-99bc44e3f44a",
        "cursor": {
          "ref": "ce3b0e01-7720-456d-ace4-79067ad6dfdc",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "529a29c7-baef-4256-a394-782b1d5e582b"
        },
        "item": {
          "id": "1239a321-3e4a-48fe-9e00-99bc44e3f44a",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "22cf7ce2-dac1-4607-b8fa-a9a096c13357",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "696268b7-6323-49ba-8795-af4952521346",
        "cursor": {
          "ref": "5f17bd95-46f6-41d8-8876-32cacd6ca356",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "9cf8e121-2f13-4fc6-af3c-1cd0cb2e374a"
        },
        "item": {
          "id": "696268b7-6323-49ba-8795-af4952521346",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "7c7b9f25-9e96-4305-9320-f8edd75d4580",
          "status": "Created",
          "code": 201,
          "responseTime": 1246,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "6e07ca1c-7595-4793-9834-37e52ff46885",
        "cursor": {
          "ref": "4ced1c31-7c34-43ed-a433-a810feb2808c",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "456b190a-942a-47a7-a929-9eb717b71093"
        },
        "item": {
          "id": "6e07ca1c-7595-4793-9834-37e52ff46885",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "8c5efe0c-0109-426f-a1b4-a9a521693d6a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "965f36e8-fe9e-422e-8fd2-0df43fcd2996",
        "cursor": {
          "ref": "dc9cdb5c-001d-4e38-9751-9c42a0d509e7",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "b63afd5e-3b60-4a77-aff9-80b6d08affe6"
        },
        "item": {
          "id": "965f36e8-fe9e-422e-8fd2-0df43fcd2996",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "1e5189a9-adc9-4294-a033-d048a09cb3a7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 872,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "e242ad37-4ef8-445e-b6d0-cb523fa1b0f4",
        "cursor": {
          "ref": "eaa5c3bd-136d-4c17-937a-7f60156abc4c",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "16a04d14-95b8-4d31-9222-78d3ea3eeedc"
        },
        "item": {
          "id": "e242ad37-4ef8-445e-b6d0-cb523fa1b0f4",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "039d0a55-d914-41fa-9c70-ae1227df0abf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "d1dcfc20-b803-4adb-b148-75a6ffd67150",
        "cursor": {
          "ref": "1827790f-112c-4419-b2c3-1b5cad33f11c",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "9b58db79-f626-401d-bf43-d39397e2286e"
        },
        "item": {
          "id": "d1dcfc20-b803-4adb-b148-75a6ffd67150",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "bcfb0fac-c377-492f-a86c-c99540fbcae6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "0344d05b-24d9-47e9-a580-6330d29faa2d",
        "cursor": {
          "ref": "53736812-3faf-44b7-b9b1-a7d79c5e9984",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "213087f8-3a45-47b0-86d3-7532b846d4d1"
        },
        "item": {
          "id": "0344d05b-24d9-47e9-a580-6330d29faa2d",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "1ff555d5-7ea0-4785-a581-2ae9dab076bb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "23577e96-7c89-4ebf-b645-dea0399e3e57",
        "cursor": {
          "ref": "410d47d4-d97d-4fdd-b1fc-fc1e5c9f3b36",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "0bf2f6d7-1c44-49da-8702-8f81e7bf14c2"
        },
        "item": {
          "id": "23577e96-7c89-4ebf-b645-dea0399e3e57",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "9a15d417-6ab9-4746-918c-cd040ec0e9fe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "e9c98df6-1e91-47d6-a5c3-adea26fc7980",
        "cursor": {
          "ref": "9559f8a7-6953-4217-9946-96a73d41731b",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "0a6d6356-ba7c-45b3-9e83-e852a8f2b8f1"
        },
        "item": {
          "id": "e9c98df6-1e91-47d6-a5c3-adea26fc7980",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "8d683aa3-cbbe-44d9-9d99-bb242c491372",
          "status": "Created",
          "code": 201,
          "responseTime": 1171,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "8761b0a1-b979-4931-b104-2bfb41dfd8de",
        "cursor": {
          "ref": "f00d1d4a-dd20-4419-8cc6-611112665592",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "7314d3e7-7807-44a1-b73c-895a58867e38"
        },
        "item": {
          "id": "8761b0a1-b979-4931-b104-2bfb41dfd8de",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "433d22e5-7f77-4260-9272-35d2c20c6756",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bb94a54-fe24-43db-b933-5c6aedc85828",
        "cursor": {
          "ref": "edfd945b-734a-4326-b08e-66494f63a691",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "981509e5-cf71-43b3-89e3-19b020df62d6"
        },
        "item": {
          "id": "8bb94a54-fe24-43db-b933-5c6aedc85828",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "f7eb0f4b-df2c-46dc-a435-d32040f1eecc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f16cea1e-acfb-4050-8f92-77a273d79111",
        "cursor": {
          "ref": "e7f1313a-4e91-4c49-85aa-9c1d425dcb21",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "a605d0bb-de3e-4ee2-954f-492162cd082f"
        },
        "item": {
          "id": "f16cea1e-acfb-4050-8f92-77a273d79111",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "d1005f14-ea0f-4dae-afc4-36f7dd8d9d4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "426e611a-ba05-480e-9147-478b27891c57",
        "cursor": {
          "ref": "030de31b-9600-4ba9-826f-b8e83f7cfa6a",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "230e6213-ae42-4ae2-a20b-2cb7a24dfd18"
        },
        "item": {
          "id": "426e611a-ba05-480e-9147-478b27891c57",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "3cc0a2fa-9320-4fee-ab22-98c8b4eebefd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44daf93e-70b5-4474-aacc-f147a1a000ad",
        "cursor": {
          "ref": "6be24f0e-e17c-4495-b56f-47a0c169b492",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "431ad15f-db0c-4bf0-b993-bfe2090a63d3"
        },
        "item": {
          "id": "44daf93e-70b5-4474-aacc-f147a1a000ad",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "ad825bff-c9b8-4621-ac68-d9ac958bef5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d65b08e-340d-4229-9d7d-7d72d2a9bc86",
        "cursor": {
          "ref": "9238b00a-5ae8-466e-970c-e4266797b941",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "1d3e5a2e-6203-44c3-b97c-f9cc3a4d94bd"
        },
        "item": {
          "id": "5d65b08e-340d-4229-9d7d-7d72d2a9bc86",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "edc6d746-0c30-4a0c-bee4-69c9e2431713",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce906939-d3cf-41f3-b9a5-dcba9b4f8221",
        "cursor": {
          "ref": "ecec8a66-5817-4a5b-a788-21bb66fab046",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "16941c91-95aa-450b-b406-04f8085620f2"
        },
        "item": {
          "id": "ce906939-d3cf-41f3-b9a5-dcba9b4f8221",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "ede6d1b6-e206-4128-b2d5-47b1068c1c8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e0ccb36-95db-4a0e-ad54-f3935e6aa09d",
        "cursor": {
          "ref": "918fe4b7-32f2-4124-a2c6-7c7fec91d70b",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "3601a3f1-d068-4292-bfff-763b059e5a44"
        },
        "item": {
          "id": "6e0ccb36-95db-4a0e-ad54-f3935e6aa09d",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "5863c156-43c1-40c5-9d09-503803d1f3c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7252d59-7f9b-448c-83da-273a4b2c255a",
        "cursor": {
          "ref": "322e7b6c-39fc-4b46-a246-5b91e6162c81",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "a29cc0a1-5378-4d29-9aa4-1956e26a3ef7"
        },
        "item": {
          "id": "a7252d59-7f9b-448c-83da-273a4b2c255a",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "f0b8319d-21f4-4961-9464-fdeae75d09b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b236c9d3-08a6-4d31-9f12-a44846564478",
        "cursor": {
          "ref": "7f4cee11-632d-442a-9518-f2cf2569600b",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "6e5e0a5f-eee2-4d45-b3d1-79f2e8fadcbb"
        },
        "item": {
          "id": "b236c9d3-08a6-4d31-9f12-a44846564478",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "76b3807f-f007-4ac7-8356-2670f789ef86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3dd67d0-ad6c-4ba7-80d4-9a2d684374b0",
        "cursor": {
          "ref": "b3db2ace-b596-489f-b64e-a51198c4f346",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "1d4dcf32-3e71-4ad0-aecb-b8cc609f8c74"
        },
        "item": {
          "id": "b3dd67d0-ad6c-4ba7-80d4-9a2d684374b0",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "a726a199-9d22-4ef5-afdb-b9c0cc5c6baa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64ed212a-5b2b-4ea1-8e40-4600b14d0bfe",
        "cursor": {
          "ref": "bf38c5bd-c797-47ba-8de0-e0c1d01a09f0",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "c95a047a-b538-4f04-923d-5851727773bd"
        },
        "item": {
          "id": "64ed212a-5b2b-4ea1-8e40-4600b14d0bfe",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "696913af-c7bf-49a1-ad64-c42693008994",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65684d5b-3497-4d3a-91f8-d5ab7d984b78",
        "cursor": {
          "ref": "63a890db-5f9b-4250-9838-04565c6f90bf",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "58083fdb-d1b7-43f7-9b3f-e2dfd721c9d0"
        },
        "item": {
          "id": "65684d5b-3497-4d3a-91f8-d5ab7d984b78",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "1820888e-02c1-4432-bf23-367f1bd73d0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55d4c917-4749-4880-bb6b-d5168c0a360f",
        "cursor": {
          "ref": "f592b26b-5245-4e05-8b9d-895b62c5954b",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "df550211-1890-4a3b-9c8c-64b8d009840b"
        },
        "item": {
          "id": "55d4c917-4749-4880-bb6b-d5168c0a360f",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "f9ad8e28-cdf8-44b0-804f-6dbb27fa39be",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 792,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "ac48ea09-d5ac-42f7-a6f8-9f791521cf27",
        "cursor": {
          "ref": "84329cd7-3040-406d-8ecd-628560ac292d",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "bd213388-fdb0-4c3c-b9a7-98b2a5c014b2"
        },
        "item": {
          "id": "ac48ea09-d5ac-42f7-a6f8-9f791521cf27",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "97e221a5-2d4b-466a-8f4a-a9c1ce88df9f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 774,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "1fcb4cf2-65ce-48cd-93ad-2ee6f73892b9",
        "cursor": {
          "ref": "6469bc46-32a9-4017-8187-f6d81c9c2e69",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "5f7013a9-109b-439c-b0d7-6f54888a1c81"
        },
        "item": {
          "id": "1fcb4cf2-65ce-48cd-93ad-2ee6f73892b9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "884d83b8-d6d0-4de1-abff-12adf3825641",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "b9bedad3-6f89-4794-94a1-9dfef673d726",
        "cursor": {
          "ref": "c14406b2-e38d-4f03-b489-50c91ea3bdb1",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "079c1819-90a4-40c7-bfbf-9c6034a0fde5"
        },
        "item": {
          "id": "b9bedad3-6f89-4794-94a1-9dfef673d726",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "1d3ee57b-acad-4789-89da-b460c75a2d40",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1322,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "668c036e-0d6d-4f62-8fd1-429a7226ab54",
        "cursor": {
          "ref": "5f477341-a247-495e-91e1-de2d58be522c",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "6807df60-ba1a-4099-89c1-99100a3085bc"
        },
        "item": {
          "id": "668c036e-0d6d-4f62-8fd1-429a7226ab54",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "95d69c35-27a0-4fc2-8253-98740cacd908",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "13104ffa-a424-40c9-96b0-cac47bb0120f",
        "cursor": {
          "ref": "15a3faa0-f95a-4337-a55d-be028fd36fb6",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "cc3af0dc-7652-43d7-bc0d-bc697986fdf0"
        },
        "item": {
          "id": "13104ffa-a424-40c9-96b0-cac47bb0120f",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "60827415-e425-49a9-9069-8dea5eb281e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aea3b157-7a1d-4477-a238-a782a544821f",
        "cursor": {
          "ref": "059211f9-ee08-4c36-a7b9-1e122a5bc14d",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "f916def4-ac5d-4c6f-b07d-d8c76b2197a4"
        },
        "item": {
          "id": "aea3b157-7a1d-4477-a238-a782a544821f",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "60c58d77-8063-40a6-bdd8-a5661ed5fd9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48b90348-7b42-465c-8547-0aede368f18b",
        "cursor": {
          "ref": "26077895-f86d-4bbd-90e6-1ee414d8dc7b",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "93fad8f7-b79e-4241-a558-0e259cdc71ae"
        },
        "item": {
          "id": "48b90348-7b42-465c-8547-0aede368f18b",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "6b2f01db-c132-48ce-bd71-9e7d920fc4cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "379a0414-272a-44b8-b3da-24d139e77706",
        "cursor": {
          "ref": "e83b1e2e-d104-40a7-a1fa-56b2f8317a97",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "7a95fc6f-c778-4575-91dd-87fd07ae8714"
        },
        "item": {
          "id": "379a0414-272a-44b8-b3da-24d139e77706",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "9c801b17-c6c6-4d7c-ab5e-3fe69571d012",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fb8df37-d8f1-4732-b20d-0db328918fb0",
        "cursor": {
          "ref": "90c400f6-0ff0-4d94-9c9d-8b467b9192b8",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "655ba0f0-f0ff-485c-9d11-db3bba589506"
        },
        "item": {
          "id": "4fb8df37-d8f1-4732-b20d-0db328918fb0",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "5023e6fd-0480-41dd-9567-466da3f53d1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03353b1f-81b7-4609-bccf-8ed9af18fc37",
        "cursor": {
          "ref": "d45476d0-a324-4f0e-addd-50b47f53ed7e",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "e888a324-a993-472a-add3-6b2be57f108f"
        },
        "item": {
          "id": "03353b1f-81b7-4609-bccf-8ed9af18fc37",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "bb2888a0-7d7d-468d-bbdd-5a78cc415f08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3fd96a6-ba6d-41a8-bdd0-37d586b2458e",
        "cursor": {
          "ref": "40957720-ceba-4d82-aff9-d84f4ad6857f",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "9de0bd0b-d11c-4d26-8c98-6526229a8ac6"
        },
        "item": {
          "id": "d3fd96a6-ba6d-41a8-bdd0-37d586b2458e",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "7ff32201-3642-4eb9-88f7-71be7c15bd42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44e72ba8-308a-4a6b-ba76-cc1c877a4dc2",
        "cursor": {
          "ref": "01947295-2b78-4eef-bb9f-7dfcf042c361",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "889f013f-a856-48c9-b497-2fda14c8431b"
        },
        "item": {
          "id": "44e72ba8-308a-4a6b-ba76-cc1c877a4dc2",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "c8d76f60-a271-4462-82b1-87b81265b305",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2b71917-6061-4091-8282-faf1fee5af7a",
        "cursor": {
          "ref": "2037b72b-7505-4801-a00d-1e0f0d153fbb",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "efac4d88-2f93-4451-8984-8c2eac093e3f"
        },
        "item": {
          "id": "e2b71917-6061-4091-8282-faf1fee5af7a",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "0445b519-2984-4e3f-9182-945c24d220c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2f52d92-13ba-4686-b196-cb51e329d14b",
        "cursor": {
          "ref": "18328fc4-82d3-467e-aedd-20229174d76a",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "22281916-8642-4f25-a860-4e56917b7f02"
        },
        "item": {
          "id": "a2f52d92-13ba-4686-b196-cb51e329d14b",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "bce646b6-c726-4219-8f96-541d7d987705",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b1e5156-b359-437c-907d-ab0b5a8685b2",
        "cursor": {
          "ref": "41b5b135-7a38-4cd0-b383-2ebbf36199de",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "5e5d51ac-8e56-4d2e-a1f1-63a4b1b13b89"
        },
        "item": {
          "id": "2b1e5156-b359-437c-907d-ab0b5a8685b2",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "5622fc64-317f-438f-9d2e-b8ed90c72d79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62926a07-3e54-4d3a-b478-d9384b34e3e0",
        "cursor": {
          "ref": "8186d378-1686-4d48-9a13-97c32f780c41",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "a5197739-246c-446f-b505-e6723f789b70"
        },
        "item": {
          "id": "62926a07-3e54-4d3a-b478-d9384b34e3e0",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "451dbc70-5818-49f8-b622-00fee206283e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1829b9b6-cf6d-4c90-bb07-7f7bad3a3cb7",
        "cursor": {
          "ref": "e7b73215-4f3d-47aa-bbd2-1da0da9d126f",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "c97c5d81-1a7f-438d-b3d1-a72b8ea5b570"
        },
        "item": {
          "id": "1829b9b6-cf6d-4c90-bb07-7f7bad3a3cb7",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "625bf608-e475-48f4-b668-069cdcaac0ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8b31e6d-7522-48af-8532-bc76c532780a",
        "cursor": {
          "ref": "5d80db22-c4b8-45e9-8eb6-dde53018ddab",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "9d8eb4b3-405e-405b-8971-3919f05c080d"
        },
        "item": {
          "id": "f8b31e6d-7522-48af-8532-bc76c532780a",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "b6f6abcf-8410-4ee0-8bae-1df458977ce1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "250c5fd5-95ea-4675-864d-4f3fe335a2e3",
        "cursor": {
          "ref": "0a581df1-77d6-46f9-9c0f-f66a9abd8959",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "825bc695-bc01-4274-9e6f-f4c0f0bb54f3"
        },
        "item": {
          "id": "250c5fd5-95ea-4675-864d-4f3fe335a2e3",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "04c91548-96c4-41a9-b9f0-90d78bfc9b25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ba2a0a9-8abd-4633-bcc5-810a6fdb7804",
        "cursor": {
          "ref": "93928880-2d93-43cc-ade1-87593f134846",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "90f0648d-ac1f-4f74-a004-0a3101bec1a3"
        },
        "item": {
          "id": "1ba2a0a9-8abd-4633-bcc5-810a6fdb7804",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "e4e01ca9-464b-4c8c-ab1c-a303fcedcb41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d729acff-3935-462f-a417-787955afeb9d",
        "cursor": {
          "ref": "c8047c0d-9e53-4702-bea5-9cf317e20f11",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "76f67bf3-e8c2-49cb-afc2-41e6ba36136d"
        },
        "item": {
          "id": "d729acff-3935-462f-a417-787955afeb9d",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "7bd8ad5a-e36b-4ca9-981c-910af762c247",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6c5c5de-549b-454d-97af-95b63720591a",
        "cursor": {
          "ref": "b7e3fec8-16b5-4ba7-b855-7d988bf3bb0c",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "c79ae329-9a65-4db6-a29d-adac07ac1f1b"
        },
        "item": {
          "id": "a6c5c5de-549b-454d-97af-95b63720591a",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "7747d37c-ba1d-43e0-9d1c-d02202a3fb92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd8cc43a-f8c4-4f64-b238-3c8f8fdc50d4",
        "cursor": {
          "ref": "b0bcd506-d23e-4e10-b802-ff726a2c6c4a",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "4a96f574-e2e4-40b9-939b-d554fb29a6d5"
        },
        "item": {
          "id": "bd8cc43a-f8c4-4f64-b238-3c8f8fdc50d4",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "a155f6d0-02db-41dc-8a69-cf96b9cf82a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1b2092c-2419-458a-ad5b-c982e646414e",
        "cursor": {
          "ref": "f0ddcabc-646f-462c-a2c0-eec4b902d907",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "ec113fae-64b6-4b86-8f1b-766cb5865252"
        },
        "item": {
          "id": "f1b2092c-2419-458a-ad5b-c982e646414e",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "58467663-95c5-455f-beef-76ef5d458382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aed9fd8-d34e-4561-9567-fa9aa7670f66",
        "cursor": {
          "ref": "253a0976-6a50-4692-8724-6a2f35aedfbc",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "56970568-0535-489c-9325-419bb75fda63"
        },
        "item": {
          "id": "2aed9fd8-d34e-4561-9567-fa9aa7670f66",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "91a5b571-7dab-417e-bd58-b876fef41390",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8978c93-aade-4870-9d1b-aeb628cb4260",
        "cursor": {
          "ref": "cd58f922-9043-4f10-a4e6-9231af1e50ad",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "f3f55551-b961-4b63-a03d-6303b357d4c4"
        },
        "item": {
          "id": "d8978c93-aade-4870-9d1b-aeb628cb4260",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "745619b3-79d8-4033-afa1-e6c5b1513a4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7af3a32-a23d-4774-9f95-3819745e2959",
        "cursor": {
          "ref": "86594678-b515-46d2-b807-914ccd95bae5",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "6c2c1fa5-bbed-4c09-ae40-f985beef7922"
        },
        "item": {
          "id": "c7af3a32-a23d-4774-9f95-3819745e2959",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "fc95c646-f2f9-4643-b976-76e474db4937",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f67e7ec7-bff7-4b58-9ccc-de7ae200a733",
        "cursor": {
          "ref": "6a4d498a-27ff-4ba1-9de7-8ed99ebaa63d",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "98e9109b-6b13-49f2-9f3c-e1cf3285281d"
        },
        "item": {
          "id": "f67e7ec7-bff7-4b58-9ccc-de7ae200a733",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "b63b1923-1adb-4b5c-86f2-395743534307",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "224d9a6f-7d82-496d-82bb-87480f714075",
        "cursor": {
          "ref": "90b884f9-0e57-4f91-8dc7-3741aa2ab314",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "76e598c1-d548-4dfa-b33d-85d7887c3849"
        },
        "item": {
          "id": "224d9a6f-7d82-496d-82bb-87480f714075",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "061e2d94-9779-4310-a11f-0b44127c294f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "815673b2-e796-4a5f-baf7-23265afe4396",
        "cursor": {
          "ref": "1bed8dcd-cec7-4c16-85c1-87c725ba52a9",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "baa9f4ba-7148-4986-896a-d15a14ded7c2"
        },
        "item": {
          "id": "815673b2-e796-4a5f-baf7-23265afe4396",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "c4ed65ff-d5ba-4c20-83b7-a1e830996f1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e48ba71-4026-45dd-9abe-6097379c7f1d",
        "cursor": {
          "ref": "9ac34e11-d950-42c3-9e5a-40b9f3012e10",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "753fdeb8-7ef1-49a7-8778-d41c9060ca90"
        },
        "item": {
          "id": "4e48ba71-4026-45dd-9abe-6097379c7f1d",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "aa5d6991-4fd1-46d0-9200-15626488935e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf37bb9e-2554-4306-acba-e3741cbd0946",
        "cursor": {
          "ref": "141cf117-1606-4af0-973b-1292d7a07165",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "3f23f8e6-73b6-4173-afda-bf0c83987695"
        },
        "item": {
          "id": "bf37bb9e-2554-4306-acba-e3741cbd0946",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "95a546e8-880a-490e-916d-400fe44b888f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96dcd444-8c12-4d70-80e3-0d89faf9596a",
        "cursor": {
          "ref": "059cbdc9-3769-4ece-9f18-bf66a2ccea6f",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "f40258f6-1e97-4671-b371-a9b2dd8ce8fe"
        },
        "item": {
          "id": "96dcd444-8c12-4d70-80e3-0d89faf9596a",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "c1412f14-ebc1-47bf-98ed-ca3ac7998fca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad493f5b-4ed1-4c5b-a5a6-e0893c55dddf",
        "cursor": {
          "ref": "1ba0230a-4b75-45a5-8ffe-2cdd3c38031a",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "6b9ead5e-e67c-4e89-b7fd-622dcf7119b2"
        },
        "item": {
          "id": "ad493f5b-4ed1-4c5b-a5a6-e0893c55dddf",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "3f966f78-d8d4-4e36-9f98-7b5290ad1dff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "590b1565-af7f-4c91-84dc-800e1b72cd97",
        "cursor": {
          "ref": "b7bd98c7-740c-45a9-b624-5fff7c449fcc",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "3fa0267d-3ba3-43d8-a5ca-5b0d6a451a75"
        },
        "item": {
          "id": "590b1565-af7f-4c91-84dc-800e1b72cd97",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "179945cd-a685-445d-a386-20303055a9b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e73902ac-10b3-450c-b1ab-b4c458fb986f",
        "cursor": {
          "ref": "e1427b4a-afe2-42b5-a9c9-97f9e3ff7788",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "5c47066e-d68a-4ca1-b07b-d7a801430a27"
        },
        "item": {
          "id": "e73902ac-10b3-450c-b1ab-b4c458fb986f",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "91e7bc20-f689-4d9b-98de-38d224a35abc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b27db8ab-c72c-4b65-b85c-7572ce75e2b8",
        "cursor": {
          "ref": "71c11d9e-0b93-44d8-8c8d-c968d0f034e0",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "3de3be50-5bf4-4501-9c16-4e4c5add9053"
        },
        "item": {
          "id": "b27db8ab-c72c-4b65-b85c-7572ce75e2b8",
          "name": "credentials_issue"
        },
        "response": {
          "id": "07188801-8957-4172-acab-edd1418d16e2",
          "status": "Created",
          "code": 201,
          "responseTime": 1317,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "993761ad-746a-4151-b5ce-72f31484e1e8",
        "cursor": {
          "ref": "93bb81e8-d3bf-4e58-b6ef-5c30a7910655",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "f45e938c-1e6e-447d-91e8-12bab7e80ed5"
        },
        "item": {
          "id": "993761ad-746a-4151-b5ce-72f31484e1e8",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "6556eadb-6729-43ee-94d9-0efde0eccaf0",
          "status": "Created",
          "code": 201,
          "responseTime": 1263,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e70fb0cf-de02-4b3f-893a-05a3cae0774e",
        "cursor": {
          "ref": "3e95e18e-67f5-462f-a9d2-a3a688322262",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "6987cc5a-ce6b-4134-ac3a-1f59f7cef85b"
        },
        "item": {
          "id": "e70fb0cf-de02-4b3f-893a-05a3cae0774e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "56133219-caab-45a6-9949-490f9f548e02",
          "status": "Created",
          "code": 201,
          "responseTime": 1154,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "388b46a1-d3d5-4795-b813-d84cc35d1744",
        "cursor": {
          "ref": "bf80ad3b-c7c7-4592-b231-5cf7b637b338",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "c27f05c2-41b0-4a10-937d-ecb59a52bba2"
        },
        "item": {
          "id": "388b46a1-d3d5-4795-b813-d84cc35d1744",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "049d43fb-6066-4030-869a-4f4b68f4cbbb",
          "status": "Created",
          "code": 201,
          "responseTime": 1184,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef8d0303-2672-4ceb-b172-f6e5a8801bde",
        "cursor": {
          "ref": "f3d6624c-dae9-434f-967d-547b0a7e548b",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "b6b1f398-1703-478b-a7dc-e7c6f99f48b6"
        },
        "item": {
          "id": "ef8d0303-2672-4ceb-b172-f6e5a8801bde",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "2392a943-8e2f-4f04-ac76-ffcc7d06a3af",
          "status": "Created",
          "code": 201,
          "responseTime": 1183,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f32e860-6047-405e-b24e-d768f52c72f0",
        "cursor": {
          "ref": "f486f876-2cda-4a89-ad3a-944f75bba765",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "c50769b4-e52f-427b-98f8-7ad4d9c6785b"
        },
        "item": {
          "id": "9f32e860-6047-405e-b24e-d768f52c72f0",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "684e9b21-9b37-405e-acd2-013e44562674",
          "status": "Created",
          "code": 201,
          "responseTime": 1622,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cba0a4f-f3f9-4e60-8bc3-4b89ec3d24bb",
        "cursor": {
          "ref": "d20cff7f-8641-44c3-ab19-45191da0633e",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "94d932c1-2045-4a8d-9cb7-65560b3538c7"
        },
        "item": {
          "id": "5cba0a4f-f3f9-4e60-8bc3-4b89ec3d24bb",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "77880ad3-d2bf-411f-95f9-99400d479ceb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f4b256c-fd82-4733-806a-c526a167982d",
        "cursor": {
          "ref": "5c5a99ee-116e-42e5-831c-a65e11462c50",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "51be9284-4d1d-4951-8ae0-2b8ac6ecfe81"
        },
        "item": {
          "id": "8f4b256c-fd82-4733-806a-c526a167982d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "fd5d293a-5efb-4dd8-a98a-cad27d1cbc67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8dad1e2-7f0f-4307-b096-4989d505ef72",
        "cursor": {
          "ref": "0c2428af-e44e-4088-8f76-da9399fea0ed",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "76982450-e584-4b46-a520-3991fabadfc1"
        },
        "item": {
          "id": "d8dad1e2-7f0f-4307-b096-4989d505ef72",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "315d1401-e252-40d2-ad84-22bf7a379ef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fffced7c-7b79-4f9a-811e-c87a02fa3899",
        "cursor": {
          "ref": "39513b49-afdd-401e-a7b5-d39855aeac50",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "b127bd19-ef36-4cdf-8059-331e30951cbd"
        },
        "item": {
          "id": "fffced7c-7b79-4f9a-811e-c87a02fa3899",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "87cab6c3-1b7e-469d-9069-671a5f5ddda7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e49e41a6-4b2e-4790-b28b-5033c57f9fac",
        "cursor": {
          "ref": "2076bdb4-48b8-4e3a-97b5-39c0b3069645",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "151da242-6d06-4711-8560-3d4c652fbbec"
        },
        "item": {
          "id": "e49e41a6-4b2e-4790-b28b-5033c57f9fac",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "c6f847e2-273b-4968-8620-36e4f76c9cec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2b1768e-f26c-4380-84d5-8ef54798a38b",
        "cursor": {
          "ref": "7d1a7ee8-89b8-47c6-af71-1076b5208e99",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "83b5b95f-e65f-4e14-a35a-0a5afaf32215"
        },
        "item": {
          "id": "f2b1768e-f26c-4380-84d5-8ef54798a38b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "234d8df1-0a9d-4c2e-ba42-46c0bf25c7d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ead756b-ff81-44e8-8a55-c0f9bbe79a85",
        "cursor": {
          "ref": "bf188b1a-5f97-445e-8f7b-5ce0181c235c",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "89399058-3d43-4d74-b5f8-9e1970408286"
        },
        "item": {
          "id": "5ead756b-ff81-44e8-8a55-c0f9bbe79a85",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "cef27a08-cb22-4c84-a05c-974114867178",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d087dc9-10aa-4eb9-9337-cfb0f2d0ee86",
        "cursor": {
          "ref": "2d39dfa9-6034-4196-b14f-08898bee1a74",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "4b130cd7-675a-4762-b0c0-a05bd6bee652"
        },
        "item": {
          "id": "0d087dc9-10aa-4eb9-9337-cfb0f2d0ee86",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "330e566f-7e8d-4e52-a8d6-96a0a01c73bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3606f104-3a8c-418b-a758-1f60f8677a45",
        "cursor": {
          "ref": "aa9a1214-0747-42c0-b644-71dcfc24b400",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "313a3047-13f6-45ca-ae5f-d9694aae3c2b"
        },
        "item": {
          "id": "3606f104-3a8c-418b-a758-1f60f8677a45",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f04e2eb9-d54e-4ab6-af42-2009f7bf1228",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93306ec2-6b07-430f-a6db-b964c6f24dc1",
        "cursor": {
          "ref": "2e347b93-3120-4424-bfa6-1ad09dc4344c",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "b4d80f2f-415d-4b9a-b3f0-e94a4b7f6628"
        },
        "item": {
          "id": "93306ec2-6b07-430f-a6db-b964c6f24dc1",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b66c9a5e-da6e-4216-9156-e841057677ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bf708d0-3f21-4e81-8077-e0e363654eea",
        "cursor": {
          "ref": "c1af77b6-1226-470b-bd83-8ad6b09ce60d",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "c903ad31-e60d-462e-a06c-1f2fb315f4b2"
        },
        "item": {
          "id": "8bf708d0-3f21-4e81-8077-e0e363654eea",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "e9a9293d-26f7-44b1-9258-6731da0c26d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5472bab6-e312-4950-b59d-9de3d54f7696",
        "cursor": {
          "ref": "51f82370-35b6-4980-a4e0-d19fcdeff5a3",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "4aa4f48c-ae95-4726-bf86-130d583fc4f6"
        },
        "item": {
          "id": "5472bab6-e312-4950-b59d-9de3d54f7696",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "e935a0dc-2710-4761-9f82-10b47db04bf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4599516-c69f-4582-be1e-83a7b24eddde",
        "cursor": {
          "ref": "859c609a-2a77-438d-a482-7b323f9cc0e4",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "57e81490-434c-430f-baa5-0e3892a284a1"
        },
        "item": {
          "id": "a4599516-c69f-4582-be1e-83a7b24eddde",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "d5bdc348-ce0e-4af7-9167-503878b2d14a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f095017-541d-49ec-92b3-71a07d21a423",
        "cursor": {
          "ref": "71899142-ac22-4252-b7d5-0600e7b08186",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "1519183a-446e-4c0c-937c-e6a24b8d9fe7"
        },
        "item": {
          "id": "1f095017-541d-49ec-92b3-71a07d21a423",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "be0578e1-5888-406d-8f64-ed2ab34e58c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b8c21cf-451e-41b6-972d-fd6f49298191",
        "cursor": {
          "ref": "c864437f-5c47-48c5-933b-2d31d6ae3ae8",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "cc3bebd6-8518-41e2-b9b8-0c19b4cbd094"
        },
        "item": {
          "id": "3b8c21cf-451e-41b6-972d-fd6f49298191",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "942926b4-2861-4c15-b531-54c45d0d8779",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4e15d05-df84-4e37-9ec7-68095b450f76",
        "cursor": {
          "ref": "851e08c8-b69c-4555-9f6f-f1a13ded276a",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "2a4499e6-f8c3-45e9-a122-1db557d539ad"
        },
        "item": {
          "id": "a4e15d05-df84-4e37-9ec7-68095b450f76",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "9025db38-c9bc-4f5c-9d3f-bf402438e387",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bc448df-4fb5-4683-9389-f003794e00de",
        "cursor": {
          "ref": "2ed4875b-a609-4d65-8d3e-a29e388c9498",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "3eb386cf-8ac5-43b4-a85e-78d1fa5ed82c"
        },
        "item": {
          "id": "7bc448df-4fb5-4683-9389-f003794e00de",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "3f3793a8-db96-4604-915a-33f683171999",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c1cb9e6-2ee8-446c-8391-103ec279b03d",
        "cursor": {
          "ref": "7dfe5565-743d-496c-8876-3cf0ff922e0c",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "31f5d214-f646-4cef-bf9d-c6c52a729bed"
        },
        "item": {
          "id": "7c1cb9e6-2ee8-446c-8391-103ec279b03d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "cffe36a1-fda7-4038-8c53-7ced58cdc045",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e049940-3fc5-4eb0-b966-d687d64af6e7",
        "cursor": {
          "ref": "0cd40801-3c2c-49cd-8031-99b81afbba81",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "cec007f5-6021-463f-b100-027cf03d7fdb"
        },
        "item": {
          "id": "6e049940-3fc5-4eb0-b966-d687d64af6e7",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "86aee08d-8534-47c6-bc5f-409356dcb454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f38a746-bbec-41b0-9dd9-ab21790bd196",
        "cursor": {
          "ref": "45d116fa-e641-4cce-a2a1-9ceca19a1ff8",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "3d35c211-d9ee-4e27-a440-ba12310aa9fe"
        },
        "item": {
          "id": "6f38a746-bbec-41b0-9dd9-ab21790bd196",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "3e13278b-c27d-4503-8233-e81f311eb54e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb43c25e-ee54-4c07-ade9-a7b5f328649f",
        "cursor": {
          "ref": "7e0c8552-154e-4925-9ac8-ef3ed9e8a118",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "97ba2f0b-b07d-4e2a-af3c-c1bc0ccfb98b"
        },
        "item": {
          "id": "eb43c25e-ee54-4c07-ade9-a7b5f328649f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "19f60400-5771-4014-b829-42c84f0f6760",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da51c5b9-83bb-4cda-b15e-189347197e0a",
        "cursor": {
          "ref": "e5165b02-fecd-4e28-91f1-4c88363936f4",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "d8f92237-d843-4540-85d3-4e2b4e57c572"
        },
        "item": {
          "id": "da51c5b9-83bb-4cda-b15e-189347197e0a",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "9768bc9f-2dd2-4eb7-8afe-57321d8395bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee6fca69-c998-4a78-bb15-58b6d15596e9",
        "cursor": {
          "ref": "0ac4bed4-eebb-4056-ac2b-6a4e72614664",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "7d3a3385-347d-4735-b6bf-72e3dc16c809"
        },
        "item": {
          "id": "ee6fca69-c998-4a78-bb15-58b6d15596e9",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "30f39757-f74f-4afe-8a91-ccc134aa46ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2967a08b-4586-4835-bb6e-1e7d6b92fc44",
        "cursor": {
          "ref": "78c13c5b-17b2-407d-ab42-6856baa15f61",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "b5c399ca-3fdc-49c7-82b7-a9cf60ecd795"
        },
        "item": {
          "id": "2967a08b-4586-4835-bb6e-1e7d6b92fc44",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b3d8eeba-7a7b-401e-80d1-f3b8b92645f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5136d01a-e034-47d0-8383-363e1971d37b",
        "cursor": {
          "ref": "98ecab50-d480-4c1b-92a6-d91754817d58",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "2f36a26f-5923-4624-b6db-aae80bc224de"
        },
        "item": {
          "id": "5136d01a-e034-47d0-8383-363e1971d37b",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e7d76cc7-499a-403e-95db-f9efb2c3474e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6ce3e26-ba25-4a84-a80d-c949bad72956",
        "cursor": {
          "ref": "7000396c-8f8a-4eee-b16a-f6967cb90386",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "b5ddf4a8-afc2-4949-9cf5-5322c6cd28ea"
        },
        "item": {
          "id": "c6ce3e26-ba25-4a84-a80d-c949bad72956",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "8a2ac208-9e72-4644-b727-fecf42858d14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b142814-b35e-4b07-b16e-5ff98b518022",
        "cursor": {
          "ref": "f141c07e-135c-4100-a2a6-0ffcc984b00d",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "109b80ac-e8a2-4505-b5bf-0c507b6625cf"
        },
        "item": {
          "id": "8b142814-b35e-4b07-b16e-5ff98b518022",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "2a4261d7-7d09-4a29-ac47-de86eece9c13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f06be61-9325-4b9d-b58c-4ba281ab9adf",
        "cursor": {
          "ref": "37619441-a0cc-4f6c-8f32-62a4c7ee5490",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "e0d30189-27ed-449c-a00a-5b36d4de8ac0"
        },
        "item": {
          "id": "9f06be61-9325-4b9d-b58c-4ba281ab9adf",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a62f8688-65bc-4931-a936-cc3420d61b8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45718127-2b65-46a5-9cd5-f10b5e130619",
        "cursor": {
          "ref": "ea812b36-91df-40f6-93fb-d1a3517e9a50",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "7c9fe60b-2bd6-4826-94dd-27360726cebf"
        },
        "item": {
          "id": "45718127-2b65-46a5-9cd5-f10b5e130619",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "8214cb8f-083c-412c-a8db-173e342cb61f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbc629c6-6b55-43d5-93a1-ae30c37fb095",
        "cursor": {
          "ref": "0796f11e-4b01-4c4b-9ec2-7fc97b89897c",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "b2a08ea6-42b5-4a62-b9b5-4e0ad0e20dd2"
        },
        "item": {
          "id": "fbc629c6-6b55-43d5-93a1-ae30c37fb095",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "b08b6566-8fb2-455a-8dda-1de5f2af8151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69ea494b-d432-4f73-b9c7-c8c2f961c726",
        "cursor": {
          "ref": "aded8fb4-f866-453c-8992-8129f57230bd",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "8c2db152-cdd1-48c7-a998-1091ed4bc12a"
        },
        "item": {
          "id": "69ea494b-d432-4f73-b9c7-c8c2f961c726",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "7f0a29f9-8223-4c24-a8fb-9f67327e64cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5a48edc-094e-4ee7-b15d-4c9a791a5624",
        "cursor": {
          "ref": "6a38b30b-489a-4c43-b608-cc2e21de45be",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "f46828ca-f1ba-4595-b55c-065d33ac463f"
        },
        "item": {
          "id": "e5a48edc-094e-4ee7-b15d-4c9a791a5624",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "c4ce28b1-ae08-47ed-aa58-94673774b76c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdde488e-8708-4b29-81b4-d6280496c97f",
        "cursor": {
          "ref": "4960415b-c487-477e-a01a-b71572fb6831",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "d755f85f-c544-4760-a577-2df7e5a59b96"
        },
        "item": {
          "id": "fdde488e-8708-4b29-81b4-d6280496c97f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "5f36a953-efd2-4213-bae9-230835271d53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1e473fe-e6bc-4af5-913d-96ec9fac0c11",
        "cursor": {
          "ref": "e5a23a70-c21c-4e8f-89a1-aeb46c1479bd",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "cefe496a-ec7a-41e0-9d2d-5413ef16ac02"
        },
        "item": {
          "id": "c1e473fe-e6bc-4af5-913d-96ec9fac0c11",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "873e1880-dd90-4c6c-8960-14900842cfa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f8676e0-840a-40a4-86ca-eedd79981a40",
        "cursor": {
          "ref": "cb55144b-f73d-403f-a0f5-f8305a72f33c",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "133c3b2f-eec2-4c2f-81d3-94a35a19699b"
        },
        "item": {
          "id": "6f8676e0-840a-40a4-86ca-eedd79981a40",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "5e5c2fa7-bcf5-41d8-9fc7-439270bbe6c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ba94414-f76e-4cae-bc70-023b15dabb49",
        "cursor": {
          "ref": "bd4c026e-49e1-42e0-a311-196d696cfabc",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "71a91e20-b408-46b4-9298-2ad8964b0c39"
        },
        "item": {
          "id": "0ba94414-f76e-4cae-bc70-023b15dabb49",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "2c7845f9-ccca-4a4c-833a-0c76063c6ec5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12bf84fd-313e-4091-8d85-883633609464",
        "cursor": {
          "ref": "2f1ea438-e32d-49c5-af38-110f2d7c6cd6",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "a2c35163-e9a1-4895-b9cd-34afad9cee56"
        },
        "item": {
          "id": "12bf84fd-313e-4091-8d85-883633609464",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "d62709ca-30b2-4694-bcf7-991db69515b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e48808ad-fadb-4ee0-aa71-033ed75aea83",
        "cursor": {
          "ref": "4f1de9fd-a515-40b8-8115-b98b90d3b9cb",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "40a53e95-b8ee-4abd-a0a0-4056d084f649"
        },
        "item": {
          "id": "e48808ad-fadb-4ee0-aa71-033ed75aea83",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "53ebf231-c8e2-4066-b1a0-7c5fc17b086f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8be4342-2d4b-463b-bd9c-ec05b6fd0c08",
        "cursor": {
          "ref": "e8101ab0-52f3-4ac5-9758-2f4ce6a48711",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "a17c2508-b124-41c3-b7ec-ec691512feb2"
        },
        "item": {
          "id": "f8be4342-2d4b-463b-bd9c-ec05b6fd0c08",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "606eb880-e934-4675-a535-4188ef699a39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0245d79-a9b4-4763-9e27-9555766e8b8c",
        "cursor": {
          "ref": "f78cda0f-9e1c-41df-8f89-e414e90972c7",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "d421e156-b55a-40b4-a419-f3ae355506c3"
        },
        "item": {
          "id": "d0245d79-a9b4-4763-9e27-9555766e8b8c",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "214bfcf4-8b76-44e5-99dc-0e1f1c76c76c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72beb592-4e49-49a5-8203-599fc1e24ae3",
        "cursor": {
          "ref": "7d2fec37-7f19-40a7-a3d8-2699ba34a9ca",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "f4f8d661-62f6-4cdf-9820-b4b976d833dc"
        },
        "item": {
          "id": "72beb592-4e49-49a5-8203-599fc1e24ae3",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "10a0618c-76d1-45dc-a336-888b49112e5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68c723ce-2356-4d65-9541-a8a2ba530544",
        "cursor": {
          "ref": "8ba2b3d5-281f-425a-b1e5-0654cc637f0b",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "a0d81d89-4352-4d83-8857-5b2d80770de1"
        },
        "item": {
          "id": "68c723ce-2356-4d65-9541-a8a2ba530544",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "8039a0fc-e622-4c30-8402-a068e44f4d63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30be9032-4a9c-4c85-b254-7a6cdbcd119b",
        "cursor": {
          "ref": "8fc6aa58-e404-4b43-9dca-4d0e7055fd84",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "04b81a64-3076-47a6-86de-b4157d3ce579"
        },
        "item": {
          "id": "30be9032-4a9c-4c85-b254-7a6cdbcd119b",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "a0309c16-4d64-4a42-9498-42a4fbf2a677",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "230cb579-49b7-4d8f-aa43-a0541b3a6710",
        "cursor": {
          "ref": "c9e33f0c-7a76-43e2-b3d0-b2e9e42a775e",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "a9972b46-7e67-41fb-b1f0-935ca4e1c51f"
        },
        "item": {
          "id": "230cb579-49b7-4d8f-aa43-a0541b3a6710",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "7604e55a-3b9e-49df-ab68-00b9f3ce21a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5589c24-da7c-4239-ab4c-80a6fdd5d6a0",
        "cursor": {
          "ref": "9414d2c8-40be-42ad-a45c-9575ef68a5c7",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e13f44ef-4b35-46ed-bdd4-5385d0393c9b"
        },
        "item": {
          "id": "b5589c24-da7c-4239-ab4c-80a6fdd5d6a0",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "4d7d1db3-c7ea-4323-aeae-bdef6d48a218",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96e1af9e-1d1a-4a6c-9903-bd12787e150e",
        "cursor": {
          "ref": "e348128a-7eca-4df6-b490-a6d1ed4cbd5c",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "f5ce7757-89c6-4d00-9b75-448016ccdfa2"
        },
        "item": {
          "id": "96e1af9e-1d1a-4a6c-9903-bd12787e150e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "20ece0b2-0786-401f-9ae4-29b0a184825e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "828f85a6-3c23-48bf-a172-5dbdfa9c49ec",
        "cursor": {
          "ref": "721ba4c4-609a-4921-baf0-d1b0b91fd00b",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "55acca1a-5bc1-4375-827e-83d142298694"
        },
        "item": {
          "id": "828f85a6-3c23-48bf-a172-5dbdfa9c49ec",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "460b4bfa-9d2e-498e-a503-956a89ff3ad9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4180c85-e165-42cb-961b-ac285c285b4e",
        "cursor": {
          "ref": "2168e988-df53-461d-82f3-cf705016bec7",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "02eb04c4-042b-4a7a-9ebd-67cc9d61e107"
        },
        "item": {
          "id": "f4180c85-e165-42cb-961b-ac285c285b4e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "e36b119f-cebf-4c8b-bfae-fcd3f5ef6569",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e86966d5-4fc8-41b8-b0af-2bf553733f64",
        "cursor": {
          "ref": "a4127e26-4cd1-4ba5-acf8-5018182781af",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "014737c8-2d20-454a-ba8c-bb4b1a9e1110"
        },
        "item": {
          "id": "e86966d5-4fc8-41b8-b0af-2bf553733f64",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "75961341-600e-41bb-b849-cae31502eae1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "408f1452-e76c-4f53-810e-39ad15a38b77",
        "cursor": {
          "ref": "df6e6793-a6d3-486b-86be-cb138b4cf7aa",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "b88343af-987c-47bb-a642-9849526d11a9"
        },
        "item": {
          "id": "408f1452-e76c-4f53-810e-39ad15a38b77",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "4e86fdc4-6e22-419e-9d0a-88a635ca2089",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b0d6901-9ba9-425c-86d4-c1627b429529",
        "cursor": {
          "ref": "1a4eceee-b915-4316-be48-b3f1a21b1097",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "1dea2541-dde0-4e74-8fe9-80c39fd688e5"
        },
        "item": {
          "id": "9b0d6901-9ba9-425c-86d4-c1627b429529",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "3abe21cd-3521-4314-b12e-e160164236e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8440dab9-e7ab-4b53-90c6-8489aaf798fa",
        "cursor": {
          "ref": "d036e0a2-33d0-498b-8772-5d71c8e17a17",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "e6c17385-f93c-4f8a-a723-5961a632ec01"
        },
        "item": {
          "id": "8440dab9-e7ab-4b53-90c6-8489aaf798fa",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "03e6239f-f616-4422-9815-28480aaacd33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa875999-9f49-41f3-a6b2-01689a85e003",
        "cursor": {
          "ref": "6182acda-2bf0-42a6-b8e2-2184540ad127",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "497d334f-eaeb-46df-8f52-049ecd76f200"
        },
        "item": {
          "id": "aa875999-9f49-41f3-a6b2-01689a85e003",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "8034b7ea-1f4b-40e8-905f-7e03ab1bc449",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23f817de-07bf-4c3f-941a-4b788066f066",
        "cursor": {
          "ref": "9c81be05-6d3e-4442-824a-09199758cf16",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "a48c938b-eb60-4a43-81c4-dfb3b7ac7d9b"
        },
        "item": {
          "id": "23f817de-07bf-4c3f-941a-4b788066f066",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "01ba1c8b-d70e-4d99-b64c-3891c210ec89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be9ece0b-02d0-482a-9925-6bf8acb9b568",
        "cursor": {
          "ref": "456f9a57-2b49-4b05-8a04-5c1a8ccbc2e3",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "26f38a82-d608-45ab-8b11-f1ba702e8131"
        },
        "item": {
          "id": "be9ece0b-02d0-482a-9925-6bf8acb9b568",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "31d400d2-83bd-4f1a-9580-b153f6993756",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fe3957f-125e-49b5-bd87-fa2e60feb0d4",
        "cursor": {
          "ref": "ef00ae89-cc70-4de0-bf75-9f25f89799f8",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "a5ae97e3-c808-4c2d-936d-b5f7c54d112d"
        },
        "item": {
          "id": "0fe3957f-125e-49b5-bd87-fa2e60feb0d4",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "0b579db5-29e7-4e30-a62c-3e5de1fac686",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e85750d-a36a-4625-b63d-8d2734c57e66",
        "cursor": {
          "ref": "57275570-5d58-4431-8e6e-f9bfe4cd0a64",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "2b97c9f7-e028-4f2f-a9c9-27177d707a1d"
        },
        "item": {
          "id": "8e85750d-a36a-4625-b63d-8d2734c57e66",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "3fd6efca-48c3-4e6e-a472-93a4da1b5c66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2807210e-43ec-4e75-86a4-47f40868aa63",
        "cursor": {
          "ref": "f45c5eea-c6a1-4ce1-a9f8-e09cf392652d",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "d63c2f0e-739d-40f2-8930-033ebd1d0a7c"
        },
        "item": {
          "id": "2807210e-43ec-4e75-86a4-47f40868aa63",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "3c66f04f-8281-4ef5-b8c0-3c5b6928e32d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da27e832-9990-44c2-8a69-12424798e238",
        "cursor": {
          "ref": "a59a33c2-5981-4429-9263-81d39bfd0cf1",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "70a7ffc3-a4a3-46c5-97cf-1e42ac1d12c4"
        },
        "item": {
          "id": "da27e832-9990-44c2-8a69-12424798e238",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "db328953-2283-47a3-ac8f-2e55de43fde4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99996557-6cbe-4486-a700-c1ec1af4ecc2",
        "cursor": {
          "ref": "a45b9dd9-7aff-451b-88ef-10b8d7bdb01e",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "b6798573-11b7-4c0a-ad27-513f2230efbb"
        },
        "item": {
          "id": "99996557-6cbe-4486-a700-c1ec1af4ecc2",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "39550733-d015-4896-a9ee-2a599a88f55c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73191dd4-5c7d-4217-995f-0e30dc5042b9",
        "cursor": {
          "ref": "3c8aab42-acfe-4f36-8b20-065cd8b7e8b7",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "5b9927b1-774c-4c35-b498-38891de9d6ac"
        },
        "item": {
          "id": "73191dd4-5c7d-4217-995f-0e30dc5042b9",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "b6ad48e8-3188-4037-9edc-707faac96857",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bf261c3-6a23-40dc-8ee0-8332dcbb7cf0",
        "cursor": {
          "ref": "da4f8a5a-cb5c-43fd-a1c2-2078e5f7f5d9",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "fad19cdd-dfab-4750-9387-abc76505c15a"
        },
        "item": {
          "id": "7bf261c3-6a23-40dc-8ee0-8332dcbb7cf0",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f487cea8-0304-4c3e-97a5-9b389cc477e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d7264fa-f607-4ee4-a801-ded691780251",
        "cursor": {
          "ref": "7300e6b1-a26e-4569-91a6-8c79ec784f18",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "618b1c6f-9483-4d5a-b9a6-134b05ec3e3f"
        },
        "item": {
          "id": "2d7264fa-f607-4ee4-a801-ded691780251",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "2b05cfb8-01f8-4751-9620-0b96aa262050",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b72f5467-535f-40db-af5b-ae1ae089f1e5",
        "cursor": {
          "ref": "271d58bf-2b2d-4617-bc6a-caa3831bd818",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "d9f75e38-1f2a-4454-a41d-58612ee0d11d"
        },
        "item": {
          "id": "b72f5467-535f-40db-af5b-ae1ae089f1e5",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "7916a067-00be-48e2-b8ba-1cdae3a8cbda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d333e1e7-39ea-4a37-9a85-dcfc4cc8537e",
        "cursor": {
          "ref": "4a7e8ae3-b2d2-4261-895c-d787b316f024",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "5a4f8a4d-c224-48d3-8604-2b0ba0e56cbd"
        },
        "item": {
          "id": "d333e1e7-39ea-4a37-9a85-dcfc4cc8537e",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "a23b840d-b79b-4da6-833e-8fb13de4e618",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2819d0f-1f15-4638-beb1-31c1373308dd",
        "cursor": {
          "ref": "83be1357-bc77-48d5-8713-e2263ad16ba2",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "d09847ee-8912-4c37-820e-43a6c0b3cd0e"
        },
        "item": {
          "id": "f2819d0f-1f15-4638-beb1-31c1373308dd",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "db4a5076-7afc-4662-927b-61634078f585",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e241deed-9af1-472b-9ca6-93e807f9155f",
        "cursor": {
          "ref": "4ac41b19-cac1-43b8-a3e0-a62e5aebcb46",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "376e90f3-5c0b-45f1-8e57-dc1bf71aaab9"
        },
        "item": {
          "id": "e241deed-9af1-472b-9ca6-93e807f9155f",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "73e33846-eb6f-4eb4-aadd-61b566450141",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdaa5d35-6365-470f-a7cb-ff6adb3d5a60",
        "cursor": {
          "ref": "3541cbbc-9415-4ff2-8094-11b4895f2c12",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "145d7789-3765-435e-99b8-9dd81401b5cb"
        },
        "item": {
          "id": "cdaa5d35-6365-470f-a7cb-ff6adb3d5a60",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "b34ac61a-996f-410e-94ca-c05b7cb4760f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "418548b8-d4c9-437c-9e5c-ef491a6668ab",
        "cursor": {
          "ref": "efc0db62-e21c-430a-b252-8eff4c7c0dd2",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "1b18619a-466f-42d0-8f2d-20dca6bfed3e"
        },
        "item": {
          "id": "418548b8-d4c9-437c-9e5c-ef491a6668ab",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "332bddbe-1fe1-4b62-831b-6b99c690197f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dddbb32-1671-41b4-a334-15d0c1d30272",
        "cursor": {
          "ref": "34680e8d-c71d-49e8-bfeb-12550227cbd9",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "e2ec6972-9c19-4bf6-bd46-5cfef295bf83"
        },
        "item": {
          "id": "4dddbb32-1671-41b4-a334-15d0c1d30272",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "66075910-9955-45f2-9d52-e30c4d085261",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26122964-4a68-4e41-972a-da326447af8c",
        "cursor": {
          "ref": "35a070fa-9318-401b-b09e-cbf4f67de154",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "75564eba-d7c6-41f5-82b0-c5efa75790c1"
        },
        "item": {
          "id": "26122964-4a68-4e41-972a-da326447af8c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ddf0455d-6aa5-49a9-9d1e-761fb97a729f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e16d87b-1bd4-45f6-aceb-baecbcb001ef",
        "cursor": {
          "ref": "fd8afef3-c3bc-46de-ba80-88f4e655b005",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "c0302726-f8f1-4d8d-a39c-3fe6d76d87d3"
        },
        "item": {
          "id": "3e16d87b-1bd4-45f6-aceb-baecbcb001ef",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "2aa1f2d2-b16b-4103-a331-af802db8ad7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2528b440-7303-4c20-87e8-3691f060b7f3",
        "cursor": {
          "ref": "5afabebc-cee7-4d97-8f3b-a10404f0e1f1",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "3dae5298-8de9-41f5-a89c-c65bf7644197"
        },
        "item": {
          "id": "2528b440-7303-4c20-87e8-3691f060b7f3",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "be950d5c-2327-458b-87c4-5b4c8dbff856",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "088cfafd-2b04-47be-bf73-9012757c539f",
        "cursor": {
          "ref": "651b898f-421b-433b-9c84-cff2cd55779c",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "7ba3e9a1-a935-4578-a28b-102eefae7aa9"
        },
        "item": {
          "id": "088cfafd-2b04-47be-bf73-9012757c539f",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "244b9479-b000-492a-8e11-510774c4c8cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "688bed62-f1a3-444a-9c83-c2fa4198f1b2",
        "cursor": {
          "ref": "b860a7db-c2fc-4860-b969-d86c3e78497a",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "58fbc481-5d8e-4c67-a471-84707bd9522b"
        },
        "item": {
          "id": "688bed62-f1a3-444a-9c83-c2fa4198f1b2",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "b6dda497-6143-4b1d-88da-990dd6c8cfcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2de807c7-445e-4b92-aece-8f6fb485bd28",
        "cursor": {
          "ref": "fc6de33e-d0c5-4ba9-ac00-bd94abbcdd7b",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "757fc48a-298b-41f5-8d95-052e6cdbd935"
        },
        "item": {
          "id": "2de807c7-445e-4b92-aece-8f6fb485bd28",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "aee51691-9993-4aff-b0f6-f5f90c2896b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1496f830-4bb1-49c3-80b3-acb7ec1f18c7",
        "cursor": {
          "ref": "48dbead7-6107-430d-bffe-291192c7b098",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "dcdd3518-64ab-4525-b04b-9e3c3f44eb0b"
        },
        "item": {
          "id": "1496f830-4bb1-49c3-80b3-acb7ec1f18c7",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "170ea887-0330-493a-8dcb-48af4d77dbc2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "ba4bf0dd-7e25-4255-b0a0-d7689c809b8c",
        "cursor": {
          "ref": "164e702d-b303-4147-9f18-079482833280",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "2a610349-2231-47fc-850f-e896dc053ec9"
        },
        "item": {
          "id": "ba4bf0dd-7e25-4255-b0a0-d7689c809b8c",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "03d961de-6c47-490f-9b7d-b692866f0be9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc492eca-9369-424b-adac-305b4eeeaf51",
        "cursor": {
          "ref": "b4113db2-3f60-401a-849e-0ffa4c6b4c54",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "092be024-2cc6-437a-84ce-5fa3cd0287fc"
        },
        "item": {
          "id": "cc492eca-9369-424b-adac-305b4eeeaf51",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "bb9ba807-b006-41bc-806f-912cc1e928ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0164a118-d74a-47fc-a8ab-4b09e822ead8",
        "cursor": {
          "ref": "a988330c-ef61-460e-a429-890fd9f4e5d0",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "63d3a213-a28c-4631-8159-7ea303a9de64"
        },
        "item": {
          "id": "0164a118-d74a-47fc-a8ab-4b09e822ead8",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "6e891e26-b9f9-4dd7-86b6-293601a30ddf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ef8c6c9-3aa5-4a1d-910e-c5b4dbf2d2f3",
        "cursor": {
          "ref": "efd1f08b-45d1-481c-88cc-c31f02f46d11",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "e6d11e63-7362-4891-b403-2ecf0fdb7baa"
        },
        "item": {
          "id": "6ef8c6c9-3aa5-4a1d-910e-c5b4dbf2d2f3",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "b48e196c-1c4b-49b7-b9d4-d209de558d94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da51d1aa-1131-424f-aea8-33d7bbc6b395",
        "cursor": {
          "ref": "f6994b6f-4f7c-4405-a851-478d875efb4e",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "37eb8141-b7b2-4ded-96df-34701857a5f2"
        },
        "item": {
          "id": "da51d1aa-1131-424f-aea8-33d7bbc6b395",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "bb63527e-fc1e-488f-8923-92a1959fefa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a0cce25-7a2c-4ebc-95a4-09a512e6f57d",
        "cursor": {
          "ref": "076c2684-0d6a-4611-b411-d0ce0ef0a31b",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "0195df56-1669-4f11-99b2-e75e12c3efe9"
        },
        "item": {
          "id": "1a0cce25-7a2c-4ebc-95a4-09a512e6f57d",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "200974b3-511a-4ad5-93e5-bf8955dad33c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12fcd1b7-ec8a-4bc5-903f-0d0389409f0e",
        "cursor": {
          "ref": "a4b0f623-6edf-47f9-8fca-62c7a860e22b",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "5a30a75d-efb2-4382-8a07-93021b95a7db"
        },
        "item": {
          "id": "12fcd1b7-ec8a-4bc5-903f-0d0389409f0e",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "5c060a94-eac3-4bef-a2f5-a1602994ee15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d72efad-66bb-4eed-92e4-e72e0aec27f7",
        "cursor": {
          "ref": "da5c8845-433b-4c16-9f14-ab5588cffe91",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "d2cdedef-bf80-4709-b4cd-466d02f4e279"
        },
        "item": {
          "id": "3d72efad-66bb-4eed-92e4-e72e0aec27f7",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "516cdd60-d46f-49fe-ae8c-7362d2cee34d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c784291-d3d0-4a09-ae97-8f1b5bc35a56",
        "cursor": {
          "ref": "e9763f08-564d-4381-9b6b-ed0ff05dda0e",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "8ad1fe89-5ba1-4b34-99c3-4b22f60961b6"
        },
        "item": {
          "id": "2c784291-d3d0-4a09-ae97-8f1b5bc35a56",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "7e9e945e-18a8-41b1-9621-4a424764cff1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bbb75d6-bbe0-4da0-a4d9-4c8c16e9c005",
        "cursor": {
          "ref": "85d1da2c-a01a-465f-a029-d4abe2cc67e6",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "161544af-7880-4191-9435-709fac032ba7"
        },
        "item": {
          "id": "1bbb75d6-bbe0-4da0-a4d9-4c8c16e9c005",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "a8eaa22e-851a-4ccd-bc7c-254c57592497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "994746b2-316c-447e-bae3-3b85a45894e2",
        "cursor": {
          "ref": "569d3dd1-7ede-4ff5-99b3-9d8a65ac81e9",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "6dfc7476-3be9-46ac-bdfd-461fb515ff39"
        },
        "item": {
          "id": "994746b2-316c-447e-bae3-3b85a45894e2",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "984c3a0e-7d74-4d80-8e45-3d1833c6061e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f49de82-547d-466d-87de-aa8f3067a7b2",
        "cursor": {
          "ref": "41f8c996-e950-49e6-8ce9-3e082fd280ab",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "c9822eba-e9e6-4a86-a1c4-2815128c9f1b"
        },
        "item": {
          "id": "6f49de82-547d-466d-87de-aa8f3067a7b2",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "abd26460-fe64-4f2a-af0e-b91dad57af6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bb0b0b0-76c3-4a81-aa86-cecce76ff054",
        "cursor": {
          "ref": "7b5ae3cc-10a7-4d17-9d5e-b08408347c3d",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "c2441831-0b57-49ee-a035-a7da3a9583c5"
        },
        "item": {
          "id": "4bb0b0b0-76c3-4a81-aa86-cecce76ff054",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "f8c277cb-bfd2-42f2-b6e0-7b8715af8780",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a5d7534-1264-40a7-b34a-a3c3663c8cd1",
        "cursor": {
          "ref": "92149ca1-7103-4e4d-a810-16979b6472c4",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "ef0fb2ff-1baa-4b1a-ae72-698a6ea82cd1"
        },
        "item": {
          "id": "1a5d7534-1264-40a7-b34a-a3c3663c8cd1",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "cb7f2816-b51f-4d1d-ae4e-896f2ca3a16e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c283f5c7-8aed-4066-877b-bc9f95726d3d",
        "cursor": {
          "ref": "cc619efc-985c-4112-8e53-47885840de9e",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "74e7dad4-97e6-4755-9d48-6b27a65e4026"
        },
        "item": {
          "id": "c283f5c7-8aed-4066-877b-bc9f95726d3d",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "e9df9543-158f-4046-aec8-aa5f83a9c0e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "978f727a-2874-469d-96fd-35b27bf35018",
        "cursor": {
          "ref": "5ff05e0a-8cf4-46db-9397-3ef2367cc4a4",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "c368fbf1-9ef0-42ab-bab3-8eae7ac930fc"
        },
        "item": {
          "id": "978f727a-2874-469d-96fd-35b27bf35018",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "978f3f2b-86cd-41c8-8928-1451663ff99a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83b2118c-8463-4194-9830-8843122c4e59",
        "cursor": {
          "ref": "24c583aa-cabe-4b9c-b3dd-68e2eb74c6cd",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "7058f870-640b-4515-8216-fc5ef6e32c34"
        },
        "item": {
          "id": "83b2118c-8463-4194-9830-8843122c4e59",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "9f18236a-82f5-4949-af11-460d450294fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b10506e-4c24-4e97-be16-bacb4c5ba8e8",
        "cursor": {
          "ref": "ab93c8b2-ae17-4351-b07c-432aa58e54ef",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "b169906d-5141-4c47-8883-d56a593b3bca"
        },
        "item": {
          "id": "2b10506e-4c24-4e97-be16-bacb4c5ba8e8",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "7ec1b63d-4a7e-44f6-adad-3a7f66590e2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "109de71e-a5a7-4cc7-90f4-13236deeefbc",
        "cursor": {
          "ref": "398fc9cb-0594-4483-95d5-7b266c9aa53b",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "763338ff-fad0-478d-97e3-d05c63ff62af"
        },
        "item": {
          "id": "109de71e-a5a7-4cc7-90f4-13236deeefbc",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "ae12f58d-5a56-4582-9788-00f5286f08ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fbeee4d-333c-4eb2-8159-c444b6d2df74",
        "cursor": {
          "ref": "90dd338c-9ce8-4391-bec2-09d6fe04f13e",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "9b7caf23-8393-4bd7-9d7c-95460407d18d"
        },
        "item": {
          "id": "8fbeee4d-333c-4eb2-8159-c444b6d2df74",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "bca007f2-5f1e-46fd-be5d-5a18ea952806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0261202a-9092-49e1-a5d0-dd8f62d18b3e",
        "cursor": {
          "ref": "edf60a65-58eb-40e4-bca2-a73483fae768",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "ada1a9b3-c9f5-4f44-ae20-3063be1e6763"
        },
        "item": {
          "id": "0261202a-9092-49e1-a5d0-dd8f62d18b3e",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "f088ca93-d7e1-4db1-aa1e-d62e83d49e13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "163795f6-8a44-4978-a336-819b4a9c4dba",
        "cursor": {
          "ref": "5e903877-e0ae-4ed4-8f6e-af9a85f30ba4",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "1e26b7ad-132a-49a2-acf2-aa99a49b174d"
        },
        "item": {
          "id": "163795f6-8a44-4978-a336-819b4a9c4dba",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "50da7591-833b-40c0-b4be-9bd74750ef65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "130def72-4e0b-42b4-97d3-0f8a4829d1d4",
        "cursor": {
          "ref": "4287ba1e-f561-4d92-8fe5-56669e48c83c",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "0c7bc619-55d8-47dd-8645-09c2b16f2a2b"
        },
        "item": {
          "id": "130def72-4e0b-42b4-97d3-0f8a4829d1d4",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "ba988aea-4b9b-4de4-b006-3fb83351fb31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03bd4ec4-7f02-41e8-a7cb-b8e7c06ab814",
        "cursor": {
          "ref": "bf47ec19-bdbc-4ab4-9044-b2c9d714d85a",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "0d3db748-a5fd-4db2-b20c-97c939a723c1"
        },
        "item": {
          "id": "03bd4ec4-7f02-41e8-a7cb-b8e7c06ab814",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "7190685f-2513-4ad4-96fd-a89425e67372",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc93add2-b45a-4885-868f-ce7a57292459",
        "cursor": {
          "ref": "57d3c835-4dc1-48fa-8c27-3c8bb3df4049",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "cc593ef7-b111-46cf-b6d6-de98e74b5249"
        },
        "item": {
          "id": "cc93add2-b45a-4885-868f-ce7a57292459",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "cc340b05-16f7-4a03-9217-f2389272d026",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "860f32b3-5d98-473a-bf13-9e9d7fd2623f",
        "cursor": {
          "ref": "e054a73b-fe75-47d8-8fa0-8c82e388893e",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "24a5be80-4bf1-40f2-b87e-a2de597792ea"
        },
        "item": {
          "id": "860f32b3-5d98-473a-bf13-9e9d7fd2623f",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "78eb84e1-8540-4de3-b70b-6073dea87134",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9df2f171-a305-4339-8cf0-810314920f33",
        "cursor": {
          "ref": "4b4e5cb6-661e-4ccc-bd84-877b503a362e",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "f0b20c85-9e03-4820-874f-93190b947da2"
        },
        "item": {
          "id": "9df2f171-a305-4339-8cf0-810314920f33",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "6949e41c-3b48-4dd3-9588-ca1c34568dfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0895c32c-145a-4405-aa52-8180316598ba",
        "cursor": {
          "ref": "8d8893c0-142b-4cdf-b309-85c18eeebf0a",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "b144de04-81a9-467a-b67c-9a36ddfaee3c"
        },
        "item": {
          "id": "0895c32c-145a-4405-aa52-8180316598ba",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "5e5fd71c-b8a0-4797-a125-1ffddffac0e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a2f5961-14cb-437d-8a3c-d690e2105f04",
        "cursor": {
          "ref": "7517c035-ff75-4a66-b441-b1e8d931b982",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "d785ca90-5fa7-4ec2-af27-0173ca23e6a7"
        },
        "item": {
          "id": "4a2f5961-14cb-437d-8a3c-d690e2105f04",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "91e47bbb-f266-48c8-9600-1e3664ce8f0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bd6dcef-3749-4864-bc49-ac2f74e61cec",
        "cursor": {
          "ref": "ce2e62e0-c72a-412c-b79b-406f302951b4",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "d507b521-f61f-46ab-bbe0-ca0c8366dafc"
        },
        "item": {
          "id": "5bd6dcef-3749-4864-bc49-ac2f74e61cec",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "7742b304-4feb-4396-b02a-2853bde5f9b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "47601453-ad00-42b6-a894-7b5c5e6d978b",
        "cursor": {
          "ref": "be2e1807-1a9d-4b59-ad20-a310ba71c386",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "b8c2934f-016b-465f-be40-676c68ca979d"
        },
        "item": {
          "id": "47601453-ad00-42b6-a894-7b5c5e6d978b",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "6a741f4e-5000-4b5b-931c-6d4b20c4a5a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "532228e0-4eae-49e5-b92f-6417c42f56a1",
        "cursor": {
          "ref": "074a9a11-91fc-441e-82c3-8d8883985d91",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "840b2f94-9c3a-41f6-97eb-fb9c6b1ff277"
        },
        "item": {
          "id": "532228e0-4eae-49e5-b92f-6417c42f56a1",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "bf73ce4e-ac75-431d-b820-46879aacbc0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "6045b612-4b75-426b-afb6-ecef37fb4e54",
        "cursor": {
          "ref": "0291aace-8d2a-450e-8f94-810e0b813c65",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "053c853a-142b-4628-a56d-758a18aeb8a9"
        },
        "item": {
          "id": "6045b612-4b75-426b-afb6-ecef37fb4e54",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "2c9ac3da-4096-443d-bec4-c4c888408d2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6cd1576-287a-4619-8221-9191fc923185",
        "cursor": {
          "ref": "faa38646-5f49-4521-bc57-682e78ccfbbe",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "0896898b-ee22-4c99-9a12-41438edcebbf"
        },
        "item": {
          "id": "b6cd1576-287a-4619-8221-9191fc923185",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "69d91f3a-ac34-4343-a67e-1fc77fa5ec49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "52a676bc-f240-4a6d-96d4-62c10f0cdf20",
        "cursor": {
          "ref": "a6a966a6-b2af-476f-ac52-fe38cc6793d2",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "69a3645e-dfe4-4065-a391-3fbb2c1e7f9b"
        },
        "item": {
          "id": "52a676bc-f240-4a6d-96d4-62c10f0cdf20",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "58367c66-0749-4185-bd20-1a0be8d931b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 876,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "29920704-1cfe-479b-85e1-0f2977de59bc",
        "cursor": {
          "ref": "74925a51-4073-4261-81a3-e46cdcf1c27e",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "874595fc-25e0-4833-a703-ef83048439a3"
        },
        "item": {
          "id": "29920704-1cfe-479b-85e1-0f2977de59bc",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "d5cb7c8b-ce4d-4087-b001-4459903bca6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "8a618cf2-df97-438d-b04e-3b031aca1f15",
        "cursor": {
          "ref": "60de6137-52b0-4c8a-b114-3eda50bbfcdf",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "ad1537d5-f6dd-482c-8a55-9d454879d60a"
        },
        "item": {
          "id": "8a618cf2-df97-438d-b04e-3b031aca1f15",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "401f70b9-81da-4ba0-a350-e2d840671bd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "91c75c99-d555-4c57-a3a5-3aa149e22a00",
        "cursor": {
          "ref": "b16187c1-af86-4b18-997c-8abb3dac803f",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "8bbd7741-3d5c-4784-a7ea-9bf4d4f750e4"
        },
        "item": {
          "id": "91c75c99-d555-4c57-a3a5-3aa149e22a00",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "abb942b0-22fe-4db4-a1d8-591074f1eab8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "8447001c-33be-4131-bb35-c446104e8545",
        "cursor": {
          "ref": "5fa8e187-02d5-4242-94ee-8eeacd18e8e9",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "7477f992-cb54-4262-a075-1e38d2454426"
        },
        "item": {
          "id": "8447001c-33be-4131-bb35-c446104e8545",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "88afd595-e67f-45fa-90fc-5ca2e86fb90c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "df0502b7-f039-45e0-a4e5-8032eb08f0f9",
        "cursor": {
          "ref": "633959dd-11f3-4c55-9d19-c1c2f311cdc8",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "1c641204-75f8-4ded-a028-ebea40358a26"
        },
        "item": {
          "id": "df0502b7-f039-45e0-a4e5-8032eb08f0f9",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "3a83003a-7119-4450-8505-29b63eb4a251",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3e8671c-026a-4f47-b32b-20e928ff37ae",
        "cursor": {
          "ref": "102e31d1-784a-4ee6-a061-7cffb741b5a2",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "3ab83db7-87cf-4cfc-aa14-c9604b482c10"
        },
        "item": {
          "id": "e3e8671c-026a-4f47-b32b-20e928ff37ae",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "eefd5b6b-94bf-47f6-ba97-355f9d1596c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34761304-ffa5-49fa-913d-8e82c879f4c1",
        "cursor": {
          "ref": "0fc084e3-c81c-4d30-9daa-4545abdc4e7f",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "61b0fb6e-495d-4ad8-876e-85a662e7ce58"
        },
        "item": {
          "id": "34761304-ffa5-49fa-913d-8e82c879f4c1",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "122528a4-8293-4f2a-896c-b93053ab49f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "307ff331-cecc-4814-90e1-f38ba362e096",
        "cursor": {
          "ref": "87c92f5e-8110-499e-b9c0-f1cb281f35b1",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "f1dd84d3-2cd8-45f3-9f75-0c458ffafd67"
        },
        "item": {
          "id": "307ff331-cecc-4814-90e1-f38ba362e096",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "0b8438d7-1cd8-40ce-b7f5-fa2001c65610",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75c68bc3-e135-475f-a5ba-0bf06e574446",
        "cursor": {
          "ref": "7d861680-57df-49da-aacf-4516c316f029",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "17c84cc5-b7ca-4edd-907f-e8a27bdc82be"
        },
        "item": {
          "id": "75c68bc3-e135-475f-a5ba-0bf06e574446",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "62a3ef2e-a344-4def-82d2-fb400d0e844b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "610b7bb2-b63a-433a-bf14-b30bb5a8d768",
        "cursor": {
          "ref": "5de80bff-c8c4-48d5-a60e-36b2b3256d76",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "cf61e993-8d0d-4824-897c-403e142ec10a"
        },
        "item": {
          "id": "610b7bb2-b63a-433a-bf14-b30bb5a8d768",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "0c6e3dde-38ab-4dcf-b888-a03c2b9bf53f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "795fc9b4-9717-4df6-8e63-72a01f6c0aa1",
        "cursor": {
          "ref": "af57b9fd-e7eb-4821-886d-7a9555dd5762",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "ec240b2e-e34a-437c-bd52-c03303cdc955"
        },
        "item": {
          "id": "795fc9b4-9717-4df6-8e63-72a01f6c0aa1",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "04e41279-78d4-4d01-9552-bc10647cec42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "004db7ed-f098-4f39-9cee-06947d91abe6",
        "cursor": {
          "ref": "09a3d931-c6d7-4eda-9423-af2fc62fb568",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "c93826ea-a800-4d91-8363-65bd80acf810"
        },
        "item": {
          "id": "004db7ed-f098-4f39-9cee-06947d91abe6",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "fb1d0ac5-bd56-4d4f-9dda-8a79a22fbf0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07083588-98b0-426b-9fcf-f81d5033bad0",
        "cursor": {
          "ref": "37d61564-0f3e-4e7f-88ad-b56fd670583a",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "b5516032-d62b-48d4-8dd6-e85b21f54c71"
        },
        "item": {
          "id": "07083588-98b0-426b-9fcf-f81d5033bad0",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "d84cebed-9ab0-4352-a6b5-eb000f6c2a80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6481f573-ba08-4700-99d6-afe44ef5221c",
        "cursor": {
          "ref": "f49419d7-ecb9-4af0-9ae7-0ec5fd954bcc",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "47359eb9-7d71-4db3-b9f6-f099e70d8f8a"
        },
        "item": {
          "id": "6481f573-ba08-4700-99d6-afe44ef5221c",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "ed6a26ca-5cc6-46f0-96ec-c38984981de3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ecc5e1f-f858-4683-be7d-b6ddb65bb409",
        "cursor": {
          "ref": "e2bc6915-799d-4767-b3eb-8ce69126e9ec",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "401304c0-07b5-4276-ab91-c6ddef5f6c68"
        },
        "item": {
          "id": "3ecc5e1f-f858-4683-be7d-b6ddb65bb409",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "fde6ac09-caf6-42e5-b14d-bd69bca8d0cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c211326-b7ca-484a-b040-e500e8110c9a",
        "cursor": {
          "ref": "48e65082-39a7-4e49-848c-7699d54f932c",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "cb77e30a-e030-4dc2-a504-5d16dfe7ce8f"
        },
        "item": {
          "id": "6c211326-b7ca-484a-b040-e500e8110c9a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "7b097b08-1c7b-4eb5-88ee-0f3dfc83332c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52f08caa-d57a-4ecd-bf8d-83c65d2a0eb0",
        "cursor": {
          "ref": "7ce3b226-ea2d-48ff-a073-a4cf623b8a88",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "7f1afcaa-9b40-42e9-90c0-71d5de573652"
        },
        "item": {
          "id": "52f08caa-d57a-4ecd-bf8d-83c65d2a0eb0",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "54c2a585-62ee-4991-b700-a6e6faed682e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d50f4650-33d4-4797-8f1d-dfe89e3903fb",
        "cursor": {
          "ref": "6cf9b8ac-f455-4f01-95dd-2060527accd9",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "fb47a95e-0112-4e0a-a75b-f5583af51a39"
        },
        "item": {
          "id": "d50f4650-33d4-4797-8f1d-dfe89e3903fb",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "0c9658b4-6a2e-4938-920c-925e80bae8a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 771,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "34bc8793-a6c9-4d36-89ed-300a20b43d15",
        "cursor": {
          "ref": "14cb605d-7d3c-45a7-906c-f4455ec8df4e",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "ffad1d9a-5d36-4d7a-b9df-42e330f391de"
        },
        "item": {
          "id": "34bc8793-a6c9-4d36-89ed-300a20b43d15",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "0262ed94-5e68-4738-8116-61294ae81f32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 783,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "306025dc-17e6-4ac5-a232-4e4cda2cbd6b",
        "cursor": {
          "ref": "fa1f8945-fca5-469e-bc87-15f116d50399",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "3f11999b-23b0-4279-b3c1-40ff9b3a0903"
        },
        "item": {
          "id": "306025dc-17e6-4ac5-a232-4e4cda2cbd6b",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "5d620e7e-e1e7-4945-ba47-e1e8cc452410",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "cf98ee06-9726-496d-8228-254a9f39cea9",
        "cursor": {
          "ref": "60bdd82a-f05d-406d-bc01-6f865f19cc4e",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "7d0851d6-d883-49e8-98f2-c3eb48622831"
        },
        "item": {
          "id": "cf98ee06-9726-496d-8228-254a9f39cea9",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "5a5a906e-39b0-44d3-927d-50dc53f65b51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 810,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "6959c8ba-58bb-40b9-8057-ef734aa4bfcc",
        "cursor": {
          "ref": "9144c199-6c76-418a-827d-0f04da55901b",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "e704ecdb-2387-44de-8d62-f56ebd76e781"
        },
        "item": {
          "id": "6959c8ba-58bb-40b9-8057-ef734aa4bfcc",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "be92185e-b9d4-423c-a07a-d015ae213b42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "f8cb5d35-7287-4ee3-b45c-ec6eb4feb9ca",
        "cursor": {
          "ref": "24187af4-d4ae-4d3f-8b84-40c957f3b2f3",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "97b397fe-8d7b-4abe-bd29-5da76cf560e1"
        },
        "item": {
          "id": "f8cb5d35-7287-4ee3-b45c-ec6eb4feb9ca",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "e93c235b-7ee8-4eec-b6fc-4b8a9f372935",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f4dabd8-af91-4bca-9e37-fa24f7603ca0",
        "cursor": {
          "ref": "56427071-ad0c-49fa-9c88-9294e1836498",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "434d35cc-09ad-4994-8453-c1e609df831e"
        },
        "item": {
          "id": "8f4dabd8-af91-4bca-9e37-fa24f7603ca0",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "3ff8ec7e-fe9f-42d3-a474-0138e2f357b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f951bd0-0200-4d7c-a660-a4e2b855ff81",
        "cursor": {
          "ref": "085918d5-2979-4535-9190-37d058355360",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "d8227e19-cd2f-49e4-9ec9-e435733198e0"
        },
        "item": {
          "id": "0f951bd0-0200-4d7c-a660-a4e2b855ff81",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "52432fa0-8667-4352-ad30-9912c313cd0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84a231c1-4c6f-40d4-99e6-069e690c151f",
        "cursor": {
          "ref": "2abb1b15-57fa-40f5-9fd2-e3bff7080260",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "f8a78c03-c522-4817-9491-d945054c06f5"
        },
        "item": {
          "id": "84a231c1-4c6f-40d4-99e6-069e690c151f",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "742c6649-83aa-41ec-b243-fb5fe36875be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa65df62-3079-4a24-9d29-4f3609cb92a9",
        "cursor": {
          "ref": "fbd56dc6-6941-42c7-b2f5-5be6283c90c0",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "32e717ae-4334-4bde-800e-f353486b34d2"
        },
        "item": {
          "id": "aa65df62-3079-4a24-9d29-4f3609cb92a9",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "572bf28c-7d28-49f5-b1c0-83c0f5f4cf3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9da11d03-93bb-46c0-8fe4-08ea53311c1c",
        "cursor": {
          "ref": "b0ece3d9-23e0-4032-8a66-e657fdaeadf9",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "9284d8ef-7701-45b4-8f09-70d182121865"
        },
        "item": {
          "id": "9da11d03-93bb-46c0-8fe4-08ea53311c1c",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "8bc9cd19-268b-4c18-8f20-e26f74adef80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a3d0883-2a33-4ab2-bcae-d947f3d976d7",
        "cursor": {
          "ref": "20d6070a-63f1-4c7a-8ccd-b700ef7f62b8",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "97c92f5d-9d02-419e-b166-85345cd7b46a"
        },
        "item": {
          "id": "5a3d0883-2a33-4ab2-bcae-d947f3d976d7",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "29daa252-e20a-478a-80b5-c0e058a15ca3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "328c599c-8935-497e-8ace-89cecf2caccc",
        "cursor": {
          "ref": "47bedc65-7726-4087-a85b-bc1fd993e27d",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "d91cb948-69d3-497e-8fad-a8bb964361ff"
        },
        "item": {
          "id": "328c599c-8935-497e-8ace-89cecf2caccc",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "7f8f4f50-c8e1-402f-8c78-09948196b53a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd4483cb-1bad-496c-8b3e-329d6797af37",
        "cursor": {
          "ref": "ead11aa2-58c9-4538-9712-996b7f9f7367",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "3022fcf8-a8a9-4997-9922-e39f08fb155d"
        },
        "item": {
          "id": "cd4483cb-1bad-496c-8b3e-329d6797af37",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "e103c86b-82a8-4866-803d-df52ef876cd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4367f7d-d775-469b-9a0c-4cefa34095cc",
        "cursor": {
          "ref": "03e7c0dc-f245-40a7-825c-485ab47a13f7",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "931e45c6-cd85-4b8b-a6d5-d06690be0576"
        },
        "item": {
          "id": "e4367f7d-d775-469b-9a0c-4cefa34095cc",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "fc8b45d5-1014-4404-8739-2b1112cd3cf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa891d34-f08f-4889-ac0b-9b262524652b",
        "cursor": {
          "ref": "44dc4390-384b-4f6b-b804-afce28413dc5",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "45e012cf-2bbd-43c5-af8c-fef95fbd0edb"
        },
        "item": {
          "id": "aa891d34-f08f-4889-ac0b-9b262524652b",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "3d1a6805-f470-4c69-9811-f976dbf7f06f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ad69098-7546-4ebc-bd22-5b311388970d",
        "cursor": {
          "ref": "6894be77-1738-469b-a2cd-f110287d9808",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "0cde81d7-cf20-4ad8-9d23-78b3e24bf9ec"
        },
        "item": {
          "id": "2ad69098-7546-4ebc-bd22-5b311388970d",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "cef9c6ad-a7ea-403e-8654-791165914269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5cdce9a-9b6e-4188-8556-e02c1c5035b2",
        "cursor": {
          "ref": "2f158949-2b13-411d-a408-68c5df3970ef",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "4298620e-d216-4d34-b649-c3b72a8ef7c0"
        },
        "item": {
          "id": "f5cdce9a-9b6e-4188-8556-e02c1c5035b2",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "d57c9ee9-ad3e-4bb6-9739-69d26434477a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ef9df7c-f16c-4f6d-ab70-2545214acfb9",
        "cursor": {
          "ref": "63d776a1-ba9e-4f05-bceb-b5d98d771165",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "d0f6cb2c-9e08-49d2-add4-25a75a0ee4b6"
        },
        "item": {
          "id": "6ef9df7c-f16c-4f6d-ab70-2545214acfb9",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "cb4521f3-e649-4d10-999f-7f25104fed58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d45fe2c2-66b5-4e89-bc3c-8b923d358150",
        "cursor": {
          "ref": "e910cd22-1e89-425d-96fb-e1ae591d2d96",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "8c10671e-885b-42e1-935f-66ae64fcea43"
        },
        "item": {
          "id": "d45fe2c2-66b5-4e89-bc3c-8b923d358150",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "0b19fe16-558b-4f83-afcd-5bac450c0e7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ca611ff-ed9e-4718-afaa-a61c9a8364b6",
        "cursor": {
          "ref": "f171eb47-bd1a-4c9f-96e7-f44f29643731",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "9010ab67-c686-41c2-9462-bda587eb3509"
        },
        "item": {
          "id": "0ca611ff-ed9e-4718-afaa-a61c9a8364b6",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "ddbb7302-aec7-4f3a-bb9f-7c6790aa90bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3e7d5d9-5467-4253-b63e-99ca53e38cb3",
        "cursor": {
          "ref": "ea9eee76-ec97-46dc-8ab0-1588fdab2c17",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "2d17dd24-c885-41f5-b5b6-ff3fae2cd002"
        },
        "item": {
          "id": "b3e7d5d9-5467-4253-b63e-99ca53e38cb3",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "9666b13a-4564-4823-8b48-ccea8e82dfd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3863c53b-ef1a-4ee2-8f51-153bd48bc1f0",
        "cursor": {
          "ref": "a3a5ee10-ba1d-4589-ac9e-2bbd3da758b6",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "0dcec11e-cbab-4e98-8e92-f423d5cdc66a"
        },
        "item": {
          "id": "3863c53b-ef1a-4ee2-8f51-153bd48bc1f0",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "af495ed3-6db3-4066-9a50-931f4db075b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e74e585-55e3-442a-aa20-d43a6606d139",
        "cursor": {
          "ref": "1ed95514-8895-45f7-9ab5-646b15ea8a2f",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "bb6e593c-0dfc-4db3-9202-a92d9d794141"
        },
        "item": {
          "id": "3e74e585-55e3-442a-aa20-d43a6606d139",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "300fcae0-8c7c-4bfc-a3fe-1be81736d51e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9950b87f-6225-4ff2-923a-df679b8b9ad7",
        "cursor": {
          "ref": "9c1a2adb-15f9-4de0-a441-b0a71c77e1ab",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "c32be0b7-6ea4-460b-bcfa-d22137980c1a"
        },
        "item": {
          "id": "9950b87f-6225-4ff2-923a-df679b8b9ad7",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "13eabc19-7bf6-4741-a8f5-c6d372df1308",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f37d0b90-3d7b-4787-ae13-87170e8cd2ef",
        "cursor": {
          "ref": "c06138da-a9ef-4db4-915d-99dbac5b6ab0",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "ca591027-a224-47b2-bf18-4630d6251dd7"
        },
        "item": {
          "id": "f37d0b90-3d7b-4787-ae13-87170e8cd2ef",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "0da73520-5f2f-4176-b195-aca42b31745e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37f0adac-9fc7-4543-9357-e7eef661b9bb",
        "cursor": {
          "ref": "3519ea22-529d-48d7-8617-294119958fb2",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "ba38df49-3c7d-44f8-a9a0-921fed494ac1"
        },
        "item": {
          "id": "37f0adac-9fc7-4543-9357-e7eef661b9bb",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "4fe25e48-3166-4827-80a3-4be6357874e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "024d88e2-654c-44d7-bd8f-c85e8564e349",
        "cursor": {
          "ref": "8668fdc0-49b4-4540-85d7-817f129b41f3",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "e2f03712-6ada-4d85-b10d-d66a02c99a12"
        },
        "item": {
          "id": "024d88e2-654c-44d7-bd8f-c85e8564e349",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "9e64d3fd-0b0c-4210-a208-928334e9620d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "532353a7-6979-41f7-a3ef-d91e3dcc3679",
        "cursor": {
          "ref": "aae8317d-4859-4c28-9b27-298679841876",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "5989f74e-d883-4d9f-a673-5083ace4c768"
        },
        "item": {
          "id": "532353a7-6979-41f7-a3ef-d91e3dcc3679",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "5fe9101e-436d-4ee9-b43b-24d8918a4062",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45437364-a8e8-4c18-8bb5-a72e744a0f54",
        "cursor": {
          "ref": "6fcd3b3f-01b9-40fc-99a7-50281c73b918",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "3bd083a7-ad5e-49f0-a5dc-893930100df7"
        },
        "item": {
          "id": "45437364-a8e8-4c18-8bb5-a72e744a0f54",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "bd6ab7cd-1f74-455d-b662-a59641b170b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16d2be2d-c7a8-4dca-a119-40f28b855ace",
        "cursor": {
          "ref": "0dbdcdf9-489d-44a9-8df3-7e9af8a60d7c",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "5af2e126-4736-41b2-8090-a4772e7ef7a7"
        },
        "item": {
          "id": "16d2be2d-c7a8-4dca-a119-40f28b855ace",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "728faf01-fb52-4dc3-91e9-f076eea2c980",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37032713-905a-4095-b881-b1ab1ba440dc",
        "cursor": {
          "ref": "01db032c-8a8d-4ce2-87fc-304f025a4ae0",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "0dead67a-7c64-4821-8dc6-4f543922cb5f"
        },
        "item": {
          "id": "37032713-905a-4095-b881-b1ab1ba440dc",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "fd35ccae-6ebf-42f9-94d4-894bf87a8416",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58f69fdf-3761-4711-87bc-9f7fc9d9ef4f",
        "cursor": {
          "ref": "d53cff61-ec7c-45a6-9bf2-2fa56c0a5722",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "963fc0f7-16a7-4489-ac6f-25da022b2ceb"
        },
        "item": {
          "id": "58f69fdf-3761-4711-87bc-9f7fc9d9ef4f",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "d26c4aa2-e15a-43ba-8f96-6ee49ae96cfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05db3ed8-8952-4b1f-bd4e-214fad1c549a",
        "cursor": {
          "ref": "0336a3f6-0be6-462b-b761-6cbdb95eb464",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "1f3f6c9d-66b1-45a6-8efd-87edf1af1ccb"
        },
        "item": {
          "id": "05db3ed8-8952-4b1f-bd4e-214fad1c549a",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "c5a99eaa-b6d0-4978-9110-d95ce60f0716",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f52ca1d9-0d26-4a53-8bc8-64aa2bc1b215",
        "cursor": {
          "ref": "5b0e215e-102f-4735-9783-f087a21fe853",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "e4304ede-6058-49e5-b48a-6c0e4e0395f6"
        },
        "item": {
          "id": "f52ca1d9-0d26-4a53-8bc8-64aa2bc1b215",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "bcd8650a-8595-4484-b10d-bdffc312870e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "045a47b4-bb96-4b33-90e1-3e6c24d0e6bc",
        "cursor": {
          "ref": "b9f245af-19c0-4cd5-99ad-e1d7e8616fe8",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "62cce1fb-df98-4457-8deb-844cd8471b74"
        },
        "item": {
          "id": "045a47b4-bb96-4b33-90e1-3e6c24d0e6bc",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "4ca66601-ab4a-4ce5-bf84-d2c531bd11cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1054b208-bf1d-4ec6-9a09-1944a1df1fe4",
        "cursor": {
          "ref": "5762c5f2-b22b-4705-a451-9431a2e48554",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "51f7d2da-5722-4344-87b9-5c955c69e2a7"
        },
        "item": {
          "id": "1054b208-bf1d-4ec6-9a09-1944a1df1fe4",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ac02ffdb-3eac-4bcd-a608-d56fe98a9842",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "818168f9-43b1-4b59-99ef-302e247cc64e",
        "cursor": {
          "ref": "cbc86334-bdff-41a0-985c-a20dbdff5fba",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "77068cf7-f6a5-4159-a393-2b69c3a2966f"
        },
        "item": {
          "id": "818168f9-43b1-4b59-99ef-302e247cc64e",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "4609d0bb-32d3-4543-b733-cbf01b6235cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b23af27-2bf5-495c-bb99-b44a6fd2407b",
        "cursor": {
          "ref": "df74687f-f5c3-4d63-a0f0-d5b9294afa33",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "2401a0ca-e629-43cf-937c-eafa297d5270"
        },
        "item": {
          "id": "6b23af27-2bf5-495c-bb99-b44a6fd2407b",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "6fab3980-91dd-4045-823b-1905d560711c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fad5c622-3ef3-4bfa-a1df-105d6b31632d",
        "cursor": {
          "ref": "2f5f9136-6ef0-4233-a1f7-5bb8f2f7ba65",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "a8971d00-1e28-4f15-957c-eb7b5313c937"
        },
        "item": {
          "id": "fad5c622-3ef3-4bfa-a1df-105d6b31632d",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "0091aa79-0e72-40df-9827-7e7d1b1e8eec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "633e90c9-e5d0-4644-a3c3-a627d011382b",
        "cursor": {
          "ref": "df28efce-8ec2-4a71-ae7e-1b8cfc0ef53b",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "47dcb8dc-5bac-4c2c-bbc9-faec5f7f26bf"
        },
        "item": {
          "id": "633e90c9-e5d0-4644-a3c3-a627d011382b",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "1e4272b6-936b-43d0-be59-1171fbcfdced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3550bc9-05d4-4044-bca9-95f344336238",
        "cursor": {
          "ref": "e1632fe0-385e-4a3c-bebb-f3d7067ff8c8",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "b7ee8ae4-08d9-4158-8db7-95f8ca58edbc"
        },
        "item": {
          "id": "e3550bc9-05d4-4044-bca9-95f344336238",
          "name": "credentials_verify"
        },
        "response": {
          "id": "603e52dd-d727-4443-8b29-66df5cb3c1f2",
          "status": "OK",
          "code": 200,
          "responseTime": 772,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "316792e9-f3d5-4fb8-8453-e7a4c187c039",
        "cursor": {
          "ref": "24c46b9d-f6ad-411d-827b-3439351494d5",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "b7ab340f-8884-43d1-82e4-5adcbdeca7e2"
        },
        "item": {
          "id": "316792e9-f3d5-4fb8-8453-e7a4c187c039",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "b13309d1-34c4-4506-be8e-0c5e8843a49c",
          "status": "OK",
          "code": 200,
          "responseTime": 1159,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fe1b7d5-db0f-4835-b4f7-eb95885df9a2",
        "cursor": {
          "ref": "71bb172f-8478-434e-87b8-b83cd3742dbb",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "717373a1-c523-4de1-84b7-8d4d4c9a8283"
        },
        "item": {
          "id": "4fe1b7d5-db0f-4835-b4f7-eb95885df9a2",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5f71ad53-c84b-4cc9-bf5e-08e028e2ec09",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fe1b7d5-db0f-4835-b4f7-eb95885df9a2",
        "cursor": {
          "ref": "71bb172f-8478-434e-87b8-b83cd3742dbb",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "717373a1-c523-4de1-84b7-8d4d4c9a8283"
        },
        "item": {
          "id": "4fe1b7d5-db0f-4835-b4f7-eb95885df9a2",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5f71ad53-c84b-4cc9-bf5e-08e028e2ec09",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9931d1de-e957-4f43-8b9a-e19c9bf1c412",
        "cursor": {
          "ref": "545fc34e-f063-4c91-8aa4-ee5ab96123cd",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "412bd309-ce8d-4e28-9df4-57dbe0a49c9b"
        },
        "item": {
          "id": "9931d1de-e957-4f43-8b9a-e19c9bf1c412",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "7e3939d4-2db7-482f-b3a6-fd1ff904c288",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "899d6fad-d30c-4609-a7f4-901f0d81e1b6",
        "cursor": {
          "ref": "36400c7b-1ddb-43e5-b48f-5c481ada38d9",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "87b8c1de-3a5a-494a-b3d7-6259a0b8cc31"
        },
        "item": {
          "id": "899d6fad-d30c-4609-a7f4-901f0d81e1b6",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "f58bdcc2-fdef-488d-b7fc-22ac85c027e9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}