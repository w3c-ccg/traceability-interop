{
  "collection": {
    "info": {
      "_postman_id": "faa02ea8-9433-45af-b9a7-893a98130da9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "08c23561-c403-4766-8985-a732d6252ac9",
        "name": "Clear Cache",
        "item": [
          {
            "id": "4c357708-b664-4449-a43e-4785909b99c6",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "69b68351-39cd-46e5-a3f0-b34dc118b0ae",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7968a915-5d66-4428-8399-7ede254ce4d9"
                }
              }
            ]
          },
          {
            "id": "d657ae3b-861e-46ce-9f2c-1ba5d0196a07",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e87cd6d4-2a03-49af-9f94-9ecf1eaa4359",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "16cf6c67-82e6-46a6-9d9f-b3b84b1167ff"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "105f24a0-dff6-4579-aa98-2d9fce3269bb",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "ab85e611-36ee-4c64-824b-2477536d34c5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "16532d2c-fd68-4bb6-ab2c-c9016f9c71e1",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a4c2a646-ded4-4c4a-9af2-b3c4230a2a6d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2e6cda1c-8f9d-4e22-9d16-fe47dc85283d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4952b4e8-9732-4364-87a3-298897c059fe",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a9a7618a-acb0-42e8-a019-dd0eecedb1e9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b7b7e4f7-2801-4714-8a2b-388fa6083040",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "df05e053-5d96-4cda-853c-08916ccb5aa8"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9e8d7e9f-6981-4db1-8865-fce41ff25939",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "4ea9c354-3a9f-4c1a-92b5-01254d08f528"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fc1189d9-15e4-4d08-a203-d9db9f6c0716",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1f86651f-84e4-4bff-b795-aaad43489969"
            }
          }
        ]
      },
      {
        "id": "6923931a-102c-4807-ae88-bca8084de4dc",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "0be46c83-c988-4233-b3ae-072591d829e2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e287425f-2164-4d0b-9f65-2d326071fdfc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f4392a52-ba01-48ed-bfd7-13b77343b12e",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fbba411-54df-4fd3-a5b6-7ccbc62ab7e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3863d0c8-d416-4684-ac2d-5afb30c9e487"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed59a0b7-67b5-4930-9793-40f4edb138c9",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5791562-c3d5-4df4-86eb-ba9f5703f717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bf81401c-525e-410e-be2a-550b11d32aa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73f496cf-5d0a-4211-91e6-171e154bb3fa",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f1237a3-15b3-4c52-aaa5-484b625b6456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b64c7e5b-6db4-4c43-8904-5401d59475a5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a022e5e9-b5d2-47f1-865f-0f92c3518f5a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9e452e06-5b02-46ff-905d-2547ae53cfa4",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1d62147-db88-4852-910b-cc3cbe04e702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "af92e360-7692-4541-bf70-7fd8d75f9d09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b3c6827-61ed-4ae7-bcd6-d3637f7e4f81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d2da1ef-5b6f-46e4-a7dc-bac07c71e050"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "411bca70-18b4-434e-811d-c8228a6829a9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b255760b-f494-40e7-aa69-56ff5cb66faa",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "58a9eb6c-6000-4805-b9dc-a19767d3d98f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "9b2f47c5-18c4-492c-a427-e11632b0627b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4e50c488-60ef-42d3-979e-103541b07ddf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "3e95fd4e-fdfa-47e3-badb-d48932b77d74"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e3bf2cd5-c450-45a3-8029-1f1c57077b01",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3b90a46b-6c64-4248-a853-19603fb89e09"
            }
          }
        ]
      },
      {
        "id": "6da6e36c-b546-43f7-9c06-efdb1ee97cf8",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "dfa2d3a3-8eaf-4268-b42f-0b0d9ff87c91",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e06ca4ca-ead3-4e83-8da0-785e5233ac07",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "8ea9a94d-500f-4454-8c88-43a3430f3b48",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a17a3e1b-2942-43b2-89ab-991c394a46ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dba9bd2c-619b-40d2-97b5-4dfd6991487d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9da26bfd-56fc-4232-98cf-b8e5dcb78006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4985d426-9cf8-4133-9b60-89e965d256af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94f947bb-c599-417f-bca4-e0567206d02c",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd6a9cca-564c-480c-8b96-80992fdd3d04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "101f8eb5-cea4-47da-b0a4-c9c938a744fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3c0e210-da88-4917-a1af-62131887ff5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c2de3143-460d-4952-86a7-2eb938a9c385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f01b45b4-9d61-46cc-9d30-1fec27d8d124",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71761304-5ca1-4b6a-a35c-70f333999e80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c96978c2-fc42-43d1-8544-fce4f3032d2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20cc935f-23e4-404a-b311-a7a4bf20b4b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d42ae962-8b13-444d-8a12-b6e3772b9f51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f12226ac-e8ea-46ed-8f1e-d2f5a9a239fd",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d07b0c5f-4477-491d-b97c-703d9d63a07c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "463d461a-6ab4-4363-b9b4-bdbb5cbe7f26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "651ad39d-412f-42e7-982a-cc3d99505c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "09f21e44-d96f-457c-9d50-124d91db0957"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f7706ec-9dce-4e6e-8286-53bc3aa48b33",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61318715-f656-4fe2-be4b-6a8b4b2bb9cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bd206ea-c7d8-4f30-96dc-d02f4b5bc3d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c679779-1536-4eee-a6a7-e97995db2cd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7e1c043d-0e19-4682-9ccb-ae77eb6604a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e937bb5e-fe22-49e9-a176-3562f01815fb",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81553c34-f6d2-4c1f-96f8-1b8b6d02b08c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9266f583-e88b-40b5-8cf7-33a1a67bcbd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b6f42d8-a97c-4f54-b114-e1b85e055e07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ffe3e364-2f45-4e0d-b841-b2f39e7db4a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "329e30af-d07c-4076-a3ea-6f4d56ae49c2",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94670879-0618-43ca-af3a-d1e77351963e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb79ba60-dbd7-44df-b2e3-15833c75c7b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf5fb293-7ab0-4e80-a077-159988830ac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8cb08fa0-3256-4495-a82d-e2d7ff542d1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99ad703d-6030-4249-95ba-73b5b8bb27d6",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7d570ec-5959-4f3d-a693-4f9a735c9282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17b40455-c943-42cc-8c1c-96b202884039"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f89e662f-7056-43da-b167-f9533a388f85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9554d644-c5de-4acd-823d-d518f4f43b24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5564c146-e6f4-4d86-b5d5-50d04180c2c7",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3442759-dfa3-42a6-9e42-5d131a44cede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c993b400-c42d-497e-82ca-2fd0de73e2c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "662b1296-68ae-4a08-81a5-3ef3d9b7fcf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "936a1188-fe6e-4c3d-93d2-b6fee790fc02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f36cf5b-ec79-4f6b-8843-e04a8d1999fe",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cada6cc-dcdb-48ee-bad9-ad8c1b3d8129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf75d13f-b211-4e26-939c-cfdad64bc9e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "686c772f-45d6-49fd-a193-d03ce5fdbcc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "836bce79-fb25-4afd-a995-3c86c895e817"
                        }
                      }
                    ]
                  },
                  {
                    "id": "749e952e-ed7e-4947-824a-22b7dd27357b",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92f758ee-51f6-4d3d-85f4-f49e1663fdda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd65bc6e-304e-46ae-a6f2-ab79b5eb165e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6eb23cf-922d-46fa-9140-69879dc0c4b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5c605372-a266-4961-bf9b-5da085ca6962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b5ec661-617b-4186-a557-0f459eb3c4c3",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d58cd2e-816e-484c-8b29-623174862e15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e9a3e8a-f126-4061-9485-0992ccd914a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b3cfdca-6d8b-4481-873d-8c25ca9a3e71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3dc8f71a-2c70-48f1-9324-adcd1d8313fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5035ee82-4495-4ab6-9bf7-4429f04d15c0",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5bbf758-58bb-405b-823d-c0ea9f02ec87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eead1049-3aee-4019-a664-389ccdc18bed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bee88d5-1c8d-4044-ba6d-34d9920b5ebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a5e2b5f0-ca09-4926-becb-a9ea848cf2c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4e1776a-bd28-4e16-bfae-ea2e5583fd08",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9789f724-8cff-461f-a60f-c8f762b61b2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "690bc56b-efb1-4bfb-9b7e-ba545bb26742"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa44bd36-d654-4c34-9eff-880ab91f5670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b95c208c-fbc6-455b-8607-f66c36c6aee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29dff434-80c2-4c5a-99f6-0c9ab1111ef7",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c075e1d9-61f2-404f-a48a-97632c53a9d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "326c2b8a-d94c-4ff2-97d1-4499385bbeed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7792080-2f1d-4b7e-96cb-e5bf0a251f2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "509a97f3-8a59-48d2-8f01-f7f892f422e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2399f0e-fcf8-44a4-b26f-c082f4fc1f59",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68c9cee0-fa7e-4669-97f7-46adc64a8b10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6eb3f4a3-2663-41aa-96cd-56e1d79eeb94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb002522-8f18-4859-870f-7ae938f8c9a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a3f64ade-0af5-4593-9a5a-9712cd47edcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1825492-e5ff-41ad-a635-7d58dcc22136",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bde11368-92d4-4469-9f0a-326597c246ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ea5546f-6099-4077-ab44-0a3241eed195"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b665cf04-9a1b-4dca-9f8a-2514ed7f436c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fd24da01-999c-441a-b051-3325312d6cae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61c48c14-f0af-4191-9949-4bb1b3116dc6",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3f34b0a-8294-431d-a444-3d90560f57b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f84047e-8783-41f9-9b51-11e5bceddea9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62151707-83a9-41c7-84e0-070cb361b507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "433f98f8-81f1-4ae9-a71b-9c00c94ed1a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5a3e620-d206-4f51-befa-752cbd6eedd3",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b7f5bce-a0fd-43b8-a00e-1fd6106eb159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6025f0c4-28fd-4837-bd27-aed7e0d4a92c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d6d2ecc-23a6-4f1b-9348-15de192eca14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc87655a-ddcd-48f3-9b28-a9935300bf2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f674091f-3873-4472-8764-e1594f607d97",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bd46aa9-3b9c-4b5a-a93e-348c5af51578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df53dc45-18cc-48fb-8a4e-0c67e31b0274"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e20613bd-6920-4259-a399-983b3b362142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9dbc0ac-5e00-4a48-9fcc-b96ef7f72514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f38e9f2-f2d9-439b-a388-8d6c7879eb58",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69e57af3-9c5f-4197-af64-36f6105bd593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d04d913-90a6-4d14-8081-ff8472179308"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2989f6e9-5f7d-4bc5-96bd-d9cd30dc87c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7373f291-67fd-46c2-b3e0-17ec43aaaad6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a43b56a-8750-4619-9d2c-3872466d7039",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71d82496-09db-4ad4-9dc3-ead547322b70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce773088-ef7e-4e25-a7ad-9b027df53f68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b6626fe-1e74-4fc0-b2dd-96de8e45c0f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b99c80bb-d092-4673-a3d0-cfcb134697c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8306ae1c-364c-476f-b76b-4fd07bd106d9",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdc8700a-6935-4034-8abb-7941151f1637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8a5b5e3-fdf5-4f89-a7ba-8040048f0c9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a29bd4cb-c2d5-4c82-845c-729c94903be2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "197d9d8d-7062-45f7-a6d8-7eadadfb2b70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0270d3c0-9201-4738-b0d1-922041faf71a",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09fec452-8261-4324-8916-0cb66f342df8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "936d742a-4265-4cb2-b955-84f9620570be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a52be873-97ee-4921-b4f4-af37510088d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "09a3bec1-71b4-4b04-a227-27dd254dbe14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0f6bb6f-9530-4fd4-af1b-9b33a552c800",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83cee6db-bb31-426b-9f81-d6c29a5cc0f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2065d57-4b77-4198-a908-e07efbe12a18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d52c2265-de92-4285-a775-aa163771b0f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b27a335-c616-4598-a4f2-ee490424f610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc35a3e5-ac58-4237-9fba-9a499fedb417",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c043104-3f56-4ab4-9713-35dbc38c1390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4bcb34d-e817-4754-ba2b-7f7dbb03b2bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deb8d109-de63-433e-99ec-10ced26077c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c763b022-79a4-408e-8e33-9c98841e675f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "483bc63f-b735-4de2-84dc-bf9596d5a696",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11498d9e-95f4-42ca-b98f-f5c8775c2df3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4dee197-0aad-45e9-956e-a7a64c8720b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f8740be-ff04-4363-a0ba-fd5415821bd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b907dcaa-f0b3-4f17-82c5-e0623d879aa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9900c9d7-f836-4043-92ab-6b549d9db208",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74d730d3-1107-4c67-9c1c-894e256485ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e07974fa-a271-4292-a549-cd9cb927a618"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec89bfc3-fc9d-4b44-8553-3c6d2449a7cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca59b886-7a11-4655-ad41-1656948ed20a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f38cfaf2-728a-4a60-bfc9-d78733b368a6",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89f2949b-3b4e-4e17-9075-058ea9573a59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bbfffd6-4ffc-4744-89d0-12223c32582a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7225857b-1382-4285-8623-d60dfb71015c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f38a436a-a084-4fa8-90b3-255f3c1670bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adf826a6-5fe5-4fa7-9fd9-d2624b25ef5c",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99c9122d-266e-4aab-90ef-ea8ab8fc41dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4116e9eb-0078-46c4-a496-42e731f1d027"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fbe2d0c-b16c-48c3-accc-f350c67ac4f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "03401a04-f3e0-4c50-933d-ba9007f4fd63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "123c0306-e793-41e4-b448-ff780d4cc368",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "096f7aa6-a9f2-4a63-b203-1e1e9aef0e97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "725bfcb5-4f7f-4133-952c-221bbcd99104"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41fa21f1-27a2-409e-bd6f-b1dab56de034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fd8d364-7d32-4f4f-8a90-13a11c959fe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b91c728-98aa-4a3e-81ed-66e694fc8c92",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6bab89b-157e-497d-94cc-2454d595efa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7ba0d16-f80e-4276-a884-3971a4324e22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fb0054c-6803-4535-85dd-c3d4d1a77084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "83a63e03-548b-4988-a0d8-4287b19e4457"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9037dcef-775f-4b22-a948-b13bdd6b42ed",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88c711e7-d47c-41d3-9558-7a6c6770edd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9dd8ba1-aab9-4346-afb7-7b6e4d63b6d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "782c064b-9945-4b2e-a080-bd809e4b5583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e8549a5-15cb-4e78-9482-712dc676d4a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c51cdfb6-1b18-47ad-872a-4f6579740e36",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11a562a6-8896-44c8-a9bd-add9fbfa450a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eb14f66-36ae-4617-a4dc-8a4318106740"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d916632-7cc1-4486-b8a5-0fbe326ac83a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "35f6bd8c-be18-488b-a114-d3b8eb08432e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84c52464-4115-452f-8ce8-260c43024649",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc3d5df7-c234-448e-b0f9-b92ea89fc46e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02c6ea8d-f360-41f7-944e-10317b514a37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17784af2-c1ab-44fe-9cd6-3ed149247088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "acc7a0d3-2a1f-47a9-a6a9-b2341b93120f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3d1af16-4ca8-49a9-b41e-42e5ded3181d",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "475990f8-092f-4c35-b492-c5b614ba0eae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "422452e9-19fb-446c-9751-e68b05338816"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2b15cb2-b9c5-498c-be4c-df8b541c8255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1d84089c-a74d-426a-aea6-3615cdd428d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b09c93c1-57f8-4fb7-b57d-2f0624e663b0",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d38b133-66e4-40e0-bf2a-4c952390c5ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29b3e957-b7f9-47ab-b41c-1a2cf1959b82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fe096ce-762a-499b-9dea-400c7bb8a261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "13c526cd-ebb9-46bb-9c03-571785169817"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f42e451-b148-4f2f-adc3-596e3713f35e",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80fc5a9f-58a5-48b1-bd82-7f87a3935ad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bb12bfb-458a-4bbc-bae9-9df2949c1aee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a1fdc29-cb73-4347-8e5d-a80fd0562d65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b694c433-3092-4de4-902b-e2d98f5c70b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b02900a-3dc3-4495-bceb-364d3a1d268a",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "080b3fee-2384-43ef-933d-501b5c359303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d564c102-25e9-4daa-9309-c1209fc8a6ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79b64124-1a6f-4a98-83b1-a73c06d66460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0d95b0d0-92c1-4264-92f9-bb4261f75749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38032b52-a543-46f4-aede-f3d3b8d50bbc",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15071e45-dcfc-4f92-a548-e6fc3b343c5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2b6c693-a922-479e-96b3-4edfa1fbed58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "462bfd66-dc9a-4aed-ac17-5ad8fe07045a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a0b0456-2378-4cc9-8edc-44c30d8fd37d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2abe4bd4-2d3a-4235-9221-05fffea97619",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3793d5ab-491b-499a-a1d5-f45c60ee5977",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06e52b23-3694-4f9f-99fb-fea1e3e6b401"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e6627a2-20f3-41a7-9845-04e8c08b1359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3063b4e-7fcd-4ce7-a73e-331048342aff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f65766ab-a826-47ac-89f4-fa2dccf554b1",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd08ba13-1c03-4241-8665-8a4f274557a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f2f1628-8d5e-48dd-af03-e63b916a95c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4d3e485-2e04-4f56-8c8f-659838b81031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "69e30801-04f3-42b7-a757-b36529a09664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52c33076-09e7-4426-9a87-702b635e404f",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c16909d6-86a9-4803-a558-66cefd5a23b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9aa0459-7caa-4ffc-81af-f5eea61bb9a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "948fde44-3bb3-4ca4-bf67-806aa36fa7b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7256b9c8-6561-41f0-b868-ede80c2c8c9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef28bd24-0a7b-43d7-83c8-afc0010ae15b",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c69e6696-4877-4ab2-bf25-01936a778358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4878e980-290f-4300-ba79-afd4a1018c2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24eb8efd-b82a-436b-ac99-545014b39eff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "dcf0ccb1-4e02-4081-9435-30a5a0c08f73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be3098d7-e5da-4651-9d12-3c9221981e5f",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41db2c88-eb67-4596-a220-d33a9077f11e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8532506d-4ba6-4e41-a418-6355bfe2adf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cf4167b-bfee-48c7-bdda-9cdffda670c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "61485b37-e90f-4fea-9244-96f681e23719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "291e6ae3-664c-4b5c-b539-0d9776c92381",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7122862d-025e-485c-9e1d-717d170f4008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d73d7278-016f-42aa-8ff5-e6836d99c68e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b48018a5-88dc-4111-a9a2-6b10d749ca84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bfcdfe08-5748-4598-9665-526033bcd85a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a01d32a-63e8-4d8c-b5a1-3b8557d70fd7",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99f1cbb0-2736-4b3a-b385-d65d8343c47b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6f4a5a9-a44e-4488-a124-5cf23b266a60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd027a32-43b7-4b93-81a4-ceb0100b8f88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9bc689f-1bed-4241-8242-cbe53fd8a6ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db9e10f1-9ca0-4a92-9fe5-b2114c80e938",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "405f031a-501d-4df4-982b-d14a0cf087b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "025e178d-044f-495b-869c-26ca6edcad57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6068bd5-16c8-4bdd-b79c-6dbb5cb50271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "807e4aee-3654-48ce-9c76-9feb7cb5588f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80bf87cf-a08e-466c-af25-a5ff45ff9ef4",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b5e47a7-4e3d-4c4a-abac-51bd85755cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3641337e-166f-44e4-8165-97cde21e3892"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c108a575-fa64-4ba5-997e-a1ebabe8f006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a22bfa65-9bd5-4bbc-b365-4797efa629b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c55c6163-c62d-448e-ac27-bdf8926eac6e",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0280def5-523d-4792-b171-f41b33f75c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c059f5e-4b0b-4fc8-8ccc-8515a85f1622"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66bbdebb-6a9f-463f-a662-ba9b46bb0e7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "49c6052a-f86f-4c78-9d92-8be370c795c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76c792ce-5e88-45da-ab2b-3e1c2e2b8436",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f316941e-3204-44ca-a54c-cde1089ad84f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a63cf9a-9e79-49a1-ad38-362110542c86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5c5760c-d78a-4e1f-8d4e-37121a4bb38c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "46d4ffca-68a7-49eb-9a5b-e8b4e4e9686a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4b0b287-372b-4f81-9f44-7a6906a0156b",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "268ec329-606e-4962-9814-8ead8ee5e01f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55e70e23-cb25-4329-a83a-2a0dfafca906"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ce5a19f-302a-45ad-a3dc-5142536e5f1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d559f881-a483-4ccf-b258-0795503e598e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8868a95-9105-42ca-93f6-e8af9263ba12",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8a5c44d-96cc-4560-8bc4-8d8aa572bf30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c7ff83c-ecd0-4f5c-abb1-524d5405cc02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c33434d-2370-4e0f-b243-759476220629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b760070-0c2d-4bca-a7eb-4d9dc5afb843"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38eb6964-e7c5-468d-997f-f1ac73076c86",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83b802e5-611c-46f5-9e28-f2c7b8ad3a22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a4497ea-e43f-41ed-b646-54aae3c4b9c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d590e0e3-5180-40ca-b410-440e3a214bbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "586de640-29f8-43d0-9a83-d7c0921b2828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff95e277-039f-4589-9292-2e9ece1fd754",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "537cd355-1cad-48ba-9ae6-a83d66ac4076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4652fcff-3bd2-485d-8491-23ab1948d3e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80d09b0b-c0b7-43f8-a1b5-fccc9d42dcd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "138ebe08-8224-4170-b80b-b0dc60255c17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a8bec8c-b5d7-49c5-b158-001e45fc1330",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f74eb043-0687-471c-8517-8c43a36eb78f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0df9302-fc9b-408a-b125-bf62fe664f6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ae65002-4077-40b4-a6d5-b821f85e42df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "1d2dbaa8-f446-4497-9411-fb6e1b0d2400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04023c33-cc55-454a-b6f3-b280935ac613",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47790792-12c3-43a6-86a2-9a9890dbe459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b3ae033-8683-4d08-a2ce-c0712f16c030"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c461ae53-cbd2-41c1-a4eb-505d9e4811f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ffe0ae2-a339-4f1c-9539-a9c9875500ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "899006a4-350a-4769-a1bb-6f765cf9621e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91b393f9-75a5-4342-b9b4-c7ab827e6dc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58aca387-e055-4ac2-84b5-0421ce890755"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a25c93a-cbb9-49dc-b839-b21acf448bfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "45faa088-d63e-4f09-aa27-220e7c6a9c1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac7ac4b8-0010-476e-a51f-9c0c36dd1094",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6adee3bb-4342-4798-a672-0382202bffe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ce1ba91-087b-4fec-b2d1-4592ecd505d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95819a53-54c8-4a42-a5d4-2265a07244ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba9f6082-5a80-4609-a7e6-364982b56577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58443780-c70c-45c2-8e4e-e3778f737b5d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43eb7de0-5e5d-477f-95a7-3ca0566ebcbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6cd187e-387a-4d13-85f2-9feed72f455f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e03e1e7d-4b1d-4533-a7af-134f1c70f040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6c3149a7-3968-4a3a-8acb-4245e04f07f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c32958b-a53f-49e4-a9a4-b8adae661b40",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54303519-b7ea-4084-a8ef-3e8639589c8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f58e3d4-b3d3-4796-80bb-d06afb122544"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2a54f85-627d-4937-8cfe-c9a27ffcf701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4efbe1b8-2539-4d5b-bf20-a52748c1d8ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a912cc8b-063f-4f7b-be9a-50ffb2e07ec7",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77e39bd5-b6f7-4c00-8920-24968250e1ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e740692-d04d-4c13-af6b-0af6fc64be06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0366b9b1-9b73-47ca-8f68-01e0fb28cf80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c97bd93-d58a-4f78-bc79-3f13f5e7203f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a9884a9-9646-45ee-82ca-c0b2b913bad2",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f377b9b-ac6a-42f0-a32e-48f9aa18c250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fb057f0-1595-4459-896f-bf7d1c01a50a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faba5f3d-8fc2-400d-a8be-048c89ed0279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "111fd3b6-60af-4e0d-bc94-9a720a184c15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0324a4b-5ce0-4fba-a98e-4c8bc072e042",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d4922d4-7843-4ec0-b52c-a33eafea8274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed8e431e-c977-4103-a635-1fdf9fe2ba2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "487876f6-5736-4aaa-95ee-fbcd49a3b4bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c144d60-dd33-430a-9be1-731d70c5a7fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73154a50-df5c-4c15-9e00-80e2e75f61a5",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28b2dc57-2e07-412c-87f5-b3f9e8b7d3a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f8ab57b-1c9f-46d1-9e2b-570637df8bd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be35d1c4-506f-40cf-a370-39ee02a334e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b10aaba1-eae8-499a-947f-cc6b4523b8e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4506bf3e-b342-44ed-96c7-4c2104b31ea9",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25844d2f-a1b7-42b4-8b56-13052ff5f0db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db91822a-fae9-49d3-a098-92ccb3b35271"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e71ef0d5-a216-4944-a386-affe90f356be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "022b8d58-2ec3-4149-884d-bf19477f3913"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f33241f9-2385-402c-87b7-253b8a32af86",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78dc2642-054b-459c-9f69-3875299a3f2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7d50ad4-fab4-4381-bd33-5d8e1f176061"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c020a3f-c824-4b5f-bd93-11d763685191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8bdad943-ddb2-4360-bc6a-4ade4e73e99b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fd4caf0-5992-49e8-a78d-11fb5ae4b759",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dd41f0d-4ae7-4504-928c-12cb8fd69454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf690679-24ab-48d8-8215-c789e8b49fe8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ee16897-f58d-4c65-819b-51e6349d6593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0381d2cf-0c85-4d68-b6b5-b239d4164338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9133bbf6-1467-4ee6-95bc-55b53556a9cd",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6788bbad-2ce0-443a-8dc9-1881d71f8218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d69ce26-f4d4-437f-9679-8d19dfb15c8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70b6d0a5-9863-4683-aa74-012980b02916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9894f8b-bc9c-4833-97a8-391ae84d5db0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13f010ed-e712-4005-b14f-e739fbd1b4b7",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7d67062-15b7-47f9-b525-e4bf905b616d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06b699fb-314e-422f-954b-0e30b13317e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91a834f2-ba4c-487e-866d-ba3f16e5dc81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d94f6c55-7113-49ed-b7db-5caf77d1f97f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22b5d364-2525-414d-98d1-1d0b948f5584",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c64f1bb2-9b72-4d54-addd-1c3e078ff8d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c560ba70-0876-4bcc-9686-e7d2a0f8bb69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbe9636e-5bfc-4ed9-9cf7-49695c675bf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6dee58f3-2cb8-42a9-a880-ad2d19965076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28852b05-d85f-4545-ad04-e3ca9ecf84f9",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baeab920-e10e-49b4-9a0d-a9d3c9b869c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ba83df5-9541-4c9a-8e2b-10bc444bbe05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2cc26a0-6899-4cce-9f2a-d18a8229d9bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "41e82f3c-8b5a-4773-9ec9-83f3f75c8c0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ea63117-0434-4a74-bdc4-e6cf3e4470b3",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4994aebe-e4e4-4d8b-9b83-567eab5b1369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9de6bca8-ccd0-4dcc-8193-61df15e3b784"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9845afc4-0509-401a-a134-ad4a809f4f4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2ecc6747-c676-43f0-b3a2-ca830f683241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac2aa52b-6131-4676-af19-89cdcb064d79",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de8107b8-4ba5-417c-afe1-32a7f7490af5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f66056a-597d-4f06-8e03-a89750943416"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf2ff60a-fb56-4742-9b5c-c3d5ef5123ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "546fcea1-8205-444c-8ae3-317648920382"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff2414dd-466e-428b-bde5-076b4fdb3e65",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b9e9e7e-9d79-4d65-bfd7-23dae32b7c53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41dcecea-82cd-405e-a6a4-50408663635d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "464954a1-0b03-4527-b5f5-f7e3e9902b1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "aebec59e-dc54-43f7-8570-66860898410f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eb3fc45-5155-45cc-a986-aa418078920a",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "103f76ce-007d-4ba4-af41-f596ff30ac7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5c725e9-3955-4131-9a35-d19ff77a63d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55e7139e-d843-4f37-be27-884100fe8f8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d2ac465-a876-4116-94e1-5c7afeea5fc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34631ff9-414d-4ef3-a7a4-3de929a2dd7b",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "007c19f4-67ba-4ac8-83bc-3afb863917ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ce3d695-f7e7-494c-9149-78d59b5d5428"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78c16596-096a-4e39-ad8b-7a6d0c1e8716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "491c3a57-44bc-4418-802e-40415cbe2b4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a182727-bd07-45e9-8f9a-8b07f48ce4e3",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3af7bb19-727b-4a24-a116-daef42925229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08f53b81-a8e9-4e37-8716-20fcaf7d7890"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d2a4061-8c71-43a9-bb9e-78f68cbad337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5c156ed-56f0-49da-8fc9-50773de83892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f1a0f42-825d-4f12-b276-c7391219fc5e",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c00050e-4fc9-47e0-ba55-2747ce363a22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffa023db-2f6f-4d9a-b6bb-6c243b4d067d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02b9d6a3-6b24-4efe-8082-d83af6ead44f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8d279a81-b93b-44a8-934b-55c7e65c31bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15c5b586-cfbe-45d1-9f19-444aecb5d178",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47ad7af7-aea8-43f8-bafd-b8ae3bee89d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23b4071c-d0db-49d2-a4bf-8dbc8b836112"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "111232cb-bb2d-4446-9bc5-8c730490ace9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b66107b5-0231-42d2-bcc8-47b21c4d2120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abd28a17-dc9b-4960-8cc9-b732dfce11d3",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2af6ab4b-7c1f-48ea-9b84-582ac6360d7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "330c26f2-8e19-46e8-8849-8203d0073f4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ff5620d-cd5b-4280-bd8e-0a1e98e11d7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "55c5663a-a22b-4a8e-9745-a4d73ae65dd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83429279-c487-4513-bf37-d7d3620f3fe8",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "103f2b68-0081-4665-83e6-9be438989847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5ca972c-cdaa-4634-b928-5ca8822398e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2448410-fd61-4ec3-a997-65dce183f43d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4601df4e-7ff8-4bc5-a8c7-0b6a820bb951"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bb35cc4-0f40-4a21-9c2e-5169bd5e59c4",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5fd1150-3935-4845-a630-15771308c798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c37acf1-c33c-43d3-a2a4-26ae3348f97d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "def4c33a-1c31-4c98-a870-22206833e95f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb6483b0-f67a-4b95-9911-0a62d46936f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c34fe1a-0977-45cc-8594-a47a1d38a0a6",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a7c7878-a1f7-44ff-b729-c8ee10728540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3003aa0a-6d20-4fa1-8f10-afe9c667c5b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab7c0e9a-e79c-4f36-9ca4-05ce7c611e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f5e3057-3463-4a62-8ee4-9d080cb2a396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fff86e7-2add-4b9d-a14e-e11251729b07",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "febac524-55e3-4a80-8783-11d0337c4684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbb2014f-fb3a-410a-891e-bee11c1fcf07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c0f7a1e-a66f-4701-8685-68c103b278c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "177fb041-4d7a-4648-a24d-5cdc64358594"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c63088fc-274f-479a-a50d-95e87489a4c7",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "604d7de4-1a59-44ad-86b7-da10d2f62c9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5d51044-4696-456d-bb05-4ae65e9d056c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4793ad51-d4a8-43c1-8d84-5ef64199e318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7fa0b2a8-5683-4106-b59d-adfc678a2570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0ffe6fc-edcd-4eb7-bb24-f31b3d5ab4a4",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c716eb44-7c24-4613-8944-d1a8d6f4bd8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bfbe640-8156-4ea1-8e96-d809d10594e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51d33658-9c2e-4666-82a9-b8ef105ce075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a8ca62db-5677-45a9-b47e-4da898119cb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75d82dc4-3e73-42e9-963c-492ef4fa9d4b",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7a23832-e13a-4a47-ab11-c4cf730c1138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d13963c6-37d3-48ce-8c5e-117f099bdb0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee2ece54-b488-4cfa-bfcd-d1aa69ad73c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7868eb5c-cda8-4168-a85a-e593c55b3f75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72df892e-1dc2-4dfd-93c5-9de01edb4cc6",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a623828b-8a27-43fe-871e-a6c3c2020f01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3afc209a-f930-4405-930c-834ed9c9e248"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cadee49e-36ab-4737-821a-a88bb0404c82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c6d32237-d9e8-40f5-b2a9-07b43a35cad7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2e998d4-5ae6-4652-ac4a-2c4bc5807a02",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0d6ff01-0502-4911-b134-8a49138d1702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e749d5aa-e661-4ca8-a27f-1200cf13f1c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a405bfa0-668e-4fc1-87f5-25c78ace5412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5a38bbaa-89b2-4525-8c6c-52b2dd61c5f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b132525c-12fb-4c30-ba55-acf995a24bfc",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5bfa93c-5a3c-4972-a9eb-470920e6fead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fb8b325-615a-4437-8688-7a6918e8f794"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c5282ab-7b06-41c7-8717-c5cd199cb03e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d784126c-b95e-4635-bfee-823c4dd6b1b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2effae35-df4b-4f6b-9b44-6b751ff3203f",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b16621df-91f8-43e9-bf18-c318598b6911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f3d2f124-b7e5-4691-8796-cf47b5d69d52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "569c49a7-83d1-484e-a7a2-4a3ed9a87435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e4a7d8b1-0a82-4851-8846-0859dab8900b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "68f6897d-30e6-4df4-ac2e-7dfdaf4ab074",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4f764af3-0134-4832-8507-2d353739b192",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "932c0899-9935-49de-9955-1ee41aaf26ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cf2ecd8d-98f3-4a3f-ba7d-197f92587638"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ed4c7a3-1c90-4886-be95-ad43fc44bd55",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5f4bfb2d-7302-45a1-8af6-09bb2b0ec88b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c062946c-cbdb-4588-9249-98cff1eb588b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8cfae51b-5631-44d4-a6fa-dde2f6be7c55"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a6015213-0382-4354-90fb-3b889880508b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aeadc52a-c16d-4933-8868-fbe3ae7c9a03"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2a15b4e9-fbec-4a73-ad85-f77eaf04387b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9070185a-d023-4464-9296-25e64b019362"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f85d0808-c974-40bf-a695-90d996f16614",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d7f5c765-1293-405e-bdcf-d627a7bc3084"
                }
              }
            ]
          },
          {
            "id": "f91dd3a0-657c-478f-b944-8605712356c5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "99523146-1cf8-450c-8c59-4844021ccbe4",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7cbd760b-aebf-45b2-a17f-355cffd3ba69",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8e0af6ed-ab74-4e70-b35d-9fe1eb22dcb0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d7016b5b-b02c-41c7-ba17-a95a406bcf86",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bde06ef4-c870-4519-bdcf-83841ca1242a"
                    }
                  }
                ]
              },
              {
                "id": "42b22991-bc82-46b1-87cb-6013ade83a11",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7ff3468f-a1a9-4522-9785-d594f2114f6c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "553715e1-b88c-4a2d-ae08-c2593e816a57"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "28da727e-6a1b-4439-97eb-740691fcbd0c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e85f438d-9f0e-43c5-910f-e90a1781f586"
                    }
                  }
                ]
              },
              {
                "id": "bb54f8f1-faf5-45f4-87f0-3f42b12aba97",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "914a7bb2-887f-421d-9f64-8f2be274b0d8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "efc29054-f525-41d1-9398-89a69243ab52"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "05666fa6-4027-4f08-b6df-a8820ec21fb6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8c0280d3-efaa-4282-838a-034a22ef00da"
                    }
                  }
                ]
              },
              {
                "id": "ba66da7b-79ec-40ef-90ab-b8f87198a401",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "639ad74c-3d55-4e54-aec6-1299474a7a90",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fbba4c4f-6607-4331-a1d4-7fc6236dc06c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0fa4cdcd-76a8-4104-8b18-94c12376769b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "83dde028-800d-48ee-a22b-239d2d21c1a5"
                    }
                  }
                ]
              },
              {
                "id": "dbb803cd-c082-45cf-94f3-ff1860d81bf7",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1be7080e-6957-4db3-941d-95dfcb448e63",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3859e8f0-f80f-4dda-9cf2-d2a4811013c6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "77ea2131-6094-499e-9919-d93a271e5c26",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "91467e1c-74e8-4826-bff1-6a4857b3f9de"
                    }
                  }
                ]
              },
              {
                "id": "b4486203-676e-429d-9530-68194672b8a1",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4852cbe2-3933-46e1-aaf5-731cbfa05411",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "113db9a6-810e-4817-939c-1fda2c9c12a1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1224bbae-a088-4d91-8818-ef1a20c512fe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6b04abf8-e74a-476d-aa87-6221788ba839"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2c625a17-c42e-4699-b2f1-e2e283a3ac2f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "15b90ac6-8d82-415a-a8c2-02c8fa48cca6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ce1cbf8c-4813-4086-b10e-a4f2bec2621a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "10d192cc-9be9-4624-8a3f-5d8b552c8861"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f546cf68-a774-4b8c-80f5-8902c4134a36",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "57455ba5-43af-4103-adfd-672e36208794"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "13304bd1-83d6-4048-a370-97b5772d4d41",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cc7209d4-db0f-4d96-9bdc-d222d91e37a9"
            }
          }
        ]
      },
      {
        "id": "d2d9fa39-abba-48ef-a908-ea7a262d4566",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "65dc77aa-1fcc-49a8-bd28-ff405dde9293",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a5cee132-d07f-4657-aa36-ba5df1d6bc91",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bccedd89-ba4f-4feb-b04b-86fd86f58e35",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e917c78c-df53-42da-b8c8-6b7d3eef7297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "658b4445-3be2-4ab2-a637-0cceaa8ceb2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "636f4d0e-bf46-4a3f-a5a4-03f9b09aaefa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "b12b685d-c9e8-47d3-9cd2-e5927ce9ce21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcef78d1-bf37-4bfa-8a13-10f173ac5190",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cc99c56-354b-4411-a596-688e7ac17f46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2741f268-b89a-4acb-bfe4-a68d4cdd0d91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c584211-5200-4a16-803a-0ed97809b070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa9d446a-a9b0-4178-a77b-e8d4d00acf4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d18202cd-a43d-4604-baf0-69037608474f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3806e2d-9214-4a4d-8b9c-51cddc67899a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e03e1e92-2777-49f6-8f1e-f0e31e784d55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6aff729-4ba3-44b9-b896-a30dbb785acc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2293e736-9c0f-4a48-9add-f96fb46fdd3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d2fe6c1-9ed2-40b9-9a73-3b601bbc45cd",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beb754c0-db71-4202-95ef-826ad2f40eab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96e444fd-b683-4b12-b207-91ee97a20cb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca9158ad-89f2-460c-9083-b5d3b66b1d09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1a72f29-d313-4d8c-adfa-f4c98f42f662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0daeebc2-b173-4348-8549-816c5c078bbe",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59d18994-f734-42c6-8cb6-866f7dd85b3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee90bdc3-6d03-4b41-861b-a1053289c725"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "053476d3-4e88-45a5-b058-281d084ca8f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "939757ff-fe71-4484-8af5-3e431adef4e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cf1b64e-0c13-4019-9b73-0e9b39eb9807",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9063eeb-220b-49c2-895f-d7b82d167a1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "726b2604-8556-4231-ba57-580dcb8da4c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6143b38f-a25f-4bec-a9c8-e36e3f61d434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dbe3fe6a-37e1-4943-809a-7a90bf076fe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fbfa016-d70a-4ea6-bedd-1bdafe5ca12b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac49749a-ffb1-4a0c-90ab-dc786b18631f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4b58548-5a6b-4afc-afb7-4e8116797efe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0901ad7-adc7-4be6-8af4-6fc0aeae668e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6aaa0bf-bd12-440a-8047-145deceb23dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc20b48e-57ef-416f-8bd6-20c35b9d8f80",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b76c4f6-ba46-46a8-b636-97879cfb6fbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1343594b-e996-469e-a986-cf56f03ddca2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfaf32a7-e7ce-4e59-9c48-fe55aa3dac71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "12b85804-1440-45d5-8bc0-bbbfa6e8eaf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "860dd912-6bbb-4e0c-9180-4f0ad13f52b2",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eebd60d-e87c-4d93-a0c1-986c305f0ee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6ab7b73-4c2c-4173-8505-681b001ee0d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14b7abf7-bb4a-418c-93cc-80642e6106bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fdccf508-e50f-4369-9549-f28043bb54d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c85cbe5-c464-400b-bc83-920a5a59cb31",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9559cd9-4fb2-42a6-8d76-e35c922fe2cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eafa4b17-b5e1-40e2-a37c-3b1011affc6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e9a5c59-d522-40e9-a990-400424d18366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ffbf71f2-642e-4187-9cc7-40f936b36831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfdf9815-1d6d-4520-9670-942e4947f879",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aba5560e-0507-45f6-8bd4-2e0f601d9222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19587deb-afb6-49ef-b5e9-7f78343e27d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "839a2c7a-adda-4ed0-9a0d-e98348c1e24b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "88d5cf58-ee7c-440c-bcd5-6242f7a61058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f35c0e9-cdf0-4f95-acc6-dacc8542fda3",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a7264d6-7f25-4283-b5b9-a8a8cefb30fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33297621-11f1-40d6-ad20-654b86d441cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24e95a65-0620-4e1e-b283-143910366df8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9ced70f9-7ecf-49ae-a619-a7abfad8789a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a2d64b8-fd89-41dc-973f-0fd5f971b278",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0c67f5f-0e67-46ed-acfa-53d8dfb16a4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6654bce-9b97-4464-9bef-4f06a6fdf99c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "028f41c0-4b3d-46bc-964f-60692fa55fd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd39f516-a1fc-4103-ba4a-ba038c8d7d59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8ef64e0-2763-4da5-99f1-cd28f1ef01b0",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc52cc0b-a33f-4ee4-8029-cdfb6143471f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f445ae08-a94e-4402-9ca7-988ab24d6cc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b55f1b7-2aeb-43f7-8df0-24c325deb03c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "53c2c0d4-4f7f-45dc-8e3c-cca2e0f32f6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65193b3c-6cbd-4963-ac91-019e611d6b93",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed75ba81-f429-4a62-807e-f97f32576e5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16afb051-8dbe-4b9a-be8e-f62e845a531c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e941ba4-ec2d-4435-aeec-ed4bd3512870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "306e38dd-f985-490e-8f7a-4f9101ce7930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e28a6772-7d95-486a-9998-20f4dd35417a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fc7ab22-2e7e-4256-ad41-59ce00f3e3ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3896c19a-4402-48a6-bb63-4fbaa9c40700"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52d5e6c0-0fac-4611-8f67-5369ca918d48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "648c759b-f9c4-4516-a87b-061c54e5ee23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b8852de-9afc-4f8b-b6a1-acaae82c0730",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f58716a-31ca-4c24-8281-dfe944947ca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "397968a7-e71a-4956-92e0-0679c2767d89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1987380f-98f9-47d6-a465-342dd2ece13e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "f68c1168-0a79-44e9-854a-05a1423bf927"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f104c86f-6022-40ae-bb69-373c1802ac27",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8608c2c9-7633-4c48-819c-6c4ed305bb71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49566dc8-d5df-48f0-a2ae-f30740083fd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "101822cb-4e56-45cb-a06a-a741b84d6db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5fe5b0d-8bba-4adc-b8f8-4d95944a36ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd6fc853-2377-4d24-b549-51258e0f2bab",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90c3c71a-9428-4118-8bf2-547942567c79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2a1559a-76cc-4a3f-a7ee-64502764ccd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "037945ee-89b2-4e4e-a13e-db9e058e3346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "935bb4b7-ad56-413d-ac65-98a118f571c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c5827aa-c11f-47eb-bac6-959308d4c297",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97a3e0ae-1bee-4f0a-b757-098918818db1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef875c27-9713-4c7e-8694-1fff0b7cd1dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "625c77aa-5a65-406f-a864-ee935a4569f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "65d24da4-a892-42b2-a764-94aa96a48aff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "806b707d-35d8-4b4e-99dd-94c5b84c8216",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0234de9-efcb-4c43-a770-b1828562f66e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9c7ef94-9121-4a46-8e2b-26ae529b9755"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b6b2a34-bdd3-4a1b-bbd4-26221c414ab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aff88be0-9d6e-42c6-a92b-b5860e7de6d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ac4dc5a-c267-4075-98a8-3d648c82f53d",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04be89ec-b1ba-4cf0-83a6-d73ad1a57880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1edac36f-d864-4c5d-b58a-c0916609bc97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed4b62df-52f5-4c6e-bac9-a9b90fc3087b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "44f406eb-8453-4529-a8e4-7c1184cc4616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d65543a-383e-474c-8e83-e2d66d0cc791",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2edbb9c-7388-4e1b-8ac3-1fbde5bf7f29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8be47dae-ae54-4816-943c-bdb6dc000cdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9f46dcf-00ff-46b1-a7b9-b060331f38e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8be267e8-f950-4ba7-a794-8bbdfdb32b65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1a16eb0-ac24-44e6-85f7-b4a2d66711ca",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30289b0c-a355-46b0-b2e8-745230b068dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "238fd935-5843-4614-aaae-98832eaa54f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47f85c4c-d4f0-4314-86b5-78bd18d5dded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d21fa87-8e2c-452e-8f91-8bb1ebc1e2e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46981800-f811-47de-adc6-432c809a565e",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f86094-538b-4853-9b40-66f8cdd1386f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dc5f5a9-7bf6-4726-bbfc-2e9a97afeb6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21ccbba4-89ce-43ec-941c-bc74e0fb2a4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "72e59154-05e0-485e-9454-2b9d69abe606"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6b55d59-4d05-4f13-8592-2232e7b10c87",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "223f1ea4-7b0c-4923-9875-1f425923ab77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c0f420d-9428-4422-be01-62b8b452c03d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98b44468-727b-477e-91bd-dfdccb0ab3d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4fc2457-ec8d-45bf-8f31-a0bac4e8ca64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de19847f-25b2-4214-bc7d-92720d81bb2a",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc0013ed-3b3c-491a-acf1-5ed0a0014091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "478566e8-0e44-4f4c-a301-11549c87cf3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e6382af-dea5-4358-b876-a9c050c4b060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "869b15e5-aa7d-4cc9-a5f8-7e6bedeb6e8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b68b5322-3b83-4880-8492-9d0f0cb650e5",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f026991-bbff-46a4-95cb-d832bdcfbec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13ce4976-811b-4cd0-ba7c-c30d71668a6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ea187dd-291a-4a1f-94a3-df11eb26f98c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38f44d8e-54f9-49d4-85ef-8962ce6c4dec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "165ac252-0d19-4a00-89ac-8fae793a8262",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09c53509-2248-4169-a908-fe011c7b4400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9275aee-04d9-4162-8f66-f836472cd0d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd81d7b1-4049-4ac5-961e-1b372c5293a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3bcb3d04-81d9-45b3-9f2c-de0d3735270c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0c62016-4a71-4c99-83f1-a098b7fe7a9a",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a383593-9a91-4491-8872-0388dd675762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0012eed7-c851-42a8-b812-117712be18c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "293d14b9-b7c9-4e2a-a1a2-d8ccf01b10a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "22543eb7-2e01-4ac4-ba33-a36e58ac9215"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b999ba2-f835-4bd9-8791-cb0cd81519f2",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "824834e9-0eef-4d88-9572-b11e17a2bb5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26bbf312-d2c3-42ad-ba12-8785ad7c494d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db3004da-6649-42f8-92e4-991737c7db54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db303b1b-b640-42b4-84c4-cb899e23f13a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d25f831-1b1c-47d2-b2f7-f9e4896719fb",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c31e4410-4da4-4baa-8024-42dc017c5661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "152bf2b8-78e0-4ba2-82aa-e4e50f4e8745"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fffc65e8-80ab-494a-a865-28d27b41a438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb5a09fc-0bfe-4a26-a808-dcd992ca1c1a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6a903e85-82cf-4c4a-8d1d-135ea7619f33",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6ac35119-6475-4f7b-bb18-d28af7d65fc4",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "697d4966-026e-40f3-86f7-b532075fa08a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "1eb3041b-7008-41d1-890c-f95ab8dbfbe4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9984e832-122e-438b-ad18-544af53b081b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "70d8b1e1-1d34-41e0-b650-2d1d840f2587"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a7e984c1-ba5b-4317-bd4d-5d865dc0cd23",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b57ac558-15b5-4c17-a527-471b554ed1ac"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9126eccf-987f-4ccd-8eb1-cf8d79832c7f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8b253d2f-25b7-435a-9fa4-58cd405b0b8e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3c50f13b-5720-4b11-9a5a-a4785fa381ee",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "002d5dee-c5ca-47d7-992f-ba15a1d610c4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a5424c71-7639-4c29-a5d1-5f931b0977cf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e8e58cd2-e410-47e7-8f46-0a6234c72cdf"
            }
          }
        ]
      },
      {
        "id": "c414c0bf-435e-4560-8c02-39b0a5924160",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "4438c421-538f-4bea-8c99-a029960e0ea2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f241c7f2-c1dd-41c8-b289-0cc62b947648",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "11aecb2e-928b-40b5-bdb6-533d4b7974b2",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcf1fd20-a439-4765-9666-f4f845ae39aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45ce84d9-358c-4408-ab07-7d56960692da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8770a3e3-c521-4082-998b-42b3d3afb715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "ebe26674-adf6-4bc4-acf9-d87b7effb548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33712ac3-7c01-41bb-b876-44d8fc6005d6",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4faa107d-9a95-4e38-8320-8cc3fdc44804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7351980-237b-425e-baa1-9b220dcfdd45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5e4cb99-1b09-4bb0-b7c5-a18d36a305f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "458ec6d2-e85d-4e9e-9401-8e05f9296d59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5d3d97d-94ba-4801-a7c7-a1434c1853cb",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6674e175-e9a9-4d81-9cdb-e4067e8df6b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec9e10e7-e161-4b1e-99f1-56659834ecbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "583cfd89-ec18-46ba-8e83-246305357688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5370a92a-26c3-436a-adf0-128eef93ac53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ad9de27-edc5-48c8-904e-296d7617baa6",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f40277f3-744f-49e4-a91e-3ff23d766b24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4626037a-df45-4565-bf54-87ef5262f104"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "591667c0-8104-45a2-bcf5-2482275529c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "928fc0ae-7fcd-42a1-8ec9-cc06064ad3f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a88acbe2-48e2-470e-be74-5680169d9899",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d89923d4-e0d1-4593-8646-5ad662077e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0990ed05-a522-42ba-987f-22d7583dc467"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b7eafc8-0375-435b-b838-5332a0a9970e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "26a0a46a-0d4f-4f1d-a5ca-022b47178ca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f874e96-b124-49b4-b3a3-facb41205fb5",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88ffafc1-5185-465d-9376-cecda434cd4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "241a6cd2-2ffb-49d5-94ed-e337bd8115e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff9b681b-11e2-4bb1-a09e-44a948fa065e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3b82bfd1-787c-496d-8552-e522ce274da0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78307460-88df-41ec-b51d-a419b93c9ed6",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a94a38e-40ad-4330-96a0-c0d239d27998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b75f62d-0d5b-4e5a-9666-e05a8c549102"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d56ed52-2c1d-4124-8bc5-945f893e8bea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "a901383a-3fc6-448c-9eb3-a769195642fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "288d242d-ee9f-4f2f-b89c-b4da65cb42af",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "094fa5a5-cef0-429e-8b58-bae15b782b2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf268d4c-5386-4096-90e5-4bde4750843f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15decb03-b046-4ad2-9886-bc0f60449f35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1e36b1e-ec38-432b-8221-aae529eced27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9dcfa4d-e78e-4c77-a7d0-a1d23b54394c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67dc7b1c-a119-4206-91a3-ae3e3781ebaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e6dc5f6-1fd0-4683-890e-bab4812d147f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dae441c-9cf3-4457-aabb-e51c315290f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "859289a7-ce2f-430c-b51d-5630371d2908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "512d04c3-0ee6-4692-9425-d0208217f3dc",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "165e742a-913e-407b-a1f3-e25ae159d161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22b653bb-532c-4d85-b9d9-9d03ad68e531"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3739456-1f29-4681-a4da-ad47ee6a25b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7db98e38-cb44-4571-9be9-b603ee3b544d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce8a0048-3731-4278-b2b3-1eda1ba6bbd6",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48dbb049-72f3-4cdb-b6ca-d80273714f97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "142c0467-eaff-46e1-af42-fdbb96378771"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "695d95da-0bd7-4dcf-a1bd-869004aa3668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "4a09c4f3-69de-4299-96bb-8763f3c13c6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aaa5ac4-d7d2-4f22-ba13-c88d95f21fca",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30d56d97-d2a1-4fa4-9848-5bfe4ca164bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54122e08-1bc8-46e1-8f72-f586fdfc46bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a428b7bd-40a2-45bd-a9ac-f31f1105f79a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3f7973c7-9a00-4865-b54c-c1d2ea4ac83b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e05bc40d-958f-4e1f-aad3-c4f203d74365",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f153d203-d7a8-4b98-b2cb-b92e84bd4dbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73bc9780-fa40-43fa-8abf-5f4b562be947"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d39bb0f-1697-4f5a-9c0c-89701947cac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d035ef4f-3785-4a15-9286-8ffe75415a34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07d72107-daf0-41c5-89ed-819bfc0d2705",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a61cd0e1-c99c-4e3b-b699-85317a54eb17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5a2f9d7-4c0e-46dd-8685-881d50efbeb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05cf6ec5-4045-4e77-9877-1dd3166af095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "986eb48f-1369-49c7-aff0-f757d29ad250"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03ccc263-96ed-47ff-9451-3be4f5019d31",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4df53e26-34a0-48dd-8b0f-c4157737dbee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cbdcb45-1f71-4091-9225-52d7ac20db98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bfeece6-0b3d-4d84-a18c-7d771e520bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e3d35fd-b360-4516-8e3c-34d111fec0b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4baf93c0-67b9-4b93-87d0-165188a6a331",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b49f7c03-bea4-4538-9db1-792a5c8a65f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b674bd7-d954-4ecb-85be-587972f046c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "504a0865-81a6-4993-8522-b92e4dae6ac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "f80982b9-a1f6-4f26-88a1-44bb33969a02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fccc52e-3d6c-4101-a3b7-49a561567634",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ccf1232-03d5-468f-a242-d1906bbac460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08844a90-7582-4733-a63d-59289a8c5563"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ae537d5-58d0-4459-ac97-b5cb02697e4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "77b9372d-5ae3-4158-b39d-3f77ed5ce9ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "489f0718-93e6-4323-898b-85d32b941bd0",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eed144b4-8205-4433-ac30-8775de81114b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1064235-7af5-41dc-aed2-889265a0cfa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdb7a69d-81b5-42e8-8d1c-8a143051656d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ee59a1c-c6cf-4598-b698-24b013e376ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "222ab85a-0285-468b-8667-007d373da5aa",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a9d4c39-c579-407d-9488-ee5790860ef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d431727-00cb-4309-bc45-27dee5f5b213"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f8e65af-a5f2-4519-88b7-484b387df9db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4bc4d30-b7cd-4d51-a6e0-8f5ba3f7d15e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0393a1d6-fa7a-4ac0-adbc-2a0b9901d8d4",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79518103-09e2-438a-84b8-0d6a1a01aace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdc57530-f004-4751-ae5b-d99ac0860f7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd61cc11-07fd-4cc2-a015-5fb474937861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d18430a-f569-438a-bba4-1a953e0267ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d9c93ad-726d-4d23-86a4-2cdb12c9bc40",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37e38d59-055c-4d4c-97db-374ad95c330f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5505b62c-f2eb-4aef-bd7a-7a64464f15fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db22d5cb-940a-47eb-a1fc-5165af642032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "09e75d1a-97d1-49aa-ae16-9aa4cdaa8529"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59b7da2c-cb82-4b72-8325-a61b16155e46",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "161b3ff6-b32e-4365-8555-6d3df87cf877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d36444c2-492e-4848-bea5-1402dc15304a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17e91fd9-9f89-4434-aee3-03adf1b990ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d645db6-5304-4662-997c-8e16adf76d3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e03a7eb-bc36-4aa4-b8e8-fea35388df34",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d69e616e-ff0d-4b74-9835-15f0d6cfaeb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1c86df5-d9c7-4c70-9d43-c5fc3825ed6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddbd68b5-622f-4ba8-ae6b-1b6ee83702f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "46db4f85-d496-4f45-bfb5-497538c54e13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac387827-869a-4dab-bc10-119363154a58",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11b6d1c4-374e-4a3e-b4a8-2fd89007f5d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5805b2c2-8429-48fc-a961-b6961e42814b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bc17888-eea7-4ae5-b21d-68142e86d525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bfa7bc10-4ed3-49b3-988a-dd5974f74526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b64327d-efe3-4c08-b29d-ff4a9a745c22",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "756592ef-bce4-4591-ae22-180ec992e319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb797cba-0b27-4c70-988a-022ca16d6b3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1528f938-e96d-4335-95d0-b7b75c218367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b470abf-e92c-4203-9adf-fab622a7e715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4db22595-64f2-4119-b637-dd48cfb44128",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78360674-4e37-4339-b17c-1b79e16f71fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00be7908-acb5-4469-950b-7568d936f297"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ce17fc2-5850-4bd6-9846-abb0f897d2e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3494fe9-badf-4285-82d5-aced51054ae3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e37c1e18-4b6e-49fe-8699-3bb84b806ccd",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71e6933e-eb13-4ec1-b63d-ac6dc861eb5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5aa9344-9ac1-4a8b-9851-09548b79c853"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71293480-e98d-45e2-84cb-ca9d8b9ee17d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "557a5f42-2eec-4b10-8276-92a18ae408e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a78d5086-fba6-4e9d-aeda-dc5f81ca3009",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3db2554-7c20-4d0c-bbfa-39b5d221d1fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cc2bba7-7c6a-4f82-9b48-352673e8dfe5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2876a00e-2182-454c-bc01-d04c17cfa48e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fcf7cd8b-cc10-4009-a9e4-02719bc0b2c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09b1402b-248b-49c2-b378-c4026d932478",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9d7b0c0-85c1-419a-bd3d-b38d3b9ec345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edf903ee-5e62-433a-84e0-f15372008667"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de4a8684-f70c-49b4-a8b2-51479b7efb26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f751a578-bf10-4cf6-801b-2df107707f39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7087b11f-b1b7-427b-9fce-cd11f3e21b0c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a24e55fb-2b79-4a4b-b380-a875780d5478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "787a7b3a-1d88-404c-b9ae-3048f9cbe6a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75d57e24-ba76-4812-b5ad-c0f4aa2d8990",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "34a5cdbe-7469-4022-bd5b-9c071dc25528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fc83c73-b065-4412-84df-6a11fd996696",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b816793d-39de-46c0-bb7f-34d7d7ebc924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fca43db3-125c-4552-8125-ff4dceb7ab64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a82a52b-7136-44e0-b9be-ffee2ab1353a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "95e3e3f1-07ad-4912-b645-fe826f394b62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6399894-57b0-4b0e-a739-6f44ed810239",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2f99402-fc31-483c-b15c-c22b51e6be2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c43f1162-ec06-47fa-9ea0-d8672df44ce2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbece503-a15e-496f-a47f-01a878c2de5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "25e198f2-5eb4-4cc4-bcb5-fdc20cc1e218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c565a952-09fd-467d-a8aa-f4cb3c239ef6",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af878c64-4eef-4ef6-a604-4588f5900b9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d1c6cb5-7341-40cb-96ae-6e8fe731dbf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3beadeaa-d758-4037-854c-bf3d47c2df87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c91d70f-0e43-4247-9174-a282d8ced39b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf0b361d-11b8-48e4-b550-7e7cc47b287f",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6f0d8bd-9f85-4807-991c-73c3db4728f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca72b7e6-bbf7-4254-b763-b678ab8d2669"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e29b0129-a668-4284-a1d1-d5cffab37bce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "93a14a09-fb20-45b2-be4b-7da49505b689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b237b22-883e-4fae-9a6e-9ba9f0ff61c7",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc03b202-544b-48ad-8485-80e4a8ca4bfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88c7e10e-7dee-4097-b906-cfe06e441211"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e011380e-fa83-4d06-a19d-0b2e15090100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "73c925b5-d341-437e-8173-c7df64c19733"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cff8f2e-5530-456b-ac6b-7de639007054",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51aa2491-c8cd-42c9-86ac-4d4dc97ae053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32282a1d-071e-4bbd-83b5-9d792865fe2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bc56ad8-dc88-41d5-95aa-47c921d77840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "605a7576-9453-4e5d-80c7-574267718475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64d279b5-0f81-49a8-b7f1-91e9f4a47e61",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7911db47-73ec-4075-adaa-067c5943fd2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0da4356-ca80-4202-be0b-06adf1a54470"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "282f9fd4-d5a4-4579-bf7c-ce10bb63fa4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "278437ed-e6cc-4e1f-b922-c152a5b0dbfa"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e75cb3e4-83d8-4f27-bbcc-f16cd5e9ad1b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b16a1727-9af6-41e1-afed-2938f5c6b5cb",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1638140-3f6b-4fbe-8ff6-8dc5794076e8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "55180511-3617-4287-93fa-a25aa8ea38e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c75534ed-86c7-481e-a2a7-30800bdc1067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "486fc5e3-f663-4ea9-84c0-ca40ee3de50c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1d0e92f1-59c7-4a61-85b0-f3b77bc6e6c8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "af6c82d6-a0a9-4311-94bc-ff62cb4b1e21"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cacf817b-76ab-479f-800c-fdefc6117f6e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9712a399-ec5f-4855-8f40-ab664186ce26"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0408dec1-ed2d-4df4-90ce-eba65489b839",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "cb249411-84a2-486b-9ab4-09d3808d4967"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e145802b-14e2-4c9e-bd72-1a03cb3cf3d9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "db568b8f-6066-478a-904d-d802c7111c0b"
            }
          }
        ]
      },
      {
        "id": "d3b2bb19-5227-44ac-892f-13294c3b9176",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "d29bd50c-6089-42bd-aa27-2439a5311042",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e0d06ea9-d81f-44f8-8cac-f2e42f79510d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "61b0c742-a434-43af-8099-d728c8bc7668",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd77937e-14ac-43cc-be4d-f358308b19a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aeb47306-82c7-4e3d-95d7-c244f90d2703"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15f8c6ec-961e-4d84-a0d9-752a226628ec",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b44f65a-598b-4f4c-be25-d77aa67ac512",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbfe6b9c-7237-42e4-b032-db095e135a72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f2d7532-cbb0-4a96-9efa-480fc6888225",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4550b337-2a65-4036-9793-cb314a918d7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "912dc198-088e-4d39-9284-69078d2bbb77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3a4a6ae-ab12-4aec-95d4-40cb3aac9208",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32580fd2-8f90-40a7-a908-00d4e5de6774",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c6b6d0b-f24e-4487-88d3-6d850cf6dae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a217c80d-3cba-4b6d-8c65-b80d76936b82",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17406371-2f93-4403-ba2b-f066843731f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2377acac-9d2c-49e9-a458-cf58aacf2a64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8920798b-e623-41ca-abf9-339ce1640e59",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f087e70-279e-4086-9e2f-5e18abbb3386",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5ff7f40-704c-4b99-a3f7-fb53d4def477"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31eee52b-a7dd-4e05-9f5a-d230a7ea33bb",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4acc963-55c2-4e59-8b5d-d95f733496bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "133a5bb6-6656-477d-b57a-91c48147fb13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7163911e-b844-4c3d-b504-a83ce1e22a58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0611c665-611d-4a88-8776-9b8b9fb64d35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6836bb8b-60fd-4848-aa15-e9bb061b3753",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94544b9d-36c3-4108-8d0c-a559529fc46e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fea160dd-73b1-4581-bc5c-0c05fd7dd61e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e20fe27-e98c-4ad6-9851-6b9ce136c4e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c269fe8-a4a5-46ce-8aee-490139e311c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8660e0ad-1b0c-47b2-838b-209988d6c2d2",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d009fb46-fbae-4e4d-a56e-b89ed6648b53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "267891bf-0ec6-4b82-bf4c-7ef61de9c589"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99a67e76-edee-4eef-af62-ceeae5d7b37e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7749f8a3-6fef-48d7-bfb7-c7de14b0c89a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68459627-8c1a-4d55-b073-6659995450ac",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "322b1409-e505-4939-906b-a50bfebf22f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50e85288-8ee3-4d95-86a6-522e6ccfa305"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b255e109-0b85-42e7-9664-10043ec8be71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3421091b-c429-44b3-a27c-07045557adeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fd0bc54-4ac0-49ac-8d39-9152580e7108",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc9e610e-0f18-428d-831d-832c75c3970e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "347ae445-3984-419d-8379-46fc5487c6cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6283f059-debc-4d45-90db-2f766dd8d2a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fe35f53-ef1b-42ad-87f7-7cb12c98d702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a06f8672-30fd-48a4-a8db-0db17c4d47f2",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb12ce6f-1a98-4e59-b679-73fc96ee2659",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34ea54c6-efe3-4537-ba33-6789df88b14e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c79d292a-7555-4443-8679-f4aeb18a5948",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c29d693a-b720-42ba-8f5e-93a6828cb666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fd94b66-f48b-4911-bdfd-771eb2d5d237",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3a2ad2a-3718-42fc-8eb9-144e39184b9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88943b1e-5806-4c19-bc30-eb6b44cc93bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50640357-5543-4b50-b3ea-3b09422d5e9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48a2b664-139c-43f6-a8e7-e428959b8d43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a476a36d-b029-488a-a88c-aeb99e63d0d5",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a42ebbd7-540c-4955-93ae-154e1c3d0b91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a62fd881-c2a1-4a3b-a7eb-e8de904ba247"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef0d0b26-0e2b-4622-901c-de6e0cd2bd63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14e6f420-c289-40b3-aa6d-f8d14ae0ca96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3e8d20f-3f41-46b2-be8e-9f989465090b",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e56eee5-f18e-4fef-a9d6-3ff5650d9ed7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7b6c478-7590-46e3-b65a-75163b162915"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40f51d42-ede2-407a-9c95-a5e77eac1324",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82e705c3-dbed-4d5d-bd61-b178f7eb47c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef886f2a-5dd9-4af9-8aca-5a54a349f34a",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "259dae2e-d0bc-4730-90ab-e28426fd5745",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40c9f4a8-cfd8-4ce2-a6a2-d4a6031cbda6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcb76038-f254-4f90-b53e-6362ea0e5da7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be6257c3-06cb-4999-950d-1735eadc9e36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "427a8701-7257-40c7-b833-0ee397d2caa6",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6266c8d0-ddef-4e20-a704-142e3791d699",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6921bb0e-70bc-4e72-9f5e-5de9c98e68e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09a15716-81f1-4d05-9b92-c5177fb54261",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a593cee9-d1e9-4121-9ad9-a4f50c756faa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffada20e-2365-475d-bf72-d306965d25ef",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1463975b-1ffc-4e6d-bae6-17fdba360a30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e130ded-ed22-4517-a862-3f06d2653e11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea38d322-2df4-441e-962b-7b9ddc2903ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fa1820d-d08b-48ee-b4f8-f4c08e3bb89e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b51c3a0b-91ef-4ec7-a0fd-0720f3856372",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b066bf7-9514-4a53-af5d-da52c882e491",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f016ad39-8839-4a47-b67c-0084b408ce83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4076368f-451e-47bd-b7fc-a1a6506c383c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35efbed6-568f-4cf7-9c98-e62823809422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f619f648-5fef-4643-9f65-dd03957e0679",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5bc7035-7f11-4156-9ab7-97b7f6baca3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2b97fc4-f8f6-41e8-9f73-c8e0c4dc113f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b43d401a-8129-4373-810c-7f0d2880a16e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7929d597-7cbc-4eaa-bfb4-e9007edf4ba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc7c75e1-4372-43b9-8949-5edda2ae7491",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d205ca4-76fa-4ace-9461-0f0965210281",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b886a207-e279-4234-bfcd-3ef30edc7281"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f17e028e-f7b6-4204-ada2-dc59353b8de6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c12f491-497a-4d7c-baa0-30278a60f911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "574a79f8-1e16-48a1-b065-edcb21bb0961",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb48addb-c755-42f6-898c-fe96ea54b413",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50955598-9ce5-4715-aea4-f2fc577aa538"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc8e981d-ff62-49ee-91cd-1c701d2963fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b929e7a4-7b5e-42e6-94aa-eebf2dd504a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c341c6c-f724-4826-9fb6-e6aa3a4f81f8",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c751b0ed-feb1-4ccb-80f8-7505fd09ad18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71bb1f0d-110e-4ca3-b10f-c6095b10fe5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53c1dcd7-815a-4f59-b7a6-afb58e4f30d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e21f27a-0dae-4b08-a8fe-85cb6dcd5ff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee75a584-8750-44d7-aaaa-d747aac2552a",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "631e60c5-d99e-47af-a6e1-061c0a563c79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0044f258-0bc4-404d-99d4-2e7191382177"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "794a19af-4c7d-48ff-9524-859e12ba7e76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b354efb3-41ce-49c5-ab18-499e052e499c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31d5f310-5066-4163-ad62-b80bdec4bfd7",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bed4c07-b1dc-4901-9918-2584fbd7ad5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2537965e-3807-4722-b66d-b96b7d29765c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b0aee10-38bf-4d6b-a815-feff0244ba02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8593fc18-ddf5-42e9-96e7-fdc428a1425f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15c92be6-f94f-471e-a0b1-bf15e2855de4",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaaff326-fc95-4ca9-bfe2-756c869191b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01ba925f-95a8-4c35-a64e-0b6d2c97165f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd0632ef-4457-4216-8078-13d368736e4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57158d0e-055d-4354-8328-04a338d0e48a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e8dd3cc-a8cf-4c8e-8637-43ae9d58faef",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86fa892d-3447-432e-906a-c7a0b3768d5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72aff2a1-cbfe-4235-99d1-446294a5e801"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6442a5fd-0634-4275-ba8c-717e9bf523b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1703df31-5b32-4799-a2be-593a42c797a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca79ad9f-2131-4276-9018-63458b379a3a",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae440f59-c4a3-4f3c-b854-278b74786e6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e72fbecd-d767-4855-a805-21bcfaed65e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3c81ceb-5c52-4412-bd13-5367fa796a58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7129410-8a2f-4723-81d1-cdd098905281"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b5b3253-4f28-4be8-92d2-fa52172a22bc",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03de40cb-002e-4def-81fd-05c7604849ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d034798-9d66-499e-a173-a4faaf45128f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e59dc6e-e56f-4978-8387-5575372dbd8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "148a489f-1058-4de9-899e-3872ace4b436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b786f77-06be-4d69-899b-e0f3873b0669",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5197e81-5743-4778-bd5e-8b6a6a779a4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00f2124f-6605-4b11-8d1b-fe186765cf14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31a5196b-5cac-439a-bb22-dca942602af2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5f67346-7ec1-4580-ae1e-b475e5107791"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d36467a9-4420-47ac-b9da-0dae5565fdab",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c583fdb-9364-4049-ac09-93f5d5084b15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "003c1adc-bd9d-4351-b78e-c88dbec5a174"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a74eff5a-9377-42e4-9abf-29df7d3938ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8ccfe78-0230-4b4c-b9e6-23d003f53f84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76c909b8-80c4-4e25-8e4a-f5f8660a95b1",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85490a79-5ea6-47e5-9202-19f64ab6e804",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31759a32-7b78-4541-af0f-c29204e0a610"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b28e2061-3258-4b76-a449-1de44343b3d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f05e19f3-86ff-4574-b49b-76776c1d8d81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5152b2ef-7cee-42eb-881c-34475077b725",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd0299d6-f519-40e7-9c2a-38d9a377bf34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b2c5af0-441b-444e-94a8-ac07ce6b63e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33420cba-ca5e-46e5-abe1-43d3745ea4f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a452055-ecf0-4736-93ec-cafeab480aaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a28a472c-30b3-4174-9b67-fb6aad2c5aa6",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60278b64-c4df-4c83-8118-3081eec0765d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34cc58ac-e659-477e-aa17-b8d5b27a7b56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20278a9a-42d9-4615-a09b-522357913a41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11f32a98-635d-4cb2-be8a-591a5643b256"
                        }
                      }
                    ]
                  },
                  {
                    "id": "939afe3a-3b7d-4e27-ae75-20370a5ee388",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49cd7270-f045-4bdf-b7da-548438c50e7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6be4895c-1956-49f6-92ab-58ded81d4082"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0846e646-c227-4e0f-8697-74a2667f446e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0407d60c-a61a-4a52-924d-73ac89fca1b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f358472-160d-46dc-aa71-af2061dc0413",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b67beca4-2283-4514-ad08-43364c399934",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ac5bc29-1861-40ca-af94-7f9b7331d7f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "feaecef5-b27a-4c93-b705-f2629aeafcc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e6917a6-4972-40a1-b837-9ba5aec22b82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5fdeaba-e4a0-4dae-8da0-e2e135d21f86",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d44ecdf-0303-4f67-aae4-e3e4bb6bba3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d59ff96-9a64-4da2-aea8-93ee2953a7ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66694b0f-59b6-49fa-a0ce-e6962d5eb79e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f0e6610-482c-4e13-937d-5638dd0c2872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d15930f2-d234-4019-904e-d3cb4b2cb720",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1490cfe-2ffa-4b72-b271-9a68decd3eff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df0eb550-b851-41af-8045-9e98a159a11d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28d8567d-a449-4bf0-8411-7977b970164c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d22c556-1d80-4e31-a09b-9d6d3dee239e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ab73fc9-00f3-4904-a3c0-2ad5c3fcea9d",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdc580b0-92d7-4606-9fa9-071f3d91eb7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e65099e-0d03-4420-bd61-ca56bd2f67ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abe504dd-b22f-4541-ab51-05d037fb8af8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b4874a6-a785-467f-a954-48f02d41165d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c7dcd2e-534d-4990-a345-918b665cebd5",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e553f32-111a-42f9-997d-121fe319b840",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4333b6e-876d-499c-9250-6b37fe254671"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23bf1b7a-2aa3-400c-8c1f-8557023d197b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8905b2e4-7834-46f9-83c0-d01fc24b622e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16de1a9a-32f9-4a4c-920d-a3200fd5a433",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58cb50fe-4a0f-4f88-9b4a-b975a8ccb4d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93a49d1b-b0de-468e-963d-f032b74f4d6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f8373e9-90d4-4b8b-a703-4585092f3a8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f415f093-9d48-4b1b-80c6-7fc6cf1dabdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6da4c223-f8c8-4e6d-833f-8148f6f1a644",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f27265a-7886-4b41-a043-333a576e922c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ba7e8d8-2101-41e8-8e86-879edc327e78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0be141a1-8c65-4018-94b6-9e7829866f3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecdf8331-8ee7-4d39-9963-8c699686f0be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d1b3b5d-8c04-40f4-94fd-f03c84aa9ddb",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "719304f4-7e1d-4a1c-8856-730da2b7a18f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3124595-4849-4eee-9d41-74856e3f4c35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa5017e8-d95b-4248-9dca-3344b1b5c27d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cf8ddbe-b258-44d9-a1a5-c1a27ad528e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beeb5519-b935-40bd-9498-1a8ac54981ac",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ebdcccb-6919-4f93-8fb4-2e99618b944d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24c173cf-69c3-46c1-bdbc-eaddcd59fc42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14867645-525a-45ec-b9a9-0d306dbdc1ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d48a3595-b7b2-41b4-a027-bd606d44f999"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc87a1fe-877b-48d1-96e8-88e76db15168",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f87cf14f-4999-4cba-a2e9-4e0c926e6b3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94c68f5e-f0f2-4ba3-8172-c6aa6f5edd3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e81aad3-dda0-4e31-888a-0c7cba3321e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d45539e6-df28-41c9-a224-9538bd8c95b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "597e76c6-e140-43f3-b811-45193e13acb6",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cade4b58-b4e2-49c1-a9ff-c294828d9854",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "434c4752-f32f-45f0-9f28-3bd7cdb8d5db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c2dcd60-1ae9-4079-9fb2-15482d3840e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3884e3d3-bb2f-4953-bfce-1d2f700207fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d2807c0-d4d6-4a56-b53d-ceeff258b4fb",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f4c304b-0172-47a2-a79b-29e1d5d4e64d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4e43c11-008d-42e3-823e-bc0cb7c81608"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5747658-c7be-4d68-83ec-92234433b162",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c108e89-7c3e-4153-b523-41e6ab363004"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8884ba73-636f-473c-8387-cc69574df892",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f89c62eb-ad27-488e-bb9f-6baca2ec14aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fddea4b-ffcb-40d6-b308-d9790d9d81c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e703298e-5d85-46e0-891e-0f94d49f4b53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46020f46-e70d-48e6-8b5c-f12407e65a44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b2c4d14-40d5-460e-bc14-ed3fc3975924",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddd54534-ad01-4f6f-861c-5e3eacceceb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27de4394-d98c-4402-af36-1cb1b5323662"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ed901e-ff4d-40f5-99e2-b7b118ffad05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a63d3f7-d266-4482-b818-6f158a8eff4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7f7d77b-8f89-42cb-9271-2230d83c103b",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0094fbc-465b-4db1-8048-35badef56b40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf43bec0-e562-49aa-9b39-ef1b10f56f60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19f034a1-8286-4ccc-97df-8a477d2f3625",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2b5b96a-3ccf-41d2-a1e2-298ceb35cb0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a2455a8-c05a-46ee-8cf5-d2f50cb25d0a",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddab3ddb-ed6c-4191-87a9-a44b8ccc0af0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dba35cad-eeb2-4373-bc42-f724ff57c0d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7763e92f-8bb2-4f6b-971d-f7d578e58c2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77c8b898-9854-482c-8318-8e3436ffddb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fb2a3cc-af5a-4736-ad3c-41a8c953d048",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f73a408-86f6-45c8-b43e-2de9956d293c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "631d5deb-9d3d-496b-969d-26b26415a95a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5b64bb6-71d3-44d5-ae0c-280a9bc9a0ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d90e8c8-9952-4de9-a9c8-7d750fcbdb54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6692b0b-3c3b-4c7c-8ea1-5e8d73bbd2ac",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05f20dba-e0cb-49b7-93b4-cf3d5b6d4ce0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c57e814-7817-4caa-b5fe-cdb95709bbda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db584fd4-8d7f-48a9-a13e-c22d78c5e943",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1a2dc64-ce5a-465d-954f-8b55c5fead83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0ee9899-3b16-4ece-9575-244120ca15f3",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13504a6a-422d-4515-be83-561b191c7f8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e6912c6-c9dc-4f17-93ca-0322a66459da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6713c7b9-2c5d-4d0c-9b75-9e0202cd96f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "414dc6b0-619e-4369-af46-7161f84a92bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3429a6b-2fd1-4129-9f38-2a9d3a787a03",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10709f08-a33a-4333-b688-1a5a5cc9b6eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97792029-c4f9-40df-a196-f7d3659e82ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "551652a3-5160-4421-b4d2-ccd5971aa5a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9481b73e-2361-4a4e-9087-8231b04e0458"
                        }
                      }
                    ]
                  },
                  {
                    "id": "788f8e8e-9569-4c0d-a8ae-2a7d3be342d9",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aa7f77a-8465-4255-b032-dd4fb9fc5dc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0db59a76-7ae6-4a65-befc-fce4e614fcf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8456d08-1f92-4dab-84b3-af8c2e6a16ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6e9e6ab-8d59-48d7-9f33-2aa59f6780db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d642b52-89ea-4c47-b6de-a2f1dc0ed9b3",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8abdfafe-9a5e-45a3-9d7f-f7ac3781975f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e50e7c2-0886-4ee2-a84a-6bb7a5097aaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a356102-7fe9-4f5e-a184-0605e9c4eb38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "319e6e3d-2084-450b-9fb8-7084c5fbc651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a27a9cb7-ee08-452f-bd98-ba5d57df85c7",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55c31be2-c554-42f8-ba86-952273ddac4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c4e9d72-53e8-4045-bd8c-99b39566ede2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56abe70f-6640-41b1-9f33-d728629aaba1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16df8eb2-5349-4cf0-9b49-a099ba571fe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e907259c-2bdf-4010-b344-8873859e7e66",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7613939a-10bb-447e-a83e-99feafc4b29c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9861c9fa-ccaa-4956-883d-3a2038fb309a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3965b599-ad26-4757-a527-54241c08073e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db61cf70-6203-460f-9798-979e10279253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3be760a1-d646-4ea2-ad13-7b4fa9358a26",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "202877a0-b300-4aa3-8462-4cda62fbb4b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfeebdff-3faf-4a88-92f3-b08faef0e5fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cdae9cf-33ca-4ffd-bb45-0dcf903e6f87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9817842f-b6de-41ab-9c6c-7bf212ef7dbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5263d8a8-f556-46e8-8400-ccd4d7c97c22",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "721106bf-ad53-4ff6-b30a-00f6bb9c7c55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36d38826-88e7-4c18-b03f-45bf2164eccd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4740ae32-2dbf-4e88-9748-e265694e212d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91a2ee85-d572-4224-9bb2-41cd1ba3031e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12513147-c3bf-46e8-a7b4-c3fc41b54fa0",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1738f2b-e7bd-4442-9440-dfff4cf4d7bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a359ae7c-5776-44d4-8729-90799b37d127"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02c3ee20-1061-48ff-b5fb-51fbacc25887",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3471f5c-0757-45ff-895a-cc9487d5c8e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f1f45aa-f4d0-4ac0-ac6c-edcb02dc697c",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a773ee8-a911-4719-9df7-a2bd751d6005",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83684b74-13aa-4700-85d6-1179b51189a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dfac89e-bef1-4b39-992a-792f71a27a92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2712087-ce0e-4a9a-8a8d-9604d9232920"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85a2202c-51e1-447e-ab21-63eeb59dc623",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3cf4291-5ede-40e3-9703-c2f562ca3462",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d53e042e-dd8c-49ed-a2a6-329bccaacb6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02b047fd-271e-4243-8ceb-61c991c672de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbf1c13f-0600-4ff2-a34e-b477ed844a1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23ea5515-eddd-473a-aaa1-9026d3a9dcaf",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27f66953-3f5b-436b-92c6-18ff5125d1ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01cb38d1-b852-40a0-858f-aafda54b5df2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8915ab95-837b-4895-9afe-460a4dc2bc5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c69d6fc-e6e0-4a96-9352-5187d3092238"
                        }
                      }
                    ]
                  },
                  {
                    "id": "678d0a34-a5d2-47bb-9d14-dafb446a8cc9",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7684088-9651-46a8-8843-333bfb880c4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82fdc8fe-bfba-4878-87cb-0ae9245ec8c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e493e0b-6b73-40e7-b9a5-79ee542f8800",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14462b2d-354e-4cda-95ec-005d3243f3e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad4c8f10-d26f-49dc-af29-db810ecf3654",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbfd2d40-6f8c-45dd-8b3c-2a8e5af7643a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1eede815-b9be-44c2-927c-ba084adaf80c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c7837b8-8a57-4683-92ac-12c6e4e2896f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcd7c085-8096-481f-a502-b45642b3222f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84261986-299a-4882-86c2-a2846365c06f",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4020ce60-2596-461d-b88f-e01bed39a3b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a7ee535-4c28-480f-aa09-f65f7f866a18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2429bb7a-1e24-4427-93ec-631a2d4beb50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dda93951-255e-4a04-b725-e163694b3c23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfec0fd3-34b6-42c7-a427-8cade2f93930",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8a61c71-ea8d-48a5-9038-1462ee56c17a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17eb0566-9bd6-4293-90e9-5cf56b711a5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ae8ec50-bf77-48af-af2e-86788aa06312",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cd35445-0670-42a6-9e94-1eb7e9b97021"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23732f9f-ec9d-461a-a008-8eca5ec3f47e",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9c98bcf-5937-49cf-9ae0-296d96845b15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07063e8a-0090-4fd1-b76e-b6995d048fb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aac06c62-cebc-412d-b0b5-7856764e09e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59d376f4-06e2-443a-86ae-c8dedca8c904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d7fc5d7-67cc-4582-89c5-10d9f453e422",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "992449c3-0678-497f-8155-dc27519310d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75cf165f-a4e3-4a88-954e-9e910f9265d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0af6045-fe13-4881-83ac-c008e25e661e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3051569b-8019-4128-b68a-09f3b18348f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3e0056f-ef6d-408b-a416-b0f72a4d456e",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c111a752-a299-4a05-8e0e-0d9cadc07943",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fea13ef-d5f7-45d1-af87-a6fc53ad4c7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70f30fad-99a0-42e7-8af0-ad0a7ebf6435",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f149f821-d47f-4a6e-a93d-f690eb9e6cdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d30a5f98-c942-4161-91ec-4841cc8b3f98",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c8b9fdd-b012-47c5-9ea9-e8521d18c386",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8233862a-0ec1-42b8-873e-95fbc33c75d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "740bce11-4d98-4b72-80ab-40c332e40ece",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99074b6f-9433-44b8-a90f-bfcf91d52e9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35c492d9-52e0-4d63-9566-338c58cb9391",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6d20a66-fa0f-4e2c-812b-4b029d437546",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85e1cb22-1b44-4810-b871-a9e6af77276d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cafba41-1c01-41c6-bcb3-d734b4706c30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b6285ce-c19f-40f3-b8ba-202112429aa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "995149d3-0c71-4f64-82c3-7d884da6c83d",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaf00128-6e39-4874-a351-a049b3e8dd7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6dc4c5d2-c914-457f-a578-32a8abbbef8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e85c575-fc6e-4d98-8ad1-0fc4b3d51a1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f3d2463-341c-4380-a44d-e1721f89a501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60913967-088b-41fe-b7f3-e1a921c225f9",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ab7bf2b-0ab5-463e-806f-b51d09325474",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cba97c9c-9957-49e3-a363-760b89efeee6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa9e181f-aa03-4f8a-adf6-76d13c742cd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17e352f3-4b60-4ad6-835e-9307071379bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06e1ac40-c575-4409-8c9a-63b5eb2c7316",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d476fa3-9678-4060-8dfd-ac937e1bdd8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2050a2d4-943f-442a-b5ce-63f440d321e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb9fecdb-f572-4b37-903a-770788d1460e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e2b73e6-dffc-407f-949b-83a93a4c7308"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bad7de1a-95bd-4e10-bc42-68422ebe7056",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8be408f3-5f69-4a9d-9644-929abd62067b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c3f07ac-3910-4adb-9226-5cdb6d7b785a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd14b278-3fbd-4aa1-bde8-f6348718540d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ab3e85a-91ce-4b0e-bf56-cd1f1fd82ed6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd303fe6-bbed-4aa4-8fd8-bfd58416ccb6",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a6a62f4-5fb4-4ddb-b0ff-0ee89cd0c2ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d5480dc-2b15-4fd0-b9b7-2edcbda64f81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ebeac6a-9887-4632-bb65-5688082a3a4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acfbd6a5-4a3d-4ffc-9deb-48a0a71c0ed5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58137849-cfcb-4aa3-8742-6dfba5af27b0",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62a45dad-4a37-49a4-aa94-fe61905ded47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "226c2ff6-1bd4-4fb0-a5bb-1277bb45d7f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fabf18f3-8a33-46d6-bd48-7ad8f0e223a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "747b96e4-15b8-41d7-b32b-d2a53201fbcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd7a102c-c178-46a0-b48c-31b327cc2185",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03fe1aa1-c469-46ef-bf57-d19bd3f61f03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8af3428b-41e9-463c-b552-1a6b877d3c54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "869ff7ee-2d2d-46fb-8fc7-73ed43d53f2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53c3c5e3-ab4b-4109-98b7-333a1780d438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af0d6f13-1850-4b6f-8841-b0b3bcee9e7f",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c0506fe-ea38-43d5-8ae4-77130fe08bf3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a15dfca-50d0-4c47-9e4e-22c5787fa5ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfb49514-de3e-4cb7-b094-088821f0a44f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f023e47-04b0-4699-bdf5-41021f1b0953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6a8aa8a-bdd1-44f7-a63c-7ddf42276daa",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "774ea632-4a99-435b-adc5-d61f2b6c916d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9eaab027-e896-455d-9ae6-11577dae3b4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00ac3ab6-0cad-4828-a4cf-88efb8253cc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85dbb10d-3e1a-43a5-9a65-41f4a3168418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "669cee57-b732-4d5d-95eb-4da9067c1a1f",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da9ccb78-a4f4-4d98-b65f-12d6eb48218e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8bf7166-92ef-439a-b894-fa3ded570265"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdf8f707-8855-4811-934e-07f400a8e194",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "894ee764-fcae-415b-b2ea-1336e2185373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14e8a171-0640-4ba5-b069-b8f7dc531287",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bcd667e-a8b6-47a1-84d8-2f7faeec368f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be9e14a1-d636-475e-b5d9-1d85a2b682e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d57952ec-8c3b-46e8-9c33-d29d6940a5ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9a5a431-7591-4fb4-8b2c-8d2d88244f1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4a1bdf3-67ca-4289-a185-a125882226ad",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "099f3f7a-d9d5-40f0-a34a-08b6c8b8fc79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa4763d0-d8b3-497f-8610-52ae0b65c040"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17c21599-e20e-4c9e-9888-4644bff11b78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97db2be2-636d-44d4-b350-7c211d9e55d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08d7e159-3351-4148-9193-1fa0aa9c5ee5",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9550dd9-31b3-46c3-946e-59487ad7c0a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d82d9eb-bb70-474f-b725-be6dbf42199a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5857d84-6ef7-49ed-bae6-8ec9f1121c9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72bebdb3-1385-47ef-b852-af46372d757c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16093b4a-0659-4905-b7d6-c959d365e34a",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c4afb9b-15f1-45a5-b769-0f9da239815c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78f62621-594e-4710-85b8-f9a58fb78b84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bba00fa-eb01-4318-8816-eea72601c341",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ceb4042-7801-4a00-8495-1fac6cb75731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a43aac3a-a6b6-49f5-95b6-f4a3fe4c6c0e",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d82442bb-36ef-4f93-9f3c-410f343794f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc89fdb5-0d19-44cf-b15c-17a1403b2d00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2a74eba-3482-467e-9bb2-7cbe5f650081",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47841474-b9a2-4b98-812b-016870975dff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "026f4613-150a-42d3-90b8-302cd0b1ceb6",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "399a1b5d-f575-4466-a35a-62e68cb313c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1cf34a8-d509-41c4-9287-ef99f9fed690"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9ce44b4-1ac5-4885-a5ae-1324bf0287cd",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f42a230-7bea-4f89-9fcd-d18388b1dc8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a27a1bd6-b00c-48c5-a3be-3dd60ea72edb",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e919be88-4ca2-4447-be18-d79cfebbeec7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f3711f9-1c54-401b-aabc-367a25779dba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c60cba1e-4932-45d5-8f71-3d065dd85222",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea9c082b-ce44-4105-b53d-a5a4137bb0b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9271a66-78aa-4a38-acbd-6124eb769930",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3b1f834-07ba-45b9-b888-81d30d561d65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c96de33d-e8f1-4531-b8f0-f9624a4bac40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa073ce1-b5be-4040-b4ba-ecd02187884d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d471e14-61b0-4485-b37b-55ddc86f416c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd710383-9f30-4b2f-8dae-4929bf5acd45",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d821609-9c6c-49fd-b6d1-0512598c33b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bbf26d9d-264a-48ae-9ffc-0cf7aaefce45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d14b3c38-937d-4c4a-8090-587a1c272ac1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89ca94be-06e8-46f8-a1f7-dc1c834f6745"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46565a2e-ab1c-45f1-b4ba-437067378682",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6db8b30a-a37e-4e99-9463-070cabbe9cff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "222cf5f7-3629-4a75-957b-ee112eeb9c9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29c1b2a3-dc29-4ae3-90aa-a1333e961829",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5374c175-a6cb-4c9c-9ac6-788bc0e8dda6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb6c47d3-ecc1-4884-939a-c216a80228d8",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92234585-7e21-47f7-835e-900004472f63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ec1556b-5a9a-49af-afe7-d0b335d64067"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fab9399-0062-413a-98ae-65c92afad9ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32b2eb54-4379-43fe-9cc7-014283b230a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81268367-fb69-499f-9639-ec60dbc4cd6e",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a577f0a-0f91-4b69-8328-0900d54b0e1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac81b4c5-8510-4cf1-9e8e-d87b06252c53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac1aedec-95d7-474b-aba6-9dc9e8afe49e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a32bbce8-1916-402a-8ff7-0a01e91d87a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01f04e46-1fe5-4a67-83c5-4902dae9b987",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47060257-ab33-41c6-b272-dda671d7e535",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8954b32-809a-4556-ba0a-7ccbcc47b7d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3877de37-9b61-4dc7-aa78-97364d58df32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "957bb26f-2af3-46b7-94ff-0dc40b3e0352"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7e389e79-c10e-44ab-9524-a2d3e8ec2a3b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "77a924b9-07f9-4781-a0d7-570720903971"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "69b7912e-81ae-4240-beb0-ce370115dc11",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bcc15439-8c56-4556-a635-55214903dbf5"
                    }
                  }
                ]
              },
              {
                "id": "fc8ebcf6-5546-4a94-8848-8d9978bb61d8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f1d46b42-f007-497a-907e-1382085ba4f6",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5f9c53a-8c3a-4d1d-affb-8daac9087442",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "54eda05a-8738-4824-85d9-134d9a36a04e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e40af487-0f39-41e0-815a-ba549f413471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aff6f6a4-1316-40e8-9812-699e74f112bb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4d1e13f5-73ff-4ff0-8599-557e841c7239",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d86cc236-3323-435c-93f7-93b6f2e89f5d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6076ddf6-5cb7-4934-8556-89f6d6d204a9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "de9b202a-6e85-49cb-b002-f4a3e9a51427"
                    }
                  }
                ]
              },
              {
                "id": "cf9f69d3-ffe8-48fa-9776-0070ba5282fd",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "53c7559e-ade2-488d-a126-d2206fe3c9d5",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bc10317-d397-4f50-bb2f-81446e3a4bff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "dadb73fd-d45b-42a2-bdc7-0ef9e7c6d51e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a28f07b8-4514-47c2-bab9-211b53545db4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92116bc8-9505-4466-946e-827ba3229969"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b78211bb-4451-49d2-95ff-be5220a52d33",
            "name": "Positive Testing",
            "item": [
              {
                "id": "55efc074-4006-45da-ac2e-1d920ea3a0af",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a24b1cd8-98d1-4d2d-9c54-5766b1105278",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9c064882-cdbc-473b-901f-effac6265256"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e9104b97-8cac-4631-9135-32b4f47ceee6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "304793dd-cd2b-4096-8ee4-927b3584dc03"
                    }
                  }
                ]
              },
              {
                "id": "ca1116c0-84a4-402a-a2a6-7c7a5da900c9",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fd8f9145-72ad-403c-8c90-2a1c41ed6558",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d4bbda15-a43f-4707-b3c3-06cfae0481e3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cefaa9d9-2644-44d0-afff-d9e23b22ab7e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3c9ddcfe-995d-447e-bac3-ceebf5ebad34"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bb8999bd-9286-4dc6-b86f-26c16374e9ac",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "4d166eda-a33c-4d3a-a853-021e259f9f6a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "58030be7-6fb0-4999-b39a-225ffade1377",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "96d93675-265e-4691-b0d3-2cd0feebc880"
            }
          }
        ]
      },
      {
        "id": "381a1a82-d62c-47b3-a59c-9b4b1a11b2c1",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "b934e9ad-e14a-46e5-9b9b-b603a42d08a4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ac502b0c-a71b-4ab7-84c4-a32a171d780e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c450883d-3f61-44b7-b5c8-daf4980a94f8",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0df7028a-d8be-485e-a50f-160fd7f781c0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "21114704-98b4-4685-a212-f6aec352d9e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d94fa420-89b2-47a1-98d4-560767123e45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "57c0b6ee-41e5-4430-bea6-44ad35880e43"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "02c47f36-60f6-46dd-bc0c-7375565c81ee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0071ce2d-ec1c-42ab-ad4b-20c3ee4bef5f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "77565971-d596-4e4d-bc95-426d9e4a8ebd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9b72d745-4ee7-4c4a-ae51-165257096eba"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a47d3b90-1534-4435-9835-48b9a9195ad4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "b05c2ef3-af8c-4636-8567-8c66f7f4e62b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5af976e3-dd0f-4aec-9bf2-936cb54a437d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1fd63fdc-70eb-422f-99a2-0af49380ffbc"
            }
          }
        ]
      },
      {
        "id": "5df73f9c-ccaf-43b8-89e3-e592afcb88fb",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "1e753541-e9f6-4fbf-9289-22c8e6bfc3a1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5461f848-00e7-4169-8af4-39cf010bc225",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "20355d0f-b157-4a29-954e-025879e31ee0",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3382206-3948-4ffc-b0c1-4d5005db8fd6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e1853280-5d22-4122-82fc-b8392c0471d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "434917f5-4b81-4465-b5b9-e5a11754b55e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f5e7ae02-9c44-47df-9e58-62d889b51228"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b6d28ffb-5848-46b1-a424-66d96a977c98",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5c75ac30-e4e5-4bc7-935a-31aa129d3be8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2a71ad48-025e-4d8d-bd7e-cd4f266206c9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "56546cef-5384-46a1-8e92-2933e07e2979"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7501a450-601c-4931-a5bd-eff607450010",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "85c9beb0-8010-4021-8213-b0836f90c4b1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e1d0f735-d63f-4c34-b8f3-3507a6b1db98",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7aed0cb5-3463-4825-a3eb-5c4e9c06f675"
            }
          }
        ]
      },
      {
        "id": "85349121-f069-4524-b29f-86790f00efec",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "84d3767b-aee6-4862-a0bb-5d15c342a0a5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "964cf0fd-37cf-4f6f-b63c-690f5c11d870",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3583d8b3-01b9-487e-8434-762fdb893208",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "555eaa2f-2624-4962-9d50-61555b89ac42",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fd4512fa-318d-4d7d-ad50-4ad585fa8244"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9dd21d8-96ba-4778-b01c-94365570b8c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d89ef6ea-4f0e-49c4-aabe-6d7e11296059"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c7cbfdce-1a23-456f-a437-a5e01eedfdf3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4c3b5fac-b397-41d3-9831-bd24de71b03e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a6fd4ada-7003-4a8b-82d4-6aa3a2d13609",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "93f1706e-7c7c-4a41-a506-073124dffbab"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6f97990f-3d41-4a39-b8e3-226387c1578e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "71a4de67-860b-4101-b80b-d11d5397fb2a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "406c0c72-b572-417c-bee2-d70760800594",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "990b1cbd-15a7-4a2a-9a9b-eee223db82a6"
            }
          }
        ]
      },
      {
        "id": "38b73288-7cd5-4aaf-bf75-530d08a3374c",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f7b0ca11-594b-481e-9164-45b01651bd5a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2ee10490-ea01-4791-bda7-a0df6e2d7f97",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "eba8b840-5479-4047-9cdf-2310d83ae8ba",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a4641127-a9f8-4a9b-a644-53c3f00e0ea5",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4858ac86-c7b6-4509-a971-1cff1b6e4156",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 45
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 129.91549295774664,
      "responseMin": 21,
      "responseMax": 2208,
      "responseSd": 243.10238070913098,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1693441964497,
      "completed": 1693442013044
    },
    "executions": [
      {
        "id": "4c357708-b664-4449-a43e-4785909b99c6",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "31635785-6c24-4393-9263-c6d66db801a5",
          "httpRequestId": "3c869680-0700-45ea-ac07-22774ab766d7"
        },
        "item": {
          "id": "4c357708-b664-4449-a43e-4785909b99c6",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "fef7c675-d2ea-4268-a7ff-986673065964",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 0
        }
      },
      {
        "id": "d657ae3b-861e-46ce-9f2c-1ba5d0196a07",
        "cursor": {
          "ref": "8e53f8af-77d9-4657-8ef9-8f52e5170d42",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "856938e9-eb60-4bbe-adaf-829f3dd6ae15"
        },
        "item": {
          "id": "d657ae3b-861e-46ce-9f2c-1ba5d0196a07",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "779639d5-d48d-48b3-9016-6292e37d6f39",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "16532d2c-fd68-4bb6-ab2c-c9016f9c71e1",
        "cursor": {
          "ref": "d4e7b27f-0e9c-4818-8808-c7b8f27d7c0d",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "8b222f81-f90c-4d65-a71b-1ee5488f9112"
        },
        "item": {
          "id": "16532d2c-fd68-4bb6-ab2c-c9016f9c71e1",
          "name": "did_json"
        },
        "response": {
          "id": "a0931477-f3a1-4624-8b08-3618f4f500b1",
          "status": "OK",
          "code": 200,
          "responseTime": 278,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4392a52-ba01-48ed-bfd7-13b77343b12e",
        "cursor": {
          "ref": "ef5a38c6-37c8-4902-b5d4-533906c9ef5a",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a4c55ab6-1b91-45e7-91c7-b7b244785c88"
        },
        "item": {
          "id": "f4392a52-ba01-48ed-bfd7-13b77343b12e",
          "name": "did:invalid"
        },
        "response": {
          "id": "182fad0b-96fd-420a-b3cc-a39bf6704156",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4392a52-ba01-48ed-bfd7-13b77343b12e",
        "cursor": {
          "ref": "ef5a38c6-37c8-4902-b5d4-533906c9ef5a",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a4c55ab6-1b91-45e7-91c7-b7b244785c88"
        },
        "item": {
          "id": "f4392a52-ba01-48ed-bfd7-13b77343b12e",
          "name": "did:invalid"
        },
        "response": {
          "id": "182fad0b-96fd-420a-b3cc-a39bf6704156",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed59a0b7-67b5-4930-9793-40f4edb138c9",
        "cursor": {
          "ref": "0bdda785-4b36-40c5-bde6-6a94402c7745",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "6d2b7d33-da93-46d9-93df-e186cff07e32"
        },
        "item": {
          "id": "ed59a0b7-67b5-4930-9793-40f4edb138c9",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "6fb4a5ce-0e95-4196-a391-6cf57101764d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 133,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73f496cf-5d0a-4211-91e6-171e154bb3fa",
        "cursor": {
          "ref": "9c7cc4c5-380b-42b7-ba45-be262ea43bf7",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "6de60b66-bd0c-4cea-aeba-5c43ef9aa435"
        },
        "item": {
          "id": "73f496cf-5d0a-4211-91e6-171e154bb3fa",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "1eece3d2-6a65-42c8-87ef-1aa87870d7ca",
          "status": "Not Found",
          "code": 404,
          "responseTime": 83,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e452e06-5b02-46ff-905d-2547ae53cfa4",
        "cursor": {
          "ref": "ca505a50-07df-4302-8afb-ae4ba3a3be24",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "043175f2-10f2-45bf-8cde-10279202d9ce"
        },
        "item": {
          "id": "9e452e06-5b02-46ff-905d-2547ae53cfa4",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "66cb418a-c666-4211-b0fa-5002ec314b92",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 69,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b255760b-f494-40e7-aa69-56ff5cb66faa",
        "cursor": {
          "ref": "8ac204e9-ec4c-43f6-8cca-c58985cd0759",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b7c4cc94-6e71-4c33-a1e5-a16ddf49ca62"
        },
        "item": {
          "id": "b255760b-f494-40e7-aa69-56ff5cb66faa",
          "name": "identifiers"
        },
        "response": {
          "id": "b7dfaab0-1e36-4683-b0f3-b8cc29305d20",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ea9a94d-500f-4454-8c88-43a3430f3b48",
        "cursor": {
          "ref": "d713975a-d9bd-4d04-a004-636abb3e8023",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c8c8abe5-06c1-4f98-a74c-1c3162d08c41"
        },
        "item": {
          "id": "8ea9a94d-500f-4454-8c88-43a3430f3b48",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "29d44c46-9f0e-4aee-a915-06f1e9572cf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94f947bb-c599-417f-bca4-e0567206d02c",
        "cursor": {
          "ref": "1449b34e-7b14-47d4-a451-d5d8bdb655d9",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8b070b12-d87e-4544-b911-c7573ab15c7a"
        },
        "item": {
          "id": "94f947bb-c599-417f-bca4-e0567206d02c",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "0e7c9cc0-5680-4cf4-b41b-9468bd053fb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f01b45b4-9d61-46cc-9d30-1fec27d8d124",
        "cursor": {
          "ref": "aa8212bd-4977-4594-becd-252a256310c3",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "42e96444-c03a-4f27-ab72-2cda00a55dcc"
        },
        "item": {
          "id": "f01b45b4-9d61-46cc-9d30-1fec27d8d124",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "bb3828a2-2853-4f9f-addb-9e1df5a3d0cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f12226ac-e8ea-46ed-8f1e-d2f5a9a239fd",
        "cursor": {
          "ref": "0c628182-4c43-446d-8593-641f17b437a2",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "b9d0e62c-6264-4447-92b5-10f086b6e83d"
        },
        "item": {
          "id": "f12226ac-e8ea-46ed-8f1e-d2f5a9a239fd",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "2ecaa674-9dce-46e3-a399-96f95bec792e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f7706ec-9dce-4e6e-8286-53bc3aa48b33",
        "cursor": {
          "ref": "70c067f9-abd2-4ad5-9ec1-db0d1743652f",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "af4fec29-59e2-49f6-bab4-25647e4dbd3a"
        },
        "item": {
          "id": "7f7706ec-9dce-4e6e-8286-53bc3aa48b33",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "8e35c075-a173-4396-92b7-865bcd053ed1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e937bb5e-fe22-49e9-a176-3562f01815fb",
        "cursor": {
          "ref": "cf08e813-e4d4-4348-8cfa-1ac85bd1bd1b",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "d20d0c3b-cf2f-4de8-88b7-8710ada1afa6"
        },
        "item": {
          "id": "e937bb5e-fe22-49e9-a176-3562f01815fb",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "f6a3a83d-e98b-4621-86f6-4e367b5f3a49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "329e30af-d07c-4076-a3ea-6f4d56ae49c2",
        "cursor": {
          "ref": "93028e44-e266-486e-8e04-0919018217de",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "0e35738b-18fe-4ad1-9bb8-82571bc306d4"
        },
        "item": {
          "id": "329e30af-d07c-4076-a3ea-6f4d56ae49c2",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "afd90f75-acbd-46a3-bcb1-7f8b409c9e78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99ad703d-6030-4249-95ba-73b5b8bb27d6",
        "cursor": {
          "ref": "1721a840-0ad5-4299-9698-dbdb76d14e15",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "4c7015c4-6676-4d70-9ec9-80ada7bec7c6"
        },
        "item": {
          "id": "99ad703d-6030-4249-95ba-73b5b8bb27d6",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "eba3a455-c0b8-4b1c-b94e-2b15b06b06cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5564c146-e6f4-4d86-b5d5-50d04180c2c7",
        "cursor": {
          "ref": "0f554982-81f5-4917-91d7-f5469cdcd743",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "fed57851-38e0-4131-a6cc-003e755675fd"
        },
        "item": {
          "id": "5564c146-e6f4-4d86-b5d5-50d04180c2c7",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "0be8434f-252b-449c-9176-7a587acc91a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f36cf5b-ec79-4f6b-8843-e04a8d1999fe",
        "cursor": {
          "ref": "b1cfb9ff-e471-4788-825c-22ae79deadfb",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6d1b6460-f0e2-43b9-927a-8c478b42c851"
        },
        "item": {
          "id": "7f36cf5b-ec79-4f6b-8843-e04a8d1999fe",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "c3c8880c-b3e6-4e39-83a6-d56d4362092a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "749e952e-ed7e-4947-824a-22b7dd27357b",
        "cursor": {
          "ref": "d8f5139f-b765-42c3-adca-747646dc91da",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "8453aad9-3385-4c83-8c35-1c62474dcf26"
        },
        "item": {
          "id": "749e952e-ed7e-4947-824a-22b7dd27357b",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "09475a29-f512-4666-b36f-5d521382a7b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b5ec661-617b-4186-a557-0f459eb3c4c3",
        "cursor": {
          "ref": "2619a21f-8325-41a8-9aae-c50274d554e5",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "7d764fb0-b250-4962-a897-e58d04978254"
        },
        "item": {
          "id": "8b5ec661-617b-4186-a557-0f459eb3c4c3",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "d1f4a252-8dd9-4d98-892e-e013afcfd065",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5035ee82-4495-4ab6-9bf7-4429f04d15c0",
        "cursor": {
          "ref": "2511e57d-3bac-4c11-a53f-22cf16331f33",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "fe489d19-9a27-4134-9996-1e770c76eeac"
        },
        "item": {
          "id": "5035ee82-4495-4ab6-9bf7-4429f04d15c0",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "a1ec68c7-fa61-4b53-855e-9b98885b64b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4e1776a-bd28-4e16-bfae-ea2e5583fd08",
        "cursor": {
          "ref": "e12cd9d6-fa80-4828-857f-d6381e28c855",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "1a43bc50-0e35-450f-bc0f-a31c244e9999"
        },
        "item": {
          "id": "f4e1776a-bd28-4e16-bfae-ea2e5583fd08",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "6ad0477b-8bf2-47a2-a665-1c170a0326c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29dff434-80c2-4c5a-99f6-0c9ab1111ef7",
        "cursor": {
          "ref": "9907d051-ac22-4dd3-8054-8fbe0167733e",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5232a7db-78c3-4ce5-92a1-0a6633f7ae61"
        },
        "item": {
          "id": "29dff434-80c2-4c5a-99f6-0c9ab1111ef7",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "8a34fa47-2180-4062-98ec-2d30be6f4ecd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2399f0e-fcf8-44a4-b26f-c082f4fc1f59",
        "cursor": {
          "ref": "141ab082-0313-4a21-a84b-74414dd77e9d",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "42e02911-4fd7-4883-9aab-93bb8ad0c08c"
        },
        "item": {
          "id": "c2399f0e-fcf8-44a4-b26f-c082f4fc1f59",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "e2814015-615a-4356-9172-8172acb2cbd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1825492-e5ff-41ad-a635-7d58dcc22136",
        "cursor": {
          "ref": "d45716c9-e98f-4cdc-b3c6-124626455fc0",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "2415fe6f-4163-45a5-a394-8a85abe62cb5"
        },
        "item": {
          "id": "d1825492-e5ff-41ad-a635-7d58dcc22136",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "fab312f9-9fa5-4df8-b4ce-c1a6e89f1047",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61c48c14-f0af-4191-9949-4bb1b3116dc6",
        "cursor": {
          "ref": "8c672fde-2d06-4c6f-a758-be0428979358",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "6959f860-7e57-44a4-81b6-3a5e2401b340"
        },
        "item": {
          "id": "61c48c14-f0af-4191-9949-4bb1b3116dc6",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "505160f3-5795-4260-80f9-f557342ffad3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5a3e620-d206-4f51-befa-752cbd6eedd3",
        "cursor": {
          "ref": "f017de34-8966-43eb-a94a-97b0604482b6",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "73b8ef7d-ab19-47e4-8012-c7b9a75a8bda"
        },
        "item": {
          "id": "a5a3e620-d206-4f51-befa-752cbd6eedd3",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "18b92f63-7762-4d2e-8229-414f641f4244",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f674091f-3873-4472-8764-e1594f607d97",
        "cursor": {
          "ref": "cc972c81-d8b4-423f-bbf6-74e6d9d25c35",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "7ca5258a-141d-4514-bf75-eb446f119a56"
        },
        "item": {
          "id": "f674091f-3873-4472-8764-e1594f607d97",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "98222ef1-1d7f-4a00-8204-01a46977a975",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f38e9f2-f2d9-439b-a388-8d6c7879eb58",
        "cursor": {
          "ref": "77ddd2fe-91d7-4e99-ae49-cbda47cf04dc",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "d5d14c18-4730-4fde-81dd-159891353b69"
        },
        "item": {
          "id": "1f38e9f2-f2d9-439b-a388-8d6c7879eb58",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "19d6b82c-1919-4e2b-93c0-ac3b7cdb1b3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a43b56a-8750-4619-9d2c-3872466d7039",
        "cursor": {
          "ref": "6130ce69-85ae-4c2f-8e09-5f1e235d8c5e",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "f62068de-8658-4ad1-995c-16b1261e01a8"
        },
        "item": {
          "id": "4a43b56a-8750-4619-9d2c-3872466d7039",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "7bd5258e-ed5c-4e08-a0cd-5e0ff2e490f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8306ae1c-364c-476f-b76b-4fd07bd106d9",
        "cursor": {
          "ref": "feb6584e-e827-4bed-902b-7631fa69520d",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "07952ac8-82a7-407f-a8c7-82a964870c4e"
        },
        "item": {
          "id": "8306ae1c-364c-476f-b76b-4fd07bd106d9",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "32c4ddce-3421-4d26-b4d6-fd6c11109225",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0270d3c0-9201-4738-b0d1-922041faf71a",
        "cursor": {
          "ref": "1350c01f-631b-4cde-a722-76d319b2a9ba",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "f05a5cfd-c059-4b92-91cd-1f9816b03229"
        },
        "item": {
          "id": "0270d3c0-9201-4738-b0d1-922041faf71a",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "39c5a32f-f00b-4992-bd69-8821a17e41cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0f6bb6f-9530-4fd4-af1b-9b33a552c800",
        "cursor": {
          "ref": "06b7a3da-b3bc-4b18-827d-0b8f80c01cc6",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "f04f32ee-1836-4cd6-8622-556556571659"
        },
        "item": {
          "id": "d0f6bb6f-9530-4fd4-af1b-9b33a552c800",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "2dde47c8-be35-42fd-b198-f637236fd4ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc35a3e5-ac58-4237-9fba-9a499fedb417",
        "cursor": {
          "ref": "73b5db13-dd4e-4a00-a8d8-594b22e59edb",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "4d66ee23-91eb-44d9-a31a-fa97d88c85f3"
        },
        "item": {
          "id": "cc35a3e5-ac58-4237-9fba-9a499fedb417",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "2906dfc4-78d8-4d92-93ac-dbf7ccb9adf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "483bc63f-b735-4de2-84dc-bf9596d5a696",
        "cursor": {
          "ref": "5e2404e8-539b-439f-871d-8b54f8aeb2b0",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "ec34a5b9-9938-42aa-b5b6-6955a51250c7"
        },
        "item": {
          "id": "483bc63f-b735-4de2-84dc-bf9596d5a696",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "ec7e94c2-b379-47d9-adbe-ade31a091b9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9900c9d7-f836-4043-92ab-6b549d9db208",
        "cursor": {
          "ref": "d35429e9-55db-4368-9fde-a5abfe4be3b5",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "1066f0ad-fa6c-4398-89df-7f195a23c808"
        },
        "item": {
          "id": "9900c9d7-f836-4043-92ab-6b549d9db208",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "978bacf2-ff7b-49df-8b47-0b9b90a3476d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f38cfaf2-728a-4a60-bfc9-d78733b368a6",
        "cursor": {
          "ref": "f45db872-0c0a-4ace-b390-cb6c6dcdf8e2",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "772b722f-41ca-44de-b992-b955d721298e"
        },
        "item": {
          "id": "f38cfaf2-728a-4a60-bfc9-d78733b368a6",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "f423e902-a156-4171-be82-171e97bcb0e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adf826a6-5fe5-4fa7-9fd9-d2624b25ef5c",
        "cursor": {
          "ref": "a3dca8ff-7f9a-4157-b298-bdabed68d44d",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "79edfb5a-9381-496c-8788-3e41c33f8a85"
        },
        "item": {
          "id": "adf826a6-5fe5-4fa7-9fd9-d2624b25ef5c",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "83c8f396-71f0-475d-8eb0-0dfdd92ecd73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "123c0306-e793-41e4-b448-ff780d4cc368",
        "cursor": {
          "ref": "3d87c12f-9205-4011-928e-428d8e0b41fe",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "908e4be0-6615-4147-8cb8-c94f33915597"
        },
        "item": {
          "id": "123c0306-e793-41e4-b448-ff780d4cc368",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "b7d6f400-1a13-4bdf-b89d-1c3de66de79a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 83,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "2b91c728-98aa-4a3e-81ed-66e694fc8c92",
        "cursor": {
          "ref": "35fe9298-b136-4cd5-8154-001244e2d451",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "0aeadadd-20f7-4e8e-8db5-68197efa49bf"
        },
        "item": {
          "id": "2b91c728-98aa-4a3e-81ed-66e694fc8c92",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "cd8c3598-c7ca-4901-952d-3f1314000129",
          "status": "Created",
          "code": 201,
          "responseTime": 2208,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "9037dcef-775f-4b22-a948-b13bdd6b42ed",
        "cursor": {
          "ref": "7111710f-2af3-4d73-a0da-10dc4a15c1f7",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "399cb617-5c98-4c2c-8584-da51d09e950a"
        },
        "item": {
          "id": "9037dcef-775f-4b22-a948-b13bdd6b42ed",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "88141711-317c-417d-bbd8-cb21070d8526",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 79,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "c51cdfb6-1b18-47ad-872a-4f6579740e36",
        "cursor": {
          "ref": "21909e86-815a-4dde-bc9e-24084dc6cbdf",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "6e7bf385-7eee-455a-84e6-8aa7db8e1516"
        },
        "item": {
          "id": "c51cdfb6-1b18-47ad-872a-4f6579740e36",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "eaafbfd0-9de4-4749-8d4a-1fefa1542b37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84c52464-4115-452f-8ce8-260c43024649",
        "cursor": {
          "ref": "3ad35dc1-73f0-41aa-8b31-d057da1242b2",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "0b789eb8-8e24-48ce-acae-c2e04134d21c"
        },
        "item": {
          "id": "84c52464-4115-452f-8ce8-260c43024649",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "0bcb8424-dab2-4a15-8418-7bea65331ea4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 81,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "a3d1af16-4ca8-49a9-b41e-42e5ded3181d",
        "cursor": {
          "ref": "36ff5ce3-5eba-412c-8dbb-eea5dd50483d",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "9a131012-1ed1-4083-ba63-ca904e6d7747"
        },
        "item": {
          "id": "a3d1af16-4ca8-49a9-b41e-42e5ded3181d",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "b5c3ef1f-7dea-49da-b430-d25dac940128",
          "status": "Created",
          "code": 201,
          "responseTime": 1606,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "b09c93c1-57f8-4fb7-b57d-2f0624e663b0",
        "cursor": {
          "ref": "a0d44584-8f36-4336-ad39-2535e5e27077",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "27d1655a-3e61-4ae8-a901-306ed851d9a5"
        },
        "item": {
          "id": "b09c93c1-57f8-4fb7-b57d-2f0624e663b0",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "7b934b21-21cc-4869-83ab-04428e68d1d8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 79,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "9f42e451-b148-4f2f-adc3-596e3713f35e",
        "cursor": {
          "ref": "fe3bcd19-b457-4393-a6f8-920e50bb0451",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "5f96511c-a5c3-4c11-b307-fcbc053bdd73"
        },
        "item": {
          "id": "9f42e451-b148-4f2f-adc3-596e3713f35e",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "bdd99776-f581-4319-a4b9-5dd08bd48d15",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 825,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "2b02900a-3dc3-4495-bceb-364d3a1d268a",
        "cursor": {
          "ref": "bc575357-c1a0-4ea1-89f7-c554f2682025",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "019fd4f0-b746-42b0-8a8d-ed65f7371195"
        },
        "item": {
          "id": "2b02900a-3dc3-4495-bceb-364d3a1d268a",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "601b6831-5238-4b74-8bd8-b55e17b4c93a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 84,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "38032b52-a543-46f4-aede-f3d3b8d50bbc",
        "cursor": {
          "ref": "85f6caa8-49dd-466e-8baa-91497b4897fc",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "9b99d52c-96cb-4973-b5d6-0c1e0657d09e"
        },
        "item": {
          "id": "38032b52-a543-46f4-aede-f3d3b8d50bbc",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "b312a87f-2f83-452a-a70c-717a193e7833",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 78,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "2abe4bd4-2d3a-4235-9221-05fffea97619",
        "cursor": {
          "ref": "2e0108fd-0f3f-4467-9d8c-83ddac2cf1ae",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "f4b313e9-cbdd-470e-bfae-0cd840f00771"
        },
        "item": {
          "id": "2abe4bd4-2d3a-4235-9221-05fffea97619",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "a8a22d48-e39f-4de6-b7b8-1c51cd118ca9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 79,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "f65766ab-a826-47ac-89f4-fa2dccf554b1",
        "cursor": {
          "ref": "2dce9db6-797a-4d1c-b9ac-e4c7bca924a5",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "ebe858fc-c720-4ed2-8cc6-38bea5cf83e7"
        },
        "item": {
          "id": "f65766ab-a826-47ac-89f4-fa2dccf554b1",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "959e8924-5811-4ce6-bfa0-22922d553fa7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 84,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "52c33076-09e7-4426-9a87-702b635e404f",
        "cursor": {
          "ref": "80a27d49-62b0-439e-9daa-2fea9cb710d0",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "ae760f74-fb4f-408d-9a35-32cc6998043f"
        },
        "item": {
          "id": "52c33076-09e7-4426-9a87-702b635e404f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a7efad37-7093-423b-a858-647f96a9404f",
          "status": "Created",
          "code": 201,
          "responseTime": 1100,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "ef28bd24-0a7b-43d7-83c8-afc0010ae15b",
        "cursor": {
          "ref": "d3a07640-a941-4039-88ea-bd2e399d2811",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "df73bbb2-5704-4806-b877-49645bd26835"
        },
        "item": {
          "id": "ef28bd24-0a7b-43d7-83c8-afc0010ae15b",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "94c58ad2-60b3-4bf0-9f37-29f90e5756ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be3098d7-e5da-4651-9d12-3c9221981e5f",
        "cursor": {
          "ref": "ee4e9f3f-6447-4712-9ed5-52c080d05473",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "ec5e3ca4-f800-4dbe-896e-0ebb9362092d"
        },
        "item": {
          "id": "be3098d7-e5da-4651-9d12-3c9221981e5f",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "22cf9877-800c-46ec-a81b-3c017a42a561",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "291e6ae3-664c-4b5c-b539-0d9776c92381",
        "cursor": {
          "ref": "9c7d4ffb-5a58-4db2-897e-ca91f9c1dd49",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "4034f86c-6620-4eb3-ba02-5952c7302039"
        },
        "item": {
          "id": "291e6ae3-664c-4b5c-b539-0d9776c92381",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "339b3c98-dbe5-4791-a926-3bd14d948d2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a01d32a-63e8-4d8c-b5a1-3b8557d70fd7",
        "cursor": {
          "ref": "ee25ac47-914f-4d85-afd3-c9b91155c26a",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "37e308bc-67c1-4a7e-9e61-07ad6d3d9c85"
        },
        "item": {
          "id": "2a01d32a-63e8-4d8c-b5a1-3b8557d70fd7",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "978ca1c3-e34f-4854-9977-e40a761b9d35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db9e10f1-9ca0-4a92-9fe5-b2114c80e938",
        "cursor": {
          "ref": "dd3d845e-45f0-467e-a810-e51a128e3113",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "6c0407ac-2a8c-4c3a-a854-88df1961a974"
        },
        "item": {
          "id": "db9e10f1-9ca0-4a92-9fe5-b2114c80e938",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "96556e77-7d7a-4d2e-a961-7700dd07bbb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80bf87cf-a08e-466c-af25-a5ff45ff9ef4",
        "cursor": {
          "ref": "59555c4c-e971-48b0-85a5-03b083fe7e63",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "089f81ce-b145-4ed1-827a-3fb5f63f9da0"
        },
        "item": {
          "id": "80bf87cf-a08e-466c-af25-a5ff45ff9ef4",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "ae3922bb-da1a-442c-bf16-682081984c24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c55c6163-c62d-448e-ac27-bdf8926eac6e",
        "cursor": {
          "ref": "a92d7a38-10dd-4cbf-8b1b-a95ba8c5bd44",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "5510336f-de56-4763-b670-a2e533772fa6"
        },
        "item": {
          "id": "c55c6163-c62d-448e-ac27-bdf8926eac6e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "7c23b3fb-e5c6-4f5f-8670-917bdfd267ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76c792ce-5e88-45da-ab2b-3e1c2e2b8436",
        "cursor": {
          "ref": "48605b5a-d073-42c8-bdb6-633708a3b66f",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "377da84d-86aa-4035-a0d6-362519feb5ce"
        },
        "item": {
          "id": "76c792ce-5e88-45da-ab2b-3e1c2e2b8436",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "cfed54af-d634-4bcc-a7c3-ac831e3f75cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4b0b287-372b-4f81-9f44-7a6906a0156b",
        "cursor": {
          "ref": "e947d371-f262-4cdd-b140-0221f88bc87a",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "11935bad-d955-44cc-a855-62d1404d6268"
        },
        "item": {
          "id": "e4b0b287-372b-4f81-9f44-7a6906a0156b",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "c8cd3031-4633-4b31-bb9f-1bd0efe008e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8868a95-9105-42ca-93f6-e8af9263ba12",
        "cursor": {
          "ref": "4433a929-1432-475e-b041-634a876a02d2",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "d8d08d3d-919a-4485-b076-fa59c7904a69"
        },
        "item": {
          "id": "e8868a95-9105-42ca-93f6-e8af9263ba12",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "f038f401-56fb-42ab-89e2-e53656ab35b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38eb6964-e7c5-468d-997f-f1ac73076c86",
        "cursor": {
          "ref": "dd620a01-cfc9-4067-8233-284197920bd3",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "95824660-ff9c-472d-ba5b-804b4b1799e9"
        },
        "item": {
          "id": "38eb6964-e7c5-468d-997f-f1ac73076c86",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "8a56a72b-72ac-4624-983a-9a351285625c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff95e277-039f-4589-9292-2e9ece1fd754",
        "cursor": {
          "ref": "fb7800e9-06b8-498f-8310-a8c8b21dc9fd",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "c181c269-83ac-4155-a6fc-008db574898e"
        },
        "item": {
          "id": "ff95e277-039f-4589-9292-2e9ece1fd754",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "505d62a7-c892-4c8e-ac37-d78600ae6532",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a8bec8c-b5d7-49c5-b158-001e45fc1330",
        "cursor": {
          "ref": "5a05930f-8756-4d0c-b1ed-6eedb44e5b93",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "854b45ee-e480-479d-a7d2-a4291146e325"
        },
        "item": {
          "id": "3a8bec8c-b5d7-49c5-b158-001e45fc1330",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "0be191ea-3960-4e44-9b46-5e3680e2fe0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04023c33-cc55-454a-b6f3-b280935ac613",
        "cursor": {
          "ref": "095d730e-a61d-449c-ba37-6291b9aaf371",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "eb7d0d6f-127a-4039-970d-d73adba6c602"
        },
        "item": {
          "id": "04023c33-cc55-454a-b6f3-b280935ac613",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "151f2248-68b1-4314-b985-ff6bb5377c40",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 788,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "899006a4-350a-4769-a1bb-6f765cf9621e",
        "cursor": {
          "ref": "ceae8fde-b651-4c50-9c09-c5710adaafdd",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "a9e6c868-1ac8-4f9e-b758-d77ba46fff34"
        },
        "item": {
          "id": "899006a4-350a-4769-a1bb-6f765cf9621e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "85b44d0c-10cb-4d63-9cc0-d8c1c7cb25d4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 830,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "ac7ac4b8-0010-476e-a51f-9c0c36dd1094",
        "cursor": {
          "ref": "282e12d9-8512-43a5-acdc-999acbf44aaa",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "62913e49-4d45-4985-b67a-ecc056825b78"
        },
        "item": {
          "id": "ac7ac4b8-0010-476e-a51f-9c0c36dd1094",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "da4a86cc-8e15-45be-885e-58b6942fc61b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 79,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "58443780-c70c-45c2-8e4e-e3778f737b5d",
        "cursor": {
          "ref": "7f43a676-d972-40ff-87a3-9f57d084f4e9",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "9766a65b-7592-4fa9-beb7-69992c918401"
        },
        "item": {
          "id": "58443780-c70c-45c2-8e4e-e3778f737b5d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "4e056e23-a9ab-4856-8547-f0ac9bda9fee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 841,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "3c32958b-a53f-49e4-a9a4-b8adae661b40",
        "cursor": {
          "ref": "9576bfdb-2cab-4123-a451-ec34a3b83c21",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "48f9dbee-8813-43f4-88c6-50bba1c9d1e5"
        },
        "item": {
          "id": "3c32958b-a53f-49e4-a9a4-b8adae661b40",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "0de924ec-a9ed-464a-868d-e1857a277aba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 77,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "a912cc8b-063f-4f7b-be9a-50ffb2e07ec7",
        "cursor": {
          "ref": "e493d474-cca2-4f56-ab67-ce5249010fd4",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "c8915346-28a6-4a69-814a-14ac7b6a27b9"
        },
        "item": {
          "id": "a912cc8b-063f-4f7b-be9a-50ffb2e07ec7",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "0ea4c96a-f4fb-434a-bd2b-6a3d2fffed62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a9884a9-9646-45ee-82ca-c0b2b913bad2",
        "cursor": {
          "ref": "14f670e5-5e30-4451-8a39-5a7328e497db",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "162cc1c2-1f3a-4b8c-8353-5060b3af8ae0"
        },
        "item": {
          "id": "1a9884a9-9646-45ee-82ca-c0b2b913bad2",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "fdbc0340-ee19-4339-b776-3f95d9fb25b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0324a4b-5ce0-4fba-a98e-4c8bc072e042",
        "cursor": {
          "ref": "7237cb29-f443-4dfd-903b-d6b439cd7780",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "d243dc50-293b-4ba6-a9d8-c6e177e1be01"
        },
        "item": {
          "id": "d0324a4b-5ce0-4fba-a98e-4c8bc072e042",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "e7bb45fb-4dec-445c-8f36-8dfe361ae5ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73154a50-df5c-4c15-9e00-80e2e75f61a5",
        "cursor": {
          "ref": "cacba6b1-c62a-4f20-ad7a-276bf8f6ee16",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "3babb491-5e1c-4527-88c2-c0ed184b1af4"
        },
        "item": {
          "id": "73154a50-df5c-4c15-9e00-80e2e75f61a5",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "a59bef39-3d8b-4094-8188-27f64d1dc804",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4506bf3e-b342-44ed-96c7-4c2104b31ea9",
        "cursor": {
          "ref": "2c3dd55f-89c8-4c3b-b102-e46406f47ff7",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "d0591709-78ad-47c8-b5a5-167b8a3c00da"
        },
        "item": {
          "id": "4506bf3e-b342-44ed-96c7-4c2104b31ea9",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "da8d26e1-8ff2-4033-aa77-52482f585a72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f33241f9-2385-402c-87b7-253b8a32af86",
        "cursor": {
          "ref": "1cd90594-d7a9-49af-bca7-0f9aecbe490e",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "56eb5068-9b72-4589-a6fa-f87e4f2398b5"
        },
        "item": {
          "id": "f33241f9-2385-402c-87b7-253b8a32af86",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "db3b5c75-22e3-4fa8-aa16-22d1e708d31e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fd4caf0-5992-49e8-a78d-11fb5ae4b759",
        "cursor": {
          "ref": "d6eeccc1-2d01-4000-997a-1223e0710782",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "3712c60c-a4ba-42f1-ae54-3f523c299c66"
        },
        "item": {
          "id": "1fd4caf0-5992-49e8-a78d-11fb5ae4b759",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "7e138eaf-3ce3-4503-8d70-580811f8080e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9133bbf6-1467-4ee6-95bc-55b53556a9cd",
        "cursor": {
          "ref": "c94939f6-9fe5-45e7-b285-0162ee29c1ec",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "1ac1f09f-f04a-4fab-860f-9a8cea70ec15"
        },
        "item": {
          "id": "9133bbf6-1467-4ee6-95bc-55b53556a9cd",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "e8281a12-6af9-4aa8-913e-d1b72fa68dc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13f010ed-e712-4005-b14f-e739fbd1b4b7",
        "cursor": {
          "ref": "86872819-6e3c-4a5a-b03f-bf599ef74bb8",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "9f6b4797-6fdd-4589-9e7a-b406e05f488a"
        },
        "item": {
          "id": "13f010ed-e712-4005-b14f-e739fbd1b4b7",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "6b790851-2314-4d18-bcbd-be2c3e9584bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22b5d364-2525-414d-98d1-1d0b948f5584",
        "cursor": {
          "ref": "a3bd4339-6bc7-4e34-bdb3-992a0df1e21c",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "692c315b-7b89-4c0e-855f-dcd837b80d06"
        },
        "item": {
          "id": "22b5d364-2525-414d-98d1-1d0b948f5584",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "c76e5bbb-432e-411d-a1d2-e4cdcabd6ce5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28852b05-d85f-4545-ad04-e3ca9ecf84f9",
        "cursor": {
          "ref": "f0aac6fb-270d-4bd3-9ed3-ffd1175bdb00",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "4b609e3f-0dfa-4105-9588-056a4586b2a2"
        },
        "item": {
          "id": "28852b05-d85f-4545-ad04-e3ca9ecf84f9",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "1b1a16d0-1dea-480f-8caf-accf02562daa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ea63117-0434-4a74-bdc4-e6cf3e4470b3",
        "cursor": {
          "ref": "41cbeb54-4e63-44f9-add8-c6431ab6e15f",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "1c439c89-eb8e-4deb-bf93-f95f92d95536"
        },
        "item": {
          "id": "7ea63117-0434-4a74-bdc4-e6cf3e4470b3",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "77accead-4805-460d-badb-ce29e2c42412",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac2aa52b-6131-4676-af19-89cdcb064d79",
        "cursor": {
          "ref": "0a61fff8-28d6-4427-a655-17bea3a563a3",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "9844292c-ddcd-4492-b26b-2489cc0ed47d"
        },
        "item": {
          "id": "ac2aa52b-6131-4676-af19-89cdcb064d79",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "feaf2125-b779-4e8c-92f9-01b80f6790fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff2414dd-466e-428b-bde5-076b4fdb3e65",
        "cursor": {
          "ref": "fdda9f8f-fb30-46ca-909d-78b6b97ed76d",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "b1ccbb8a-c9f9-4c6a-8497-6779105bae4a"
        },
        "item": {
          "id": "ff2414dd-466e-428b-bde5-076b4fdb3e65",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "357fddfe-22ae-4532-889d-65fcd0be56a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eb3fc45-5155-45cc-a986-aa418078920a",
        "cursor": {
          "ref": "095231fb-45c5-4c2d-8ed5-9d2f907d508f",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "409a5005-d9eb-447a-8925-18de9eea1867"
        },
        "item": {
          "id": "8eb3fc45-5155-45cc-a986-aa418078920a",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "e5adc17e-b133-427c-a0e7-408fbdce0955",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34631ff9-414d-4ef3-a7a4-3de929a2dd7b",
        "cursor": {
          "ref": "4a9199a4-b5f7-4355-b708-88419126dab8",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "ff174bb6-4b4a-4236-a890-f248b6ff08db"
        },
        "item": {
          "id": "34631ff9-414d-4ef3-a7a4-3de929a2dd7b",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "f1dbd17e-16b3-4f8f-92cb-c884850586d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a182727-bd07-45e9-8f9a-8b07f48ce4e3",
        "cursor": {
          "ref": "d0784fb0-556f-4ebb-a12b-81cbecc21214",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "0705f3ab-dfa6-4cb5-9df5-d4cee36f4507"
        },
        "item": {
          "id": "0a182727-bd07-45e9-8f9a-8b07f48ce4e3",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "f743ca3d-fb3b-4e65-934b-37821a699f17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f1a0f42-825d-4f12-b276-c7391219fc5e",
        "cursor": {
          "ref": "4621846d-279f-4b75-921a-cdc132fed6bb",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "3a236c14-6966-47fd-b3d9-76579705b555"
        },
        "item": {
          "id": "4f1a0f42-825d-4f12-b276-c7391219fc5e",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "6330dd87-c551-4eed-a0f5-66218df49e83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15c5b586-cfbe-45d1-9f19-444aecb5d178",
        "cursor": {
          "ref": "3524ef4f-9cc3-4970-bce3-7b7a1afe2e3c",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "2463e345-8c6c-4693-9fea-3b5a790d102c"
        },
        "item": {
          "id": "15c5b586-cfbe-45d1-9f19-444aecb5d178",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "3ca5363f-0ed7-40e5-84ee-67008fb56001",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abd28a17-dc9b-4960-8cc9-b732dfce11d3",
        "cursor": {
          "ref": "381c6b02-1f45-49d1-a03f-ffe3e3481010",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "a2d5210f-b58c-47e0-a759-a7c7f8aa2682"
        },
        "item": {
          "id": "abd28a17-dc9b-4960-8cc9-b732dfce11d3",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "96ce0ca2-a1df-49cb-93d0-f38ca1dc0e23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83429279-c487-4513-bf37-d7d3620f3fe8",
        "cursor": {
          "ref": "c1a56653-50e5-402d-8ce1-94553da926cb",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "6b9ef387-7826-492e-9427-4db1a5e1d184"
        },
        "item": {
          "id": "83429279-c487-4513-bf37-d7d3620f3fe8",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "a746c46a-636e-4e4b-846b-ea6f437227d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bb35cc4-0f40-4a21-9c2e-5169bd5e59c4",
        "cursor": {
          "ref": "11fae980-2f50-4a95-985a-834e0fa9a46e",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "fce44a52-c251-4790-b941-0bedf4bfe00e"
        },
        "item": {
          "id": "1bb35cc4-0f40-4a21-9c2e-5169bd5e59c4",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "f6eb16fb-58b9-4d35-af6f-7151fde2a15e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c34fe1a-0977-45cc-8594-a47a1d38a0a6",
        "cursor": {
          "ref": "4f9bbc80-8d5b-4534-88e0-6c8034d5ee29",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "13ad5065-3805-47ec-9099-13c7ec3a6860"
        },
        "item": {
          "id": "4c34fe1a-0977-45cc-8594-a47a1d38a0a6",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "720a0bba-bc65-4832-8730-accb222a0484",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fff86e7-2add-4b9d-a14e-e11251729b07",
        "cursor": {
          "ref": "1c345399-7381-4029-8816-52b6faeb59a7",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "a2730427-90d9-43ac-9d19-b627a1a721f3"
        },
        "item": {
          "id": "5fff86e7-2add-4b9d-a14e-e11251729b07",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "14c7d960-6a78-4bb1-975b-4f2de966a941",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c63088fc-274f-479a-a50d-95e87489a4c7",
        "cursor": {
          "ref": "b2e70b9d-62ca-44aa-8252-5d7c070f5c58",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "fe37bb28-0709-4804-9f71-fe4d3932abde"
        },
        "item": {
          "id": "c63088fc-274f-479a-a50d-95e87489a4c7",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "82552c50-ff30-4742-8c64-0069777fb379",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0ffe6fc-edcd-4eb7-bb24-f31b3d5ab4a4",
        "cursor": {
          "ref": "657a1564-0b82-44ab-9c7e-10d2fc1e0b28",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "b5f9f451-a4a9-4243-bd88-27b91292b5bf"
        },
        "item": {
          "id": "b0ffe6fc-edcd-4eb7-bb24-f31b3d5ab4a4",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "5ad864c5-a56f-4497-a3b5-86ea8047afa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75d82dc4-3e73-42e9-963c-492ef4fa9d4b",
        "cursor": {
          "ref": "0677657f-5ee3-4ed0-9f40-be8d5f0fcddd",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "3364a02b-5504-4060-8fdc-42ca085c04de"
        },
        "item": {
          "id": "75d82dc4-3e73-42e9-963c-492ef4fa9d4b",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "f4e7905b-ccaa-499e-b336-863dde285470",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72df892e-1dc2-4dfd-93c5-9de01edb4cc6",
        "cursor": {
          "ref": "b06ec737-0ecc-4c35-848c-bb637c44b01d",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "503f72ab-979e-47b4-843e-d94bcbee476f"
        },
        "item": {
          "id": "72df892e-1dc2-4dfd-93c5-9de01edb4cc6",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "9a5754e0-0862-4c94-aa21-35bbcaba255f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2e998d4-5ae6-4652-ac4a-2c4bc5807a02",
        "cursor": {
          "ref": "50df6810-baa3-467e-80d1-be0040539986",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "0b042eff-46bb-4603-bd07-2826c378bf9b"
        },
        "item": {
          "id": "e2e998d4-5ae6-4652-ac4a-2c4bc5807a02",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "9a09ca7c-2729-49e1-9b59-5bb37652107e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b132525c-12fb-4c30-ba55-acf995a24bfc",
        "cursor": {
          "ref": "96a58911-7a0a-4b00-bf8e-6a6510f7d0da",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "6a09b1f1-1d09-47c5-bbeb-6d2bcd524a61"
        },
        "item": {
          "id": "b132525c-12fb-4c30-ba55-acf995a24bfc",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "e94ea167-7621-495e-b146-f4a6a88276ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2effae35-df4b-4f6b-9b44-6b751ff3203f",
        "cursor": {
          "ref": "d3875242-7422-4381-ab5e-1049c3e8cfa3",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "79d1731c-b728-4359-9203-0c5fbbfe6268"
        },
        "item": {
          "id": "2effae35-df4b-4f6b-9b44-6b751ff3203f",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "73cf00e0-21e2-43d8-ba41-b6a0ae5fa6a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f764af3-0134-4832-8507-2d353739b192",
        "cursor": {
          "ref": "343198f4-a60e-449a-8a1a-251626a6e2bf",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "3e4c4382-25dd-4965-82bb-76b03562912d"
        },
        "item": {
          "id": "4f764af3-0134-4832-8507-2d353739b192",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "7cf5b439-78d3-4f0e-9677-a33ae920142b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99523146-1cf8-450c-8c59-4844021ccbe4",
        "cursor": {
          "ref": "ed45e90c-ab03-431f-aa26-e8efa9ad569d",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "0f3e1cc7-804c-454c-a61b-fa0983465355"
        },
        "item": {
          "id": "99523146-1cf8-450c-8c59-4844021ccbe4",
          "name": "credentials_issue"
        },
        "response": {
          "id": "d7b62548-dfd0-49ec-a1d0-c827230ca3b2",
          "status": "Created",
          "code": 201,
          "responseTime": 1643,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "42b22991-bc82-46b1-87cb-6013ade83a11",
        "cursor": {
          "ref": "82119acf-88d0-4b05-8e10-890a337ab2ad",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "66269c52-59fc-4d5a-9794-b58ff5c42a0d"
        },
        "item": {
          "id": "42b22991-bc82-46b1-87cb-6013ade83a11",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "be6f6505-c41e-4aaf-b79e-55d5c8227ac4",
          "status": "Created",
          "code": 201,
          "responseTime": 1021,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb54f8f1-faf5-45f4-87f0-3f42b12aba97",
        "cursor": {
          "ref": "0ab190c8-1f1e-4a4c-9460-bcbb7f8c74ab",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c07a1a78-4c11-4b7c-bd6a-d919642e8c0e"
        },
        "item": {
          "id": "bb54f8f1-faf5-45f4-87f0-3f42b12aba97",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "115d0cb7-ecb1-4507-802b-7cd120240383",
          "status": "Created",
          "code": 201,
          "responseTime": 1094,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba66da7b-79ec-40ef-90ab-b8f87198a401",
        "cursor": {
          "ref": "cb4b6fa9-1433-4029-91e9-951a5c4c2346",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "d913612f-b97c-46ae-a6e8-0d8a23a1cd24"
        },
        "item": {
          "id": "ba66da7b-79ec-40ef-90ab-b8f87198a401",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "b7a9d063-fd23-4b4b-bb13-bc53faffa741",
          "status": "Created",
          "code": 201,
          "responseTime": 1068,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbb803cd-c082-45cf-94f3-ff1860d81bf7",
        "cursor": {
          "ref": "2e8ec431-9a5a-4e5d-8fb6-71bab584a386",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "3d4061c0-98dd-4f8c-8587-dd588157eb1b"
        },
        "item": {
          "id": "dbb803cd-c082-45cf-94f3-ff1860d81bf7",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "211855a6-2f89-468b-b19b-b29c609569ab",
          "status": "Created",
          "code": 201,
          "responseTime": 1063,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4486203-676e-429d-9530-68194672b8a1",
        "cursor": {
          "ref": "f0f3d12f-cb61-4868-a584-77caae697530",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "d938b8c6-389c-4d41-ab22-302a5388a6ef"
        },
        "item": {
          "id": "b4486203-676e-429d-9530-68194672b8a1",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "c1000b72-c259-41c9-992f-47f0f920c204",
          "status": "Created",
          "code": 201,
          "responseTime": 1093,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bccedd89-ba4f-4feb-b04b-86fd86f58e35",
        "cursor": {
          "ref": "3c6b79b0-cb37-4bd4-986c-f2c0af576ff0",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "910c9faa-d637-4d92-a261-acc09d93580d"
        },
        "item": {
          "id": "bccedd89-ba4f-4feb-b04b-86fd86f58e35",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c8717428-c25b-47e6-943b-a3d219d25561",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcef78d1-bf37-4bfa-8a13-10f173ac5190",
        "cursor": {
          "ref": "720171dd-a695-4bf0-bfc3-65c432b870e0",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "a82b6cb4-e35a-49e4-b088-cd47571d2685"
        },
        "item": {
          "id": "fcef78d1-bf37-4bfa-8a13-10f173ac5190",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "95c8146b-dde3-46f4-b73e-98c5c614f9ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d18202cd-a43d-4604-baf0-69037608474f",
        "cursor": {
          "ref": "7523dd91-113c-4d5c-b7f7-6f03916119e6",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "4ac35222-fd93-4613-af48-eda8e22241d2"
        },
        "item": {
          "id": "d18202cd-a43d-4604-baf0-69037608474f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "5122ba81-bb15-45a5-82d8-cfa9be89e5cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d2fe6c1-9ed2-40b9-9a73-3b601bbc45cd",
        "cursor": {
          "ref": "2b15be3e-3359-4835-a688-8c9ec05bf98a",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "1b38cec2-b3bb-4653-9247-bf4148c59006"
        },
        "item": {
          "id": "3d2fe6c1-9ed2-40b9-9a73-3b601bbc45cd",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "158e770f-2049-4f13-a1ec-279a0372349e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0daeebc2-b173-4348-8549-816c5c078bbe",
        "cursor": {
          "ref": "14578bf6-e0b1-4f25-9772-77151cdabc49",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "abc24f05-49dd-44ac-af7e-9e14f5cd7478"
        },
        "item": {
          "id": "0daeebc2-b173-4348-8549-816c5c078bbe",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "239f1854-5a15-4648-b689-91ea0cd496e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cf1b64e-0c13-4019-9b73-0e9b39eb9807",
        "cursor": {
          "ref": "2317ea11-3105-4661-bf7d-8e449b95dca6",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "7370850d-0523-4a20-9919-dd6d5743fe98"
        },
        "item": {
          "id": "3cf1b64e-0c13-4019-9b73-0e9b39eb9807",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "b132a363-554c-40f7-ac66-4a80e2aa47c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fbfa016-d70a-4ea6-bedd-1bdafe5ca12b",
        "cursor": {
          "ref": "963cabab-7674-4ac7-b3d5-814a4aa4314d",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "235a7c05-6bac-4c64-b890-e84cbc4b231d"
        },
        "item": {
          "id": "6fbfa016-d70a-4ea6-bedd-1bdafe5ca12b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "2ac5c0db-8afc-4dd9-8d19-d811e71583ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc20b48e-57ef-416f-8bd6-20c35b9d8f80",
        "cursor": {
          "ref": "0821064d-b3d9-42aa-b72b-61fa172013b0",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "f2ea57b8-1ff9-4e8d-b0b1-bb2f25271c37"
        },
        "item": {
          "id": "cc20b48e-57ef-416f-8bd6-20c35b9d8f80",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5b1cb654-821b-4d2f-ae3e-63b72c5dcbf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "860dd912-6bbb-4e0c-9180-4f0ad13f52b2",
        "cursor": {
          "ref": "3c7034d5-b344-4d72-a0e9-1ed488199e67",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "7814de3f-3e18-4c29-9912-bb27e3e3c32d"
        },
        "item": {
          "id": "860dd912-6bbb-4e0c-9180-4f0ad13f52b2",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "8c1493b6-a9ef-473c-a310-02917ccf4bb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c85cbe5-c464-400b-bc83-920a5a59cb31",
        "cursor": {
          "ref": "871d8c69-2390-4922-aaa7-b576638a2a46",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "1d7e7fc2-a428-4e2f-9c8a-d1e2ca6c45a0"
        },
        "item": {
          "id": "5c85cbe5-c464-400b-bc83-920a5a59cb31",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "161fb00a-ce2f-4dda-a4e4-bc912d181069",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfdf9815-1d6d-4520-9670-942e4947f879",
        "cursor": {
          "ref": "53e08513-7df6-49b6-a02f-58fe09863e74",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "6b0105f8-0f69-4c5a-851d-bbd4cc670f8f"
        },
        "item": {
          "id": "bfdf9815-1d6d-4520-9670-942e4947f879",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "436fbd39-c3a3-4f9d-b539-b60474f9435a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f35c0e9-cdf0-4f95-acc6-dacc8542fda3",
        "cursor": {
          "ref": "7f2fa702-e1a4-4c17-a190-84dd601ed05a",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "c8f32b77-de3e-4c9c-98af-68a11099145b"
        },
        "item": {
          "id": "6f35c0e9-cdf0-4f95-acc6-dacc8542fda3",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "1e1c7ad1-7abc-4329-bf65-8569f8fe0d2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a2d64b8-fd89-41dc-973f-0fd5f971b278",
        "cursor": {
          "ref": "a9592694-ff0b-42a6-b1a6-9f4369e82f1a",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "1492324d-50b4-44cb-bab8-ebd7d3f23706"
        },
        "item": {
          "id": "9a2d64b8-fd89-41dc-973f-0fd5f971b278",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "6b23ea92-1346-4dc3-8d5a-a214652bf1c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8ef64e0-2763-4da5-99f1-cd28f1ef01b0",
        "cursor": {
          "ref": "a7245c5c-c5bc-41fc-92e4-af994cc92201",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "cd353008-65fb-4427-8462-c6bfff434f05"
        },
        "item": {
          "id": "a8ef64e0-2763-4da5-99f1-cd28f1ef01b0",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "e8d58ea9-0f98-4a07-8edf-8726520c77cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65193b3c-6cbd-4963-ac91-019e611d6b93",
        "cursor": {
          "ref": "950172be-b95e-42b6-927d-879437d82d2c",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "83a32775-620e-4b56-9657-fb568a3a3da5"
        },
        "item": {
          "id": "65193b3c-6cbd-4963-ac91-019e611d6b93",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ac623273-cb58-40f0-a3ec-e00b8b314f08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e28a6772-7d95-486a-9998-20f4dd35417a",
        "cursor": {
          "ref": "d8ac7567-e0b6-4701-90f0-6dfbf1d65885",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "eae13cc5-594f-4582-ad2e-263f658989c6"
        },
        "item": {
          "id": "e28a6772-7d95-486a-9998-20f4dd35417a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "1fb7887b-0ca7-47a4-9bb2-062472f49129",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b8852de-9afc-4f8b-b6a1-acaae82c0730",
        "cursor": {
          "ref": "81d369b7-fa01-45a8-a4ca-7c4d25971a04",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "d4628577-2963-4b86-9b78-663c2d31b1b7"
        },
        "item": {
          "id": "4b8852de-9afc-4f8b-b6a1-acaae82c0730",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b2933de4-8402-4d97-b737-0df35383f62c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f104c86f-6022-40ae-bb69-373c1802ac27",
        "cursor": {
          "ref": "01999df5-73cc-4ef2-b50c-2b3e3b6d3769",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "5a4e766f-49e7-419f-9681-0bca8ce1e30d"
        },
        "item": {
          "id": "f104c86f-6022-40ae-bb69-373c1802ac27",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "7ae864d8-2dcc-4816-8918-4c24b9deffd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd6fc853-2377-4d24-b549-51258e0f2bab",
        "cursor": {
          "ref": "df700914-a3cc-49b5-a984-5af8125a6460",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "fa300119-a992-4645-a309-a3a574c53e3b"
        },
        "item": {
          "id": "dd6fc853-2377-4d24-b549-51258e0f2bab",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "27646ba8-ff9a-489f-a6fc-5ca30dc4c725",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c5827aa-c11f-47eb-bac6-959308d4c297",
        "cursor": {
          "ref": "495aa9f4-d39f-4099-820c-a01fb97b3f46",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "b44e94ac-5d6e-44c7-9190-652cb5215365"
        },
        "item": {
          "id": "6c5827aa-c11f-47eb-bac6-959308d4c297",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "19925e42-3e28-4106-9d80-dc86d87c54cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "806b707d-35d8-4b4e-99dd-94c5b84c8216",
        "cursor": {
          "ref": "2dcba828-d638-4d8b-bca8-f9ac3fe79415",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "18635d92-9c44-44ad-a4b1-036a99dde990"
        },
        "item": {
          "id": "806b707d-35d8-4b4e-99dd-94c5b84c8216",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ca15db76-2d0e-46db-8253-12677646a40e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ac4dc5a-c267-4075-98a8-3d648c82f53d",
        "cursor": {
          "ref": "4fc162f1-5686-4bae-9ce1-676b67f0cf1c",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "465d6fed-1ac3-4acf-a77f-dd1b36a1d1b3"
        },
        "item": {
          "id": "5ac4dc5a-c267-4075-98a8-3d648c82f53d",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f5ebb860-248f-4671-a64e-7cf1f4c68a25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d65543a-383e-474c-8e83-e2d66d0cc791",
        "cursor": {
          "ref": "8c7b3b57-deea-45ce-af5e-6a660ad7f1f8",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "0ed12979-6ddb-4c5d-a4e2-8579afe3469c"
        },
        "item": {
          "id": "4d65543a-383e-474c-8e83-e2d66d0cc791",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "8dc222fd-b2a2-4f7b-98a4-9be5b208d0ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1a16eb0-ac24-44e6-85f7-b4a2d66711ca",
        "cursor": {
          "ref": "91090755-365f-4b1e-9910-bbf289f54b0e",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "642b4b1e-f0e6-44e6-94c1-82ec284b67f2"
        },
        "item": {
          "id": "a1a16eb0-ac24-44e6-85f7-b4a2d66711ca",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "6f9b1f5f-e517-4734-8389-65916ce642a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46981800-f811-47de-adc6-432c809a565e",
        "cursor": {
          "ref": "ef06bdb6-5cb9-440a-a708-737e8f06afc9",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "46f783e3-1691-4114-a598-48d428b896a7"
        },
        "item": {
          "id": "46981800-f811-47de-adc6-432c809a565e",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "70deba25-6eb5-406f-9e21-a2f5e652b3b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6b55d59-4d05-4f13-8592-2232e7b10c87",
        "cursor": {
          "ref": "98ffefc3-887a-4584-a4be-5d8f4ada3826",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "48013ee1-b185-4c52-b3f9-38aa866deb12"
        },
        "item": {
          "id": "a6b55d59-4d05-4f13-8592-2232e7b10c87",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "503ac62d-38fa-4d8c-952e-4c0f5c53ca51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de19847f-25b2-4214-bc7d-92720d81bb2a",
        "cursor": {
          "ref": "2219a084-3451-4164-92dd-8deab49a6e8e",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "a1b1f8f0-85fe-4e04-8fec-eee9aaeee2c5"
        },
        "item": {
          "id": "de19847f-25b2-4214-bc7d-92720d81bb2a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "23d5f0ef-4df1-47dd-a03d-6b4b5d8da143",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b68b5322-3b83-4880-8492-9d0f0cb650e5",
        "cursor": {
          "ref": "9ff298aa-e079-4f7b-853f-98fcc5734f7f",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "5db6bebc-def2-4add-8828-8f7a980030c1"
        },
        "item": {
          "id": "b68b5322-3b83-4880-8492-9d0f0cb650e5",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "7e3f6af7-963f-457d-99f8-c76297847d1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "165ac252-0d19-4a00-89ac-8fae793a8262",
        "cursor": {
          "ref": "9a996c7a-3b10-4dec-9a07-642be86a26fd",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "2b21da8b-a7d1-4a40-9422-2c8dcc3bb1ad"
        },
        "item": {
          "id": "165ac252-0d19-4a00-89ac-8fae793a8262",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "2800467b-eec9-4006-8baf-804d768cdfde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0c62016-4a71-4c99-83f1-a098b7fe7a9a",
        "cursor": {
          "ref": "d6b26b0e-88f6-4532-a8ff-0734215f67c7",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "6f2f4eb7-cfc6-4d67-a0c5-ff9e293f2d56"
        },
        "item": {
          "id": "a0c62016-4a71-4c99-83f1-a098b7fe7a9a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "c8c4f119-7ecd-4493-86fb-09f074f27306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b999ba2-f835-4bd9-8791-cb0cd81519f2",
        "cursor": {
          "ref": "038d7d70-1af7-41fc-873e-b9f2ffe953a7",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "41a31425-031d-454f-897d-d33660529b7c"
        },
        "item": {
          "id": "0b999ba2-f835-4bd9-8791-cb0cd81519f2",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a0128172-010d-4ee3-94b8-f60becf3dcef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d25f831-1b1c-47d2-b2f7-f9e4896719fb",
        "cursor": {
          "ref": "dff0804d-7079-4af2-81a4-536e4e1fe0ec",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "45ad336d-ad09-459c-97a6-6e30fbce5f1d"
        },
        "item": {
          "id": "9d25f831-1b1c-47d2-b2f7-f9e4896719fb",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "b98c61e3-e30c-4407-9621-472d26e79179",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ac35119-6475-4f7b-bb18-d28af7d65fc4",
        "cursor": {
          "ref": "66dcec1e-cc63-4e96-b4f8-09bac54968a3",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "f6f16b61-968a-4a76-bdbe-50ac0fd1d4b5"
        },
        "item": {
          "id": "6ac35119-6475-4f7b-bb18-d28af7d65fc4",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "13203f60-9aff-46b4-a808-481778021f06",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11aecb2e-928b-40b5-bdb6-533d4b7974b2",
        "cursor": {
          "ref": "c7a83efa-0404-4ca4-b154-4ba3cd706910",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "9151a08f-dad0-46bf-9fa9-2a7959d5f0ea"
        },
        "item": {
          "id": "11aecb2e-928b-40b5-bdb6-533d4b7974b2",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "84ae65c6-a4fc-4cbe-a9da-7f5fa427f06f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33712ac3-7c01-41bb-b876-44d8fc6005d6",
        "cursor": {
          "ref": "7f1d153d-ba69-4e7d-98ab-9d87aadd9ae1",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "bb23fbcc-c246-4ee0-9eab-2591ac65f9c4"
        },
        "item": {
          "id": "33712ac3-7c01-41bb-b876-44d8fc6005d6",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f9c79048-efe2-4670-83e7-9ab0c8dcde89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5d3d97d-94ba-4801-a7c7-a1434c1853cb",
        "cursor": {
          "ref": "32456652-042d-439c-9b29-84cb483bba3a",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "acd5f257-736c-40ac-a682-47bc3b0a0e71"
        },
        "item": {
          "id": "d5d3d97d-94ba-4801-a7c7-a1434c1853cb",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b6a364a0-1ab1-4054-b04f-b6c80ccc85bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ad9de27-edc5-48c8-904e-296d7617baa6",
        "cursor": {
          "ref": "2b5d29a5-1781-43af-9001-ea8cf3efba0d",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "2fee9e6c-ea0e-4797-bb1c-aea6a9deb73b"
        },
        "item": {
          "id": "1ad9de27-edc5-48c8-904e-296d7617baa6",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "070e3075-305c-4284-ab2f-74689072cd37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a88acbe2-48e2-470e-be74-5680169d9899",
        "cursor": {
          "ref": "9ee77658-bc37-4454-9325-ad693389f2f7",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "240d5e7f-02b5-4974-ac63-05ef4a6eaeac"
        },
        "item": {
          "id": "a88acbe2-48e2-470e-be74-5680169d9899",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "01c9a81f-fbc5-4dd2-a533-bf60a939d083",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f874e96-b124-49b4-b3a3-facb41205fb5",
        "cursor": {
          "ref": "0223aa6c-8187-4ccb-b8e5-5f66ad9ea11b",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "61372002-1202-4028-ac77-3681de10c687"
        },
        "item": {
          "id": "0f874e96-b124-49b4-b3a3-facb41205fb5",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "cb132e53-bff1-4460-b90c-fe0086af8a79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78307460-88df-41ec-b51d-a419b93c9ed6",
        "cursor": {
          "ref": "aeb79ee7-f3de-4cef-983b-1a13212ef2ee",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "92d09cdf-77f8-4c42-a18c-bcc5cd8551aa"
        },
        "item": {
          "id": "78307460-88df-41ec-b51d-a419b93c9ed6",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "6d853758-f1cb-4d30-9fc3-5fa23c905b46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "288d242d-ee9f-4f2f-b89c-b4da65cb42af",
        "cursor": {
          "ref": "9b8e27fa-804f-447a-be08-543a74e1af8e",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "a26e91a1-b4bb-4673-9b6c-6179f1d08bd6"
        },
        "item": {
          "id": "288d242d-ee9f-4f2f-b89c-b4da65cb42af",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "946e2b7e-70bd-4d24-ad4a-2f955d20be7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9dcfa4d-e78e-4c77-a7d0-a1d23b54394c",
        "cursor": {
          "ref": "aa4b3692-c547-48a0-a07d-e4e8491408aa",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "00d52756-7729-4330-bb06-cf5db3d620f4"
        },
        "item": {
          "id": "e9dcfa4d-e78e-4c77-a7d0-a1d23b54394c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f945b5d5-2eb7-4325-8ebb-79dfaa1854a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "512d04c3-0ee6-4692-9425-d0208217f3dc",
        "cursor": {
          "ref": "aecfeaaf-504b-4fe6-b5f4-ddfc65ac1280",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "1ae9fefb-a0bb-4184-aab1-f686ea692e31"
        },
        "item": {
          "id": "512d04c3-0ee6-4692-9425-d0208217f3dc",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "442358c5-145b-406e-a506-4a34fbb341b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce8a0048-3731-4278-b2b3-1eda1ba6bbd6",
        "cursor": {
          "ref": "36a6b96c-0c78-4f4c-8033-cb6033b0de58",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "8792453a-354d-4203-b8aa-1abba192c9e6"
        },
        "item": {
          "id": "ce8a0048-3731-4278-b2b3-1eda1ba6bbd6",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "6fe16899-64db-4dda-8cf9-ed541f66b085",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aaa5ac4-d7d2-4f22-ba13-c88d95f21fca",
        "cursor": {
          "ref": "b41e9981-1dd2-4c96-8d55-5215e8b237e7",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "233cd9d3-0d91-4462-9d02-4f1e5e360d07"
        },
        "item": {
          "id": "1aaa5ac4-d7d2-4f22-ba13-c88d95f21fca",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "3ab72ce1-21c1-4f43-bcea-aeb4c57d4ba6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e05bc40d-958f-4e1f-aad3-c4f203d74365",
        "cursor": {
          "ref": "7084dc00-6a63-4b70-9cf1-124b11d189a4",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "821cc3de-2c92-4551-aeb9-b603710ec8f5"
        },
        "item": {
          "id": "e05bc40d-958f-4e1f-aad3-c4f203d74365",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "5d515425-395c-4c1c-b11a-658f879cac33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07d72107-daf0-41c5-89ed-819bfc0d2705",
        "cursor": {
          "ref": "2f343dad-89ef-4fb8-b4d7-c06f11a2f036",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "bcdd8705-486e-4e5d-ab30-e78f15a3d252"
        },
        "item": {
          "id": "07d72107-daf0-41c5-89ed-819bfc0d2705",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "8f9fa27f-2acc-4f44-a111-0676a27581a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03ccc263-96ed-47ff-9451-3be4f5019d31",
        "cursor": {
          "ref": "d629356a-f347-45f3-ba94-6afc422118cc",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "6a60271e-6318-4617-8e2a-55b28f2709aa"
        },
        "item": {
          "id": "03ccc263-96ed-47ff-9451-3be4f5019d31",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "655b0141-62a9-4542-8338-6637f1b05b59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4baf93c0-67b9-4b93-87d0-165188a6a331",
        "cursor": {
          "ref": "0aeb228d-ae4d-43b5-a77e-1798f82a5c8c",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "9e41bf33-7033-403f-bc3e-fe4089486208"
        },
        "item": {
          "id": "4baf93c0-67b9-4b93-87d0-165188a6a331",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "79905fe1-0a56-4c10-ae30-45005ae48bac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fccc52e-3d6c-4101-a3b7-49a561567634",
        "cursor": {
          "ref": "54123e13-df1a-4d72-b41a-506956bd582e",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "d755cee7-e15e-4084-ac05-1a574aca7ab5"
        },
        "item": {
          "id": "9fccc52e-3d6c-4101-a3b7-49a561567634",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "f3c1a2a5-4173-4c64-a939-70667f3a9cb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "489f0718-93e6-4323-898b-85d32b941bd0",
        "cursor": {
          "ref": "49ed38fa-372d-446c-b437-a7a6006c42b6",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "1859dcd2-2eb5-4d8b-b264-3e2eb682d80b"
        },
        "item": {
          "id": "489f0718-93e6-4323-898b-85d32b941bd0",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "a2df6d6c-26c7-45ac-a607-11603951edf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "222ab85a-0285-468b-8667-007d373da5aa",
        "cursor": {
          "ref": "d6959ba0-172f-4bdb-92d5-c58959a83751",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "2e6b79c8-e3a9-42a5-9b1e-5f193ae2402a"
        },
        "item": {
          "id": "222ab85a-0285-468b-8667-007d373da5aa",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "240084ef-3973-4bbd-8637-0fb83d7fb894",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0393a1d6-fa7a-4ac0-adbc-2a0b9901d8d4",
        "cursor": {
          "ref": "19e8f828-94e9-4c22-8518-42949c757f26",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "9a28b3eb-9929-4e54-98a6-87251c0d4580"
        },
        "item": {
          "id": "0393a1d6-fa7a-4ac0-adbc-2a0b9901d8d4",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "93142951-3311-496c-9a70-14513fdbfb29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d9c93ad-726d-4d23-86a4-2cdb12c9bc40",
        "cursor": {
          "ref": "10342970-1581-49ca-8484-dad799a2240b",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "a43d41f5-c78d-4b31-acd8-dd5bb583e8e2"
        },
        "item": {
          "id": "7d9c93ad-726d-4d23-86a4-2cdb12c9bc40",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d7806d0b-1a32-4935-a173-d7f321741d7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59b7da2c-cb82-4b72-8325-a61b16155e46",
        "cursor": {
          "ref": "ce85b80a-6f9b-48cb-aae1-570921996018",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "eaad4fcc-2d0c-465e-92f6-f5fcc2d917c0"
        },
        "item": {
          "id": "59b7da2c-cb82-4b72-8325-a61b16155e46",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "2042368b-377d-4bcf-b857-83c88726951f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e03a7eb-bc36-4aa4-b8e8-fea35388df34",
        "cursor": {
          "ref": "9ad097f5-6e27-4669-8dd4-723b9b8c41cb",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "0601a133-dbd5-48be-8dbb-fbb1c52e515b"
        },
        "item": {
          "id": "0e03a7eb-bc36-4aa4-b8e8-fea35388df34",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "7eacdf85-d0d0-4009-b945-0d826f22422d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac387827-869a-4dab-bc10-119363154a58",
        "cursor": {
          "ref": "64a9c401-4a0e-4d1c-9f14-237d7c0d4f37",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "fbf65abd-a0cc-4e72-876e-4919ee8ccdbb"
        },
        "item": {
          "id": "ac387827-869a-4dab-bc10-119363154a58",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "8dc7e38b-00c8-4494-bf67-bd3be8fc6f3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b64327d-efe3-4c08-b29d-ff4a9a745c22",
        "cursor": {
          "ref": "28a5b230-5a80-4775-a347-e837dc72e969",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "09bac47b-c500-4cfd-9fb6-b4d365acf2c5"
        },
        "item": {
          "id": "0b64327d-efe3-4c08-b29d-ff4a9a745c22",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e64fc2cb-c8e1-4cc6-ae26-ddcfe45958b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4db22595-64f2-4119-b637-dd48cfb44128",
        "cursor": {
          "ref": "98b1fea9-25e3-4c5c-85d0-d47c6a4671a1",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "9fb62665-26ab-4c36-a543-ffb9f950deda"
        },
        "item": {
          "id": "4db22595-64f2-4119-b637-dd48cfb44128",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e1e8242c-1f4c-4aba-8546-4a5ecf7737c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e37c1e18-4b6e-49fe-8699-3bb84b806ccd",
        "cursor": {
          "ref": "8401e028-becc-481f-9430-16f140fd4fb6",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "a0758119-7929-4545-b290-5b75805e0cd7"
        },
        "item": {
          "id": "e37c1e18-4b6e-49fe-8699-3bb84b806ccd",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a7ba6ea1-a9a5-4365-bb71-33e9303e9c9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a78d5086-fba6-4e9d-aeda-dc5f81ca3009",
        "cursor": {
          "ref": "7bc0e146-e86e-44a3-8a14-1c293ef0f208",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "a14fe7f3-483a-4772-8537-4b2c330dd39c"
        },
        "item": {
          "id": "a78d5086-fba6-4e9d-aeda-dc5f81ca3009",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "66173015-99b5-4a30-abd0-d93b89059d5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09b1402b-248b-49c2-b378-c4026d932478",
        "cursor": {
          "ref": "1fbbe671-5bdf-4dd3-aff9-6af314318b5a",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "ea06e307-69e4-4005-a105-ad174ef4ac15"
        },
        "item": {
          "id": "09b1402b-248b-49c2-b378-c4026d932478",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "58794298-54f0-4398-91d8-375746d69601",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7087b11f-b1b7-427b-9fce-cd11f3e21b0c",
        "cursor": {
          "ref": "8cc4d2e9-24a4-48b7-97b5-e0ea12ecf99a",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "f1f07b7d-f433-4f33-b175-4066262b1199"
        },
        "item": {
          "id": "7087b11f-b1b7-427b-9fce-cd11f3e21b0c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "ae0f38d9-4b04-4edb-b0f4-bf4ca8f1549d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fc83c73-b065-4412-84df-6a11fd996696",
        "cursor": {
          "ref": "2c83a771-6563-4e02-ac85-610f5ba6ed69",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "98d35daa-d988-4990-85b2-0347edf31253"
        },
        "item": {
          "id": "8fc83c73-b065-4412-84df-6a11fd996696",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "4b6daafc-4539-48e3-adba-7bced4c7b4a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6399894-57b0-4b0e-a739-6f44ed810239",
        "cursor": {
          "ref": "1d06d331-f25a-489e-8fa1-ca84fd344f50",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "02ccb871-01e7-4cbd-97f8-d0cbcd326380"
        },
        "item": {
          "id": "d6399894-57b0-4b0e-a739-6f44ed810239",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "16059167-91a1-4abc-876b-780d15349e80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c565a952-09fd-467d-a8aa-f4cb3c239ef6",
        "cursor": {
          "ref": "3aa72277-ea81-4e9d-b30b-e520a1a28c69",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "440a0ac7-6fe5-4cd9-8e16-a2d62421bfbe"
        },
        "item": {
          "id": "c565a952-09fd-467d-a8aa-f4cb3c239ef6",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "179f5312-ff0d-47ab-a990-fd21027a6967",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf0b361d-11b8-48e4-b550-7e7cc47b287f",
        "cursor": {
          "ref": "d8a1901c-7b8d-4f26-bfee-b9ed9cf75235",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "8da2fbbe-d4be-448f-9eda-6865f778167b"
        },
        "item": {
          "id": "cf0b361d-11b8-48e4-b550-7e7cc47b287f",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "e2d72f8e-f873-437d-b5f5-088793165fa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b237b22-883e-4fae-9a6e-9ba9f0ff61c7",
        "cursor": {
          "ref": "6a53f73b-419d-4b52-a252-c3f23dcfcbc0",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "49fae904-3d06-400c-828a-c45b53e66dd2"
        },
        "item": {
          "id": "3b237b22-883e-4fae-9a6e-9ba9f0ff61c7",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "e375f426-b3fe-414e-8651-e193918b3631",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cff8f2e-5530-456b-ac6b-7de639007054",
        "cursor": {
          "ref": "e066e27c-451a-4698-b621-6ba76f48ac29",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b9d2fa59-5153-4418-9d70-a85e82fbf71f"
        },
        "item": {
          "id": "4cff8f2e-5530-456b-ac6b-7de639007054",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "ca011007-87eb-418e-8441-12c7dd8ff879",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64d279b5-0f81-49a8-b7f1-91e9f4a47e61",
        "cursor": {
          "ref": "dcaaa4ea-67da-4088-b6bc-d0a1e6676f97",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "8c5530a5-0b1b-4844-acfa-d37df1dd413e"
        },
        "item": {
          "id": "64d279b5-0f81-49a8-b7f1-91e9f4a47e61",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "35ca9b0f-0538-4d66-94ef-d6a983387680",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b16a1727-9af6-41e1-afed-2938f5c6b5cb",
        "cursor": {
          "ref": "ec2b8c67-a999-45e2-b9af-a7661aad3641",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "caaebc8d-53d7-4b95-9ee2-e65122e35501"
        },
        "item": {
          "id": "b16a1727-9af6-41e1-afed-2938f5c6b5cb",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "29623a00-11a5-40b0-9ef4-0f745e1d70f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61b0c742-a434-43af-8099-d728c8bc7668",
        "cursor": {
          "ref": "51458155-181b-4ab1-9cef-6daabc46e284",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "8c365c98-8421-4d40-a13f-3aca33d662a6"
        },
        "item": {
          "id": "61b0c742-a434-43af-8099-d728c8bc7668",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "c884a1ec-0562-44a4-8217-ed0fbdf3e010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15f8c6ec-961e-4d84-a0d9-752a226628ec",
        "cursor": {
          "ref": "3bf0f8e7-8c97-4b30-a437-bfd49c0cd425",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "454a2546-1e7c-4917-b501-344d4a901757"
        },
        "item": {
          "id": "15f8c6ec-961e-4d84-a0d9-752a226628ec",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "33b77dc8-f773-4d25-a8f2-eae308b7199d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f2d7532-cbb0-4a96-9efa-480fc6888225",
        "cursor": {
          "ref": "4cecc175-145a-4527-affd-5af403f23f9e",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "c82ec886-27ca-4f15-97ab-6665368836bd"
        },
        "item": {
          "id": "7f2d7532-cbb0-4a96-9efa-480fc6888225",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "df918bb4-d654-4eba-aaa0-fa7cb50216da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3a4a6ae-ab12-4aec-95d4-40cb3aac9208",
        "cursor": {
          "ref": "49583918-c30c-46a8-b11a-ee85021c22dc",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "508d48c5-743d-4657-b103-6238787e61ed"
        },
        "item": {
          "id": "a3a4a6ae-ab12-4aec-95d4-40cb3aac9208",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "13fc72f3-f857-4e28-9d9c-b0354d298d62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a217c80d-3cba-4b6d-8c65-b80d76936b82",
        "cursor": {
          "ref": "f5fdebbb-51b8-4891-a3d2-9dbf23600363",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "a9ebe15b-9d51-4647-ac38-66a5ea4c00e1"
        },
        "item": {
          "id": "a217c80d-3cba-4b6d-8c65-b80d76936b82",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "d4026fed-54a8-4152-97da-a13752bea692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8920798b-e623-41ca-abf9-339ce1640e59",
        "cursor": {
          "ref": "b8415525-b5b4-43ef-80b1-e81fc3d7c339",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "147c03ce-fde7-4efe-a5e4-231621acc4eb"
        },
        "item": {
          "id": "8920798b-e623-41ca-abf9-339ce1640e59",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "12342871-be55-48f2-a674-61d4793a86d1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 86,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "31eee52b-a7dd-4e05-9f5a-d230a7ea33bb",
        "cursor": {
          "ref": "c3deade7-8efc-49bc-a84e-7aa40e6c193d",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "ee155cd0-70eb-43ae-9b7b-f6d82ef1599a"
        },
        "item": {
          "id": "31eee52b-a7dd-4e05-9f5a-d230a7ea33bb",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "487f9c62-121f-441c-9dfa-d62d35ded1d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 304
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6836bb8b-60fd-4848-aa15-e9bb061b3753",
        "cursor": {
          "ref": "50d4ecc8-09f8-406c-9d92-4f26dc1262c2",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "6830413f-beaf-4e6d-b71b-7b79f8c555d3"
        },
        "item": {
          "id": "6836bb8b-60fd-4848-aa15-e9bb061b3753",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "8fd0e340-3f98-4a5f-8ffc-11b335a25ab9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8660e0ad-1b0c-47b2-838b-209988d6c2d2",
        "cursor": {
          "ref": "1929db7c-b6e9-4659-8c6d-542cadc1a591",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "46994e38-f245-4289-bc72-0d342a82704d"
        },
        "item": {
          "id": "8660e0ad-1b0c-47b2-838b-209988d6c2d2",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "9394c51e-1cb5-47ad-952b-7a8cb62fb467",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68459627-8c1a-4d55-b073-6659995450ac",
        "cursor": {
          "ref": "dc66e6e6-0647-410e-ab2f-f0e3a82de759",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "5dc92748-b8ab-4d73-b3f4-151372d9ab09"
        },
        "item": {
          "id": "68459627-8c1a-4d55-b073-6659995450ac",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "01c07592-5a4d-4fff-95d0-f4e3d734b263",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fd0bc54-4ac0-49ac-8d39-9152580e7108",
        "cursor": {
          "ref": "a33b1e90-c3cc-4ebd-81b3-ad400428f7d1",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "d2cee34a-a10e-460e-9f20-5bb664b886cd"
        },
        "item": {
          "id": "2fd0bc54-4ac0-49ac-8d39-9152580e7108",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "0f540cf7-501d-40dc-af5f-9a67faa89a59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 304
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a06f8672-30fd-48a4-a8db-0db17c4d47f2",
        "cursor": {
          "ref": "5814bd47-e9ee-48a9-9895-8644c1ce1360",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "08c454ed-ea0f-4a1f-8b43-4237269433b6"
        },
        "item": {
          "id": "a06f8672-30fd-48a4-a8db-0db17c4d47f2",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "aa3a0224-9de6-4394-b0f4-959bceb1abdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fd94b66-f48b-4911-bdfd-771eb2d5d237",
        "cursor": {
          "ref": "5686424c-8aa1-4e04-8faf-5784c6e61946",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "b70e35f0-6119-4d1d-aa32-c8a26a1b5108"
        },
        "item": {
          "id": "3fd94b66-f48b-4911-bdfd-771eb2d5d237",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "15bc206f-1da1-43a3-865d-a378762cfe54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a476a36d-b029-488a-a88c-aeb99e63d0d5",
        "cursor": {
          "ref": "651333a6-9438-4f39-959a-3ee1ebd83391",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "d2647d34-0241-472e-ac4d-bd7c7ccc3f37"
        },
        "item": {
          "id": "a476a36d-b029-488a-a88c-aeb99e63d0d5",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "73ef0e08-f395-4f90-a50d-d7b0e94cb584",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3e8d20f-3f41-46b2-be8e-9f989465090b",
        "cursor": {
          "ref": "fb23e5ab-6d3e-4757-ab30-a38427c0ffce",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "7af65b48-0bae-4037-aecb-d960b210d741"
        },
        "item": {
          "id": "e3e8d20f-3f41-46b2-be8e-9f989465090b",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "0c3bdad9-44c8-4a11-b2c0-162f390ff51f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef886f2a-5dd9-4af9-8aca-5a54a349f34a",
        "cursor": {
          "ref": "a5bca03d-46e0-4f5b-8899-32008bb4b280",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "6905cdeb-8671-48a3-b761-ee47c589db48"
        },
        "item": {
          "id": "ef886f2a-5dd9-4af9-8aca-5a54a349f34a",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "d6a51d7b-3959-4982-8e30-9bd6f16fee54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "427a8701-7257-40c7-b833-0ee397d2caa6",
        "cursor": {
          "ref": "369ad187-c968-459d-968c-4b0eff9ce703",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "51eb721b-b83b-4ee9-bdbc-ebe8601a0ffe"
        },
        "item": {
          "id": "427a8701-7257-40c7-b833-0ee397d2caa6",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "05a3b14e-bfed-4230-9fae-9b596a46517f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 186
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffada20e-2365-475d-bf72-d306965d25ef",
        "cursor": {
          "ref": "29779381-44ba-497f-a724-dca5564de33a",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "2883c728-1c6d-4e5c-8fa0-6d6503b4812a"
        },
        "item": {
          "id": "ffada20e-2365-475d-bf72-d306965d25ef",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "797c15fd-a4de-4614-91f9-f91a0b588453",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b51c3a0b-91ef-4ec7-a0fd-0720f3856372",
        "cursor": {
          "ref": "7ea1383d-4a37-498b-8d9f-5482938548aa",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "7d1dd669-77e2-4e9c-a909-325ffb36a743"
        },
        "item": {
          "id": "b51c3a0b-91ef-4ec7-a0fd-0720f3856372",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "c9e6d7fb-6be2-47f7-8f85-d7a8dc553a1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f619f648-5fef-4643-9f65-dd03957e0679",
        "cursor": {
          "ref": "db26d01a-7967-4f47-a597-358ccf96ab79",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "b7ddf3f0-42bb-4c97-9705-3de04e00757c"
        },
        "item": {
          "id": "f619f648-5fef-4643-9f65-dd03957e0679",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "a0c0933f-dd32-4d2e-8fe6-7864965ae31d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc7c75e1-4372-43b9-8949-5edda2ae7491",
        "cursor": {
          "ref": "2fd0aa61-056a-4a0e-93f7-0ae328b70748",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "c28b7bb2-6830-417b-be9f-1aa190d1f0c8"
        },
        "item": {
          "id": "cc7c75e1-4372-43b9-8949-5edda2ae7491",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "227d9afe-8dc1-4450-9dcf-27bfe473cdc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "574a79f8-1e16-48a1-b065-edcb21bb0961",
        "cursor": {
          "ref": "14068440-02ba-40a1-8ab3-aaa9105819a5",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "5b2ff39e-cc5c-4065-bbe3-3ce9295fdea9"
        },
        "item": {
          "id": "574a79f8-1e16-48a1-b065-edcb21bb0961",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "6085a4d5-5cb9-42a3-bd1c-3932992aee8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c341c6c-f724-4826-9fb6-e6aa3a4f81f8",
        "cursor": {
          "ref": "5cba6d44-8f31-45ad-9fa6-625f471ede89",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "093fffd3-9bf6-4f22-9820-c044fce83712"
        },
        "item": {
          "id": "8c341c6c-f724-4826-9fb6-e6aa3a4f81f8",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "1bc38554-d479-4105-b42b-6e25b192ae58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee75a584-8750-44d7-aaaa-d747aac2552a",
        "cursor": {
          "ref": "80f7262c-9b64-4584-8ca5-731bb3fd170a",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "a19a0607-03c3-4266-a5cd-196df3c974b7"
        },
        "item": {
          "id": "ee75a584-8750-44d7-aaaa-d747aac2552a",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "e873e3ae-c5ca-4db7-a6af-3dad14895953",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31d5f310-5066-4163-ad62-b80bdec4bfd7",
        "cursor": {
          "ref": "0c703aeb-cf81-4852-ae66-03288854ac24",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "eae34e3e-80c4-40c4-93f4-75e90553a316"
        },
        "item": {
          "id": "31d5f310-5066-4163-ad62-b80bdec4bfd7",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "592031e0-1e71-47b1-a8e6-4fff885e4b0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15c92be6-f94f-471e-a0b1-bf15e2855de4",
        "cursor": {
          "ref": "172f1c65-077e-49d3-933a-9b70f189e3c8",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "f99a812f-a0f9-41ca-884a-461cb5c336b7"
        },
        "item": {
          "id": "15c92be6-f94f-471e-a0b1-bf15e2855de4",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "adb96999-86f5-4007-a559-bcb197faebf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e8dd3cc-a8cf-4c8e-8637-43ae9d58faef",
        "cursor": {
          "ref": "77039631-a25c-41e1-a3b0-3cd6fae7ea18",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "1e2a99f6-25a3-44f6-8484-123d0423c351"
        },
        "item": {
          "id": "2e8dd3cc-a8cf-4c8e-8637-43ae9d58faef",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "dd7e6f2d-ecc4-4a6c-8773-5889884a7a2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca79ad9f-2131-4276-9018-63458b379a3a",
        "cursor": {
          "ref": "718cafea-85f6-43f1-af02-c475cd90a4e2",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "b2bd387a-89fb-48ce-b864-8db9536d16c9"
        },
        "item": {
          "id": "ca79ad9f-2131-4276-9018-63458b379a3a",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "27953ffe-c8b1-465c-bdd2-796c6a421826",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b5b3253-4f28-4be8-92d2-fa52172a22bc",
        "cursor": {
          "ref": "de6e0094-e27d-4c74-ad2f-f5f24d5ecc94",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "259517e7-0d36-4062-a49c-d27658bea566"
        },
        "item": {
          "id": "6b5b3253-4f28-4be8-92d2-fa52172a22bc",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "edbd7c62-7095-4770-b5a8-6097433e6034",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b786f77-06be-4d69-899b-e0f3873b0669",
        "cursor": {
          "ref": "97fb1934-fbf3-434e-a6b1-102752183101",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "79ad7c8a-9cbf-4426-93fa-6730bc30588e"
        },
        "item": {
          "id": "4b786f77-06be-4d69-899b-e0f3873b0669",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "2d4d0625-af7f-437c-bb3e-9386127201e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d36467a9-4420-47ac-b9da-0dae5565fdab",
        "cursor": {
          "ref": "f2107e01-6281-4c2e-9524-350bf938a73d",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "be5d53a6-77ba-4d6d-862b-9ba5d72aa74d"
        },
        "item": {
          "id": "d36467a9-4420-47ac-b9da-0dae5565fdab",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "1875f898-4bfd-4f87-93e3-58d0f09c4ebe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76c909b8-80c4-4e25-8e4a-f5f8660a95b1",
        "cursor": {
          "ref": "6740f6c3-365c-45a6-a6b9-e012261732c6",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "cc939bd8-39cb-4669-8d2a-117d75c99fd8"
        },
        "item": {
          "id": "76c909b8-80c4-4e25-8e4a-f5f8660a95b1",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "7086e82a-fc77-49d6-b2b7-de6ead042db6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5152b2ef-7cee-42eb-881c-34475077b725",
        "cursor": {
          "ref": "cbc2cd87-58fc-40fc-bf84-6fcd87a218cc",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "951eeab0-78ba-4f3d-99f1-c14133fec743"
        },
        "item": {
          "id": "5152b2ef-7cee-42eb-881c-34475077b725",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "ca24bc72-c08f-4584-a950-6bbf86b994a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a28a472c-30b3-4174-9b67-fb6aad2c5aa6",
        "cursor": {
          "ref": "36980257-3e75-4d62-9ef9-bac95a79b99e",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "a514cb79-2f62-44cd-b775-49c9a881bcc3"
        },
        "item": {
          "id": "a28a472c-30b3-4174-9b67-fb6aad2c5aa6",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "af79eebd-2324-4113-a1d5-35f6ae69074d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "939afe3a-3b7d-4e27-ae75-20370a5ee388",
        "cursor": {
          "ref": "559dd3f3-a571-43c2-831c-c071f0e34272",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "ab83c15d-7426-477a-8b9e-a63422a673a5"
        },
        "item": {
          "id": "939afe3a-3b7d-4e27-ae75-20370a5ee388",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "a65fec83-2edb-4c4b-aa8f-cc4af4e9bd60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f358472-160d-46dc-aa71-af2061dc0413",
        "cursor": {
          "ref": "dfbe2f6a-d12a-419f-b08d-224799498896",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "e910ef3f-c7fc-443a-b526-9c9857cb9053"
        },
        "item": {
          "id": "3f358472-160d-46dc-aa71-af2061dc0413",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "97c3b3ff-da96-40f0-a059-f7282823a57a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5fdeaba-e4a0-4dae-8da0-e2e135d21f86",
        "cursor": {
          "ref": "d26362a1-da8c-4fa6-a42d-9ec5d81d0ab6",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "1178e717-4928-4341-80dd-3d5a23c7f987"
        },
        "item": {
          "id": "d5fdeaba-e4a0-4dae-8da0-e2e135d21f86",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "8e4b630f-2078-4b0a-b601-0a669e8871d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d15930f2-d234-4019-904e-d3cb4b2cb720",
        "cursor": {
          "ref": "caf3a207-701f-4dcd-9ab6-623053e0a24f",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "5da08f6e-953b-4ec1-bfe2-74967dec37c8"
        },
        "item": {
          "id": "d15930f2-d234-4019-904e-d3cb4b2cb720",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "bf7dde54-1e79-4304-a84c-d3afc847ac5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ab73fc9-00f3-4904-a3c0-2ad5c3fcea9d",
        "cursor": {
          "ref": "91453e39-d873-4442-869c-f7c333cb1b9d",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "948b5c18-4181-417f-9c21-f0034c2283cc"
        },
        "item": {
          "id": "3ab73fc9-00f3-4904-a3c0-2ad5c3fcea9d",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d3068215-2853-4019-848a-7b1471810108",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c7dcd2e-534d-4990-a345-918b665cebd5",
        "cursor": {
          "ref": "260cd939-405b-474f-834a-efd91946a5cf",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "582f2b2d-0a7c-4700-8732-7f3f16fc0bc8"
        },
        "item": {
          "id": "2c7dcd2e-534d-4990-a345-918b665cebd5",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "55227f0c-f702-47d3-97b9-1bb4477f5e24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16de1a9a-32f9-4a4c-920d-a3200fd5a433",
        "cursor": {
          "ref": "4eba9502-6776-4336-a916-80b0679068ad",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "966203c8-d35e-4c6c-9fe5-bd40161f44db"
        },
        "item": {
          "id": "16de1a9a-32f9-4a4c-920d-a3200fd5a433",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "8886186c-9b1a-4cef-b75a-e12fb90d3763",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6da4c223-f8c8-4e6d-833f-8148f6f1a644",
        "cursor": {
          "ref": "084827d3-98f2-4f8e-b842-d9838a3183ba",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "51af4536-88f5-4c7c-b3d3-2795411fa954"
        },
        "item": {
          "id": "6da4c223-f8c8-4e6d-833f-8148f6f1a644",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "61f1efe7-c4f0-4980-bdc9-c5160315cc20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d1b3b5d-8c04-40f4-94fd-f03c84aa9ddb",
        "cursor": {
          "ref": "64329925-e074-4a26-af70-573ee851b9c5",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "7913aa2e-9df6-4914-8476-316f2e454914"
        },
        "item": {
          "id": "2d1b3b5d-8c04-40f4-94fd-f03c84aa9ddb",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "ff872c95-4aab-4e2e-8c9e-a480202a7eb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beeb5519-b935-40bd-9498-1a8ac54981ac",
        "cursor": {
          "ref": "d1f0834b-fcc2-4288-9ae0-7b42fdd8fafc",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "42b95ed1-3829-47d9-8964-421ec8c39f17"
        },
        "item": {
          "id": "beeb5519-b935-40bd-9498-1a8ac54981ac",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "60fe0d42-a55a-4b41-a718-498ddaeff31c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc87a1fe-877b-48d1-96e8-88e76db15168",
        "cursor": {
          "ref": "5af37540-fddc-4eb5-84e9-8f2dba22e3d4",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "f5ee877d-cf7b-48dd-880a-8e66a57db7da"
        },
        "item": {
          "id": "fc87a1fe-877b-48d1-96e8-88e76db15168",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "371add8a-e7f2-4a28-b7a7-5d704671b609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "597e76c6-e140-43f3-b811-45193e13acb6",
        "cursor": {
          "ref": "8a575d3b-5049-4d99-b7fb-6d93464f0b59",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "db600c05-e879-4da3-887f-e4cc4a8d12f0"
        },
        "item": {
          "id": "597e76c6-e140-43f3-b811-45193e13acb6",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "78220c9a-34f7-4301-a463-30ebdd9ba726",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d2807c0-d4d6-4a56-b53d-ceeff258b4fb",
        "cursor": {
          "ref": "8d6c729b-f501-42eb-8e9f-6d77f1adac64",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "4351b990-d73a-488b-960e-3cbac12a60a2"
        },
        "item": {
          "id": "6d2807c0-d4d6-4a56-b53d-ceeff258b4fb",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "d4953742-2763-459d-a7ac-1cc7cda43cf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8884ba73-636f-473c-8387-cc69574df892",
        "cursor": {
          "ref": "8184fbcb-d591-4aba-aade-4c5ecdc71681",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "a59eeecb-d106-4361-9c30-9d7d457085e1"
        },
        "item": {
          "id": "8884ba73-636f-473c-8387-cc69574df892",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "e777f1cc-8140-4a84-8707-7cd350f91b55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b2c4d14-40d5-460e-bc14-ed3fc3975924",
        "cursor": {
          "ref": "c6ddc7e9-c97e-4905-b61c-855d3d358e89",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "ed99aef1-4fbb-41d4-ad1f-1c769f3bad33"
        },
        "item": {
          "id": "2b2c4d14-40d5-460e-bc14-ed3fc3975924",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "43d5fc2d-6782-4ea2-8c12-ccdf28fdc4e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7f7d77b-8f89-42cb-9271-2230d83c103b",
        "cursor": {
          "ref": "b9113adc-5457-4e34-82b0-5d3fc2601b51",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "ebc03de4-882b-4e75-b400-31e34d7d2730"
        },
        "item": {
          "id": "a7f7d77b-8f89-42cb-9271-2230d83c103b",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "6a3c0c06-3910-4c74-806d-38aab20f0dde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a2455a8-c05a-46ee-8cf5-d2f50cb25d0a",
        "cursor": {
          "ref": "85c613d7-e3d8-4da6-bec6-0814f90f3b66",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "52700dbc-9aa4-48d1-884d-c87335f866bf"
        },
        "item": {
          "id": "0a2455a8-c05a-46ee-8cf5-d2f50cb25d0a",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "5dd2bd04-0379-4c80-8764-b58d75e6f509",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fb2a3cc-af5a-4736-ad3c-41a8c953d048",
        "cursor": {
          "ref": "fdb5b754-76a9-4b0c-8231-11d0c017f635",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "9e0c9b84-51b1-4fb4-94f7-eb05c88edf24"
        },
        "item": {
          "id": "2fb2a3cc-af5a-4736-ad3c-41a8c953d048",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "0ccb2a6b-1b42-4fa7-af9b-768afe8f14c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6692b0b-3c3b-4c7c-8ea1-5e8d73bbd2ac",
        "cursor": {
          "ref": "829dc13f-b3d4-4bb3-b9b5-b43d2c454366",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "2ddb0521-5e5c-45df-84a7-0627d42c21c2"
        },
        "item": {
          "id": "f6692b0b-3c3b-4c7c-8ea1-5e8d73bbd2ac",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "bcc2e050-e471-4c85-a95e-0de732dc94cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0ee9899-3b16-4ece-9575-244120ca15f3",
        "cursor": {
          "ref": "85511884-66e9-4432-80f2-f30b9c0219db",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "165d12ea-f0cc-402c-8b41-3217764da92b"
        },
        "item": {
          "id": "d0ee9899-3b16-4ece-9575-244120ca15f3",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "76f60258-aa71-4fe9-92d2-03f564f9e7cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3429a6b-2fd1-4129-9f38-2a9d3a787a03",
        "cursor": {
          "ref": "3da01f7a-b4cb-4a25-a483-60fa45823a67",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "b89a10fa-c4e7-4bc3-85d6-a7bdafe2b993"
        },
        "item": {
          "id": "d3429a6b-2fd1-4129-9f38-2a9d3a787a03",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "c0173f27-c7f2-4d5c-b612-180ef5881897",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "788f8e8e-9569-4c0d-a8ae-2a7d3be342d9",
        "cursor": {
          "ref": "6a6d371e-9709-421d-98e4-7657cbddb3e4",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "fb421d02-be73-4af7-98db-47394db58833"
        },
        "item": {
          "id": "788f8e8e-9569-4c0d-a8ae-2a7d3be342d9",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "93a17657-fc0c-4266-ab73-b653df10f702",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d642b52-89ea-4c47-b6de-a2f1dc0ed9b3",
        "cursor": {
          "ref": "f86680a9-1237-4c69-98b3-2c202c81b9e7",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "df84903a-159d-4f3c-80ba-2d625d646d9a"
        },
        "item": {
          "id": "1d642b52-89ea-4c47-b6de-a2f1dc0ed9b3",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "bc74fb27-6a53-41d4-98b4-4ace6cbf2b9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 330
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a27a9cb7-ee08-452f-bd98-ba5d57df85c7",
        "cursor": {
          "ref": "1b987b1d-0041-49ce-a814-f25e574a062b",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "74049764-588c-4397-ab8f-5a6c20423dab"
        },
        "item": {
          "id": "a27a9cb7-ee08-452f-bd98-ba5d57df85c7",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "2aa84304-eec7-4b20-87b9-f183290c8909",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e907259c-2bdf-4010-b344-8873859e7e66",
        "cursor": {
          "ref": "f32da4ac-35ba-4db0-9f75-bf6d8ca8dd52",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "2372e9c8-9993-403c-bc9a-e1c5bf22543e"
        },
        "item": {
          "id": "e907259c-2bdf-4010-b344-8873859e7e66",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "35c5a076-281d-4da9-a299-a2c09e32f855",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3be760a1-d646-4ea2-ad13-7b4fa9358a26",
        "cursor": {
          "ref": "67882b29-8798-4730-b9a5-fc7088369286",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "2c33bf59-8e4b-4f65-85d1-6974c3d68a06"
        },
        "item": {
          "id": "3be760a1-d646-4ea2-ad13-7b4fa9358a26",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "b5a3bf69-6fc2-4cb0-ad26-00d93150c265",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5263d8a8-f556-46e8-8400-ccd4d7c97c22",
        "cursor": {
          "ref": "ab2ae305-df83-43c4-9dc7-c82b85a9e517",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "4ef073f4-11a8-4380-a650-776755022932"
        },
        "item": {
          "id": "5263d8a8-f556-46e8-8400-ccd4d7c97c22",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "9e7fe09a-9245-4635-9000-ed6b1dc86988",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12513147-c3bf-46e8-a7b4-c3fc41b54fa0",
        "cursor": {
          "ref": "5a3f9548-5fb1-40c2-aebe-5c062e3565dd",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "4dc2eeee-81e2-4ba9-b669-3f2c387dd7d7"
        },
        "item": {
          "id": "12513147-c3bf-46e8-a7b4-c3fc41b54fa0",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "dd47ec5f-9793-43e2-824c-e6b25f8395c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f1f45aa-f4d0-4ac0-ac6c-edcb02dc697c",
        "cursor": {
          "ref": "0a4fb1ab-3b43-416a-a955-095f2f1e97c7",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "eaf533da-cc68-4ae0-8452-db4a8d4f2c49"
        },
        "item": {
          "id": "1f1f45aa-f4d0-4ac0-ac6c-edcb02dc697c",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "4286f454-883a-429f-a156-0fe476fa549d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85a2202c-51e1-447e-ab21-63eeb59dc623",
        "cursor": {
          "ref": "7094e342-9b16-4640-aba2-328161404c99",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "677b9499-38f3-4adc-9456-cd85df609f55"
        },
        "item": {
          "id": "85a2202c-51e1-447e-ab21-63eeb59dc623",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "6aa17f95-5dcb-49e7-ade8-deef700b0c91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23ea5515-eddd-473a-aaa1-9026d3a9dcaf",
        "cursor": {
          "ref": "7f769066-92bb-4f8a-a55a-ad0f7de50e07",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "060b8c17-09a2-4729-82f3-56f17cdb8b08"
        },
        "item": {
          "id": "23ea5515-eddd-473a-aaa1-9026d3a9dcaf",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "7109a9c0-ad4f-4432-960e-e427a9361586",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "678d0a34-a5d2-47bb-9d14-dafb446a8cc9",
        "cursor": {
          "ref": "050c44e9-3b5f-4aac-8db0-800813953aad",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "f76c0876-3fca-4547-9eaf-e2207f6bdcfe"
        },
        "item": {
          "id": "678d0a34-a5d2-47bb-9d14-dafb446a8cc9",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "eaa343b7-bd5d-4f3f-9e2b-c4ca7c502de5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad4c8f10-d26f-49dc-af29-db810ecf3654",
        "cursor": {
          "ref": "4eceaef7-bfb0-4f21-bf9c-a69e6f2fa84d",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "f40e448f-fce4-495e-b98c-14b5f8549837"
        },
        "item": {
          "id": "ad4c8f10-d26f-49dc-af29-db810ecf3654",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "f5745b21-cc28-4d84-97bb-40c1d0be9b95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84261986-299a-4882-86c2-a2846365c06f",
        "cursor": {
          "ref": "f2b45366-502b-4bff-993d-047c1cd0c90e",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "cf5f9e65-fa5d-4907-a5a1-575595a543de"
        },
        "item": {
          "id": "84261986-299a-4882-86c2-a2846365c06f",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "049c7bf9-5d78-4bea-83c7-a6935801d6f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfec0fd3-34b6-42c7-a427-8cade2f93930",
        "cursor": {
          "ref": "fdeaf2b2-274b-4180-b57a-56651a310500",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "3354f330-d589-4616-ae49-7700ee6822fd"
        },
        "item": {
          "id": "bfec0fd3-34b6-42c7-a427-8cade2f93930",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "c8ccb963-8fd5-44cd-a060-2881781fc7f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23732f9f-ec9d-461a-a008-8eca5ec3f47e",
        "cursor": {
          "ref": "e9e77287-21f1-43de-b5d0-a6044e3c5176",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "84bdc6b7-144e-4094-b373-96ffb11dbf7d"
        },
        "item": {
          "id": "23732f9f-ec9d-461a-a008-8eca5ec3f47e",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "77b83a2f-89d0-455d-92b9-7c4b6927fd55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 717
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d7fc5d7-67cc-4582-89c5-10d9f453e422",
        "cursor": {
          "ref": "f0546931-16f8-4c65-a7f6-2c5998e0d697",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "15be2270-31c1-4443-9167-aa33acbd29f5"
        },
        "item": {
          "id": "9d7fc5d7-67cc-4582-89c5-10d9f453e422",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "709d6f68-c8e3-436e-af37-cca16ca3abb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3e0056f-ef6d-408b-a416-b0f72a4d456e",
        "cursor": {
          "ref": "3a42854e-212a-4c9a-824e-36571ecebb5e",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "ce292621-190e-4c5e-8cf6-4e28fae8e792"
        },
        "item": {
          "id": "a3e0056f-ef6d-408b-a416-b0f72a4d456e",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "b9007634-9ea1-4178-b821-f9f296e48202",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d30a5f98-c942-4161-91ec-4841cc8b3f98",
        "cursor": {
          "ref": "55e198ff-a15e-42ba-85f2-54f71e6feb4f",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "91e1a1e5-a93c-41cd-94fb-8366732ed6b5"
        },
        "item": {
          "id": "d30a5f98-c942-4161-91ec-4841cc8b3f98",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "869a2334-cb1e-4f23-aa43-f439f3e48d74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35c492d9-52e0-4d63-9566-338c58cb9391",
        "cursor": {
          "ref": "6f3ca81e-55a7-43cd-af57-5214fd40edb1",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "1ef329ea-c9cb-4b6f-80f0-c34dc55b6118"
        },
        "item": {
          "id": "35c492d9-52e0-4d63-9566-338c58cb9391",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "bc2e820f-12e0-4681-ade1-039debf7c77d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 717
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "995149d3-0c71-4f64-82c3-7d884da6c83d",
        "cursor": {
          "ref": "ed3e13a4-27e4-4f61-943e-e9c39f57081a",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "2f982f2f-ae8d-47c3-b2b6-47eded8452fb"
        },
        "item": {
          "id": "995149d3-0c71-4f64-82c3-7d884da6c83d",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "b1377fe5-09ea-4777-bfdf-6ab3d6b99731",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60913967-088b-41fe-b7f3-e1a921c225f9",
        "cursor": {
          "ref": "0f80287d-3c27-444f-aed5-47e8d7038871",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "4ad96a57-a50d-41f6-beac-93c6192f7f17"
        },
        "item": {
          "id": "60913967-088b-41fe-b7f3-e1a921c225f9",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "3a31b9de-7434-4edc-b670-dfd3a3d1ad9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06e1ac40-c575-4409-8c9a-63b5eb2c7316",
        "cursor": {
          "ref": "193a0777-b9d5-49f2-a573-6ca4bcabeec4",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "76b5499f-1b48-4b56-828e-8e5e7b6e45e6"
        },
        "item": {
          "id": "06e1ac40-c575-4409-8c9a-63b5eb2c7316",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "de1fe2bb-c355-4108-a93f-61c93d7fd49a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bad7de1a-95bd-4e10-bc42-68422ebe7056",
        "cursor": {
          "ref": "e8a53caa-c74d-40ee-8aa1-49cb0483849e",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "5ecb2d7a-1e69-498e-9f9a-743b0a991b9e"
        },
        "item": {
          "id": "bad7de1a-95bd-4e10-bc42-68422ebe7056",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "25a2ded9-28aa-4025-8dd4-e944b25ce90f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd303fe6-bbed-4aa4-8fd8-bfd58416ccb6",
        "cursor": {
          "ref": "f3ecd2f8-32d3-4fe6-aa89-cf1431ee60b1",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "0b6b03ec-1625-4fdd-ae45-ceb8d7ba9fea"
        },
        "item": {
          "id": "fd303fe6-bbed-4aa4-8fd8-bfd58416ccb6",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "80572754-6c22-4223-9486-3d70aae41f04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58137849-cfcb-4aa3-8742-6dfba5af27b0",
        "cursor": {
          "ref": "599b2be9-58e0-475b-933b-397fb2c26f28",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "1ef43901-4cac-4598-bfb2-32e93d3d6ef2"
        },
        "item": {
          "id": "58137849-cfcb-4aa3-8742-6dfba5af27b0",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "07323e30-6059-4d29-847b-166806532c9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 314
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd7a102c-c178-46a0-b48c-31b327cc2185",
        "cursor": {
          "ref": "7017cbe0-8f3b-4ab8-830a-841776a49edb",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "7c6d6e0b-e832-4967-b359-89c910019314"
        },
        "item": {
          "id": "bd7a102c-c178-46a0-b48c-31b327cc2185",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "ae02246e-be14-4e27-a464-9c5a1fc035f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af0d6f13-1850-4b6f-8841-b0b3bcee9e7f",
        "cursor": {
          "ref": "8bf4254d-62be-4ff5-b93a-39bdd5d94376",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "afc2b4e7-4e9d-4620-b6a5-16a96b8af12f"
        },
        "item": {
          "id": "af0d6f13-1850-4b6f-8841-b0b3bcee9e7f",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "8a98069e-6437-41c7-b4cc-1088840071ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6a8aa8a-bdd1-44f7-a63c-7ddf42276daa",
        "cursor": {
          "ref": "55d9a3f9-24bf-464f-a302-e74786a05bda",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "eff53dfb-60c8-4a55-9941-025c38d0835f"
        },
        "item": {
          "id": "a6a8aa8a-bdd1-44f7-a63c-7ddf42276daa",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "ef526a0e-5245-4844-9166-3972a4019ac7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "669cee57-b732-4d5d-95eb-4da9067c1a1f",
        "cursor": {
          "ref": "612e84fb-290a-4292-9fdd-cc8a15df4bc6",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "80b35e57-40f8-401e-90b2-17b552252a59"
        },
        "item": {
          "id": "669cee57-b732-4d5d-95eb-4da9067c1a1f",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "51e229e7-f1f9-4cf4-a9bd-a57f7104809b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14e8a171-0640-4ba5-b069-b8f7dc531287",
        "cursor": {
          "ref": "61eba58d-8b81-429a-99b2-3246372050b8",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "fe7dea36-2a01-41f3-8b49-e3ab50e631ab"
        },
        "item": {
          "id": "14e8a171-0640-4ba5-b069-b8f7dc531287",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "9ec6a343-bce3-4ad3-8e6b-fc6b6a8c74a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4a1bdf3-67ca-4289-a185-a125882226ad",
        "cursor": {
          "ref": "b2c32536-ce5d-49b9-922e-b67aa538f858",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "86fc351d-f954-4dc9-8796-52d3f72104a5"
        },
        "item": {
          "id": "c4a1bdf3-67ca-4289-a185-a125882226ad",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "50091e85-328f-460b-8cbc-93ed4fe7e66b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08d7e159-3351-4148-9193-1fa0aa9c5ee5",
        "cursor": {
          "ref": "85ec8cdb-da20-4d86-9218-f9b81c7045e0",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "73b98687-e09f-4eb6-9fa5-d165cd386823"
        },
        "item": {
          "id": "08d7e159-3351-4148-9193-1fa0aa9c5ee5",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "b6c0ea99-e3d5-4ee6-859c-33782eb08e95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16093b4a-0659-4905-b7d6-c959d365e34a",
        "cursor": {
          "ref": "59b0e460-34bb-4e6f-b298-a7821ca9896d",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "1e1145a0-7ea5-4e8f-973f-b1fbb8e1266d"
        },
        "item": {
          "id": "16093b4a-0659-4905-b7d6-c959d365e34a",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "9310428c-0bb5-4d1d-9346-85bec82cf478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a43aac3a-a6b6-49f5-95b6-f4a3fe4c6c0e",
        "cursor": {
          "ref": "2863ee39-e1ea-4d3a-90e1-fff674c21a43",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "f36fc8c8-a24e-4cfb-a578-6cf4693ffb37"
        },
        "item": {
          "id": "a43aac3a-a6b6-49f5-95b6-f4a3fe4c6c0e",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "3c391153-720b-4f85-bf96-adb143132828",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "026f4613-150a-42d3-90b8-302cd0b1ceb6",
        "cursor": {
          "ref": "a2141525-0489-4164-8f79-711271360c3d",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "b8583373-c5fd-443f-bc29-f1f015d871bc"
        },
        "item": {
          "id": "026f4613-150a-42d3-90b8-302cd0b1ceb6",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "bd1fb26f-3d13-465d-9032-59717cdd769e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a27a1bd6-b00c-48c5-a3be-3dd60ea72edb",
        "cursor": {
          "ref": "8d1f038f-79d7-4072-ba45-b91d62d417c9",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "dd6221d6-cb3d-4ebd-bf49-e5ba98621b34"
        },
        "item": {
          "id": "a27a1bd6-b00c-48c5-a3be-3dd60ea72edb",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "7836a9ec-3163-4d86-af7f-cda3a4f06ced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9271a66-78aa-4a38-acbd-6124eb769930",
        "cursor": {
          "ref": "6c545a8e-99bc-4ed4-b8f4-f99c9bd1de2c",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "2dff4680-7c1d-4df0-8fcb-aae28998ba76"
        },
        "item": {
          "id": "e9271a66-78aa-4a38-acbd-6124eb769930",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "c7ffcbfc-16e2-4bf9-9273-40720afd86af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd710383-9f30-4b2f-8dae-4929bf5acd45",
        "cursor": {
          "ref": "7b3fce8d-93d0-43a5-b5d8-679ddf45c6c3",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "78daac5c-70c2-4246-bf64-b50adbd21007"
        },
        "item": {
          "id": "cd710383-9f30-4b2f-8dae-4929bf5acd45",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "d6c6b472-da97-42b4-a6a9-a1bea6ebceb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46565a2e-ab1c-45f1-b4ba-437067378682",
        "cursor": {
          "ref": "3a024734-601a-4e4f-9b1f-2de64ccebdfc",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "9eb5d704-9c26-4d57-8c14-925716023bf3"
        },
        "item": {
          "id": "46565a2e-ab1c-45f1-b4ba-437067378682",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "4367b19b-80e1-4093-a270-3391c21c8889",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb6c47d3-ecc1-4884-939a-c216a80228d8",
        "cursor": {
          "ref": "e0220c80-3a65-4d1f-a1bc-59b2ead848a5",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "d1c9bcad-523d-44cf-b4c1-f7ba6d02fb7f"
        },
        "item": {
          "id": "fb6c47d3-ecc1-4884-939a-c216a80228d8",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "af970086-d999-457b-ab49-96db0d3821bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81268367-fb69-499f-9639-ec60dbc4cd6e",
        "cursor": {
          "ref": "d31fc5dc-7e6f-40c4-9ad4-73651a29e9c4",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "11ebc4e5-e150-4cb1-94ac-989c3eeeb295"
        },
        "item": {
          "id": "81268367-fb69-499f-9639-ec60dbc4cd6e",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "500f1b58-4924-45a0-9164-7649a846d1f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01f04e46-1fe5-4a67-83c5-4902dae9b987",
        "cursor": {
          "ref": "bff164a8-ee36-42fc-89ee-62c93b5e2861",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "62e131a4-ef87-404e-8bcd-9451621cb830"
        },
        "item": {
          "id": "01f04e46-1fe5-4a67-83c5-4902dae9b987",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "cc7e95fd-cdd2-4057-9463-56ad8a4d9f71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1d46b42-f007-497a-907e-1382085ba4f6",
        "cursor": {
          "ref": "874a23a2-dae7-4947-bafd-7346fb7483a7",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "99d7e96d-107a-40f6-864a-9fb73b0c72a0"
        },
        "item": {
          "id": "f1d46b42-f007-497a-907e-1382085ba4f6",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "ba2e2765-07a7-4297-80e0-e0d798cd1c64",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53c7559e-ade2-488d-a126-d2206fe3c9d5",
        "cursor": {
          "ref": "cc9415f8-0195-4d27-b2d2-72b53eaf3fd8",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "7ab06b4f-6f79-4958-8443-127075aee255"
        },
        "item": {
          "id": "53c7559e-ade2-488d-a126-d2206fe3c9d5",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "6f8ed9ee-d692-4342-a157-ef9928f949d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:277)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:277)"
            }
          }
        ]
      },
      {
        "id": "55efc074-4006-45da-ac2e-1d920ea3a0af",
        "cursor": {
          "ref": "8207ab9f-c187-43bd-b528-3bdda5e2ffbb",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "cd698259-a432-4949-901e-2480b260e847"
        },
        "item": {
          "id": "55efc074-4006-45da-ac2e-1d920ea3a0af",
          "name": "credentials_verify"
        },
        "response": {
          "id": "79e133d3-7977-4f9f-8639-ed835f1cec78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "ca1116c0-84a4-402a-a2a6-7c7a5da900c9",
        "cursor": {
          "ref": "26622727-304f-4483-be5f-83ec9581589b",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "0be4ed3d-cf69-453f-b732-09312afeedd9"
        },
        "item": {
          "id": "ca1116c0-84a4-402a-a2a6-7c7a5da900c9",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "5d4cab36-da11-4aa0-aa18-eaf852fd390d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "c450883d-3f61-44b7-b5c8-daf4980a94f8",
        "cursor": {
          "ref": "7d8c8a9c-39b1-4ce9-be2d-32d9ea3b0515",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "8be8f2d0-fba0-4295-b1b1-b4912133d226"
        },
        "item": {
          "id": "c450883d-3f61-44b7-b5c8-daf4980a94f8",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "40518940-cd09-47ae-a167-0b17ccffd605",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c450883d-3f61-44b7-b5c8-daf4980a94f8",
        "cursor": {
          "ref": "7d8c8a9c-39b1-4ce9-be2d-32d9ea3b0515",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "8be8f2d0-fba0-4295-b1b1-b4912133d226"
        },
        "item": {
          "id": "c450883d-3f61-44b7-b5c8-daf4980a94f8",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "40518940-cd09-47ae-a167-0b17ccffd605",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20355d0f-b157-4a29-954e-025879e31ee0",
        "cursor": {
          "ref": "34588c98-6715-4598-aa00-6a66adfb1ad5",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "0d58bcad-badc-44a6-b06d-a41d4fadf379"
        },
        "item": {
          "id": "20355d0f-b157-4a29-954e-025879e31ee0",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e1c4df23-bc9a-40c2-9442-1e4ee5181789",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3583d8b3-01b9-487e-8434-762fdb893208",
        "cursor": {
          "ref": "d0ee22ae-40be-4933-913a-1e7ab1afcb28",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "726152ba-0d6d-4ef5-bb75-4e1a40ba2a56"
        },
        "item": {
          "id": "3583d8b3-01b9-487e-8434-762fdb893208",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "44a42007-0a0c-4fc3-adb3-f066b15a5819",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}