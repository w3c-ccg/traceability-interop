{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "585be4e1-1c3a-422f-a65a-435d2a041e91",
        "name": "Clear Cache",
        "item": [
          {
            "id": "b56616d4-0ec4-41d2-a4b5-c94bc4686ede",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "336e2042-d150-44e7-b267-cbe93e46a551",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "9ac84a18-9f52-4c9e-9749-93bcaf2113be"
                }
              }
            ]
          },
          {
            "id": "0a5baefc-0d1d-4c96-93c9-cb5f071b49c9",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bc0323f1-2fd8-454d-b604-9dd5c1ce3520",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d130ff57-7a7c-499f-b97f-44515556aebf"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "ea2bcc23-fe6e-4c21-abc9-77d7a10f99b0",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "c90b5b1a-3895-4216-9cd8-23593f3a0f6c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a7fb364c-5b3c-4516-b0ce-15a6fd368824",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "76daffe2-1746-40ed-8fd4-c48d76c3c35b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c2d038d1-011e-41e2-81fd-bc2c45c838a8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4f6406e4-0730-4956-8fc4-2c279899e663",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "33b64b66-2bed-4b74-aeae-66d781de321a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9c44c8b5-18c5-447c-90d9-de26d11ecc7c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5b9fd7f6-abea-41bb-a386-dcab666c69b9"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "40b415b0-6409-4547-917b-463d9622256f",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "44494de1-4c36-4cc5-b288-a7a83d7e3cef"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2a76e6e3-b997-43ec-9024-445cdad44f94",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0734e672-b127-4143-8901-255b1d34c75d"
            }
          }
        ]
      },
      {
        "id": "e6ffa89c-d933-4510-bd24-ebce09c2da6d",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "e45543a6-de95-4dc6-8af2-53f89eda6c28",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c7c602a0-f9f8-40a3-b1ac-907cf1056bb7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7ddaf88e-2ee1-45e7-ad85-1fa34afc1e5f",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0551079-4e53-44e9-8a8f-22e21091b71e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9cb670d7-98a2-4715-aae9-0c98dc83b7a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcb2ddd8-7649-4a12-8fb6-e3e8b6f9f893",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b7e85e5-3cf0-4ac4-a93a-e82f974c50aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a3ab9395-b2a5-482d-8d49-6138e3e664b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a05b0920-a478-4086-8e15-ac02e8b3ac9d",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12cf30b7-09f4-4bda-9a66-403c52de0754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f5146478-7e17-4b6d-afeb-e8c3be429137"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "01a522f2-3098-4520-8b2b-517a9beb2d1c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "012b01b9-121a-4dc4-ae6d-b49049be5a3f",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98712fce-a174-4c7a-81c4-b91259f82add",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e2451ef6-91b6-49a8-af0f-059e711eef92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6a62913-262e-4285-a4ca-03f66e3ca49a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29cd7655-15bb-4e54-88ac-cdbb7327a2d1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "be2ae956-b479-4623-b7eb-4d922e658e3f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b3f75242-0135-4f0f-83ae-62cb9ce72da0",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d9e9fb78-79ef-41ef-a72e-8b9bf345667c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "8f22f31e-faac-4a95-9f39-6fb5269a7f48"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "22b50294-9a35-407f-aa73-a57c14eecfea",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "e3f982ec-68a7-45ce-86d5-01dfd27f068e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a2225ad0-e9ed-4905-95dc-de2be5bd139b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "98285e2d-b010-408f-9303-38c733662855"
            }
          }
        ]
      },
      {
        "id": "fb0032dd-f75f-4a06-97c9-adaa2a15294b",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "af17574f-4be3-4aa9-beb5-1a6bf82b8bcc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1d4263c9-f1ee-46b2-bfdc-18a5caf85867",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "cfce89ab-ab4d-4f38-b3d6-26fb269782f3",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b8e4a61-07b4-4a60-bb05-141cc847af79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b69861c-0982-4013-81a5-eeedd23d442a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6386d0d5-c585-4a85-a8d8-f0f0e2c8e60e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f6a8d25d-a002-4fc5-9082-669f07905a02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d88821c8-e368-4b56-9be1-d1fdda18547e",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "601f67cf-4a05-4373-b7a2-4bbf869b1149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0be52573-448c-4486-be7f-972e47bbd271"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4ef2c62-e01d-44ba-9ff9-1c6a6f542b8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "88a78c72-a9b4-476e-8087-b3ac0cbc015c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a79895f3-7794-44d7-b5ed-019c29062fe7",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6080aa6b-af0d-4de9-a3c6-7b9278c05570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b254c3b9-d875-4625-955f-089e5fe88d90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "859c6d93-4b63-4335-90da-05ab8bd925d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "71c1cbee-5763-4e5e-be91-0c3fc2eec09f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c3df3f2-a42b-4c31-8193-f93b7e9cc008",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbec5b9f-66cd-48c8-b93e-7545bf4486cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1179a94-041e-44b2-a1aa-c39ad7479672"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "622ffbe9-6194-4168-9f50-065f1248de3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "29c04af4-4902-4b3f-a0b2-c981ee9bddd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4950cb14-8529-4093-a741-455b0692a8b9",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "597261c4-53dc-40dd-a9e7-3cb060d343bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb354a90-0c19-4ead-a62d-44608c321da8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "156918dc-b655-4ffb-b370-a6d3f6295a7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6ea8a8f9-5eea-498d-93d8-423ebe281645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4310b68e-7a78-4648-ad53-dc132ab16692",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bb845ea-3b25-4deb-8ac5-334293bbf242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff74e932-88f4-4538-b370-cd9450ea5821"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e27cb064-4cae-4dd9-b39b-7a2ea51990a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c7538e9e-8f00-4f14-aa44-2314dcb01799"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6e8e4a8-604a-4c12-86e2-dba503373e6b",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3c93d81-13c2-4854-bd05-2040cd40e916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48cafd17-f0e9-497f-af78-6eba15b73bf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d967147-6940-4958-be57-e143292bb416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "170ff561-9801-4fcb-811f-1249a35f6eca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7388b538-95b0-4708-9974-391894497fcb",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d3415b6-fc92-4e14-8afd-330a50216948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8f968f6-e7d4-4e84-9a34-bec2c6a6d07d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5347c93f-9d95-4c6c-a1f4-26f9dd9dd5d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dfc9d6ca-0778-40b5-a786-99c33f86cae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fd527e0-6588-45f3-9c78-6ed18a2427d1",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c7e0d99-86db-4f6d-86e9-5337cca78cec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d26c8d5c-a9b8-4dad-bdd6-fc991d38e0df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a614a9ee-bbaa-4a33-a46a-ac553bbe9782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3fee9774-67c9-4b99-a2de-94c009ca743c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3dd9fb5-5e16-44b1-8cfa-6d7d6c42ad7f",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4deafba1-5494-4fa0-a407-0685208176d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f564543d-5540-4e32-8ef2-2ddb850d74ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baab17f8-de6b-4447-aac2-1d679e9f55d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7a9fbdda-3e91-4e7c-b91c-5f7dc19a6a34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92f03655-b112-43a2-b475-a4ecc9794812",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cb79693-03e3-4e69-9172-4f3f84bfa1fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "288ec5f3-1aa5-43fb-ab65-aa6b5b082e46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97662b41-0470-4c23-b28f-f9c65301e1b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "71d910b6-55ca-4d46-866a-1331d9789c3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8627924-214c-42b5-a981-91255415967b",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b21d902e-997f-4b00-b71c-431a5a004ed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c65dc9cf-8774-4584-8d82-81d5148398cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f72d67d-1cfb-4278-a389-3dc11f8f4ac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "19ed75f7-77b0-43b7-81f0-e6214df45028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0001e54-583c-4ceb-83ac-719613c4c3fb",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "739afffb-ab91-46ed-8efc-db93c4a1b1dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "880db036-87ff-4d69-8438-2009344026c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "351a9f60-6421-4f47-835e-26b40bddda33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "00ed8f49-b1b3-4d03-81c3-761a176107a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b58ba100-ee85-46d5-9588-b3cdb7c697ec",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ca0ed94-448e-4a8b-a494-efb39813a719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b138935a-f3a8-4dc5-a23a-cfe8ef0d656d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a195a668-a1ce-426d-b4fe-2d0fc3c74724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4566edfa-caa3-47dc-884f-467889625824"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ac78417-67ec-41cb-88c1-e87ad284ee17",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8d3cbfa-2703-4deb-8026-2fce2e237fd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09fb7c70-ff9f-4952-aab8-3c11c8b825e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3a1db83-1b71-4cc0-a11f-10db8b003f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "05b2c930-2246-48e0-892b-262d5b87cbe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a65230d-e7f2-4484-b6ec-6c33c631bfca",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9d231e2-ebee-44c4-8bc8-5270b0d47ad6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd96eb5a-27bb-4f89-922b-86ea131450fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a1471b7-8ddf-4fe8-9d0f-97ce3c70454c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "75caed1d-a2ae-4d5d-8eb1-af95ca598864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0bedf2e-cabd-4591-bbe3-4594e5261675",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eccd47b7-458f-4040-9a46-2bd6f3b9d57e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f81268d-4003-44bd-a217-7ec51f6a01e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f1c0b63-3802-4db5-9434-415c2b41dddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "43698cf7-ccc5-414d-80f2-e1b7cc18598b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c9aeaae-28a2-439e-af76-963c9f7ccb25",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dca71e8d-7412-44f7-9625-10e23c87ead4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13e8d1b7-57d2-4eca-8ed2-7fdd8da25b45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc909b2d-c444-4a21-9a1c-50cc665af4ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "24915507-3370-43f5-b837-7d57ad4764f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55424dc8-b097-4d2b-ba07-b9ebfee24d7d",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "708d152e-0c7d-4c32-91ea-61193bea9e38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50fb0279-0671-4cbb-bb3d-cb6e442c1294"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d75d6bc0-3470-4187-8a94-ceb6722ce42d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4677a81e-5426-42e9-b8f6-6281d82e6e30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd9fd4e5-3ed0-49e6-9916-792bda43c44a",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "145d8789-e678-4456-8e14-9271d817bf2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7533a3e4-343d-4d3f-a80a-ed012fec76a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa82a095-e0bc-4656-9292-15990c20d3d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "90541ae6-90f0-4e24-bf4f-64c20232ab75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88dd0f2f-fe27-4384-9816-ec28f1311c7b",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4811345-ad36-420d-b695-0dca2e92b51b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b9e1ad6-d7df-49e3-ad47-7fda7da8fd8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e07df1c0-418e-49c1-ad45-c4c34ed17a70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "914472cf-5138-47bc-b3e3-531b0e006aef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f2f7d07-4179-494b-acc2-97436aa1ebc3",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1056a85-e2fc-475e-a488-9ad8827ab23a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91f0bc00-efed-472c-a538-5c2c083ea89d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "137badce-7e9f-44dd-93a0-e9b075690345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e12119f1-24d6-4f26-aaea-5d74506157d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7bc7928-b3db-4955-ae92-d3280e749ebe",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01c0b6d7-2b1e-4dcb-a5b7-b4cca3d9bb71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73cb97b6-3447-4ab9-a671-bcdfccf05ab4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7afc467b-22f8-42d0-8d2d-35390bfbc5df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "11c33e3d-1931-4b49-bde7-83bfed83400f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62d1b9a0-f2a1-4d07-acb2-778a019199e0",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74f09b49-c184-40e6-8909-828765d88362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5020cb4b-5370-417a-804e-c7d9ca36166c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41863215-5c20-4b10-8455-a3ba3db0afe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "336b8253-55b9-4902-9fa0-ae2cc890e6cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "979e7f80-e459-4b04-a075-495092c28c5f",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff0308f7-69e4-457d-ab36-813602873b1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b62444f-19dd-4b96-84e6-481d638416a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06710665-f1f5-42ee-bbad-f9cfad16c3b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2192f0fc-b12e-4b5e-b025-9c0e149e9a74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2f70dbf-8a5a-4176-9bfc-90d2e17e13ea",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "850a9aed-93e2-46af-b1ff-1d302ccd3a8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff4d1b07-1176-4f79-a586-e0ba2d4080d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27285c20-07e2-4c95-94ce-d1e5831cab99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a17788ea-bbb0-4e45-97d7-ef0bae3f1573"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7058726-547e-4fb6-9c00-75698fe0804d",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8109cca4-4b4a-40fa-bed1-08674b5dc30a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b12e1f5-9de2-4847-9952-1025925d906f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca89d958-9dc6-4c09-8129-d58f406e8c2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "69a18d2f-2be3-4995-b448-dbeaa43a60a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81fdb24b-e5fd-427d-925b-a2f5a6759981",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2e03900-7e52-40b0-b1c7-723e321680ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9ae4036-beff-415f-8939-4507a652e10c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c09fbecc-462f-49ff-a2ba-4f93dc03f1b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "62bedbf9-7f6f-4368-a247-77ad51031955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ac1c4a3-f3e9-4192-8617-7b8e7d5d86d1",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "485e4915-405e-4697-8344-5b3eb0d91923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f2b2480-566d-4260-867b-cf834c76c436"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d6d9b9f-cd51-45cf-80c2-ab592ce22523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6485857b-ec53-4bb0-8b0d-50486a599616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b26a8e9-a471-431b-9abb-f44ac51fd8f2",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9916b0f4-ee77-4545-ad4c-4eafa1c75b9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d88be85-b0bd-4e03-8db6-aea6b2b7de1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6247c004-352c-4f00-9532-4fbbb8144234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "2cd04af2-ce62-40c4-9756-9b75496a76ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55fefb4a-1f75-4277-b15d-d190b33ac09a",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed227caa-b43b-4091-841a-9c79999b8f59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c0f6f1b-73b9-4e14-a22e-8f03e4c38c11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "937fcfd3-763c-4cad-938d-b343af46a9de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bae66ad2-cdcb-4c5a-86f5-b41162355acb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f97ed2a-8909-471b-9a08-8e5d894f9ce5",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfc475e0-ee62-4d8d-b845-252b48886318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee4a882c-0e86-48d7-89f5-20d1e419acd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29272a39-9b09-4353-a741-87e58a0735cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f51370db-43fc-4e28-8630-ca15ad899948"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5314c67e-5cc6-402f-a103-a1a2ba01efd0",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f89315b1-3b15-489c-bab0-f9dbe2722feb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1f5e2d4-d0c8-4928-9b25-08b3b1409b04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "782a9c65-addf-4c7e-89a2-5910fb3fe122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "764abd6a-393e-43b4-8756-df3c5c9cb87e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6394c27-d65c-4c2f-8384-d21222044526",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d066eea7-a95c-4fc3-885c-56153a54502f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "535e7263-d4ea-4bf9-9653-f263e49e1ee9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "131d4f1c-b78c-4853-802e-e6f728479755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "04679109-5220-44d1-866b-0eb8b172fd2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e65fb1b-8f51-4e33-9b04-7586487b805e",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b120da15-6de9-4766-beae-64b3f57bd66e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76894d3d-d73d-4289-b7d5-5f60390df4a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e2ba556-7fb9-4998-a729-874128fa2353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "0f246216-eb48-40ec-bc3a-2fbd84a363d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42277c0e-037d-4409-87c0-fc3b10d31bd9",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf8aff41-7706-4fd1-829c-e245d7959f82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "89913c57-0351-4a2f-a212-72cc6bf07009"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60f79f19-8436-4521-b27f-c83560eab223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "90f1231a-2d5d-48cc-b738-d1078edd5396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3661103-f6a2-4ccb-aabc-0030b7a24720",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "186b73fc-a5ec-4ec7-97c2-2bc6d17c23b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94144dc6-8c3b-4fa3-9030-98490a1aef48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04e12ef8-4d87-4a38-9864-c1dc2029a315",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1b8e90e4-dabb-4570-883d-4f7a2ee9c0c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec1d0293-9c69-49fa-8f1d-23d0ebe6739f",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b02b27f-abcb-4fed-97f5-c1745e119611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1e868ce-0d83-47d9-abf7-495dde97ec30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a33c63f-4052-439a-a56e-489a567bdcb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "66c39c5d-f902-45b6-b8a7-7a352b05c77c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d219891c-3bc8-4abf-9717-4c460220e548",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cca8ea11-bb94-4405-8647-20332742f704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d06844d-d40f-473d-bf26-630c3c67081f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fbb0a1c-1db8-4df1-8f80-4d3d3852778e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a084ad7-8375-4e53-9f0f-518c5e8697a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dc2e34a-2353-41b1-8092-da54760726e2",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bb56d3b-7adb-4244-8fa2-59761bf44d54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db4f0ee0-8d15-4ce4-8b85-281258810c31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a842cfb6-21d7-4dfe-ad42-8062f811c750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8f197fec-064f-4d05-9617-5a6df83dfa1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a82a83c-2ccb-4596-b7c8-320bdaaac59c",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40b69737-a6a8-4501-8aaa-29aa681eca1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "562f3ca9-3269-43c2-adb1-cf7c9993e2f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ff54968-3dc6-4767-90a7-60fe2b7cb2af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "bba108e7-428b-4568-8850-f739046f54a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ba85e8f-e5c6-456e-a496-547f0e974ab8",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7056489d-0587-4a13-887f-312c27f35961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d827976e-1098-4950-9ec4-6126ddc84c6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ba217cc-dc59-473c-9524-c05e7502c9e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "5b1d3b99-7288-45de-8a68-1c37470d8f82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "751615b7-459a-47dc-bd82-c1d51d1aadde",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b53a9884-bcb1-4f7e-877d-90ac3aae46f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bae8b7e5-8dec-4f02-a337-ca9363e94fb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "875682b7-f1a7-4752-97be-11cc31ed8739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "738c93bf-0b06-4b39-b4ee-8b1f68e38e37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cff491c8-083a-400f-a630-caa4c3fea0f1",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6892b05f-ac11-4bae-8dcd-434983f1b5bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "178d4441-0104-4816-94c8-ae720972c95d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd139bd3-3421-4b31-95aa-9b9d2d05c376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "95547ecb-09e3-432e-b58f-88ef840e2731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58d6affe-fdd0-4ea2-84fe-c4cb378ad8c2",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99948385-2aa1-4709-a318-fb7ae3c59098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14afa46b-52ab-4967-acd3-ef492ed4d43f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb334d9c-0840-4784-a2da-61cfe206b757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3bdeaf3f-07c8-4310-bd07-c753b1f42ee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20a1ad88-8186-4571-9a9d-88e1e0bf720c",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c3882ba-c8ad-4086-9870-d9f18d64e8f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a16df37-28f1-40d5-b320-48676e2c0bb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1e310d4-b77e-49e1-9f50-b31b9ee65a92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "98416f2b-d610-4603-b202-ecc4b1c55f27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7870771-0e0c-43c7-8a5e-ec8e026a6f76",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adc7609c-ad85-4159-bf5c-00bebc5ea2d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfd7cf50-22a9-46c8-9210-4dbbc22c2e07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11e0f641-50e7-454e-bbb4-8971eb4e3acf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4fa907d-2447-4214-bf5e-6f982e14d1b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b143d0f-f242-4f0e-ab69-d6c662f5e208",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c915ae2-8ded-4e12-a86c-2c240db83026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36e51107-76b4-41f7-9621-5dd199c26a7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fffd5e5-d8dd-447f-9604-2ca0bb168e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "58c4178b-618b-4ca8-9baa-f29466f2c442"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ffbae5d-7578-4a4c-9578-301c6fa5af37",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1efd3884-f506-4982-82f6-da76daef226c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ab55662-d27e-4170-91d8-47899422634d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38205893-0930-4931-b8bd-00935bb1d583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d0f62d7d-11f1-43b6-a58a-6bb7670022a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f9cb39e-4c15-497f-9af9-830d20bf36bf",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81c22961-877a-490c-b46c-23befb9016e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6e7d513-308d-47dc-a106-ecc6966e634f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ef53238-f2b5-441f-9a48-225dbaa7e95c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3aa5831b-9da5-4fe4-a9cd-e7c470d6134b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ab97387-8c93-422c-810a-5baaa889967f",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec4f4e16-38c2-48d3-908e-53dadefb37cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f58be22-2094-43b5-83e0-427be1d069a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cd74312-6ebc-4a7f-bee3-122ef5d06a2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e4bead5-c0ce-43e8-8b82-c33a2d1a9bd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dceb9af2-e8e2-4f2d-834c-169bb60ac138",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c0c99ca-b8cf-47a7-bf29-c149c14e8605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2584661b-8d3b-4b76-84af-712db8f21269"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "669f23fc-c218-46b2-99b1-3a9d037eb252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e4f9d78-6d48-4cfb-b944-ab3067767274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef96d2f0-1870-4f2c-b460-21d4f2605c2b",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e90ab297-9e94-49b6-95c3-40f2c0432b2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5569003-b6f4-4e1e-8a27-eaed292bfdd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d18b650f-482a-40fa-9a9a-5e89418a85d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ad30b41-ee97-4329-b1ea-261e34d24f17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c691c301-5b79-4e3e-b2d2-88b87e204a31",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b786329-e601-4384-ab84-6d373aa03c26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4da4a99a-1499-43f4-b394-49ed282966ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a19f9fe3-1aac-4845-bb1b-3540af098c84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f9d376f-ab6c-4feb-afb5-815ce8f7a311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90fc0ffe-aab7-42c2-8ee9-e9723ea7ed01",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61e5dc97-291a-4bba-9c73-f5c27460a0a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18e356fc-e71a-4944-8248-ed93e523a407"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "833b9aaa-531c-4154-89cb-c607e124456c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab298b9f-900e-4220-9523-595e4377c63b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4262841e-b792-4088-bdc9-6c1e2fe31c41",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19f7735b-d8d5-43c3-83e1-668429a42987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f806f728-ee82-4d16-aea2-a028370ce730"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a9a67c3-d3b3-4aa2-bb45-d0e032d476e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "f516de1b-68ec-4ddf-8b0d-37de677f992a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cea8c294-567c-4f1f-a122-3ebe979e6b5f",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "783d1e0d-adf0-4fb4-9bc1-491ac548a9db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9df5d7fd-5168-44df-a8e6-8bf2450dadb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9f20c6b-c0c8-4dde-b42e-3784db39c125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4aea2bbf-f089-4949-bed3-fb193c74efda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0f4737a-bb40-4d06-a114-72db0d6da16f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7192414d-3907-412d-86d4-86759555650e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "491d36c4-bab9-4b34-92a3-4a34aafc3313"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4a15159-e2b8-4064-b904-fd7df9e9b086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bd63d6c0-4e6f-4432-aad7-8702f52f8c83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6337971e-8da5-47c0-8a55-5207efd4946f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36b14f27-ec22-49ad-8dc0-78f7652ae469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "009c8723-f55b-4343-a495-b842394ebcd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "741c0293-f645-46e9-9527-263dd668fa7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e0ceed55-7ed6-4767-87b8-1bc4aa1447d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bbd841d-b536-4725-88bc-a8dacaf7717a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aa32bc1-85d7-4ccb-8092-408d76686820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8185a6b-227b-43a0-8648-f5e05868c719"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43771863-b2df-4d6c-be31-a7b7c92cd78e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b96a016d-b103-425a-880d-c1926ce168ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccd1893c-00c8-4500-b7a9-21f7b970ad1a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e05cd31e-5b55-4346-962e-cbe8b4edb24a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5437c2c9-d356-42ce-8257-efe9e09771fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45ba9308-8335-4859-ba10-408900e895db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7e9954a-5665-4d62-9906-0e9ac5163c72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66762c99-45a5-4bf9-863f-bc5164f5b08e",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2b1520e-a4a7-42ba-aded-dbdb17fdf7bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c35837a-cf36-44f6-8b4c-14c9e4fb6df1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38333f47-451c-424d-9311-83bbbc35f517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c7f04b0-bba3-46be-beb6-a62e8b7446c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f52c8822-8e5a-4053-be03-6c844374fb92",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e72674-55e6-4134-84fb-e77eecaeddbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19ea849f-6894-4c34-8239-55ca5900bc28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "253a45e3-6c58-47df-acdb-63715f38ea90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5051186-2b53-43a6-8730-8aa22f01ca2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11b71447-fea4-4961-8543-8f717c134071",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f49b268-3c72-4595-94b8-63a8864a3ca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d393a0db-a9d1-46d6-80e8-3bbb62090e23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "208b1fd8-d149-4594-8195-27ad3dc38976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f45e1e5f-41d4-449c-ae9d-c19659b11f21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "330dab62-1bb3-421e-8dbe-5fd33fd23ca9",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10074775-764e-4d5d-93e6-f44136a09b95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89e5ebe5-1a44-4e05-95a8-50bda1256734"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "364c512e-d5ae-49b2-95cb-17873abc4a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a7b3bc6-c987-4ddf-b8a6-035135b26abd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c355c3b-ba70-4495-90a9-37d0cce96594",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39ab38e1-efcf-4e53-9864-065f3a4b81d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8f3e32b-d1f6-44b7-be62-8ef8ac93b815"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99f4509c-6092-4c2d-9ab5-685a4782fb2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc0896e5-e5d6-4ff9-8435-bccf5437466b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8575112e-0d43-426c-8201-5d4a46cdc166",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93a7f325-26c8-4af7-be2b-f87074b384fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a972838b-525c-4312-a28c-65fcf22a05e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65bcc928-0432-4c54-8d1a-3f84daf76521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f2907fa2-e11f-4da8-963e-e0c642dcd84f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33d26302-ea13-4eb3-ac9d-3cc8a6a8c7d3",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a722b11-5b2c-4d6b-bf9a-656c04638611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef5f1cf4-6431-43af-a74a-8726a2a079ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "733af5ad-3be2-475d-96fd-101a5967209f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c526746a-de8e-49da-8d21-df9c4d52fd5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b30c8ba-cca5-46df-b7dd-a49fa1f9c900",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd09ac77-b819-4fa1-9329-b46cac4e2050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cf4e927-88a9-45db-b156-71bf4ff1ed70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd1c6a88-e7f1-47bd-a565-8b7d97acda08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "09c3a566-4f5e-424a-8fcd-633377925a7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03bef911-5d2e-4711-bc14-763b8e6333d3",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37961b2e-eb8c-4416-8fbd-e2dbd4ac4def",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa526692-4c05-4d6f-ba8b-1a7478dabfe4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53c4c32c-f595-4822-8064-498caae7b31e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "79c8d415-91c9-42c2-b169-ff68dd647efd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4e5d0e8-1126-4d62-91e7-dcb433aa7f01",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e6529d0-21cb-4896-aee0-2d086a785d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a90c70b-7966-4307-93a7-3a45845a3eef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43f34709-5977-4fbe-b302-162023ba0dbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbfd4563-6b1e-4ccd-b111-b65b7d4091e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "973a51ad-802a-44f0-a6ba-7009516aad87",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fcc6887-4a2d-47f9-9c09-e0054284126f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78930ba5-bcf7-4b6b-b275-8555e499e69c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4588d72d-7016-463a-9a5e-39f7c6372cc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa6c4c9f-f112-418a-8ea7-afe008f39282"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75d62289-7235-4b90-9b34-77738056ab78",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "612e1091-99ca-48d3-a8ba-bdbb6364c995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72679a9c-2a70-46aa-9b85-395c447f0ba3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "872e808c-2a16-46ed-ab5f-7d38ff32edeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "45829bb8-b60c-4b53-9a65-4afa9a70aef8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a686df06-ba7f-426f-a5de-ef7b2a83699d",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d546f0d3-03c8-4527-bfef-99822d07ccba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "870c8ddc-09a6-46c0-bee8-ff8f8e4d2f04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2482f47-c7fe-48c7-a73c-be097c391c4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "52a47758-d24b-4afb-8914-54857afd1d5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8b5ceff-7725-457e-9197-daec029e362c",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01870573-9f00-453b-9b18-cff263dabfa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc50db70-a24b-4c71-b828-bda9f51156c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e6c102e-5da3-4c77-b919-fe9f5024e2c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "71e627ae-78c0-4608-b26c-2271ca645aae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b826e03b-d815-44b2-8b19-6f1aa8cd1379",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "499ed35e-cee4-4969-9644-c0512b9818d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea7ba436-a0cd-4911-864b-02c662890601"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3014a7db-bfb3-43cf-a7b9-fb5fba95fd37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "76031574-9256-4e94-ab1c-dde2bacd89c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36c1eac5-c6de-472e-bddd-ec51756d9931",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6afc8117-ffc4-45f6-8c40-33c960298308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "942aaf45-eee6-4535-9a4e-71b3a34846ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04c51917-ba72-4296-9feb-0d6c06f12b7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f87ccec3-85fc-4282-9e9d-9b455657b35e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3571db9-1e04-4988-b199-84be0c4f6094",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38bd85f6-b127-49cf-afa5-839b52206b0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18d5b18f-f4b5-49c1-a1c7-b8437056cbb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44487ddb-d2ec-4be6-823c-61d544ffb95f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "30f965ff-5582-49eb-a8a5-11f6360bb04a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4037f3e8-ef88-4ce8-a3dc-07f421b1f8b4",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d05463ab-f88e-47fd-9b77-88c0ef7da1f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79143793-77e9-4fb0-b6ac-b27f5e9e5239"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "677f7d18-f201-4da0-b8d8-506070c06761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d1bda5cd-569f-43ba-b77d-5df4f45e6cf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac0b911d-388e-49d6-ab4e-bfd35e5656f6",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7422f5f9-f60e-4c23-b07f-16cec0963e4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f942efe-7115-460c-b437-6294c552cc04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf024f3d-dac9-4b3a-94a8-9a97e12ea36f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "da59add9-17d8-4220-b351-a2574a799767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8745f3cb-d9fe-4d05-a13c-03f901c69844",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88be55a0-e23e-4521-b40f-cc7d81ba31f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee23fce0-0e9a-4e57-9d5d-9f318c595241"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c015f093-0c81-4584-95c5-4fecdc82d4dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a67fd916-b0ac-4433-b4a1-26f064f5e4f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0168a448-e33c-4408-b43a-685b4908e943",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ec4b282-3eb2-47e1-aa7f-e77e6767ea08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "902f2f56-1f2e-404e-a462-b70ecabb58e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "846a278d-35d2-4749-b400-29c0ffa066ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a17e94a3-7409-4dcd-b69b-1594f53dc0f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d389cf18-3f84-4b53-b8cd-eacb2469aabf",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82dc4e30-b8a1-46e2-bb36-b97735fbf152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a42885f-67fc-4ca9-94dc-adcbc36365b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "920c29d7-8c6b-44d6-a379-40127271790a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "687a02cf-10ec-4533-9d33-55354d4db8b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8029f3e4-99d2-43d7-a7a2-ec5d7d456817",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63f6fe03-b17a-402a-8415-ee9ee9934ae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd694f6e-be13-4f49-a533-06746faad64d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75e4e546-7433-4ba5-a6d1-841c88e9b85f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6271a02f-c734-46e7-9d59-050ac6e7e75c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7b60f36-732d-40ff-97b2-b7ca64f0a4a5",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51340f1a-9462-4eba-9099-73719da2f18e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66f97c69-5df6-4de6-95fe-18f975ec8e2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df23e762-4ca7-450f-a52b-11387289e0cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1dacc563-c244-4a23-a578-bae31468e8be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa85abee-705c-47d1-bcdb-481b55620b1a",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40d5d04c-f962-4331-aae0-d04bbebaa0da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a04d706-d0c0-421b-b2b4-d7ab0c4755aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5feccf4c-154f-4eec-97f3-24f575c936f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0575d998-2e29-4d38-9507-67bb57346567"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60b20a6e-d856-499d-adef-66e2a1411bfe",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "566fb0f4-4f55-4b0e-b57f-95fe29b48279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1874cafc-8f25-40d5-a978-dcee3a53b54f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30132ff2-7e06-4c9b-b82b-0df01e6dc44e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "44c2cf79-0eae-4b18-a8b8-5f9095d87299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ac1311e-a076-478a-ae66-955509b631de",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25ac6b44-7af0-402f-8a70-521a8485c59f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dca967c-8014-45b0-bcb2-d8f76d2d4929"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "216ca8df-2ad6-4037-920a-690c4945fe8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b2d72c8-844e-434f-961f-ef893604bb1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4543bc71-ecfe-412e-8990-4eb91735c76b",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bce6b505-eb97-4d54-bf73-ba976ce78ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a13408e-b747-4f50-96f5-e9f068dba5e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dbe68b4-1ece-432b-b3ce-74472356a40e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca8e6fd5-9426-497a-8bf2-a58194602e60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3849f2b3-7deb-49a7-8779-6240da0da603",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b99edfb6-11f4-4970-80fa-a5009fbbdf44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cd4324e-acce-426b-b923-a7caf7479dbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d46e5855-ca16-4b70-9b9e-3918fb21c50e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6c6d208b-7a75-4d1e-afdf-76fa860ea483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9417530-0ce0-473b-bf4a-f127a015ed20",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd836ce1-0b78-4a46-96c6-c0cdbb9626f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5becbc81-25bc-4661-b2db-bfbb0dd9c193"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf35f990-94bb-4db1-adf2-eaeb1e0c37d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9354b2ea-3eee-4d4a-af49-480bf5184c1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c08c4e63-d61b-4255-a311-9bf954ef484e",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af46845c-2a14-46a2-b0cb-a7383d9f06ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "58dbd074-1b53-4fd6-84ae-769ec6e7d033"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b55089f2-9ed2-4791-a625-afeb5db269da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c1f2340c-dd50-4b13-8e8c-d532912eea2d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bd6e5c20-74b2-4cda-af6f-55953720b036",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bf6f9fc3-923c-4c60-be29-32922d3cf470",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d5df9ec-4434-404c-b353-43a950e3d8e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1834875f-d045-4ef9-a174-3e42187bcce9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30f7a103-6eda-482c-9d39-3156e1cf8652",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9f47194c-9371-497d-aacc-99aad36ae4c0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a3a0887b-e699-4c92-b4ac-d26f01b87033",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d44336fc-0336-4d55-b81d-e64776265737"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "785bebc7-e819-4751-835e-cf0fca033fcd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f0516ba7-a514-4842-993f-b1e2dba4ac4a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cf375d8a-28d4-41a7-8346-932191d170e6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ad76f448-2342-4d60-91af-db8f79d73014"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "cfb4e973-a011-494b-a369-1336bba86027",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b81a7a7a-9701-42f7-b2ce-528c8452f415"
                }
              }
            ]
          },
          {
            "id": "47670666-7719-4f76-98b8-b9178839e29c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "66253e3f-d674-466c-af1a-4d42292ed234",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dce9393e-6ba6-48e1-9455-52456e91c263",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6c81887a-5aa7-4ac5-90e2-dacacdba1ee9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "015eb4f1-6be5-4add-9825-186023755b16",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2605e2c3-6e3c-4150-88d7-8baf25c9a634"
                    }
                  }
                ]
              },
              {
                "id": "2bf6b51a-e91a-4242-857b-68e89b03dc52",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4894c2fb-de43-470a-ad0a-a31925382a8d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7dd846d1-550d-407e-8263-6d20c1590566"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fb7329bc-7169-41c4-a00f-293d49e1a26f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "da811adf-d786-47bb-a846-1a778d947f1a"
                    }
                  }
                ]
              },
              {
                "id": "1de8a3cb-498a-4529-9d2a-e1ab19ec6846",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cb32741d-4a82-4708-9403-ce755c918165",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8d94b5f6-4086-441d-bede-a8431f10143d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "739da21f-c03a-4aeb-8307-0e88dd3ac7fa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8c40885c-6d68-4f3d-a490-f33dc31ae05f"
                    }
                  }
                ]
              },
              {
                "id": "3c6e9ce5-b66b-498c-b91b-6cbcc01f548c",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b438a329-22ae-43f0-8b3e-e0f62f2cea27",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c7425019-fbea-411c-833e-49bc3bfa8eeb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "77c4a93b-01b0-40f0-9098-2c7e4ca8e28f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "cfe50747-728f-4f45-93a5-40bcaeb85910"
                    }
                  }
                ]
              },
              {
                "id": "f48a37f3-70db-4204-a928-f93f679376f8",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "722eb4a5-4b96-4497-af5e-d596d0273e11",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2290b054-10b2-4bbd-8eca-9c2ab0f4ef6d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8b101be2-0474-4c85-a60a-1b91c72cd282",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "2a18014c-74c0-4396-8cfa-395da5ce6ad4"
                    }
                  }
                ]
              },
              {
                "id": "097f5baa-81bf-41ac-b516-65e713173365",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "235e52ea-46b7-4a89-9fde-bf76dbe9587d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "08c264ed-f55d-4c66-aefc-0fdd8de82d30"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "04c6aacf-a3b8-4e0e-9aef-e9fbfac42e1b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "48e2a395-0405-4a29-ad44-1048c9b674cf"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b383ac75-853c-4b05-8990-104a01806afb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2a36fe85-cd6d-45b5-b097-fb3f5f8149ba"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "516ca4c5-d1fc-478a-9138-0c3274cc12a4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "81291285-4a75-46d0-937f-fec2a38beb34"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e34d9936-73fc-42e5-870f-6917333af03d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "7f77b42b-0dc9-41ea-bb54-35af8d61b4aa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b08a3b2b-2dfd-492c-a90f-ebe43ffde454",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "be0e296e-5945-4e9b-8e3e-dab21428baa8"
            }
          }
        ]
      },
      {
        "id": "1c27c1c6-2bbe-47f0-83da-4f7e80693d2f",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "ed9c8d4e-5ffe-42e2-98b5-370f61148c6a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1bd0d529-c1eb-4378-982f-8e0e092fb220",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f1aedb60-8f40-414b-9f98-0ca9bcdec118",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee02b65d-e885-4110-9e20-3ef927914311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2943c8d-e624-4592-a684-466304b25db6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5156ff04-9ced-482e-b60f-52875ff649d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "328474de-94a2-474e-b638-19e6ece26918"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41b341da-7599-4106-bfd4-264ba57aae4e",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2af5ec14-bf04-469d-a18f-cfcbbb5eb016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb89ad36-1d1d-4cfc-b1c5-3e1043108d33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45903ca6-1954-402e-bd36-84039cbe8d17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7e00fea-34d9-46a1-b2bf-3070996749b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79a97a8e-17e4-4af6-8a08-ae71182b7e53",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ade56c17-ccdc-4e28-958a-64380bfe073b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "156692cc-9236-4fec-bd4c-ef4b0b0438b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eb98b65-b48f-45ad-8007-8b15cb379faf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7dcb8719-ee97-4819-bed7-16cf74016e11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94ac46b4-2711-4d71-861b-21794801e8b3",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e19b811e-ac3f-45ce-a20d-c22191677873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60b39ec5-b3d7-4e0d-8607-3c3192c28143"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e532194b-3774-43e2-b7c7-7ada95367532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "98909f0c-f0c6-4564-9bc8-a5e928b2c1fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50a60946-f19b-41cb-923c-34e7522bbd1a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6bd80ec-0a5a-488e-8d86-38af722ded98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "199ba423-1bf3-4150-9b72-23dade4d2289"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01cfa20d-e8ed-4021-97dd-9dbfd49a7dda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d32eb614-fb2b-41fd-85e9-979e300660b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "393dfacb-9322-4faa-b765-c69866b1e757",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb40857c-d254-4dc6-beb9-0ec7711620dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "469559b6-3ada-499f-8b61-2316a7d49437"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d265a766-af56-470e-be15-9fddfe858ca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "22e633af-f54c-4ed9-bd59-2be8119fba93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc5f0556-4d78-4e4e-9f1a-7891cbbf676d",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5addf1b1-584b-4a5d-8d72-b2cbebfae3d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85715eb9-7993-4f83-9fc7-5367ffc71c8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db742792-90f6-4846-91c3-a83d7c1db60d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5d60b34-80fa-446e-b806-4a44d602df9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d07aca0-b307-4843-a076-27fca0e38480",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ff152e6-630a-48b3-af50-c0bab05e2421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32c2347f-e8a6-4af9-8a89-58be4eaf2616"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0afdf72c-45e2-4b9d-b44f-47ad78f34fc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f7445df-c1f5-479f-9322-32741b30167e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "802bb63d-2867-461f-8c7b-ba6b988b6827",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f340491-00c8-4aaf-ac6c-89d6bd1a66be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7af006f4-7781-4300-b9fe-fe3af65e98e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e186cbc-7186-4d30-a5bc-421b11182b7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf416499-491c-46f0-8c2e-2369ddd26124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff9ed396-b5c0-421c-a93f-115f4dd2a57f",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bebb393-4c01-430c-86b7-719a71a9077f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a86c2e50-eb1f-4f07-849d-30a12e9efff5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88c15f2d-f92d-4aa9-bb82-fb446c59f293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2250a308-a14b-4736-81d0-39312f950089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "828ec538-5724-4a90-959e-a1392623fa41",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2be218f9-50e1-43da-ac18-e4ae69549bc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c58c7704-e4d0-4957-9c11-e2bf0c1f6a51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2747cf6e-39fc-455b-bcba-31281ebf9c26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "9f6831a1-c18f-4758-83f1-b9d3626d19d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bd76dc7-fc8b-4e9f-9a4a-3f892632d19e",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2ff65d9-21c1-459b-b0f9-06c14fa95e5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe5e95ad-5b61-4c50-911a-1904b5c2cd42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25d56f9e-d9fa-4eb6-a62d-7e63c43f97f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "58c340a2-c7bd-45e7-941e-5682a77633b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a93b8d2c-ec3b-453b-9313-e2a59b163fc6",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a99cf466-0736-4508-84f1-792cb25f3d7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "281a8dd8-7227-4d30-b4dc-fe06890a6372"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2321e326-4333-45c2-a156-7f7b46b28f57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "33883950-aeec-41e3-aea2-54cd5bc09f8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecf2cf21-7af3-4fd1-8768-54f2b262e5bc",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26b0fe1c-f38d-47bb-b523-ad40e5deac1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fa09e34-99f4-4f3b-bae3-302c164aaf15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "313ee6f4-ee1e-4c68-a812-be457db218f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7ea753e-9552-445e-824c-0e2ad4359c52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3e3a7cb-ae70-4d7c-b666-224676a6c554",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a109986c-12b1-458f-8464-6ea1b7591138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0ed403f-dc95-441b-b0cf-416010d0ba61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29576db9-cda8-4e88-86c7-4aeafb95d01e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d1b870c-98ef-4b62-a13c-91db5493cd65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "498715b7-cbf7-445a-9a3d-eab45a11833a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47ed39df-9156-4b8a-aadf-9bbc35b997a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5440705-2770-400e-9d17-1e1fb144a4a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75b6378b-f0d4-4f9c-bdd0-ade6c4047386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3ae318f-a279-4114-b0fc-791b4103d1c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49723184-d951-44f3-a030-721fb57a15cd",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e64616b6-4597-483d-8a18-a3122b8c9565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5a35a90-bb41-4f0e-b114-a6a3472c5a14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5c91de1-2c45-475b-adda-f1d6aa173ec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "25146fa2-52d2-4d4b-8d0b-2f6acb26aa5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56f8fd0b-3adc-43a0-a718-ef742e9edaf6",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f702569c-c15d-4940-8670-15cbf4c4dc9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d766db2a-2653-4bed-ade6-8753123c0f16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1f0d57b-f082-4375-a10c-b4238ef1ee7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "835237ed-6fd0-4e8a-8320-0fc268bf130a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "286c345c-2007-4d62-a3c0-47e08c44a40d",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d836872-98ac-4cd6-a127-4f82a381ab1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31698610-3c34-4adf-8794-79221145248f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c89fb42-3f18-463b-bc5d-81bec1c4e257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ba95501-c311-4dc1-a6af-2caff864122b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "973c1e71-c2fa-40f6-8dc7-03b242083ca0",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0adcc70f-3b20-486a-823b-a1983dd47b30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec587d17-1db5-4681-8a2b-a2d103389e82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bb0e385-051e-4332-9ba4-4e8432e1f2ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b1f84d0-6936-4b3d-8f5c-4e0bc21c211f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7cd51c3-8dca-4f35-a4f2-49dd7945eec2",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e54928c8-2b15-4dd8-8106-c99065af787b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17c79dcc-f438-440b-86ad-e8fbce5daf9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edda915e-1c83-4e49-8df9-968491e2dc3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "56410df0-0158-4455-82e1-b4e401a2f143"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05674f77-832e-49fe-8621-d44c484f4f7e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c93350ca-a886-4aae-8f13-08c61cbd2224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5f10240-47dc-41bd-bfbb-81869c457c37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c743d77b-7fd3-4536-9db2-f7f401049233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7a12f49-cb40-44b3-8755-6062c356ed9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2be0dbaf-a2ed-4318-8a53-cb78787d54d2",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c4348e1-78d0-42c3-8626-87cadde11695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10ddd69b-a7b0-4b7b-a633-8e696ab91fb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d02b1a6-d807-4e1b-828e-8861655bd715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "74285075-ed2a-48f2-98a9-3b548186b885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc123800-1502-4415-b94d-ba60c70fccf6",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88cc8ea2-4b1d-4581-8519-1eab229c44f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b0c8519-1c70-46b1-9d13-1c696a4c00a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "909527c8-9ca4-4618-a49f-8a957b989102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5501e271-94f1-46f4-b63e-96a8cded9db8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "572c5ac1-ebee-4102-afbf-44ec1c2eb3da",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af01fa73-ffbb-4d75-99ec-5f2225b11187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a4f23da-4a4d-4dec-9a84-a1ae71207cb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c54e7600-8e58-454b-be60-5672c70c90ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "30985f8c-c043-4bac-9835-5fce2fb191a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21dc9ccd-3d48-4adb-95e5-7c4fbe51efda",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91fcfa0f-64dc-4c0f-b9f7-117cba10c62d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccd92e59-5bb1-4cba-a26d-f0b25041d075"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a039dbd0-de07-46eb-8a97-caa6feb4a9db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "36202c81-7335-467b-b38d-8583d501ea6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33ff8fd8-c778-462d-a0ab-eddca0119ca3",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0014368d-6b0b-4dd1-a741-8c76b0307a0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "352c3a3c-7e86-402c-a122-d79a885ab7af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc978f11-0051-49b8-96d9-394ad229b829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "797c86f2-7aca-4017-8e51-c01235d60f8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b32cfe0f-6036-472d-aaba-6996232078ed",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "533ad4d4-cf46-4510-afde-b0ada0c162e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa25a550-b207-40c9-bc1f-584f5e51332d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53f5a60d-a4ba-4ba1-80c5-711b7cdfcdf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a2401f4-fdaf-4989-8beb-9fb9a355ec40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75b6925a-7a55-4b57-b32d-fd3906b565fb",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fa7e4b2-d654-4e75-94ba-dde78f32671d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b2b1e35-65a3-439f-8d67-0fe9b0433cfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd560278-628e-4490-a1cf-fd71a3b578e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "333b4f00-c458-485f-a954-ea4fddd20d35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8e3ccf0-531a-4d9a-80f3-13eba85c1b8b",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54a24cb6-5630-4f6b-a776-aa5966315ef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24acfe0d-bd9d-4c74-b4fc-24e33eab8eb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcf4e386-1080-4514-96bf-034680609618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "873f2b4f-cd8d-4a85-92c6-61b32adc55ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67c70513-8b97-4204-a11b-a6ea9c534e18",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e533f58-ac57-49a9-aa30-c7c5644591e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48c90280-5b1a-478d-9217-168f4177c12c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f1cf24a-8fff-404f-a372-7340122c46bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ef811d6-8336-4b3e-8adf-64473f663943"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5516c5c-ab67-47d7-a213-ad1d0a9ebc1d",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "783d19e4-9002-4e60-bc49-314d4ab7092f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8826db3c-5f7b-41a9-92af-406936045dac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8139a717-83a5-4c73-b326-94c5b601f2f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "55d351fc-c6e6-4360-8c42-be59bb825694"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1bfc2212-3b72-4c2b-911a-6d8bc962d4b0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9be9bed4-1649-407b-b68f-ad85ff9efbf5",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a47b39c1-2d05-401a-a6c8-d6fcba59f155",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e41c049b-9bf0-4030-b591-a53dc46d0abb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9dbf9ae-3c47-4821-9152-ea030fdfb4d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "82131caf-5d35-4b01-a105-c1516faa364d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0c143c45-d407-491d-b887-b3bd9edb429b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ce555c50-715a-4286-a102-b2c83830a4db"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "76be9895-2734-47f7-9d8e-3a41497be164",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5c7192ff-5c1c-4959-b455-bd1c60c8f24f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d50c7332-70f6-4d2e-b2f2-d14de2458f44",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "cde87d3a-52ae-4de8-aba8-ef5737d5b07c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0ed8a208-b060-4830-a692-6bb21493ec12",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8f7dbe30-59ce-4701-ad19-b7ff968454eb"
            }
          }
        ]
      },
      {
        "id": "9677c445-c893-4682-854c-4ec19bebc212",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "34ee172b-fbf3-439d-ac06-58cfbadfb4b5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3efe61f7-21cc-4197-8012-a666ff031607",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0a2eec4f-b414-4ce7-9130-528d34af1f28",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1daec5ef-8b7a-40f5-bd80-c8877430ab4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e6c6a17-2966-4787-84ab-01057c825e3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd045729-f92e-462c-a500-d8ddfaa406c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc613747-7ce1-4ef0-8ea1-bb7065b40839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db54a0a0-29ec-4d58-94b3-58c47cfb5344",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4b7de69-558b-480b-99f3-c460fe9cdd1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bb6603b-f087-40fb-8b22-6cde5d7dbbed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0ad6108-8278-462e-bda3-92f6430b0f73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc1d9818-6f31-4bff-86d8-29534ec851d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "472aba87-8312-424e-af15-9570d4eea548",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9844a9b0-990f-4bee-91ab-64a5d450d1a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3956ae96-5929-4bfb-85ab-dfc32772d8d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cad485a6-0b3e-4e48-850c-0ce7baf4af2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ed6de5d-cca5-4c10-8c69-5bfec0716e95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c06987ba-a145-4f54-b7ab-7dcba9afede4",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d562e82-0c42-49ee-aacc-c9d9a2040b65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e41d4e75-c335-4887-821d-3c81886d3bc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1969b1ee-f0d6-434f-a03a-feb96e10233e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5b2966f-f587-484b-a939-f95dcc6b6a43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3b6ced4-1d90-4b7c-b4cd-728b4e49cf33",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f338b045-4b99-4f93-ae0e-09529d8cf39b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2e9e18f-b0f1-425c-aefd-ed2c525374cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b887798-1988-45e5-8713-7e0359d19adb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb33c54b-5a78-491c-b9ae-63fcc982aa05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48e99966-bd58-4ef5-a0df-f0b903380db5",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6466da5-2b59-4e35-bee1-d47645d1a88f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69227401-8295-496b-95da-63befc51cdc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70517352-ab21-4592-b9b0-908a0e25ed15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ebe9b251-56cc-429f-9cc4-b15cada79853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1af3e6e2-4305-4e54-9adb-72e1ffe2bcd9",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de7b2650-c002-4a4d-918a-b034bfb8f25c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a310905b-8334-409b-ace4-cea9c93e100e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42908fb2-86c5-4fe5-84a0-606c495431a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "68b829a6-e05a-4e90-b8b5-41e888726cb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "675fdfba-d2a6-4775-868d-702ce7758a14",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5a61d98-82ac-464c-b9f4-9746c01648a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b3b484a-1739-4008-bbcc-45cfd08061bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72b44a87-8ea0-4fa1-90b4-ba39d10b9ca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "93fd3cfe-ae9e-421a-b089-18ae218f81be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c54276b-e897-4061-8f37-9633c2eb21ad",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a1dbc96-c6f6-4a64-9a4d-b9738dafa951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47e8f531-76c4-4a10-b6e6-9969dcdd90d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c56bd476-a745-4c06-924e-07c3f10205a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a468bdf-e13a-4450-b0f1-fd68ae2f8e8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a497b94a-861b-4f74-b9e9-491cef1b698c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6359cb90-5aad-4c07-8d1b-272c0d7fedcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60df1cfd-75a2-4f72-b1af-9296cc2c6b5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b995fb46-38e4-46c4-a880-74ef3e42186d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "85ef3fe3-3a2d-4a5c-ad41-e513a6e457ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad068643-b900-4dba-a872-6bbbd15dba44",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40ae4cf4-6c32-4383-85b4-e52f1943ff48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1597b44b-e0b0-4e35-a8b5-b26fab92e064"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4174f524-faef-4355-8897-d8b0fedde47b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "ebf45c47-8b6c-4f03-8c9d-59bb2f7686db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "710d0723-bc6b-4ab8-b782-03ade1f3d1cd",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe302a72-5c79-4b82-b40a-a38a94446f84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3ac64f8-33e2-4845-848b-75c024f00737"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5b2f2d2-7ef5-4c24-8f38-942aad36744c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "eb1437b7-d179-4d6a-a813-bd357792ad8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "733d5a8e-538e-4e54-8ff2-fb67e736f649",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cf690ca-3ff8-43d5-b67e-e2e6f6164080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ceb617ce-166c-4967-a4bd-688a8a3afc6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c675f8bc-c284-4a53-821d-ba0066921eac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "30bfddda-aa2e-4b42-a155-b9b2ec30b1bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "153d5cbb-e93e-4daf-a957-faefddd503c2",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fda36ba6-0f29-485e-82bd-4b9551f67456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d784f6eb-30bd-4605-a8df-1fb1640babe5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4202be25-ea6f-4449-a886-d9d9f4d8185b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "0535b2f8-0514-45b9-b395-633b3aa37d0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7659ea2e-8494-4d00-975f-e47a884ef505",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "390f400c-6a3b-475f-83cf-7dbbe2e46264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d540635-a67c-476e-80cc-0b174cfe3a7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d925f6d-aa25-45ea-85e5-9938d00a8a1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd15e86c-379b-4461-9408-aedd7381b357"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4da9beb5-876d-40a3-8857-e36f6cb1776b",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b93dc20-e07c-4d37-8de3-1ece6e062766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e5b4d5c-761c-46f2-b494-15cf341cc3e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeb174e8-9d61-4e87-9b4f-2c7f294c7a46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9495ab0-11c1-4afa-ad2b-bca5f25241cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48fa672f-4f50-4f1e-a377-db4106c17cb1",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49d88033-36f9-4eb7-a332-f3e6f46471ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3745d3e-4ee6-41a2-b506-bd2e5211a9d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67f6d9ab-5098-42d3-a304-e9b4019e7e4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2ebf46b-d783-4fce-9633-43ad7fce51a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89fe48f3-a91f-4bb7-b5d4-6e4fa53230c5",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b242676b-7f32-4430-9c30-78a88c1a5a4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9118eb7f-f7c0-40af-aa7b-e3ed2d6a67b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4578425-db3f-4350-ab0d-a9f9723e1915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "37722821-611a-404b-9b97-a3222cb4d3fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdd5b9ed-2755-45a9-94f6-86f5c31b7b93",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8e33c2c-aa6d-44bb-9c27-758ccc4f9ee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb245966-774b-45b9-9b50-ea19582f9f21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b1dc187-8a44-4082-8b72-467d4f8eab73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a846a998-eba4-4a70-a52e-127ea86b5680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9eee984-0fbd-4c92-8f30-374822b140bf",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe128b9f-7863-412b-be06-bbc74df4e7d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d9c4b42-1f4b-4d96-b918-9372c1860ee7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea56a5aa-0c49-458c-bd2f-350c44338e55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "27330c19-8024-4015-b7db-44e93ba81042"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6111c2c-f4fd-45f6-a7f6-25725df453bb",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c237fd54-bd73-45d6-990c-3e82d35cffe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0370f31a-10c4-49fd-8360-3908b1519162"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de3c701a-7204-49f4-a57f-9a137cd19aa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b4d29c7-e50f-47ba-8a78-6329821a3b39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ea6c9ac-24a9-4c30-a16f-23f08ec2473f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c8463be-0a80-4fd0-a3ce-77192217a313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65797947-b786-4e79-bba4-61a944967935"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cba08619-b08c-4638-bc7b-6d4872be7dd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e56d8b90-970c-464a-8806-cd008edfcd7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "568e4429-5a0d-4253-886d-5ac51b12a082",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82e5d0e3-0178-43d0-8a59-ee4d5c0d5c65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae9aada0-a296-49d1-9e60-abbcdf5e80ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71dfa783-45e7-4b5c-8ee5-8d3dcb921cd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "72e96165-8ea9-4e19-bd29-79950d4c1e32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55d5b47d-033f-4efe-b34e-8c1a113e9d03",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ada1d62e-4301-47f5-9069-deb5362d9001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "227892b4-3bb3-44f1-839a-756d241501ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5700f532-d5c9-44d8-9caf-ddfb91966bf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "172be898-6360-4b89-86db-5be73f7618dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f31ee290-1d5f-46b0-be4c-461522ec9194",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "590e7db1-9fda-480a-8ae1-e7ef53efff4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6da53f22-b032-4a80-8cdb-dfea6da9d0e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d47bb3c3-f080-4ccb-bfb7-980bf28b4bde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6bd8409a-95d4-4fb4-97b2-6bb29225f1e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "836742b8-95cb-48d4-bea9-61f15f6c95b2",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8206ee51-767e-4aaa-9500-d370f195d47b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc1a6156-2586-4964-90c5-d15304be1313"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a26aba65-09ae-4d45-b63c-c5801af90b6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb02a7a5-0435-4dc7-8c4d-f67bd87d5637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39748fd5-26c4-4faa-a328-f67b881e15cf",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07c8ce2e-6b73-479e-b04c-11f3e92d36d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "007362d3-8028-44fa-b835-12c42f4c21fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d94c42b-00b1-4d69-b63d-3896561164ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "002e3543-21b9-4e2d-8466-dec03c77922a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f3654e2-2db1-43c9-a2fb-dfe321f0efdf",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "848531ad-0c0b-4f9b-a046-31db912dc8dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "117b5129-d4a6-475f-b22d-ac59055c099e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cff34c21-af76-4beb-aaa7-4951ac961cc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b0a8825-b0a6-48e2-9097-30bad083c9bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a456896a-5819-4a96-9e77-fdb29761c978",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ee7edd9-aed5-476f-a102-db4c0c400ff1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cf480b5-746e-4228-8575-085797ccce24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d5d925d-f5ff-4cba-a6b9-ff93adb969c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5bdc2096-733e-4009-b014-a15db719bcef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69d42878-770b-4cdf-ad60-a66ad43dd865",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2c66729-0dd5-4d13-94be-4201f9de0fae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79874e5c-ab06-4f07-8384-26de92a3fc30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34ca73ab-dee6-41e7-9d64-005dfa0c3197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "702e0a9b-f8ea-4efb-95d4-ea8da5990007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e67c7eb-8839-4fd9-89c7-1b49af3eb066",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3965c6ea-07c3-400b-aa76-6f500db053b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "574ccc52-59e2-4bb2-a051-db1a0cafe851"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5892e50-f1bb-4d3d-a3df-dae0eba5fca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fdcf70b7-97f9-446d-a6bd-17e1685bbf1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "056e4717-46ac-43f8-bb33-4afb770d3888",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a174662-57f5-4597-b1d5-51691415096b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53ea950c-4c6a-47dd-b7c7-cbf63c6edca8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0b4bf7d-8483-4119-94ef-9eed7d92f679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ec8f479-0366-491c-bdb1-2570b61c3580"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb491ef9-ea2d-4979-b718-610bed4e55ba",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8936a740-367e-4482-b6ca-a6849cdb0b54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2e090d9-6cf8-4e8c-b8f4-8826232b3ed4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a08c2960-0cbc-4a7a-b4dc-4725aec227b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2812d219-6220-4bfb-a10d-c026bb1e91b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64f5722f-3a34-4b35-96a5-de53407a5d1e",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f474443-8f15-4690-88f8-92c16e9f0ba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d492618-1fc8-4126-bd24-2b26dc3a5c62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca766b38-d89c-482e-9296-9f87fedfe24e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cde0fe92-3d14-4de5-9114-c60568a08300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17d3d52c-075b-4190-b524-d2cb007bf496",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c54ecfd-a416-4b07-a2c7-0c3e129c7cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "026e1e81-d950-44d5-bed3-cadbbde392e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c62b8547-ca11-4b38-9a9a-3f62dd753a72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd21906a-b918-4fb6-88eb-cdc4da6aca8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83ca82a2-2c77-4e57-8a76-2a433cbff54d",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bac3ac9f-4a45-4c35-9847-9d719b7e1edf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c2c66a3-b7f8-49f8-b329-88f0db29982a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01499793-21ad-4c75-a905-a6f0d4bbbdd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "693c7d57-efbf-4981-8103-64cc8f08f3f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0621a620-923c-4338-898f-86130390c061",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2daefdf-c584-4f09-9c42-2c3235c2dee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20175a84-ab66-4b0c-a541-28b0638cc879"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6fb988f-dfec-4121-8454-4756cf10f6cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "460819c6-0065-4048-a559-0c57ddccaca7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3cce23c3-848a-43ec-9d55-a025982b403c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5a853f3d-b83a-46fe-ad37-f8f2769fd956",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee94dd39-2d31-45fb-9488-7a83511d6582",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "36492c71-6ccd-4dcd-9d83-26ad518572ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dff90877-5f0f-45d6-8271-11730b7e1c0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1fb77ef6-635a-4dc4-bde9-f00e49945636"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "750a3dff-9860-4bb9-8950-ac52130da453",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "50aae8ff-5808-420a-9b5d-be969cf2b974"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c12348ce-bcd1-4d11-ae6f-b49040902f0d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6571c17f-8b06-4d5f-a080-7e0db838ae91"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c5eee3a9-a7c3-495f-b42e-c589a673d281",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "fae591f4-9924-4715-8060-c61d63b35b95"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3fbfe6e2-b193-43e3-b948-04077e4817b0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fdcd766d-7676-4604-8169-8c45d1d9b004"
            }
          }
        ]
      },
      {
        "id": "1e35eef7-a11f-4d89-8bc1-36311b1a8366",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "1079b9ce-598c-44cf-88da-d0bf209d5277",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9105efad-c589-4763-883b-1d5dd286a1ac",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "acfc2fb8-9beb-49f1-a462-062b6ab0e213",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28a7eb96-35c8-416b-bc76-e78f691e0ff7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e525089b-423f-4a3e-a30a-ba7b0b303892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c8ebea9-2e35-40fd-8003-a00b74defcce",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76502740-b0e2-4c58-ae9e-8cb74b2d878e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee82d418-91bb-45f7-ac85-9b38e05d0987"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20c05ed0-bcbf-45ac-8492-8e709643b833",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "437a90cf-4fef-4d91-ab95-e54b27c5ba7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bae3ac2-95ec-4808-877f-013c19252028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81076f9a-a26b-4598-a049-e44cdc58ce6b",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "602a22ba-8b79-4542-a41d-209ab2dec394",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cba459f4-66aa-44da-bcb9-91b663df1bc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31138ead-c69a-49e6-aefa-3728e0665097",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27febed8-12e3-404f-b4ee-2c17eb23cd34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "431cbbe4-cea7-491e-b584-ea64a6854e9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bde1391b-ba69-4cc8-bdde-39c4b8fa8367",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a1283f8-b5db-4e1b-9c34-25eb071f0d22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fc3b1c8-6adf-48d8-abba-b27024b77cdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38a2fe77-ee8f-4f71-bf7d-e7e4ff3cac6b",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8c300d8-7b5f-4995-b346-e0c8a1c9af66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4338e73c-1b8f-4ff2-99c1-5259fc5a4b99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b115188-ad82-4a3e-abb3-7455d4bec4f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8a280b0-b755-476a-a0e9-cf7f309bbe03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f7f4f43-0a97-4e4d-bfd5-ad2b7532bc53",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e89b4e3-16a1-4194-84a1-26ed00bef549",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8cdad81-199d-4db7-a4f3-481f1a62d0c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34d92eb4-13ef-4a51-a3c7-cc0eed1e1779",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96698ca6-9561-42b3-90c3-8e065d9c695a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef67d8c1-ed08-478b-a434-e28f388bda76",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ddb8953-f954-4194-a56b-7e021face43e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e82681ae-fca4-444b-87cf-e9680fc9189c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f96c867b-5b55-4b94-acb2-da7f9cdafbb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76671af5-671f-4460-858d-1b9664657433"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d53593f3-e761-48db-845c-f1f966facd6a",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "322c8852-548a-44c4-a757-8c1ace098bb5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a7075ea-7472-400f-a58f-d814848f1840"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c42e194-1473-493c-abc4-e22c3622a7e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9ee065a-6040-4ba9-bbdd-bfcd21a25055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41622e75-1040-4038-9cea-81cb16184849",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "343f1b4c-493d-4ffb-85c2-3b71b637baed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfbfad98-63c8-48ba-859a-867b25451ef9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4cd97bd-1f36-46b1-ba67-8dbf824ec384",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61512b94-9008-4c46-967f-c42243154dfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24e58d5c-7d88-4bac-934c-7251009ef201",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f8227a6-7c08-4707-a282-a9ab8cd135b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "348c86d9-ad19-40b3-b8e1-f04724df3626"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61c5a532-e11a-4823-89fc-c28f254e5235",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e3a6910-f388-4899-b3b1-8287fb5cca48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31df2f34-1a27-4175-ad7c-cbcc5f56dd78",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a18140d8-b609-4d03-bfa5-bc874d32073b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4660968-ea69-42e8-b403-b2a8e486919d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b69e4b1b-3a52-4705-9911-f61327a8b73c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ebfede9-5001-4eca-9cf3-6efaca465707"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a27a941-a1c8-4a94-81fb-a9060c1acf7c",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb1d16a0-0bc9-4046-b719-0e7ae49d0575",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df94c50b-2638-4f81-a391-09b24af5fd15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21950ffd-93c3-4988-bee9-5a68e9e775a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e595c14-33c1-471e-98c8-ec746825769b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd6cf628-3905-4f7e-90f9-1431182d7fae",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c48acfe-8872-41ee-826b-50c68aab011d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc97261e-127f-45cd-af9d-6d1ef1acf655"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efea67a9-4d8b-44d2-83b6-0f16cb326c98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04056af4-fbf5-478d-9273-e7442df5e9d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cbb3e72-489b-42a5-9fb4-2a97ff6ec6d6",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3824e3ee-7cb4-4a51-8e23-ea004da16bf9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ee0093d-6699-44a8-bab5-b13e2bff0103"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4597a09c-82d6-4566-80a9-9a5156dc2119",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4f4efdb-cbb5-4f8e-a64e-5d7b310bf835"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b487cdb-7266-43eb-8c93-07edf6265266",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04e8137e-f520-491b-a646-82a1246f61f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c4e984f-70e9-4928-a8c0-b45492131904"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aad51ffd-cb7d-48b3-919f-52c7e30a2467",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b9c659b-5ebb-44b2-b98f-8722ec0cfcba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "399c9dbb-4b27-4334-8fd4-96e6e5dea97f",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5723c24b-10bf-4077-9d48-4b571acd19b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "741e679c-69ce-4db4-b526-86042af38c1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87f27da1-d4da-4e54-ae28-59c33d38bab1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0c65f3b-af10-439a-b6d1-734f7959b577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78ee684b-ba06-4150-908b-7e05ac96206e",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4840c779-2f59-49bb-8531-1782f1225047",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56d6c1fd-a183-4173-b791-da7359872fa4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2d5f3a2-5821-471f-84ac-ef5bcfcf71c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddf62b70-08bc-4e72-8d55-50a47ba35eba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6635b4cc-aa82-4b94-b418-e53908929565",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdc2fa8a-2f78-4773-aa0b-002ff8b01cab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e1c31b8-958a-4d52-b203-8cf32b63ae14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc6c0e0f-2011-4ef4-b2d5-da0b196a76c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8c0ddeb-0cce-41d8-94c7-c7b916464b21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d74c36e-efd1-4d8e-9ccb-a63301150771",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bce56e61-7a50-4cf6-9cea-295a406ee696",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fa74790-f9c8-4a98-9bd0-6e06349c1c52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43293578-c9bb-44d0-8ad0-11d8952e085f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5cbe25c-55c4-4481-9400-af8411a8095a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cfcebfc-dd18-4bfa-abd9-3ce04b4ace4c",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30f34b39-6346-4131-b46b-97b0a68c4738",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c56024da-181b-49c5-9f7b-9485c19df63a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee285af3-258f-43b6-a635-20827d2b215b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a80bbdf9-de42-4bb8-923a-ee89a7fa05e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2767b418-564f-45e9-8f55-3d341dd987ff",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d49d850b-e1ed-4c74-9dc4-5f4efe856ad9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fea703d-9fe2-4253-878e-5e353ecaed14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad82badf-8e90-4b9d-818d-c7e5fda6e2cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c45ac9f-4390-4760-9276-25853a43b0c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eecec4a3-60db-4b07-9729-fe0e31c88e69",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6b141f8-c988-4a61-8a88-9315b1054b9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6832112e-8731-43ba-975d-07a7d871fa82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f998c82b-a6df-4246-bab4-5f2dba50a907",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5be02937-c303-462e-9dcc-88a86e26aaa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1fc6a3f-61f3-450f-9835-3a1f83822c96",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58ecb485-7b71-43ea-86f3-d1bbc8dbe8f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b2248b8-d92d-4afc-aaee-6b5d593d8511"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7951f912-254d-48e3-96f4-5e93ed25f6bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f63e66a9-072c-4dac-8b5e-8e854212e45b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b454b84e-fc05-474d-930f-c466f3cc2af4",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7de264de-0d26-4c9e-b82d-ee2567cfa088",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "209a6e81-896b-419f-8302-b00a29f2985a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdabb4d3-561d-48d3-a70f-8f2680709697",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25288666-e37a-4fae-94dd-b6108f840280"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8da7f92a-dbab-40f2-a3f6-8df84222e52f",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfd712f6-0f58-4105-8b2b-c168e3598acd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb780780-07cd-45d4-8a61-24c1844d2cad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "582eb18b-7335-4b82-98a6-af0ec42539e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70a00383-9fe5-4dd8-88a6-86df0989c5a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5deb854-4114-4336-b056-ce0ce99dc787",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5398f83c-4b74-4d4f-8aa5-2a33928a5628",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f092533-5c87-4337-ae11-cf1918acd707"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "526ff017-169b-4443-993b-18e4a6903e0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50e4a98e-95be-4034-b829-efd1e52aed60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e105e1b0-bab2-4d16-b2b4-24ac6a249d8d",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7012c04-117b-443b-bd44-0de42c78a5c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7868886e-ffc6-4df2-95d1-4a04a6fae044"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1cf61ca-8807-4d31-9e81-fb9203d70745",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "654e5bd5-30ae-479e-aea7-58e9bad2e212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8a3011b-9a23-4e02-b318-8b5017f667a1",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8994646f-b299-4c93-83f9-632c55b95c9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0141b13a-1cd9-4286-af2a-8452d2e6caff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8efe1443-f462-47f2-a51d-1a3392e7f29d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e835c398-f125-4a07-b3e6-cc881fcccbf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cf94cfd-b2f3-41fd-b55f-7ffe322e2c60",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47595f09-61b2-4898-80ab-96b15f06907b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c273f8d6-d7db-4924-97d6-6f3a43a86444"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edf6249b-b8c5-4bad-85d4-388078198a74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb98e701-9ae6-45c5-a088-ec2a6ad1a0a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a401b00-9237-4959-819f-5042760b2537",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09d93e72-62b5-4d55-85e8-dd1e0e27c970",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e0c4d73-0359-400b-ba59-846f87e16ba1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c5f59c6-6d78-4883-987e-8c30c4e9ddf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00936e8a-d5b5-4e55-8457-86146875e598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d36180b2-1cc3-465c-94ba-5663a4f57eda",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "861e9532-9290-4c1a-929c-6f456213827d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36b9fda3-b2c3-4cf8-bc67-3ccb992ebb1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7760271b-850d-4bc4-8180-db2ff0209edc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10075826-de98-4c11-a991-f5338861ba9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3baa66df-a7cf-4af3-a935-131a91444816",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4d8f990-4efb-4c62-9f9b-094a4a49ef0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d4a584f-1aaf-4471-b808-53b730f21ac4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5e1144d-e665-4670-83f0-caa6fa1b994b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88d84d61-d1cf-4e69-923d-dfa340b2dfd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd4ef8cf-fde3-46d7-928c-2bd4e70355d0",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55aaa61a-7541-4c04-9888-1cb071eaf99c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12e531dd-d52c-4fd7-b14c-fa1b694ed305"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11708c44-6609-4e6d-af8b-c8dcb1dba3ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cea5c83-46ab-4c54-bacd-1ef33689e3ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a5d16f1-154b-486c-bb07-f921eab76b33",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7074fac3-b5f1-4541-b02d-a6eadb5e5ff1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60ddef87-c800-4a87-b0f8-cd03eb5dc664"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6796dd7-e2a2-4666-8bef-fdf7f4bf8b67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ced7cc5e-b67b-4f0f-98a0-4887a3903921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88b24eec-ae17-4437-ab42-bc376cebe67a",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "594321b1-fd2d-4480-bf18-f0c69c965e2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8ce4e8d-071c-4d42-9b52-a2f850dbf77a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b3a0d0e-c253-4ced-95f2-da7253fbfdbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35343089-8fdb-4679-8c42-89d056428961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d099cb2-52f0-43c5-8e81-b1dffbbc5260",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58fab1dd-4fb4-4214-b83d-327cd1d864ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62e36df4-53e6-4fc1-9875-b7a4d8266d93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba7dcbf8-7883-47ab-88ac-0d228f38002a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e005faa8-3f47-4a5e-86db-568b6aa38199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22de1f5d-6fb1-4b25-ac79-196b53e29dac",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76b47d0d-f69e-4386-8536-54419cd162ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c381e343-e15d-4006-8b12-764e3c4f1977"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9909e599-7380-4eaa-b63c-9f09b2abea4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75ad7d11-f57a-4626-acb8-9a72bad2c065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b49e91e6-f3d8-4297-8f8d-d8ed0cf1280d",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2b7962c-f2bd-44b5-a2fa-f73dd7ce7234",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66f71eeb-c76d-43f6-b1c3-10da2222ef93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb50392d-46fb-4cd8-8102-48381288a0e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73253356-a56e-46bc-9a5c-11f8f8c36f54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eb564df-dc8e-4de7-95f2-bdb29ede25e4",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae97f00b-dfe2-48c8-82a4-eacaa105b068",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "488c9fb0-27dd-4d2c-b196-99b7261c3c0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0e90f5e-12e1-4c0a-8301-0d22e580fbe1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6d111e9-f4d2-4e6d-9948-3097be1075c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f514d3a-9263-4e9b-b4a2-e5d8f305d676",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cb3ca94-32ac-4401-963c-83aeebafe82f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55d41d29-4ad1-4a04-aaac-e311f3b9e819"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ce0ae95-b0f3-4f26-b4df-f2e647599e36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb01e135-d949-482a-bf7d-32c76439c378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "637a445a-3c2e-44fc-bc4b-003ca08fca47",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b7258a9-4f14-4125-997a-b5c429ee4b00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36741d2b-b38b-410e-b4f2-f1bde90a5bfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "272c3753-c4d6-4125-8c86-032ee2c95fdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d91501b8-e38a-4156-964c-f3b11977a5bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5a05508-d3bc-44d7-b3e3-e33b4dc7ea6e",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38607cb1-953c-41be-833f-19c28f61bb68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c3a08bf-396b-49a4-97c9-5b439366c21c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ffdc9f8-104e-42f5-9d71-d3b5ec1ff8ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cd69ab8-8dae-43d6-9c3a-564c418e0d5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82e45e13-6c8f-4699-8fe2-9d885046e026",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d60e949-5e30-4f7a-abd1-620d9e1cb5e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "913f766b-0c37-405e-937c-8661fe105f05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d264ce5-47bc-462a-a0e4-c362b8e3de60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91c81de5-f812-45c2-b122-bbe407832bc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cea9b754-30af-473e-a050-882bb2cfb7e8",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a8f5590-2032-4564-9c74-fbf50e507403",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "989023bc-f539-4912-a906-77b28151e1af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a69e2943-4318-431b-be59-67b8ccfdd8ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87c02493-d700-40a0-9c54-91bd6b1e1fbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49c1e3c5-fda4-4d73-b0b1-e93f9dd86cb5",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8fc3d8e-b5c6-4197-97d3-79550763d88c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b44310c-b0e4-496b-9cc7-9bac45e658b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a61bac13-1d21-4c13-8062-7667bc6755ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "117c293e-d605-450a-97f3-d84be6ee5602"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d225740a-0682-4e19-ae58-7c9d8859019a",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdfc662d-6c90-49b8-b59a-943f3fc9bca8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "437d686b-4b42-4b9b-8c7f-15328c53b849"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72dc484d-e27f-4980-9da2-8ca462d43988",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c201e422-1c92-4de5-a401-b2a664b76f4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97153e17-581b-4d2c-936d-319c3bec09c9",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69847516-bb4b-4250-9786-42ac24a2cb7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45c1df46-a181-4d54-9d1c-87361bb5d6b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "facdb81f-dae1-4fa9-b757-951806b7485c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9800371a-d7f1-4589-ab82-2bb153e82c8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6796b9e9-36f7-48cb-a770-07fe41884ae5",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dbf8f6e-a978-44a3-a42f-9238d5dcd64d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bd080bd-3fd0-43ba-a315-858d1762c9ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "025ec75b-238d-41d5-ab01-281c62462073",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4aa6f97-837a-4133-977b-a4615d7f232c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94647813-f0ec-46aa-8f02-93c2aaa03dab",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c46186d-f1f7-4379-9db2-0c7a3363c0e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ccd85ae-d780-470b-9671-e76d1c8a253d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9b0b10f-0e34-44be-985d-d0919f25de25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd9db454-12e1-4b2e-88ef-76a89f34f635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6318659e-5ef2-46ab-8691-de506be70c64",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7ba4b71-bcc3-44e3-bc77-fa5260e73970",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a69f8ef2-5386-41d7-aefb-cd1bf2e4545a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab94d3be-0d92-4a7e-b1da-b5a64d09d6ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f23c685-ba3b-4bdf-86ac-b7604f6d6049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80b603de-c1ed-4ffc-8a63-94b71afbcb30",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d14b9ddb-e550-4f94-8273-20fc847ffd25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8c80e66-0a00-4a27-8b4c-011263a8107e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67eb805c-7ab0-44ad-990a-2af408f9af9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a7b1822-f55d-44e8-87cf-7cdd233e7fa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7fe75a0-0afc-4e1e-8cb0-d4c10812bf2d",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1602cbd-b131-4474-83fe-3698f4ca9d1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64f55e2b-7c5e-4131-8bc0-e1b0f1a25e71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1943b2e0-9932-4c17-a089-53fd0eea2c88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7d283c1-ba5e-45a0-9838-137df7d4c8b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d5f912a-a4cd-46d0-b14b-b5963479d3f5",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efaafe6a-1aaa-4539-bf71-59a16ead11e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45f9f849-221b-4bf0-a6f9-df2c0051e237"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa1a8ff8-9060-4aea-8e00-ce8749ad4db4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59cfcafc-a50f-4853-8ae6-c980cd96b3ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "351b920f-bb72-488d-8aba-9ec6bbc4534d",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aee1b36-ac52-476f-902d-2e2cc806d2b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14b0f7f6-d17d-4f4c-9b9e-b16b811b1944"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51d3d4af-f367-4df5-ab8c-21115fa4f172",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71246a4c-1306-4f79-877f-a00088839aa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a21e59c0-819c-4163-8bfb-af555fc48d9a",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9887122-035c-4ff4-bcdd-e9a55ce3ed9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61932488-21a4-4a8a-8ee1-761222d9ba50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2583843f-ab34-4694-92f2-b292250a7bc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72351936-1ca7-4a3c-94a3-c68c29b3b9d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e450865d-f9ef-4ab2-9c5b-504a27c669a0",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe08e80e-96e3-4a12-8796-0e528e20719c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1cc787f-919e-4e0f-a44d-922af60c99de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5cc69cc-5b61-4795-b148-cac630403ada",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98f1480b-e621-402a-a7b8-0e90bc5bf0de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "751ddb01-5071-43db-8f71-954eb7db6de7",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd0a3cf9-633e-4c0a-b5fe-4dc680f353a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0b10d40-bc2e-4336-9830-5dc07add547d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e072e386-82f2-48e7-876f-042761876c5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "477a9a1b-e707-45f3-83d5-586bd478c980"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2da3c21d-6e27-4ffc-81d8-2df4eb48f54f",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6075412-7f7e-4a29-877f-71ec8c520d4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae90206f-313f-4c7e-b79c-f85407240bb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "814c9847-17a4-4295-8f75-473d1e0f668a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69153999-e8a0-443f-8874-451108aeb55e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e8b9bd8-1576-4f15-a1ff-3823c8a90ae6",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f554fda2-ed2f-468d-a0ba-d6730cc791c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a99da2e6-b4c2-494f-b168-608d9a0b7fbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68e5ef2a-18e7-46e8-8ca9-9474aa52c5a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c71c271-6b52-4ab7-92f9-e26bcf69f91b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dab531d5-0408-4541-aff6-39665ad63bcf",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba90709f-1e14-4edc-bebf-ec35b1ee54c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1ad3290-03c6-4c5b-8203-578f85b48ffa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a546475c-c9a0-4877-a35c-1052d35b4936",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12cd460b-0d96-433b-987f-c18a654f59a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4470baf-8020-417b-8e8d-3c651992fa4e",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2381fc67-b9e4-4b2b-9872-5ab6e709367f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "754c848d-50e9-482b-9931-85981e7b3ef9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c891b73c-8feb-40a7-9b7d-1f631b4794c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71236399-e642-4989-b1a8-a62dc053cd90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fe0534b-b1d4-40a4-9e75-b59383dd8317",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12655eaa-c263-4b89-86c9-cdafc1c19c6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20f38b83-95bc-4cd8-a640-46751a3eeaaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94369f09-0f0a-4f35-831b-8c9d806d3443",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5261a05d-c2ed-49b7-ad26-b631a67c132c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2c67a7f-9d4a-4e65-b917-f9617dcae74f",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "077814c7-ca67-47bb-ae04-8750f656eff3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3f74938-845a-44e0-9842-8eb6e4f16044"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17f89bc6-68bd-4e7d-8dc9-46f34898fe02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82da8878-18fd-468a-8887-86588e9b8c09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "528da6d8-3eb4-426f-83e0-fdd7e0691e05",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b171fc2-da02-4257-a632-7f654a4c1b60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9880c495-9dd9-45cd-a42e-de0b67acc22f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46d4c461-745c-4e22-bc12-4ede639d802f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9479d5d-4d7a-44a5-b368-9749a38f9592"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0106b81e-c8fd-4109-a941-5fe14d5db9a2",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d507f63-7b1e-47fd-9436-b0d939cf6d51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2540c76-eb0b-4595-a591-4c421d7cb855"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcfa268b-e73c-4429-b150-12ed56dd2cc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b23038b-6e74-4ffc-8b1f-eca2bbfc8d66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d53fb03-37b2-4064-b624-5f92d48d3e56",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79e2fcd0-de7c-4abe-8f06-0c39a5b76f1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42388253-a5f4-4daa-a994-dab8ffd55d81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "767a5c57-8c02-48a0-a81a-b428f3d4ed6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc791869-a2f6-45dd-8a69-595ae9cf0e41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9609df9-e056-401a-8a23-cc474ec7fae0",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60a2b547-72bc-4321-81ab-8cd2cb9de766",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d1648bf-0532-4a26-b0e8-457bffe9dbeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56057e8c-1a4e-4d2b-9136-7c2fa8f48789",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b1be466-e4d2-4062-9c36-ad77bdabcf78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6671e7cf-bc56-4f6a-9a3b-7219d81f7d4c",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d096460-db53-4e06-aa93-1b10fe35a791",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6332925f-42d0-4034-9381-74496bf57d0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc8117bf-6343-4fd2-9a99-92bdae167537",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f7d39b2-c187-4ddd-9008-4dd899933200"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a1be29e-8872-42c9-803d-20cb0c2a7c46",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0ac51fd-3e93-40b9-986e-a44151d07934",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fad40287-034d-4004-a68b-4fd244d7268f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1615343-697a-44f0-91fd-07d7ffe63aab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c81bfa79-ccc2-4f85-b476-1497a6b429c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ffac74a-da26-4de4-ae8e-6393a884a9ef",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fece12fb-c2d3-42dc-ba69-f2a3a3bd5df6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd94ddc3-232c-4687-a922-fc2e49592f7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62588792-e7bb-411b-b030-a7053ef2ade3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c97a434-c407-4e27-8308-2be882337e54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "303e38fe-5151-4dca-a5f2-3fb3db322c82",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd3b1785-0278-4ea9-a733-a3a35f376b0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62a8f50a-a118-4a2c-be90-8ed09518511e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dd84cda-34f3-4a5f-b334-edf38c2712a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1abf62ee-52fa-4d1e-95e6-913a79c8ce23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a129003f-3758-44ed-b054-01707b8171ae",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "376240c1-1807-4c3e-a45e-f878b574189e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed1c4602-2fd6-4f18-aa3b-02734a58661a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28f5e173-2083-49af-a271-b2d385ccee1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4febee6-2893-4aee-a249-0e3926119609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dac3de13-6731-4c06-99a5-cb1c230232cd",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62812e62-4e03-40da-9a19-b1d55a96284c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0be81d6d-c15a-4181-a125-bde4cb9debe7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92f4bb33-64d2-44a9-9974-1894899d18ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd88543f-9382-4a30-b747-db9bb559b338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8b952d4-fdc7-4f45-8970-daba3065b219",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abc09780-4de0-45f0-a613-8f2dc84538d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "800e47e8-d5d0-4bba-a69b-854a21c61cb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a1e0521-d2cd-4981-a895-21f1197b53dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa1b2bf8-39a6-467e-ad3b-c48db5c3f0df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83eb4a21-07af-41b5-a2ef-f9fd109ae53b",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eb8ba6e-37a6-4660-990b-7023c6c307bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "867b7b75-89b4-4e41-ab2d-2fcc4550cd2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75877874-4f8c-45f5-91ba-4857d3c91e2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ed0a85a-f6dc-47f9-8664-550e5bb6ecb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35662547-e13c-44d3-8873-c15d6571bcf4",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09e6450c-455f-4752-a37e-e21c542f727a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "925ee52c-5774-4948-b830-bd05d4e97985"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c80d703d-0318-4253-b064-96b08d450d08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3413f8d7-f622-4fbb-b581-99f4c73e4e58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2e12348-66d9-4c17-aea1-a699ff07dedd",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b1a0be6-98c3-4d81-9a96-8514e5308711",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84f50866-56c1-4390-ab92-f5af46b48432"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39654736-b1fa-428e-9c0e-e46831a70339",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dba5a272-d844-4ba2-a826-479c01a11f87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4609900f-4210-4ae9-8880-640a19912e48",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "897d7b63-fde7-4b1e-a6a8-37361bc98467",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a5c5413-b92d-413d-b3ad-2cd4ee0caf5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a84a0521-fcd1-4488-80d6-9c77a434fd3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c40e2fa-acbf-43bb-81da-0253a4ee9733"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfc76bce-74b4-4f26-8ec4-56d99a6fa568",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93c555c8-79a9-4c5a-8c48-3bbb3bc375a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3be1547-5441-4160-9a67-406da35c471f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd8f1148-ecbb-499d-b344-2823346c2265",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5856cd70-3d6e-40f8-8574-1155ca7ec0e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5217c7a1-6daf-4992-9739-1d1ceba0f0d3",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "633c0a86-d981-465f-8702-9050cc0e26b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9cf110a-22d7-4e5c-a82f-6c578f5cb593"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "281ef4a6-303e-4c02-a1db-c89c55e36ac2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fe9e95a-4c54-4123-aa10-298fd508a750"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afafb8fa-d107-4e95-817b-406fa6a5db44",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da3b576e-3443-439a-a135-bb9ca2131a00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1bbf9f10-e884-4f5a-b0ef-227e9463aa08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "408a6bdf-570c-4b45-87fc-73246bd601b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7f5d317-041b-4a39-93ba-614b9d95326e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "413c8d62-0879-40ab-98d2-83a7d75e5019",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9273c6ba-41e4-4822-9d7f-8dcfe2d8f840",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da8312bf-b006-4952-93b8-0309d91d336a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10ad827b-9f2a-4a85-8eed-6e663269dd2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b6f64c8-778f-4313-b191-651221eadd51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd58b02a-3b01-4f75-98aa-3e5c92ab7cc0",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e00a87df-8e85-45f4-99a3-3eb018c5e256",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1dfb71a-0770-4b17-b5a4-ec9114375c19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08e75f3a-a350-43ab-adc6-643f08286d3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11137d5c-3730-4a6c-b2e3-dc4307d53c4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1129e0aa-0733-4faf-b27d-6c995e6bce3f",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92236d99-107c-4af6-bea4-8a06bdb46a8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95ea8c4e-2dca-4cb9-8ed1-f447694bc5fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00408c81-d198-4cdb-beeb-5d2aeb5f7566",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8813935e-7284-4b26-90ce-b81a735721a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a003b40-365d-4d92-889a-d89cf023329f",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98a99491-be82-4a4d-8ebb-042f100eb77d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77ccc4c6-11e2-4bb0-be4b-72ef1e4fb149"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8124a11-6f3c-4490-9c1c-5b7c60408553",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "899f7ae6-bdd3-4459-bc64-b12d32c809b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79cae4ad-5740-4fd7-8bf6-deeecbcdc4c4",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e2386d9-32cf-4a92-865e-1a380eff588d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05f7a80c-05c9-41aa-a29c-179e3ba6497a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b244828-bfb5-4e24-b7ce-efec35d48987",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15edaf2a-7493-4aef-8d56-b793754d357d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae608fac-ae06-43ec-9abc-6db250bd8865",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a5f41c8-3b80-42b7-8b03-3c96dcc0c9e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "343e3307-071c-468a-9927-98a79ea94789"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f18a9406-cb69-4f51-82c7-a95d8361ea31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b40f48d-24e3-4170-bc59-be2e4374d313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd5ef8eb-db31-4b97-bdf4-3c5ebe880b12",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c983b395-0570-4e04-b7a6-7743d183c8ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "031d4569-bb86-4488-911a-c9595d333481"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7c3a97d-2f23-495c-9ac5-dd0925f0e023",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a2494d5-8a95-461a-a8fd-4eae3feb2c6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7280264-ab6c-4cc7-b780-811ae0ba3836",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d59b0e2f-f4ba-458e-a2b9-7f98c0cee273",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "423d5db9-bd2f-4ee7-abe5-c95930860dd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2083cdd8-0ffc-48df-ab63-8c041450a11d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46689156-4606-4f32-8175-7961dcd362e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a89727bb-d23a-412e-96d0-901e386835a9",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d47fe97-bd2a-48a6-9b69-aa6c1aca6c1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f6bf65b-4f87-4d3a-943e-f548cd155b74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b017f52-92f4-4567-a526-41ff5335329d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc541ab0-14dd-4548-bfd8-78c7053cc877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b6700d6-3c80-446b-b64d-4374db598559",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab0f8828-690c-4822-a2e5-0da6005606dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30df3246-c4fe-4ea8-8049-2ba6152acd76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fde80d1a-618d-43e9-86ab-b8adc7c14c40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bff3eb3-fca9-4988-b343-bc87198eb57d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "314bb028-f38a-42b5-85f4-2e9625c5c951",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b416c43-b3b9-4a68-bcfe-77a531d8010c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22b09f6e-6f19-4a69-96c4-b25a79244cf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de42a169-f03a-4ded-be8b-e87f64fb0b09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "698c52bf-3db8-4261-9096-59088e3e03ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "649ac435-95a0-4202-b144-3e8acb6f59ed",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d5285c1-02d2-4b21-b126-d1ae52dfa1dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff84dcfc-eb69-4878-ac2a-d696de8f7649"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e506e95-24d2-4a09-8279-0e448c8eb28b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "280a5fb3-f471-473a-bf84-a305589de707"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3e1342e-9f31-4a9b-a640-e96751304a3e",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c98e5842-373a-4b80-921c-c2c53d00deb7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eec66174-e774-4d63-bd66-96131b98a755"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a54c7d85-fbc4-40fe-9318-bf21f2926a22",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f32feaa-82a1-42b4-947a-2facf3e03f9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e61311bf-d439-44d4-a291-47135fc981c1",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6a1a8cf-1298-46e7-95c0-e7e0a8ac3e89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e42004a-8ad5-4ec8-972a-36ddc3ccca45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04983ec7-2f9d-4f5a-a8e5-357817b16297",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "736a3de1-519a-4379-a772-2d2fb90c5b9e"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6676dd65-c701-4eb4-ae41-8d8ca6702256",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0c6f8560-9619-471e-8749-0051e694a555"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b51d49e3-a12d-403d-9659-49adb5a0755d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "df15f412-b292-4841-b46f-ea2581572fbc"
                    }
                  }
                ]
              },
              {
                "id": "48a1e115-dea2-4f84-a689-ebfdfc60a7c0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b4afa6ff-833d-45ab-966d-83e7ca5cf332",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aa81ca3-f1ab-40fc-bd62-ef471bf5ada9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "098b2eb7-730a-48e8-99b3-1fa0fdc31a08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a7a2bf0-6ddb-4c2d-bc28-c027e7cd7293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1f295d51-d9aa-404d-afdf-5d609c98398f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1243a752-a12f-473b-a918-574a28ec38bf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7586a162-e57d-4d3a-8ea3-965eab40b883"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f904ed80-2986-4ed1-8bed-8f725ae79782",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2f570730-a92c-4109-8fb5-c73f821cd908"
                    }
                  }
                ]
              },
              {
                "id": "a4749164-fee7-497b-943e-b7368702d4c8",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "e5e626ec-7985-498a-b0e8-5359ee4ed013",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9ddf302-a7ee-4cf7-a889-9d7c52158846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "19fb299c-f36a-46bd-a8ad-3f90d8128bf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79be6307-8a09-45b8-8ffc-b0af0015fc6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d49afaa-0d5f-4ea8-9b73-d165e4cb64f9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "3c40e772-f23a-407b-b1b0-e6d31805e2fe",
            "name": "Positive Testing",
            "item": [
              {
                "id": "154f964d-356b-43a3-8bd6-581d81ad3038",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0a5822c8-3755-4aab-8794-51a0ed5608fc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d1a3bc57-c4a5-40c0-8887-450c0d1f05a2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "71da1e80-ad82-46fb-b704-7c17d8af4962",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "69e590b1-e732-4cee-8e75-7d68fd3ff32c"
                    }
                  }
                ]
              },
              {
                "id": "83d41833-0c34-4373-8bb6-de8a714951bb",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0dd12ecf-bf2d-4c32-afe2-7d84cae30d43",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b746613d-c507-4b1a-8d10-c6449de6d518"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3a1bb499-a2da-494a-ab09-3bb3daefdcb3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "199b0c52-03db-4e50-bacd-633936d968fa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "12dd7078-2687-4c6f-a350-80c09067184e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "5203e142-520c-449b-a6bc-ad8171a23a94"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "312a0f0a-9387-4299-8339-1a5673462dc6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2b686da5-dd00-47de-bd7f-8ed447902ab8"
            }
          }
        ]
      },
      {
        "id": "ebba6e43-c27b-4795-bd89-9c23bc4c7746",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "e06aae38-5c93-47b2-9dff-0c8c33671ae8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fffbfb9e-2ae4-423b-ac65-72816b860f6f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d080c792-45b3-4a36-83ae-b5b879f665e6",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d56248b9-9c1b-4c3d-a463-b7eccdd5e05c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "aa6447b3-4a1b-4850-b033-df3dcd653c13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6024787-38e3-479f-9322-336b4ca191c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "79c3a8d9-5b90-483e-8a1d-4854b01c0ab4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "02c8dce6-f124-41a2-9006-9cbe9121040a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a57e741b-dd6e-4559-b509-f48839071bee"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "24b22a75-a45f-43f3-a2b6-017e554faccb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e6b41d0d-5eba-4ea9-8210-4f09275233d9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d9e632b0-db8a-40ba-8e2b-a197f860e8e9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "21ef6550-e3c6-4693-97a8-70992e2b2edd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "565447c3-430e-46eb-a315-e47d9624f7ad",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2a5e4d2b-593a-48c1-b055-b430b9f17261"
            }
          }
        ]
      },
      {
        "id": "40ead9cf-c835-4b22-b69c-afe38a11f377",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "1a972946-ab22-40fd-8c4a-62c84f3f3095",
            "name": "Negative Testing",
            "item": [
              {
                "id": "513df8db-0931-4162-a807-667693b7bef2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "07400bcb-d558-44c0-8d30-79797f7a829a",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d96b4a84-257a-4877-84bf-904bd3c84f1b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b3907bc7-e9aa-4bd7-9225-7736e96df3ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "520bece4-a667-4b59-bbe8-f646df682926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9e7ccbfd-cf87-44cb-91e9-af240a5c9372"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ab132a6b-741b-4d1c-ab46-536fd9cf1c12",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a71fca46-00a4-4066-b088-a0549e14a837"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b140c5c0-4212-4898-916f-9cd3c7b2adff",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a2041b2c-1fbd-42d3-a6bb-52984f479ec1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "28ba8519-d881-4274-a878-91420510a03f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e2818c0c-70e5-4091-944a-7bee3d59bd97"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ccaf2416-53a0-49ac-a9a8-c0dcaeb81d1d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8a6856a1-2fbe-4bac-a4cf-fa6b7d443ff7"
            }
          }
        ]
      },
      {
        "id": "9a418329-2eb3-4d56-a176-1b3903017e72",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "67187433-c11d-47fe-88dd-f967251fd4a8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "08365508-29bd-4e6c-8601-040b6986e895",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6ed74c98-6fe0-4eba-9828-f75a8e882397",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b71fa71d-53bb-4a7a-b25f-aad4489ef137",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4786cea4-7b20-4362-8ec8-2edd7ea23a42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c817b00a-a1a2-40d1-b9e2-c6752963bcee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3424527c-04d2-48d0-8e7d-88da6cc1b71c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1e6ff83c-9d92-4a1d-a027-35b6d3b20c54",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1a2a51cb-fd03-4fcf-b667-7843c5ef1b67"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cfc2a669-63af-43c4-9b3b-570217167a93",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8fff46a1-7e3d-47b3-8689-e4218323e829"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2f3aadb1-339d-45e8-b32c-3ee0e390ce12",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "cdda6faf-021e-445b-8b63-874f8e884ac8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f45800d8-484e-401c-9133-64f4fd07db72",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "acab89e7-f2e6-4f3b-833a-674a1f96503e"
            }
          }
        ]
      },
      {
        "id": "d2c3b9a5-ec72-403e-9478-ba0167fa9c57",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6981b03d-a180-4013-85d1-ef8a595323a7",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "58331842-f910-459c-a3bc-c5bb245b5f43",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "16bed7fc-f066-4821-b362-db156c79a0d5",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "41b21207-9cf5-49d5-8ce6-6a394cddcaae",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "37b9953e-d6bb-4e25-ad78-2e0d1ab33b72",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 3
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 3
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 79
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 3
      }
    },
    "timings": {
      "responseAverage": 56.7153024911032,
      "responseMin": 10,
      "responseMax": 1209,
      "responseSd": 121.0136785921458,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1696206839433,
      "completed": 1696206866951
    },
    "executions": [
      {
        "id": "b56616d4-0ec4-41d2-a4b5-c94bc4686ede",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "5c46857a-67d1-4023-866e-2cb7412fb31b",
          "httpRequestId": "5d005f71-cb37-4744-9222-b5abcf1f28b7"
        },
        "item": {
          "id": "b56616d4-0ec4-41d2-a4b5-c94bc4686ede",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "58ec1246-3431-4348-a44e-8d3814068c74",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 0
        }
      },
      {
        "id": "0a5baefc-0d1d-4c96-93c9-cb5f071b49c9",
        "cursor": {
          "ref": "c2e1d82a-3148-47ec-a9df-a9fe0174af61",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "c76d3b30-fead-429e-80ab-ff23ec29c52f"
        },
        "item": {
          "id": "0a5baefc-0d1d-4c96-93c9-cb5f071b49c9",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "5c6acd82-b1ad-4e73-8630-d3b204e931f3",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "a7fb364c-5b3c-4516-b0ce-15a6fd368824",
        "cursor": {
          "ref": "b20d6394-5e4c-44e4-b5a7-084afc9a9454",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "88158fa0-9064-48cf-b0bf-757ffb13506d"
        },
        "item": {
          "id": "a7fb364c-5b3c-4516-b0ce-15a6fd368824",
          "name": "did_json"
        },
        "response": {
          "id": "d8551d53-91ef-4e91-99e5-cae6d6e3e1d2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 93,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ddaf88e-2ee1-45e7-ad85-1fa34afc1e5f",
        "cursor": {
          "ref": "d9f7c0a6-37fc-48f2-99a0-1d984dea5b4d",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "830bbfd0-df17-43ec-8206-01221d1432f9"
        },
        "item": {
          "id": "7ddaf88e-2ee1-45e7-ad85-1fa34afc1e5f",
          "name": "did:invalid"
        },
        "response": {
          "id": "203eb941-8c7b-4b0c-b0ac-c4531820df2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ddaf88e-2ee1-45e7-ad85-1fa34afc1e5f",
        "cursor": {
          "ref": "d9f7c0a6-37fc-48f2-99a0-1d984dea5b4d",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "830bbfd0-df17-43ec-8206-01221d1432f9"
        },
        "item": {
          "id": "7ddaf88e-2ee1-45e7-ad85-1fa34afc1e5f",
          "name": "did:invalid"
        },
        "response": {
          "id": "203eb941-8c7b-4b0c-b0ac-c4531820df2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcb2ddd8-7649-4a12-8fb6-e3e8b6f9f893",
        "cursor": {
          "ref": "574d1373-9208-432d-9659-670b5b9a1c14",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "64d541af-38b2-4858-954c-64ca9a03c20b"
        },
        "item": {
          "id": "fcb2ddd8-7649-4a12-8fb6-e3e8b6f9f893",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "a0ee3139-7dae-4c0d-9794-8b686865724d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 93,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a05b0920-a478-4086-8e15-ac02e8b3ac9d",
        "cursor": {
          "ref": "35157b03-12f0-4dd2-a421-26392373fa63",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "387a4d9d-13b9-4cc0-9b02-d4f5536728b8"
        },
        "item": {
          "id": "a05b0920-a478-4086-8e15-ac02e8b3ac9d",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "db7afd94-7308-4e37-87d5-dcddad9c5852",
          "status": "Not Found",
          "code": 404,
          "responseTime": 37,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "012b01b9-121a-4dc4-ae6d-b49049be5a3f",
        "cursor": {
          "ref": "3abcc2dc-4682-4d75-83af-737530d78956",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c7a9e069-030b-48db-9727-a72e24353072"
        },
        "item": {
          "id": "012b01b9-121a-4dc4-ae6d-b49049be5a3f",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "ba7477e6-a124-4d33-b3d7-531e4c20c5d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3f75242-0135-4f0f-83ae-62cb9ce72da0",
        "cursor": {
          "ref": "4c7423b8-b820-47c7-b945-994de257ce03",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3bdd7e55-9e99-4f44-9279-ec7e96a9bba2"
        },
        "item": {
          "id": "b3f75242-0135-4f0f-83ae-62cb9ce72da0",
          "name": "identifiers"
        },
        "response": {
          "id": "f6ce37de-beb3-4573-8ab9-8627cb090962",
          "status": "Not Found",
          "code": 404,
          "responseTime": 82,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "cfce89ab-ab4d-4f38-b3d6-26fb269782f3",
        "cursor": {
          "ref": "925d6aff-59b8-4021-bdcb-33e14bce8ad6",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b7eff7ba-0869-4b2e-b5ba-86bb0084b814"
        },
        "item": {
          "id": "cfce89ab-ab4d-4f38-b3d6-26fb269782f3",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "06d748c5-a191-4fd4-bd44-c73d00c12c8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d88821c8-e368-4b56-9be1-d1fdda18547e",
        "cursor": {
          "ref": "63c43fd5-a42e-4b0a-a1cd-2e47d3be06fc",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e3b56e5c-d392-47f4-a681-f898b6929dbd"
        },
        "item": {
          "id": "d88821c8-e368-4b56-9be1-d1fdda18547e",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "be64152e-b44d-474a-9f92-635fcf28cc08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a79895f3-7794-44d7-b5ed-019c29062fe7",
        "cursor": {
          "ref": "3360e7ec-0922-4fb5-a86e-ccfd22d94453",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "3cf9da36-95bc-401d-9f7a-5e54544d97a6"
        },
        "item": {
          "id": "a79895f3-7794-44d7-b5ed-019c29062fe7",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "93433d98-00cd-4f0a-843a-ecbcd5bfebe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c3df3f2-a42b-4c31-8193-f93b7e9cc008",
        "cursor": {
          "ref": "079efdcc-7f70-4f95-baab-19326fe3a069",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "8da81cb9-67ec-43a9-acf5-ee39063d9d80"
        },
        "item": {
          "id": "1c3df3f2-a42b-4c31-8193-f93b7e9cc008",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "1858bd1a-7371-405f-bf86-d0094bfe85b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4950cb14-8529-4093-a741-455b0692a8b9",
        "cursor": {
          "ref": "45ae62c1-675e-4455-804c-899d4654c375",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "dfd51712-0623-4d42-a9a0-1e2d851cfb73"
        },
        "item": {
          "id": "4950cb14-8529-4093-a741-455b0692a8b9",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "6ec7c525-bca8-458c-aa1f-a42dc8d293b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4310b68e-7a78-4648-ad53-dc132ab16692",
        "cursor": {
          "ref": "374b58de-9140-43b5-a829-8f9dc6d0eec9",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "e34aca0b-4584-4a03-97bb-e87932e5c4e3"
        },
        "item": {
          "id": "4310b68e-7a78-4648-ad53-dc132ab16692",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "8a109675-348b-402e-a7fd-c0a672fb2a12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 136,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6e8e4a8-604a-4c12-86e2-dba503373e6b",
        "cursor": {
          "ref": "b17e73b0-4b1e-4110-bc02-0f25d4012a07",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "16514127-af5b-47af-9308-243e1ee07ef8"
        },
        "item": {
          "id": "b6e8e4a8-604a-4c12-86e2-dba503373e6b",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "41dfb93a-5205-4c44-a207-fe4bcf9cb7df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7388b538-95b0-4708-9974-391894497fcb",
        "cursor": {
          "ref": "d7ac61f5-c6a3-447b-8446-67ea5f024a2c",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "41057f1e-2f38-49e4-bca8-3dde9dde0d26"
        },
        "item": {
          "id": "7388b538-95b0-4708-9974-391894497fcb",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "953fe1a7-8a7f-4b84-a393-8114138f4b30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fd527e0-6588-45f3-9c78-6ed18a2427d1",
        "cursor": {
          "ref": "01fa5bf0-d172-4bea-95e7-ec972a9a4a02",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "8db64701-bae2-4d3c-93b4-6526918bd6a1"
        },
        "item": {
          "id": "5fd527e0-6588-45f3-9c78-6ed18a2427d1",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "68bc0127-0728-48e7-9882-6b1ef0479865",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3dd9fb5-5e16-44b1-8cfa-6d7d6c42ad7f",
        "cursor": {
          "ref": "1be7e242-3589-42cd-993c-9253db65458d",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "e617f6d7-d6a0-4751-9a06-582964a1c00e"
        },
        "item": {
          "id": "d3dd9fb5-5e16-44b1-8cfa-6d7d6c42ad7f",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "c3e907e2-adcd-487f-8917-b907f4040e78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92f03655-b112-43a2-b475-a4ecc9794812",
        "cursor": {
          "ref": "3aff2898-6718-40ce-874c-758c33f538a4",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "36c89d1a-8224-4f9a-9cf3-622c9e374e8e"
        },
        "item": {
          "id": "92f03655-b112-43a2-b475-a4ecc9794812",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "0f6efe05-c35b-43f7-ba1a-df5f9d3bb487",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8627924-214c-42b5-a981-91255415967b",
        "cursor": {
          "ref": "13d344c2-9671-4d02-aebb-831d0e21c0b5",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "11e831db-0dc7-4a20-806b-499ab4611393"
        },
        "item": {
          "id": "d8627924-214c-42b5-a981-91255415967b",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "14aea31b-08f9-4fae-a2c9-1d99a1c3e474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0001e54-583c-4ceb-83ac-719613c4c3fb",
        "cursor": {
          "ref": "e1d5fc77-999e-40f7-8de3-31385bc7684d",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "379179be-3fa6-402f-ab66-7cb7a7ff53a5"
        },
        "item": {
          "id": "d0001e54-583c-4ceb-83ac-719613c4c3fb",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "3852b4a2-a092-4bfa-90cf-f5768040963e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b58ba100-ee85-46d5-9588-b3cdb7c697ec",
        "cursor": {
          "ref": "4153ed20-460b-4c9e-b2b5-5c93f73cec59",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "a215cd85-7dda-49e4-a2c0-2221cf218a8e"
        },
        "item": {
          "id": "b58ba100-ee85-46d5-9588-b3cdb7c697ec",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "28aa7653-b098-426d-9953-b7b981be2f9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ac78417-67ec-41cb-88c1-e87ad284ee17",
        "cursor": {
          "ref": "a575b0d8-6e2e-4837-ba95-bc2b81c26910",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "0bbe7261-7df0-45c6-a5ed-add05df2f21c"
        },
        "item": {
          "id": "8ac78417-67ec-41cb-88c1-e87ad284ee17",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "28616985-f139-4b66-b7f2-dada3e20b8ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a65230d-e7f2-4484-b6ec-6c33c631bfca",
        "cursor": {
          "ref": "56052250-1e24-45db-976b-331d273eadc5",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "b06df9b9-dcc4-41e6-9828-8f93df1c62c9"
        },
        "item": {
          "id": "0a65230d-e7f2-4484-b6ec-6c33c631bfca",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "fbe752c8-216a-42ba-ab58-aff1aab9a328",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0bedf2e-cabd-4591-bbe3-4594e5261675",
        "cursor": {
          "ref": "9669edd7-95b1-41b1-bfda-4d130e1b9bf2",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "78c4f270-42ba-415e-8ebd-79f1ce7a61c9"
        },
        "item": {
          "id": "c0bedf2e-cabd-4591-bbe3-4594e5261675",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "a1afdaee-a5e8-46ea-a8d5-b2c3f2ca516f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c9aeaae-28a2-439e-af76-963c9f7ccb25",
        "cursor": {
          "ref": "e28fd571-1e7c-42a3-b065-1946b1759fed",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "5ce0b97a-6b08-414b-b9af-54eb64b0e7fa"
        },
        "item": {
          "id": "4c9aeaae-28a2-439e-af76-963c9f7ccb25",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "017cd874-d288-4d7e-b022-95e3a452a466",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55424dc8-b097-4d2b-ba07-b9ebfee24d7d",
        "cursor": {
          "ref": "590c34d9-f783-4415-9019-3008c7bc1995",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "3f848992-051d-4e8b-bd20-4d9d5a29ffbd"
        },
        "item": {
          "id": "55424dc8-b097-4d2b-ba07-b9ebfee24d7d",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "32559fcf-f7b3-4887-bb24-591120567bf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd9fd4e5-3ed0-49e6-9916-792bda43c44a",
        "cursor": {
          "ref": "991d7a75-83fb-4ad0-a9d7-d70ca51cbfd7",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "d4404416-6893-43f8-9fb6-c96ec2e37515"
        },
        "item": {
          "id": "bd9fd4e5-3ed0-49e6-9916-792bda43c44a",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "69364f38-e3f0-4f33-91fd-975d51e09269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88dd0f2f-fe27-4384-9816-ec28f1311c7b",
        "cursor": {
          "ref": "d0dbfc55-b6a9-41e0-82ae-367e8f3aaaa7",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "74b8b0ca-b77e-4985-b922-2766c4beb34f"
        },
        "item": {
          "id": "88dd0f2f-fe27-4384-9816-ec28f1311c7b",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "2b3da208-c47f-44a4-a003-196e91eeccf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f2f7d07-4179-494b-acc2-97436aa1ebc3",
        "cursor": {
          "ref": "8c1dc134-ce85-4fb6-822a-67964da147b1",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "41dca977-2395-485a-878b-5e9b43c8c56f"
        },
        "item": {
          "id": "0f2f7d07-4179-494b-acc2-97436aa1ebc3",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "7abdb72c-bbdf-4c6d-b7e6-8ad69e91d65f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7bc7928-b3db-4955-ae92-d3280e749ebe",
        "cursor": {
          "ref": "884c1bf6-8d4d-424d-a8b6-548d9b895037",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "f921ad91-0f03-4bd5-a75c-fb9d5c50b5f6"
        },
        "item": {
          "id": "a7bc7928-b3db-4955-ae92-d3280e749ebe",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "86f05012-3a00-45a8-83b2-639372f5c19b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62d1b9a0-f2a1-4d07-acb2-778a019199e0",
        "cursor": {
          "ref": "f92a414e-e76f-45e4-8147-48c7ae97520b",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "525af2fa-0a3a-4f12-8629-dc297b3555ca"
        },
        "item": {
          "id": "62d1b9a0-f2a1-4d07-acb2-778a019199e0",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "844b2c5a-0ec3-4aca-8112-17df4dfa7951",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "979e7f80-e459-4b04-a075-495092c28c5f",
        "cursor": {
          "ref": "39293451-304a-4810-8974-7cb42a43eccb",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "10dc35f6-d773-4a05-90da-e84a528e5402"
        },
        "item": {
          "id": "979e7f80-e459-4b04-a075-495092c28c5f",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "1d8b675f-2ba0-4d1f-a7c1-78a6da48a801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2f70dbf-8a5a-4176-9bfc-90d2e17e13ea",
        "cursor": {
          "ref": "66e3d3be-8297-425e-bc6e-2297b61a167d",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "21b2d8d6-01af-487e-9ad2-76c6a4038ca2"
        },
        "item": {
          "id": "a2f70dbf-8a5a-4176-9bfc-90d2e17e13ea",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "2862173a-9f61-439d-b343-f7d2614b0540",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7058726-547e-4fb6-9c00-75698fe0804d",
        "cursor": {
          "ref": "f0b4af72-0269-4649-b523-8e217878670a",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "9a8f52d3-7dd2-481a-8eec-d978ac903d5c"
        },
        "item": {
          "id": "a7058726-547e-4fb6-9c00-75698fe0804d",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "1554aeaa-1c03-4d73-af98-1dbd40ef237f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81fdb24b-e5fd-427d-925b-a2f5a6759981",
        "cursor": {
          "ref": "8007acb8-77c7-4db3-9efb-cd3be0f4a2b1",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "ab1a724d-6f30-4d67-b36e-29a1a06f6526"
        },
        "item": {
          "id": "81fdb24b-e5fd-427d-925b-a2f5a6759981",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "a6d78a46-1a76-45c1-b4ee-2893a178cb5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ac1c4a3-f3e9-4192-8617-7b8e7d5d86d1",
        "cursor": {
          "ref": "c1dd06a7-ea3c-4342-8a47-a301f7f3a151",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "fe454ca5-87bc-49fe-b387-a8791e4b7884"
        },
        "item": {
          "id": "4ac1c4a3-f3e9-4192-8617-7b8e7d5d86d1",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "664220a4-3c4e-4aab-9423-4a004d9aecf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b26a8e9-a471-431b-9abb-f44ac51fd8f2",
        "cursor": {
          "ref": "35dabc8a-21e0-4ffb-b365-fb026e444563",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "d3841562-ed31-45a3-9288-db7f5563809b"
        },
        "item": {
          "id": "7b26a8e9-a471-431b-9abb-f44ac51fd8f2",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "26ebd54f-266c-4025-9ce4-f4f9f591c6a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55fefb4a-1f75-4277-b15d-d190b33ac09a",
        "cursor": {
          "ref": "615f2eb8-478a-4e2a-96a8-d242bd688df6",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "1b9530d0-a6b5-4bee-a363-581d990ae740"
        },
        "item": {
          "id": "55fefb4a-1f75-4277-b15d-d190b33ac09a",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "6f008dc7-40cc-4081-a17d-8cae42272d04",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "8f97ed2a-8909-471b-9a08-8e5d894f9ce5",
        "cursor": {
          "ref": "959877da-88d1-4b54-b807-200244fa31df",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "d08d9da9-f7f6-4f2b-9191-f67e9f2f80e6"
        },
        "item": {
          "id": "8f97ed2a-8909-471b-9a08-8e5d894f9ce5",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "a5cb1bfd-3fe3-4763-9bb7-c44d2d56fb4a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "5314c67e-5cc6-402f-a103-a1a2ba01efd0",
        "cursor": {
          "ref": "f3374a16-86e6-4d04-9294-6aa59f99bcf6",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "8fe64e01-bc50-4ef1-aa88-6c8f9a68b2ac"
        },
        "item": {
          "id": "5314c67e-5cc6-402f-a103-a1a2ba01efd0",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "e6720f2c-6967-4163-9ebf-bcd2502be644",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "a6394c27-d65c-4c2f-8384-d21222044526",
        "cursor": {
          "ref": "499458d2-6fc8-45b6-b503-8d59db93c8fc",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "1505ad62-90bf-40ad-9082-00338edae814"
        },
        "item": {
          "id": "a6394c27-d65c-4c2f-8384-d21222044526",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "7d00e3b4-dc05-424b-a1f4-f6790c4bc592",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e65fb1b-8f51-4e33-9b04-7586487b805e",
        "cursor": {
          "ref": "3ae70b6a-1ea9-4f46-a643-11dfc2a45b1f",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c49a499b-1d74-4c82-b960-be50eb1c4753"
        },
        "item": {
          "id": "0e65fb1b-8f51-4e33-9b04-7586487b805e",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "e2951d75-53e9-4325-ba36-bb265f36e58e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "42277c0e-037d-4409-87c0-fc3b10d31bd9",
        "cursor": {
          "ref": "7c9d7815-b509-443b-a462-ca8add6cdbb6",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "d6f49196-d10b-4ee8-82fc-fa85e92b5d0b"
        },
        "item": {
          "id": "42277c0e-037d-4409-87c0-fc3b10d31bd9",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "fe59bf4f-d527-48c7-87f1-2f14a2354c33",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "e3661103-f6a2-4ccb-aabc-0030b7a24720",
        "cursor": {
          "ref": "248fa273-96c1-4ff0-ba17-1d9c36181194",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "80c7c102-e5f3-4084-8c01-b4a21ab57a3a"
        },
        "item": {
          "id": "e3661103-f6a2-4ccb-aabc-0030b7a24720",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "3d34ee34-d955-4482-b42b-3585fe600ffb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "ec1d0293-9c69-49fa-8f1d-23d0ebe6739f",
        "cursor": {
          "ref": "4228dce2-2d54-40b0-bc03-595124a1b96b",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "11191e3a-3307-453c-8b7f-0d657a9d6164"
        },
        "item": {
          "id": "ec1d0293-9c69-49fa-8f1d-23d0ebe6739f",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "05e5021a-8142-41f7-9268-24b4b2773537",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 32,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "d219891c-3bc8-4abf-9717-4c460220e548",
        "cursor": {
          "ref": "00b0eecc-0eff-4183-a806-5fc6587df988",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "5f1c1a22-a858-4b8b-989c-332ee209906d"
        },
        "item": {
          "id": "d219891c-3bc8-4abf-9717-4c460220e548",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "cea863b3-a55a-490b-b716-f165562cd332",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "1dc2e34a-2353-41b1-8092-da54760726e2",
        "cursor": {
          "ref": "d552c748-6540-4958-8593-34200d785a5a",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "7bdecc3d-5bf6-4afa-bfa6-863373192982"
        },
        "item": {
          "id": "1dc2e34a-2353-41b1-8092-da54760726e2",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "dd8cab5a-5283-4239-b51e-3185660a1190",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "1a82a83c-2ccb-4596-b7c8-320bdaaac59c",
        "cursor": {
          "ref": "90e94cce-ce48-42a0-bb48-c9e7f3b596a7",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "396c5307-eab2-45ae-8834-f93c53550d4d"
        },
        "item": {
          "id": "1a82a83c-2ccb-4596-b7c8-320bdaaac59c",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "eec5c672-cd03-48e0-8204-f9f82b676e5a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "0ba85e8f-e5c6-456e-a496-547f0e974ab8",
        "cursor": {
          "ref": "577a2daf-d08c-4bf8-a183-5114daf7bb7a",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "ade41fbd-4c10-4f2f-a9fc-f8e3b8947bd8"
        },
        "item": {
          "id": "0ba85e8f-e5c6-456e-a496-547f0e974ab8",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "7f1c0683-9b8d-4415-94c2-ab5f803fd6b1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "751615b7-459a-47dc-bd82-c1d51d1aadde",
        "cursor": {
          "ref": "2e4f74d6-3740-4a18-8253-c87a4b552015",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "723eeb21-18d5-4cf0-b5d4-728f9c756e34"
        },
        "item": {
          "id": "751615b7-459a-47dc-bd82-c1d51d1aadde",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "54b5fa9d-3a9e-4f6d-8c4c-054823f39364",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "cff491c8-083a-400f-a630-caa4c3fea0f1",
        "cursor": {
          "ref": "2e79abec-de83-4272-96a6-a36a073735ef",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "a1789414-3464-46fb-88b2-a250d09f2804"
        },
        "item": {
          "id": "cff491c8-083a-400f-a630-caa4c3fea0f1",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "67381eba-1c7e-4be8-b44a-e6bff2dfe932",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58d6affe-fdd0-4ea2-84fe-c4cb378ad8c2",
        "cursor": {
          "ref": "7090b8bc-14df-462d-a97d-3b295ee5de80",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "43fe2336-043e-4bb1-b2dc-a12f5f2f8dab"
        },
        "item": {
          "id": "58d6affe-fdd0-4ea2-84fe-c4cb378ad8c2",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "362b93d4-93b0-4df6-b036-c8fa6b3583c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20a1ad88-8186-4571-9a9d-88e1e0bf720c",
        "cursor": {
          "ref": "39c0af18-2b8c-45b8-a16b-3f3b097ae8f8",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "64c34a62-a045-4fa9-99b5-1fa3ae3c76c3"
        },
        "item": {
          "id": "20a1ad88-8186-4571-9a9d-88e1e0bf720c",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "c6cceb1d-90b6-4d3c-9f94-51e378f1f2eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7870771-0e0c-43c7-8a5e-ec8e026a6f76",
        "cursor": {
          "ref": "557331b4-1e25-4092-949f-456590010ade",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "c67dba56-08c7-4885-b32f-3cf4eca6c663"
        },
        "item": {
          "id": "e7870771-0e0c-43c7-8a5e-ec8e026a6f76",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "9ed57829-f0ee-40fd-a018-17408df1070d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b143d0f-f242-4f0e-ab69-d6c662f5e208",
        "cursor": {
          "ref": "a4175bbc-888d-4877-8330-ffb820add420",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "1442790b-5c4c-4c78-b66c-c29d3b93ad01"
        },
        "item": {
          "id": "4b143d0f-f242-4f0e-ab69-d6c662f5e208",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "778396fc-e2c9-4ca2-8add-b3df7128bcd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ffbae5d-7578-4a4c-9578-301c6fa5af37",
        "cursor": {
          "ref": "9d3112da-4b10-4243-be6e-fda32f7b4888",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "39aec6b9-5144-4245-920d-cbca2c12949f"
        },
        "item": {
          "id": "0ffbae5d-7578-4a4c-9578-301c6fa5af37",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "a26ba6b9-2cd5-4798-b187-d925067166a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f9cb39e-4c15-497f-9af9-830d20bf36bf",
        "cursor": {
          "ref": "bddf13a5-2e59-42f1-9c6a-a3c2ae5e80fe",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b4c242ca-f53b-41a0-b1ff-ee2979f25d3d"
        },
        "item": {
          "id": "0f9cb39e-4c15-497f-9af9-830d20bf36bf",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "c5a015ff-f41d-42b5-bdf2-dcb598777660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ab97387-8c93-422c-810a-5baaa889967f",
        "cursor": {
          "ref": "7a42f569-4745-4963-a9a3-14ef4e292925",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "f1581c12-3b89-4155-9590-372b6c2942e9"
        },
        "item": {
          "id": "5ab97387-8c93-422c-810a-5baaa889967f",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "2f4718aa-91fd-43e9-8d82-e7390ad14b7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dceb9af2-e8e2-4f2d-834c-169bb60ac138",
        "cursor": {
          "ref": "e585a4d0-1c6a-416f-abcb-8ed39865f1f2",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "6f00295e-bd5b-4595-9e75-346bbcc7aff2"
        },
        "item": {
          "id": "dceb9af2-e8e2-4f2d-834c-169bb60ac138",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "71e57f7a-6ef8-48ea-b011-127ebd0422b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef96d2f0-1870-4f2c-b460-21d4f2605c2b",
        "cursor": {
          "ref": "d165be21-cc5f-4fc2-88b5-010e565ac7d3",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "316e6f77-2e14-498b-a265-bac6f6ee263a"
        },
        "item": {
          "id": "ef96d2f0-1870-4f2c-b460-21d4f2605c2b",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "e3dddf55-f3c2-49ee-82cd-2ae49ac8e038",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c691c301-5b79-4e3e-b2d2-88b87e204a31",
        "cursor": {
          "ref": "25eabf47-987d-4a5b-8313-92efd8f110d4",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "5e11c6b9-a1c4-48c1-9781-76df3e192c6b"
        },
        "item": {
          "id": "c691c301-5b79-4e3e-b2d2-88b87e204a31",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "7a63aaad-2823-4d47-9b97-8f539f5605a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90fc0ffe-aab7-42c2-8ee9-e9723ea7ed01",
        "cursor": {
          "ref": "8fb204bd-c1b9-4fcf-814f-c45aa2280752",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "6de4ca62-a00b-4e64-8bed-4f1210d9715e"
        },
        "item": {
          "id": "90fc0ffe-aab7-42c2-8ee9-e9723ea7ed01",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "ef23108c-309c-404f-b07c-f69787cb2e0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4262841e-b792-4088-bdc9-6c1e2fe31c41",
        "cursor": {
          "ref": "5f912b44-0810-4317-b32b-efcea4936792",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "0dd76479-35cb-4c37-abf6-04366ee498a5"
        },
        "item": {
          "id": "4262841e-b792-4088-bdc9-6c1e2fe31c41",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "bca84346-a35f-468b-bd3b-f9d9b4b4420e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cea8c294-567c-4f1f-a122-3ebe979e6b5f",
        "cursor": {
          "ref": "fc7dfcec-da80-4c1b-8e17-adb2940dc075",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "d3fa7cd2-f743-4bc9-9932-425cc66aa783"
        },
        "item": {
          "id": "cea8c294-567c-4f1f-a122-3ebe979e6b5f",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "eba5e7b8-62d4-483a-a8f3-224ead33da9f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "b0f4737a-bb40-4d06-a114-72db0d6da16f",
        "cursor": {
          "ref": "e9a7c08d-4bda-4c80-a794-eb8c42ee4549",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "9bdd9edb-a8f8-442c-8e06-1f9fdf9761f8"
        },
        "item": {
          "id": "b0f4737a-bb40-4d06-a114-72db0d6da16f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "52716ee4-b3bd-4b32-82ee-8abb66699253",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "6337971e-8da5-47c0-8a55-5207efd4946f",
        "cursor": {
          "ref": "cb4da22a-de94-4988-a0e2-1a80c3255022",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "5c67faae-ddc8-4e42-9c46-9d684e6553ca"
        },
        "item": {
          "id": "6337971e-8da5-47c0-8a55-5207efd4946f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "75aebafd-4685-4c47-bb28-b723cc78837a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "1bbd841d-b536-4725-88bc-a8dacaf7717a",
        "cursor": {
          "ref": "c9d4549c-f999-4a7d-b647-6131c8cbf20f",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "1b3bbcb0-6b25-41ff-a475-53e7e19c09c2"
        },
        "item": {
          "id": "1bbd841d-b536-4725-88bc-a8dacaf7717a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "2a679a97-859b-4134-868b-89df961a3bcf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "ccd1893c-00c8-4500-b7a9-21f7b970ad1a",
        "cursor": {
          "ref": "bdaca615-f59f-4270-957c-ff480bab02ad",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "c2e03400-4213-431e-a28f-fd84ecce0cd0"
        },
        "item": {
          "id": "ccd1893c-00c8-4500-b7a9-21f7b970ad1a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "783d5ca3-d5ff-4430-9bb2-f140f443c903",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "66762c99-45a5-4bf9-863f-bc5164f5b08e",
        "cursor": {
          "ref": "f873cb80-40c9-4776-b717-1b6ccae3ac76",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "c1b557b7-37b4-49cb-9879-4ff3c4802d2b"
        },
        "item": {
          "id": "66762c99-45a5-4bf9-863f-bc5164f5b08e",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "ad5b3892-d995-4b2f-af66-3cb2c70719b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f52c8822-8e5a-4053-be03-6c844374fb92",
        "cursor": {
          "ref": "a5d1e8c6-330e-42f7-9e3f-82a20e2b32c8",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "c8e26080-1a4f-4694-a6a4-7d1335d15d62"
        },
        "item": {
          "id": "f52c8822-8e5a-4053-be03-6c844374fb92",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "8abe308c-8f73-46b6-b9be-b0a41bb3dc7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11b71447-fea4-4961-8543-8f717c134071",
        "cursor": {
          "ref": "e4df3ad0-1bfa-42f7-b502-37b9218da97c",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "6c6b2df3-8c05-4a72-ab6f-718255cbfb39"
        },
        "item": {
          "id": "11b71447-fea4-4961-8543-8f717c134071",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "79a3dc72-00f9-49a4-867d-bc331013499b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "330dab62-1bb3-421e-8dbe-5fd33fd23ca9",
        "cursor": {
          "ref": "b9488f54-8006-4cf8-b4a0-8f69c59b9e7c",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "e3da564e-6854-4aae-afc2-5cc1d91447a0"
        },
        "item": {
          "id": "330dab62-1bb3-421e-8dbe-5fd33fd23ca9",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "9e4e9884-8464-42dd-a1b6-3acb8ff10f78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c355c3b-ba70-4495-90a9-37d0cce96594",
        "cursor": {
          "ref": "3fc6fc6d-e30f-44a0-980f-a8a6b57fa2fb",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "8b3d51ff-7170-447b-bb31-3193303bfd2e"
        },
        "item": {
          "id": "7c355c3b-ba70-4495-90a9-37d0cce96594",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "f0d90ac0-f25a-4ecd-bd92-a5be9e22dea3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8575112e-0d43-426c-8201-5d4a46cdc166",
        "cursor": {
          "ref": "e32daf83-da8f-4567-ba85-4c7633cc62d3",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "991914ea-5937-4e48-91a8-b0123dc8da8f"
        },
        "item": {
          "id": "8575112e-0d43-426c-8201-5d4a46cdc166",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "a2485603-b057-4e10-bcee-750668c0cc5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33d26302-ea13-4eb3-ac9d-3cc8a6a8c7d3",
        "cursor": {
          "ref": "4662e6d2-4e4c-4c96-93c2-1d624cd05c52",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "6efd71d7-f1c4-4e09-b9aa-25a564495b37"
        },
        "item": {
          "id": "33d26302-ea13-4eb3-ac9d-3cc8a6a8c7d3",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "809712fa-f515-415f-82fe-cca9cb19a941",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b30c8ba-cca5-46df-b7dd-a49fa1f9c900",
        "cursor": {
          "ref": "a8567eec-44f5-463f-84be-1a45927e57a0",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "e3598d88-1c6d-467e-be7e-af03f73a5631"
        },
        "item": {
          "id": "3b30c8ba-cca5-46df-b7dd-a49fa1f9c900",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "8d0ce65b-3383-4c84-b276-92b7fc610f74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03bef911-5d2e-4711-bc14-763b8e6333d3",
        "cursor": {
          "ref": "d795d917-05dd-4690-882f-bfc8906c42e4",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "3b04fda2-79eb-43ba-a21a-6a0764942bd7"
        },
        "item": {
          "id": "03bef911-5d2e-4711-bc14-763b8e6333d3",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "7f6c951e-5e5e-4e4e-b76e-6db9fa22b3d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4e5d0e8-1126-4d62-91e7-dcb433aa7f01",
        "cursor": {
          "ref": "6a380717-e52d-4a30-a885-7cd586dd49b2",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "34a2c93b-90f3-461f-b275-623a24d715f0"
        },
        "item": {
          "id": "b4e5d0e8-1126-4d62-91e7-dcb433aa7f01",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "60e9cfa7-61f8-4e22-87bb-6853deb92444",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "973a51ad-802a-44f0-a6ba-7009516aad87",
        "cursor": {
          "ref": "039dad23-7ef7-4961-9c7b-7e737198bcc7",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "3381afdd-3522-4161-9505-d39df7679ae5"
        },
        "item": {
          "id": "973a51ad-802a-44f0-a6ba-7009516aad87",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "b7891529-6338-4a36-881e-c387ff0da4c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75d62289-7235-4b90-9b34-77738056ab78",
        "cursor": {
          "ref": "b3fa0105-65b5-4ff4-b72f-4ca6697406d6",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "05787afc-f80c-4409-a6aa-977ce909c563"
        },
        "item": {
          "id": "75d62289-7235-4b90-9b34-77738056ab78",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "96ee4435-e8bc-4dd3-a3d3-2226bb68ba15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a686df06-ba7f-426f-a5de-ef7b2a83699d",
        "cursor": {
          "ref": "faece1fc-8eb4-4b69-8f1f-32e7c581b73a",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "a14993b8-80eb-4ea3-a102-2c8947d218be"
        },
        "item": {
          "id": "a686df06-ba7f-426f-a5de-ef7b2a83699d",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "5c935e71-cce6-4ca1-8b0e-80621965d249",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8b5ceff-7725-457e-9197-daec029e362c",
        "cursor": {
          "ref": "8d5fc137-9b56-47a6-b47f-c394a11c33a9",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "6648ae9f-da80-44d4-aaa1-ef83c48321b7"
        },
        "item": {
          "id": "e8b5ceff-7725-457e-9197-daec029e362c",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "a68212a2-b70f-4ddd-bcbd-28c653e5cff9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b826e03b-d815-44b2-8b19-6f1aa8cd1379",
        "cursor": {
          "ref": "6a28722a-1a38-4989-acc9-0ebc7e33d686",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "31bc64ec-0f5a-44ea-a08f-180cc3856bd5"
        },
        "item": {
          "id": "b826e03b-d815-44b2-8b19-6f1aa8cd1379",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "fc3271b2-5955-4b03-90b9-66191fcdc152",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36c1eac5-c6de-472e-bddd-ec51756d9931",
        "cursor": {
          "ref": "3bd6054b-b247-426c-8234-e5fe33fde2db",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "82f70239-1294-43d8-ba7e-e4cd08b549f9"
        },
        "item": {
          "id": "36c1eac5-c6de-472e-bddd-ec51756d9931",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "465ac7cf-911f-474e-a7e0-ff7c31b00f95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3571db9-1e04-4988-b199-84be0c4f6094",
        "cursor": {
          "ref": "41c26022-4480-468b-afa3-1ff2a7519f98",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "d0be35d9-a835-45a5-b11c-5ac6606ac6ec"
        },
        "item": {
          "id": "c3571db9-1e04-4988-b199-84be0c4f6094",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "c7ac6aa2-609f-484d-a177-676209aaf4a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4037f3e8-ef88-4ce8-a3dc-07f421b1f8b4",
        "cursor": {
          "ref": "69c1b7e8-664b-42f6-b94b-825400fc60ea",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "92b7128b-523f-4199-8250-f785987c5572"
        },
        "item": {
          "id": "4037f3e8-ef88-4ce8-a3dc-07f421b1f8b4",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "68e136a8-c7cc-4307-8bdf-8db672a2b5d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac0b911d-388e-49d6-ab4e-bfd35e5656f6",
        "cursor": {
          "ref": "ae307f25-1873-4263-8b82-081e29685e15",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "25e76fdb-c1f5-4e44-9243-6606a932a64c"
        },
        "item": {
          "id": "ac0b911d-388e-49d6-ab4e-bfd35e5656f6",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "1f88f5f8-3382-4e5a-a86e-f3d7d741867f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8745f3cb-d9fe-4d05-a13c-03f901c69844",
        "cursor": {
          "ref": "fe91cc39-f6ae-4756-a3de-4c192adc5679",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "d764098a-0fba-43c2-9c23-4665b6e1e787"
        },
        "item": {
          "id": "8745f3cb-d9fe-4d05-a13c-03f901c69844",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "822dbb78-20af-4bdd-85b8-b009008084ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0168a448-e33c-4408-b43a-685b4908e943",
        "cursor": {
          "ref": "466f1e20-5763-4eef-86b0-efd56bf8ea84",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "1c93e3b7-e88f-4a3e-9c1d-206ed90cd302"
        },
        "item": {
          "id": "0168a448-e33c-4408-b43a-685b4908e943",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "74c2985f-4762-4c52-9b2d-7f5425168a1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d389cf18-3f84-4b53-b8cd-eacb2469aabf",
        "cursor": {
          "ref": "4e61caf3-6317-4c6d-b328-38526140bd95",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "41fc7f0a-3788-4b95-858d-b99874d9d686"
        },
        "item": {
          "id": "d389cf18-3f84-4b53-b8cd-eacb2469aabf",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "509dc22b-615b-4837-b50e-d0b4b3eb29c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8029f3e4-99d2-43d7-a7a2-ec5d7d456817",
        "cursor": {
          "ref": "76eba2d4-723c-459c-a0d1-3e7a7a0fb75e",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "59db0868-2306-481c-8216-52570ad4bdb3"
        },
        "item": {
          "id": "8029f3e4-99d2-43d7-a7a2-ec5d7d456817",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "86b2347a-95b9-4292-bac6-15a99a196d42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7b60f36-732d-40ff-97b2-b7ca64f0a4a5",
        "cursor": {
          "ref": "aa99a1d5-ea40-436b-8a71-9301a180eb66",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "92dd7ca1-1d3e-4172-9b81-9482132de988"
        },
        "item": {
          "id": "a7b60f36-732d-40ff-97b2-b7ca64f0a4a5",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "af1c7678-e1b4-4b54-8432-f8ca889f5b5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa85abee-705c-47d1-bcdb-481b55620b1a",
        "cursor": {
          "ref": "256a77b9-89a4-4ba1-8525-394c8bdb9432",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "0c0afba4-4729-4912-8212-e7e6248c5b2f"
        },
        "item": {
          "id": "aa85abee-705c-47d1-bcdb-481b55620b1a",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "5fabecdc-de41-428f-b665-5e1cdbf2e8e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60b20a6e-d856-499d-adef-66e2a1411bfe",
        "cursor": {
          "ref": "16d4e8ef-a8c7-4550-8927-2ce18e66672d",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "3c08e5fe-b066-451f-8606-9e35e25361a0"
        },
        "item": {
          "id": "60b20a6e-d856-499d-adef-66e2a1411bfe",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "09428f8b-dccf-47f2-9aab-bed53c1d2dca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ac1311e-a076-478a-ae66-955509b631de",
        "cursor": {
          "ref": "e278aba1-9329-4a17-bd35-d82ff27aff80",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "fc8ce2da-caad-473a-95bf-1ca9147906d9"
        },
        "item": {
          "id": "1ac1311e-a076-478a-ae66-955509b631de",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "9580adb5-e446-46c2-bedb-85eca67ac871",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4543bc71-ecfe-412e-8990-4eb91735c76b",
        "cursor": {
          "ref": "bc7131eb-dbed-4e4c-ae77-456c2d41f05d",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "ae1e03b0-c251-4334-a24f-4a4f87e0048c"
        },
        "item": {
          "id": "4543bc71-ecfe-412e-8990-4eb91735c76b",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "22b9e5be-d94e-446a-bbd4-93a43b97a006",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3849f2b3-7deb-49a7-8779-6240da0da603",
        "cursor": {
          "ref": "f2ad81b3-a265-4bc9-abc0-c541ec7ce050",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "658a08d8-2dc9-4f0f-a0fb-d5ecca65fa9e"
        },
        "item": {
          "id": "3849f2b3-7deb-49a7-8779-6240da0da603",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "c0122c67-b4c0-4b62-8cb6-96021da7b3c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9417530-0ce0-473b-bf4a-f127a015ed20",
        "cursor": {
          "ref": "144d1ed4-a460-40b4-93ed-f898e4b6a4f6",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "6c5151d2-e467-438c-9503-018c718156ee"
        },
        "item": {
          "id": "a9417530-0ce0-473b-bf4a-f127a015ed20",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "9830feca-c8a2-421e-9bbc-f2ce43f35499",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c08c4e63-d61b-4255-a311-9bf954ef484e",
        "cursor": {
          "ref": "f826e6f7-3ebf-41c8-9b35-b8ee24636178",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "2217a42c-540b-426c-9c77-925de076a67d"
        },
        "item": {
          "id": "c08c4e63-d61b-4255-a311-9bf954ef484e",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "99c06714-ac00-4575-8b95-8d2a0cfcaf5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf6f9fc3-923c-4c60-be29-32922d3cf470",
        "cursor": {
          "ref": "0f1e6532-aea8-4aae-b122-99c7386af719",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "ca39d77c-c23c-4c69-b571-9bce98a68f61"
        },
        "item": {
          "id": "bf6f9fc3-923c-4c60-be29-32922d3cf470",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "41a1d608-b597-4e77-b8ef-a92236b223af",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66253e3f-d674-466c-af1a-4d42292ed234",
        "cursor": {
          "ref": "6bfbe31a-9fdc-4f2e-84a4-5f7bcf2ff637",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "65de8066-bbec-45c2-bc30-e64caa78ee42"
        },
        "item": {
          "id": "66253e3f-d674-466c-af1a-4d42292ed234",
          "name": "credentials_issue"
        },
        "response": {
          "id": "8ed28bba-8d6b-4c8c-bb62-e5472284bdb6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:102)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:102)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:102)"
            }
          }
        ]
      },
      {
        "id": "2bf6b51a-e91a-4242-857b-68e89b03dc52",
        "cursor": {
          "ref": "c608949e-cf5f-44c7-b40f-5044e9ada38f",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "efae8651-2f84-49a9-9226-83589dda0f9f"
        },
        "item": {
          "id": "2bf6b51a-e91a-4242-857b-68e89b03dc52",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "8f526c3f-9dc2-4207-b7f7-bd91461be0e0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:103)"
            }
          }
        ]
      },
      {
        "id": "1de8a3cb-498a-4529-9d2a-e1ab19ec6846",
        "cursor": {
          "ref": "f349ac1f-ff1a-4ac2-a1c0-d5d2a694b676",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "1f73b89c-a371-4105-82b6-201a8b467fbe"
        },
        "item": {
          "id": "1de8a3cb-498a-4529-9d2a-e1ab19ec6846",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e9385cb6-662f-43b8-9e07-85d36d409e0e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "3c6e9ce5-b66b-498c-b91b-6cbcc01f548c",
        "cursor": {
          "ref": "328b53a1-e384-47b5-8456-bdc59bb19fa7",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "15709a83-c549-4e0e-a9eb-b0ef257c7bb0"
        },
        "item": {
          "id": "3c6e9ce5-b66b-498c-b91b-6cbcc01f548c",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e22a2468-51f8-41f8-8702-d5c4b86099a8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "f48a37f3-70db-4204-a928-f93f679376f8",
        "cursor": {
          "ref": "d1261140-0235-4c8d-b0f8-d0c1764389ee",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "e14fb8c3-9e17-4203-8fd7-c0043389a698"
        },
        "item": {
          "id": "f48a37f3-70db-4204-a928-f93f679376f8",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "6b1482fd-732d-48c6-b37b-1d1797bb39c0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 43,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "097f5baa-81bf-41ac-b516-65e713173365",
        "cursor": {
          "ref": "0f3818b7-a3c8-41ad-a237-e5442bbff79d",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "a37b2fb6-f643-4ca1-9d51-83c36021d3d7"
        },
        "item": {
          "id": "097f5baa-81bf-41ac-b516-65e713173365",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "4fe3791d-e83d-4f34-a627-30118fc985d3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "f1aedb60-8f40-414b-9f98-0ca9bcdec118",
        "cursor": {
          "ref": "9f4ffb77-1afe-4c78-a1eb-325999aca10d",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "922f933e-095d-43df-99e2-a09565bb1df7"
        },
        "item": {
          "id": "f1aedb60-8f40-414b-9f98-0ca9bcdec118",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ec6e4df3-afe9-46fb-b25c-4f87ec970a4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41b341da-7599-4106-bfd4-264ba57aae4e",
        "cursor": {
          "ref": "683b77fe-4766-46a9-a152-4a8aaf0eed5d",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "136bc1e9-8c50-475b-94c5-f2509694d977"
        },
        "item": {
          "id": "41b341da-7599-4106-bfd4-264ba57aae4e",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ae7cb7ba-1532-4d3b-80d8-893a2fbb5c3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79a97a8e-17e4-4af6-8a08-ae71182b7e53",
        "cursor": {
          "ref": "5a23e3db-748f-464a-973b-623f56b04ce8",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "8191aa96-0598-4931-8fcd-41e5b7d6ce22"
        },
        "item": {
          "id": "79a97a8e-17e4-4af6-8a08-ae71182b7e53",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "c094663a-64bb-4714-926d-91cc3505ea51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94ac46b4-2711-4d71-861b-21794801e8b3",
        "cursor": {
          "ref": "8008db40-1708-49b9-b8d5-d5cf57945199",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "b6777b51-1898-4468-b510-9d1f56cbd243"
        },
        "item": {
          "id": "94ac46b4-2711-4d71-861b-21794801e8b3",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "2c6be329-82e1-497c-99f8-4b7aba9ba81a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50a60946-f19b-41cb-923c-34e7522bbd1a",
        "cursor": {
          "ref": "5a3526de-3e58-4679-b696-c63bcd141c5a",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "d2296992-8b75-41ac-82f3-7c5d85873e5e"
        },
        "item": {
          "id": "50a60946-f19b-41cb-923c-34e7522bbd1a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "ad96b448-e5aa-4bea-82c9-cff64839746d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "393dfacb-9322-4faa-b765-c69866b1e757",
        "cursor": {
          "ref": "237ea978-2c83-4334-bb06-7b4ef96580ee",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "840448ee-1058-4405-9c09-1458e07fbfd9"
        },
        "item": {
          "id": "393dfacb-9322-4faa-b765-c69866b1e757",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "1cf8de6c-cefa-41be-bd99-7ef2ce929e3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc5f0556-4d78-4e4e-9f1a-7891cbbf676d",
        "cursor": {
          "ref": "a346c57e-93ac-44e5-9772-051074d58166",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "9d37f570-b7b3-4c90-9066-21bc020c0267"
        },
        "item": {
          "id": "dc5f0556-4d78-4e4e-9f1a-7891cbbf676d",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "05150857-a32b-4177-8c16-8c0561b1fa4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d07aca0-b307-4843-a076-27fca0e38480",
        "cursor": {
          "ref": "f476fd79-d3a3-42a1-a521-e865a7762cab",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "8f2d647e-c6ec-46d6-8e0e-66e4d484c65e"
        },
        "item": {
          "id": "1d07aca0-b307-4843-a076-27fca0e38480",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e42522cf-d014-4a7c-a77c-f496b57f3dc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "802bb63d-2867-461f-8c7b-ba6b988b6827",
        "cursor": {
          "ref": "4bc76be0-fc82-4ba9-ab00-83c8a417e5f9",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "54786f45-d641-4b4f-a782-c3449c41e611"
        },
        "item": {
          "id": "802bb63d-2867-461f-8c7b-ba6b988b6827",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "840bc09f-14e5-4ad7-8b9b-6608ec8339fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff9ed396-b5c0-421c-a93f-115f4dd2a57f",
        "cursor": {
          "ref": "9f09991a-e6ea-4635-b47b-83fa684bccd5",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "fe74bd22-1bad-49ff-b408-f697221e4ea7"
        },
        "item": {
          "id": "ff9ed396-b5c0-421c-a93f-115f4dd2a57f",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "98204f9d-235f-4f06-9cd0-97f61fbab57a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "828ec538-5724-4a90-959e-a1392623fa41",
        "cursor": {
          "ref": "f8d613b4-a4b8-45a9-b6b0-cb8bfaad6b22",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "23de37a6-0309-4a68-9bb3-515a4c454643"
        },
        "item": {
          "id": "828ec538-5724-4a90-959e-a1392623fa41",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "1a4e22b9-7fa2-458a-89f5-f43dea5400c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bd76dc7-fc8b-4e9f-9a4a-3f892632d19e",
        "cursor": {
          "ref": "ddbff53c-30ea-43a4-b52d-f8012e2f656d",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "ee286030-1f16-436a-818d-c6e41fbdd620"
        },
        "item": {
          "id": "1bd76dc7-fc8b-4e9f-9a4a-3f892632d19e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "7ccf2b21-bbc1-4e27-9997-2e33dedaf1f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a93b8d2c-ec3b-453b-9313-e2a59b163fc6",
        "cursor": {
          "ref": "4db7d4c1-6b6b-4a66-bb5b-1a98fec53204",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "0c04a76a-1f44-49d5-b79c-456791ce1f01"
        },
        "item": {
          "id": "a93b8d2c-ec3b-453b-9313-e2a59b163fc6",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "515ed63a-4854-49bb-aaef-31707f048dfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecf2cf21-7af3-4fd1-8768-54f2b262e5bc",
        "cursor": {
          "ref": "f0fdca23-54fe-4c76-b93d-95a55dff79da",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "687428b7-2be0-4110-8f66-502082ae7191"
        },
        "item": {
          "id": "ecf2cf21-7af3-4fd1-8768-54f2b262e5bc",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "afe67c27-e700-4d5d-a0f8-82e760d44c34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3e3a7cb-ae70-4d7c-b666-224676a6c554",
        "cursor": {
          "ref": "4d7966a3-f567-40cb-8aa8-bd67b150a67e",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "e02c27f2-90f3-43ea-adbd-c6ae2007041c"
        },
        "item": {
          "id": "b3e3a7cb-ae70-4d7c-b666-224676a6c554",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a3a347d4-9054-4136-b9a0-eb31c47094b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "498715b7-cbf7-445a-9a3d-eab45a11833a",
        "cursor": {
          "ref": "d5c3f1a1-7b38-4722-934e-f3a5096f9854",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "0924f586-4a0d-40be-a71e-7e461b54174d"
        },
        "item": {
          "id": "498715b7-cbf7-445a-9a3d-eab45a11833a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "1cc6ce57-849d-4ea3-a08c-8a3d2f2003cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49723184-d951-44f3-a030-721fb57a15cd",
        "cursor": {
          "ref": "e77d3d11-6dcc-4b58-8145-51d08f9838c9",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "d5da46fb-964b-4fd7-ae66-cde79ef762ed"
        },
        "item": {
          "id": "49723184-d951-44f3-a030-721fb57a15cd",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "51d7d870-57b0-4ba6-a7b4-625a810a12c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56f8fd0b-3adc-43a0-a718-ef742e9edaf6",
        "cursor": {
          "ref": "fdcb2cfa-3f3c-4b1b-9a5a-aad44029be54",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "7ed61435-0654-4790-a9b5-ebd38a89191e"
        },
        "item": {
          "id": "56f8fd0b-3adc-43a0-a718-ef742e9edaf6",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "ad9a1469-b331-453f-b6e3-e537f3c48ba9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "286c345c-2007-4d62-a3c0-47e08c44a40d",
        "cursor": {
          "ref": "313739e2-3974-4641-b18a-59ae1b48a310",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "d4316509-0c89-450f-b9d5-ad5183c3d809"
        },
        "item": {
          "id": "286c345c-2007-4d62-a3c0-47e08c44a40d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "2207273f-4d48-4172-b802-6c305f410a7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "973c1e71-c2fa-40f6-8dc7-03b242083ca0",
        "cursor": {
          "ref": "e41256d1-56fd-483c-978f-d256aa88fc42",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "10cde6d1-c4ce-4057-a69c-cab06b83888a"
        },
        "item": {
          "id": "973c1e71-c2fa-40f6-8dc7-03b242083ca0",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "a3ff2cf3-952d-4d41-94ab-40813484129f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7cd51c3-8dca-4f35-a4f2-49dd7945eec2",
        "cursor": {
          "ref": "ec975917-1053-4b65-b2ee-3aa77315d0c3",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "95b5afd4-a96a-4ba5-8e79-6fde6ad615b0"
        },
        "item": {
          "id": "d7cd51c3-8dca-4f35-a4f2-49dd7945eec2",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "971f77a6-b4ab-4fa7-838c-3cfd4f91ffd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05674f77-832e-49fe-8621-d44c484f4f7e",
        "cursor": {
          "ref": "f97653cd-1348-4df5-8a5f-c2d7826452b8",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "d4524230-e503-47f0-af4a-20058eac6ce8"
        },
        "item": {
          "id": "05674f77-832e-49fe-8621-d44c484f4f7e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "43aa763e-203d-4ff8-a0e2-3cac994076dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2be0dbaf-a2ed-4318-8a53-cb78787d54d2",
        "cursor": {
          "ref": "d6f09bb0-fa53-47d7-bb8e-d84aa8a40ba5",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "bf5f3705-85d3-44f5-ad30-013eafdf39c5"
        },
        "item": {
          "id": "2be0dbaf-a2ed-4318-8a53-cb78787d54d2",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "3f9f1cc3-7aed-4fc7-b45c-b9ea4ddb3361",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc123800-1502-4415-b94d-ba60c70fccf6",
        "cursor": {
          "ref": "c599e883-ae80-40ed-8f4e-603183681da6",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "50d60c5f-27a3-43e1-aeb8-46fd3da1cfd1"
        },
        "item": {
          "id": "fc123800-1502-4415-b94d-ba60c70fccf6",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "6bad11e0-c354-4d79-b5c8-f4e51b803208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "572c5ac1-ebee-4102-afbf-44ec1c2eb3da",
        "cursor": {
          "ref": "b9a65981-1e68-471d-980a-dd9361125e20",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "d0674514-2486-49fb-8da8-27d79bbf3340"
        },
        "item": {
          "id": "572c5ac1-ebee-4102-afbf-44ec1c2eb3da",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "03e5db21-9665-49df-96c3-6223fc682bea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21dc9ccd-3d48-4adb-95e5-7c4fbe51efda",
        "cursor": {
          "ref": "af8f325f-f54b-4df5-8c40-4607c8fdde12",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "5826a5d4-7f14-42e1-b847-403efc31b53c"
        },
        "item": {
          "id": "21dc9ccd-3d48-4adb-95e5-7c4fbe51efda",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b82d77b1-3c6b-401f-8981-f23083f01925",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33ff8fd8-c778-462d-a0ab-eddca0119ca3",
        "cursor": {
          "ref": "388f987d-e5b3-4076-96ad-56c01e24f2a1",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "1927e9be-e612-472d-bf65-467b17f45a2b"
        },
        "item": {
          "id": "33ff8fd8-c778-462d-a0ab-eddca0119ca3",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "115f5a4b-c289-4f32-bcc9-0afd2054a158",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b32cfe0f-6036-472d-aaba-6996232078ed",
        "cursor": {
          "ref": "57498141-f369-4e94-939a-4a78cc052f94",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "1eae0dc8-7ee7-4286-80ae-830ddb73e5a8"
        },
        "item": {
          "id": "b32cfe0f-6036-472d-aaba-6996232078ed",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "8e767e20-ee89-4e8e-bc71-e9314fb73e89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75b6925a-7a55-4b57-b32d-fd3906b565fb",
        "cursor": {
          "ref": "a68de1a9-9831-49d2-8780-ad95eed0d69a",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "9b60b8de-8709-4a7f-a7fc-902f5b6409d1"
        },
        "item": {
          "id": "75b6925a-7a55-4b57-b32d-fd3906b565fb",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ea975171-71da-4c5a-be65-5733b2e7a02e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8e3ccf0-531a-4d9a-80f3-13eba85c1b8b",
        "cursor": {
          "ref": "93a0714f-55f0-4a23-99d3-e5af1451cd89",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "f715f0ed-ad4e-478b-a88e-c84a15cbe738"
        },
        "item": {
          "id": "e8e3ccf0-531a-4d9a-80f3-13eba85c1b8b",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "446494d4-adc8-49f1-805b-d62ec31843d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67c70513-8b97-4204-a11b-a6ea9c534e18",
        "cursor": {
          "ref": "b0aeb64f-058e-4785-8f55-995fbe3d23b9",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "d65824b1-03f0-485e-9197-83433e866cfd"
        },
        "item": {
          "id": "67c70513-8b97-4204-a11b-a6ea9c534e18",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "01b48952-18f1-4fb6-a16f-d31b9a2a7567",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5516c5c-ab67-47d7-a213-ad1d0a9ebc1d",
        "cursor": {
          "ref": "dc43ef33-5f5e-43d7-87fe-da28c471e8e3",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "fe1db19d-11d6-4c8f-a09a-e6be3fd57676"
        },
        "item": {
          "id": "b5516c5c-ab67-47d7-a213-ad1d0a9ebc1d",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "850f8c6f-c1d4-492d-9b06-260735bfa0fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9be9bed4-1649-407b-b68f-ad85ff9efbf5",
        "cursor": {
          "ref": "0d3bee04-e2cc-4210-b89a-daafb9337e01",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "f2f3290b-2d09-4602-8535-cb2c547a9c51"
        },
        "item": {
          "id": "9be9bed4-1649-407b-b68f-ad85ff9efbf5",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "da1a4a22-3313-46dc-aa27-4f9d86b127ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a2eec4f-b414-4ce7-9130-528d34af1f28",
        "cursor": {
          "ref": "70c430fa-1b65-4cca-a48b-1640777308d9",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "879a3cc7-66a1-41c8-b526-c3193b8ec77c"
        },
        "item": {
          "id": "0a2eec4f-b414-4ce7-9130-528d34af1f28",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "da41f702-22cc-468f-9f38-7fc28f02e2cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db54a0a0-29ec-4d58-94b3-58c47cfb5344",
        "cursor": {
          "ref": "d937cbff-f7f1-4b39-a7dc-c96f6d95c5f9",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "8d6757f1-85c0-4073-9c7e-b3a56bb2035d"
        },
        "item": {
          "id": "db54a0a0-29ec-4d58-94b3-58c47cfb5344",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "788887b7-494d-4ba5-b37b-b97934caf797",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "472aba87-8312-424e-af15-9570d4eea548",
        "cursor": {
          "ref": "87b2c7b1-ca0e-42c7-a328-461e45b2fddf",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "152e5269-501e-46ac-a63c-6801c35111f2"
        },
        "item": {
          "id": "472aba87-8312-424e-af15-9570d4eea548",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "a85cebc2-4f1d-48c4-bb91-c7b760b285d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c06987ba-a145-4f54-b7ab-7dcba9afede4",
        "cursor": {
          "ref": "190fbe65-5921-45cc-9e95-a98074496212",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "7afdfa84-1eff-471d-9fa9-042cb67c27e1"
        },
        "item": {
          "id": "c06987ba-a145-4f54-b7ab-7dcba9afede4",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ce997f31-2919-4b29-a80e-79b48d6ed04f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3b6ced4-1d90-4b7c-b4cd-728b4e49cf33",
        "cursor": {
          "ref": "fb7b9678-3c85-4588-a713-4dfdf729e826",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "1c9dd8c6-0967-4ebc-8817-0a426249801a"
        },
        "item": {
          "id": "f3b6ced4-1d90-4b7c-b4cd-728b4e49cf33",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "0dbe9b3f-cdaa-4566-aea2-7d89a54443a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48e99966-bd58-4ef5-a0df-f0b903380db5",
        "cursor": {
          "ref": "01d5f070-09b7-40e7-b8ff-ad635dfa9f26",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "155ecc63-1e45-4d45-aad2-e8e138dbca0c"
        },
        "item": {
          "id": "48e99966-bd58-4ef5-a0df-f0b903380db5",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "a254ef05-1f75-49f5-b384-83447e8baf58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1af3e6e2-4305-4e54-9adb-72e1ffe2bcd9",
        "cursor": {
          "ref": "47757e25-3d02-4c80-99a4-e8ce75d68a15",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "2d6843bd-dad3-4a34-ae37-666ed0b781e3"
        },
        "item": {
          "id": "1af3e6e2-4305-4e54-9adb-72e1ffe2bcd9",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e8ba92cf-51d6-4dbd-9a9e-672e60c6e7f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "675fdfba-d2a6-4775-868d-702ce7758a14",
        "cursor": {
          "ref": "d29600f5-45b4-4228-8c22-32c89019d6e1",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "a5a8b9ef-101a-4442-9617-b89b730a180d"
        },
        "item": {
          "id": "675fdfba-d2a6-4775-868d-702ce7758a14",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "85d298cd-73a7-4fec-9506-da6925c27ac2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c54276b-e897-4061-8f37-9633c2eb21ad",
        "cursor": {
          "ref": "0db53de0-83f2-42ec-9428-d4e928050508",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "bdd40d96-d2cb-45c5-bae1-556c6550f6c1"
        },
        "item": {
          "id": "7c54276b-e897-4061-8f37-9633c2eb21ad",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "01ae3fb5-6a1e-4bb4-9334-a4feaa8691be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a497b94a-861b-4f74-b9e9-491cef1b698c",
        "cursor": {
          "ref": "bdb749c9-cd7f-4c83-902e-931b468ea733",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "b7c03742-315d-4288-b1ad-ecb6c4430d65"
        },
        "item": {
          "id": "a497b94a-861b-4f74-b9e9-491cef1b698c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "f9ad2bc0-6d94-42d4-9571-a4d6684b7273",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad068643-b900-4dba-a872-6bbbd15dba44",
        "cursor": {
          "ref": "b5f64058-5701-4bcf-8789-9cd717421206",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "4ad68cd9-f7f8-4287-bfea-da7f3146bd08"
        },
        "item": {
          "id": "ad068643-b900-4dba-a872-6bbbd15dba44",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ab8f16ea-9b80-4bd5-8a37-f0bda63b87dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "710d0723-bc6b-4ab8-b782-03ade1f3d1cd",
        "cursor": {
          "ref": "2a7a9bd9-6e74-45c7-8cd7-54d86af27d34",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "bc3ecbf8-b5b6-4e2d-8add-1b7dc5667f44"
        },
        "item": {
          "id": "710d0723-bc6b-4ab8-b782-03ade1f3d1cd",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c8be6229-e69a-4d72-aff9-ddac2783d1cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "733d5a8e-538e-4e54-8ff2-fb67e736f649",
        "cursor": {
          "ref": "b81ec672-27ec-4b92-90e9-f3a69c998b0e",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "bea1e778-27d2-48e4-8e88-cd794c60023c"
        },
        "item": {
          "id": "733d5a8e-538e-4e54-8ff2-fb67e736f649",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "cd19381e-5624-4eb9-a582-846d4a8c2567",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "153d5cbb-e93e-4daf-a957-faefddd503c2",
        "cursor": {
          "ref": "f2e373b2-15c6-4aea-9070-36fe76f7de24",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "6679b7d5-df88-430e-99f7-4924f5d5827a"
        },
        "item": {
          "id": "153d5cbb-e93e-4daf-a957-faefddd503c2",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "4aa0576a-4877-4ee6-8803-53af5838dc0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7659ea2e-8494-4d00-975f-e47a884ef505",
        "cursor": {
          "ref": "62df6144-b5f6-4e46-94c7-c93968a4732b",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "06e802a8-8eba-4c17-b5cd-b70497997055"
        },
        "item": {
          "id": "7659ea2e-8494-4d00-975f-e47a884ef505",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "1b16c370-74f3-4b07-921f-ffcb1adbd6cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4da9beb5-876d-40a3-8857-e36f6cb1776b",
        "cursor": {
          "ref": "6d3bcaad-b170-440b-b9be-e58c0835f7fb",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "4c93ceb5-09aa-4343-ad8d-cb2c701346af"
        },
        "item": {
          "id": "4da9beb5-876d-40a3-8857-e36f6cb1776b",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "7393eade-fcf8-415f-80d5-05556d784367",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48fa672f-4f50-4f1e-a377-db4106c17cb1",
        "cursor": {
          "ref": "2565fd90-f68c-4a7f-950d-d0dc3b1a67e8",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "1a5a891c-8de8-45f9-afc3-69b26e6cd679"
        },
        "item": {
          "id": "48fa672f-4f50-4f1e-a377-db4106c17cb1",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "65a6040f-41db-425e-90db-1125be5ae818",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89fe48f3-a91f-4bb7-b5d4-6e4fa53230c5",
        "cursor": {
          "ref": "a814f5db-fcf7-44a6-be62-83646231ef4d",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "96468c5d-6434-4c56-8bbe-2672c9d44035"
        },
        "item": {
          "id": "89fe48f3-a91f-4bb7-b5d4-6e4fa53230c5",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "387506e4-c4c1-4211-8754-fb083e4967b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdd5b9ed-2755-45a9-94f6-86f5c31b7b93",
        "cursor": {
          "ref": "394be844-5664-47e6-997d-273fc79facc1",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "a2235923-b4af-48bd-b14f-344a51283838"
        },
        "item": {
          "id": "bdd5b9ed-2755-45a9-94f6-86f5c31b7b93",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "6f1b8094-9194-4a11-95f4-8b348032e0a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9eee984-0fbd-4c92-8f30-374822b140bf",
        "cursor": {
          "ref": "637cf61e-1321-4f4a-a4b2-e74c1894314e",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "624acbb2-7e78-485e-b436-41f31e2811be"
        },
        "item": {
          "id": "e9eee984-0fbd-4c92-8f30-374822b140bf",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "c81653c3-3241-4161-baa3-e27a0c327748",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6111c2c-f4fd-45f6-a7f6-25725df453bb",
        "cursor": {
          "ref": "23cc3f63-6af7-480b-83c7-56262e8f8afe",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "67612da1-575e-4811-a5d2-5a6d89f859be"
        },
        "item": {
          "id": "a6111c2c-f4fd-45f6-a7f6-25725df453bb",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "81ea2cbc-e491-4757-a791-30dc5a73c02e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ea6c9ac-24a9-4c30-a16f-23f08ec2473f",
        "cursor": {
          "ref": "39b65508-a0ea-43af-bc59-a8a97966f250",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "484357f4-8d38-4948-958e-8c74be83f564"
        },
        "item": {
          "id": "6ea6c9ac-24a9-4c30-a16f-23f08ec2473f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "835e66a6-c2b9-4737-ac46-984ece8aadc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "568e4429-5a0d-4253-886d-5ac51b12a082",
        "cursor": {
          "ref": "1bcb2971-ebd2-4b87-95fb-f019dfbc61ee",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "a32805ed-1733-49b3-8289-a973ada9bf5e"
        },
        "item": {
          "id": "568e4429-5a0d-4253-886d-5ac51b12a082",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c92ecf82-be46-4fe1-9ff8-f8b24b6f4446",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55d5b47d-033f-4efe-b34e-8c1a113e9d03",
        "cursor": {
          "ref": "53aa1a35-f17d-4ec9-8665-6fb1076c5799",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "8a3359f8-951a-4362-a1e2-49f202834f44"
        },
        "item": {
          "id": "55d5b47d-033f-4efe-b34e-8c1a113e9d03",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d0a8202d-dc9d-45a5-ad3b-972f9c378313",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f31ee290-1d5f-46b0-be4c-461522ec9194",
        "cursor": {
          "ref": "7f626f5c-be7b-4506-a205-f9cf5759b89a",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "b81dca11-a1ec-4ffd-9d92-a6c34dfe3b54"
        },
        "item": {
          "id": "f31ee290-1d5f-46b0-be4c-461522ec9194",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "5f9dc1f6-aad4-4b5b-b188-eba58e900970",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "836742b8-95cb-48d4-bea9-61f15f6c95b2",
        "cursor": {
          "ref": "de580e22-acae-48fe-9c7b-10f5b2addec7",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "e53f57d4-0e83-4af7-af8c-1c2395df95fe"
        },
        "item": {
          "id": "836742b8-95cb-48d4-bea9-61f15f6c95b2",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "9ddf61bb-30ee-4452-bf4b-8d0462fa5cb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39748fd5-26c4-4faa-a328-f67b881e15cf",
        "cursor": {
          "ref": "39ef970d-638e-4d12-997d-f582440d3bae",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "8ace1207-a90f-48d0-83ef-692ef36619b2"
        },
        "item": {
          "id": "39748fd5-26c4-4faa-a328-f67b881e15cf",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "24360f27-cc8a-45a1-8995-f269e7e890d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f3654e2-2db1-43c9-a2fb-dfe321f0efdf",
        "cursor": {
          "ref": "ffdb9823-b1ea-4d4e-964f-94ad6a7205b1",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "469e010b-9802-4229-b1d5-298c200fc51f"
        },
        "item": {
          "id": "4f3654e2-2db1-43c9-a2fb-dfe321f0efdf",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c9f21965-c605-4455-994b-c3cece1afabb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a456896a-5819-4a96-9e77-fdb29761c978",
        "cursor": {
          "ref": "9d03bb13-e29a-4b8f-8aa9-e60a9b86a756",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "3d101a09-8544-4a48-8c8a-857452f388ab"
        },
        "item": {
          "id": "a456896a-5819-4a96-9e77-fdb29761c978",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b6f57f19-3e05-4f23-86c7-dee42774e21c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69d42878-770b-4cdf-ad60-a66ad43dd865",
        "cursor": {
          "ref": "4d4f7ef3-000c-4f80-a975-701dc1b219fe",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "74e173d6-6e60-42f9-8a10-991216e97ca7"
        },
        "item": {
          "id": "69d42878-770b-4cdf-ad60-a66ad43dd865",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "d9831acc-8d88-438f-8138-72cd1995593d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 156,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e67c7eb-8839-4fd9-89c7-1b49af3eb066",
        "cursor": {
          "ref": "8cdda184-fce8-4ee2-8eff-07776381d441",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "a8c01403-741d-413f-9562-3c6411ba1e32"
        },
        "item": {
          "id": "8e67c7eb-8839-4fd9-89c7-1b49af3eb066",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "cfc35533-d09d-4f3d-a4bc-70b563433447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "056e4717-46ac-43f8-bb33-4afb770d3888",
        "cursor": {
          "ref": "059b2513-af53-4823-9ec1-2544daa510e1",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "8d5eee36-e0eb-4c9a-beb4-61bef3b764b3"
        },
        "item": {
          "id": "056e4717-46ac-43f8-bb33-4afb770d3888",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "e1300f98-f98f-4a43-b08d-0a7eed1c09ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb491ef9-ea2d-4979-b718-610bed4e55ba",
        "cursor": {
          "ref": "bf0c4d5f-b37d-439a-b54a-73f22787be9e",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "634249c8-8ae0-4e70-b058-4e41e5390c84"
        },
        "item": {
          "id": "cb491ef9-ea2d-4979-b718-610bed4e55ba",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "ee06e0ac-acf9-4f22-9764-7b6890024b06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64f5722f-3a34-4b35-96a5-de53407a5d1e",
        "cursor": {
          "ref": "3507d6d2-1ddb-4fc2-9154-27eeaae48fb4",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "9db39bcb-c231-40c3-8a4d-57bb898025d0"
        },
        "item": {
          "id": "64f5722f-3a34-4b35-96a5-de53407a5d1e",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "5fe77a43-b331-4b0e-9a11-46470539aeb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17d3d52c-075b-4190-b524-d2cb007bf496",
        "cursor": {
          "ref": "ef4ffc0a-1bda-4e01-8c04-114a5960958d",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "9b31907c-8e9f-4ca8-8a52-76fffce05cf4"
        },
        "item": {
          "id": "17d3d52c-075b-4190-b524-d2cb007bf496",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "91b5f797-6e18-4f92-a7c2-49bb0dc9d4fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83ca82a2-2c77-4e57-8a76-2a433cbff54d",
        "cursor": {
          "ref": "99153f43-b2a6-44af-a89a-49f45c7831f6",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "c8924ae6-5bb9-44d4-92ae-8b5de43d34a0"
        },
        "item": {
          "id": "83ca82a2-2c77-4e57-8a76-2a433cbff54d",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "164d8082-e6d5-4464-93c6-ff4a04ccc11e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0621a620-923c-4338-898f-86130390c061",
        "cursor": {
          "ref": "e35140e9-7f7e-4059-becf-83292bfea73e",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "1f40825c-f556-42d5-8848-aceed65498d2"
        },
        "item": {
          "id": "0621a620-923c-4338-898f-86130390c061",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "9c16b8bd-caa7-43d7-9dc0-c830da04febc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a853f3d-b83a-46fe-ad37-f8f2769fd956",
        "cursor": {
          "ref": "e18513f4-f931-4105-a90b-84bff1e9b0db",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "108fff7f-91fe-4896-94f6-84b0c894a922"
        },
        "item": {
          "id": "5a853f3d-b83a-46fe-ad37-f8f2769fd956",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "dc79943c-572e-4524-a566-9f4877e37e20",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acfc2fb8-9beb-49f1-a462-062b6ab0e213",
        "cursor": {
          "ref": "0c365af0-cbd0-459a-a6c5-05e3275e1c2d",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "ab400022-678d-4a9b-a387-02313be033ec"
        },
        "item": {
          "id": "acfc2fb8-9beb-49f1-a462-062b6ab0e213",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "a8b06d90-37e9-47b0-a9c8-414ec452a45e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c8ebea9-2e35-40fd-8003-a00b74defcce",
        "cursor": {
          "ref": "07251125-37cf-426f-8b8e-ae859b2a7530",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "d16b9b9e-b27d-46bf-8c2b-ff351e511acc"
        },
        "item": {
          "id": "7c8ebea9-2e35-40fd-8003-a00b74defcce",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "cedc4bbb-c962-447c-8c0e-f615d157c4ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20c05ed0-bcbf-45ac-8492-8e709643b833",
        "cursor": {
          "ref": "9dcf5236-ef17-4ccd-b893-8e6e7977dd9c",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "fdc491c9-2924-43ba-b803-dc52a7196891"
        },
        "item": {
          "id": "20c05ed0-bcbf-45ac-8492-8e709643b833",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "e6f0e693-2f8d-4263-afb7-11828993be69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81076f9a-a26b-4598-a049-e44cdc58ce6b",
        "cursor": {
          "ref": "f894a8cb-e669-4972-bbed-9cc9349de6f8",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "06ac21ad-53e8-45a4-b134-82e6e6def276"
        },
        "item": {
          "id": "81076f9a-a26b-4598-a049-e44cdc58ce6b",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "f6bed7cf-0b79-4a0e-ab95-5f488e4c5a48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31138ead-c69a-49e6-aefa-3728e0665097",
        "cursor": {
          "ref": "a64c69ef-1940-49ae-b082-0e2fd5c67340",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "f3bc8def-f95b-4966-8891-946d4a16b6fd"
        },
        "item": {
          "id": "31138ead-c69a-49e6-aefa-3728e0665097",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "0673311e-525a-4a41-bf2f-a1ee9dcb2107",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bde1391b-ba69-4cc8-bdde-39c4b8fa8367",
        "cursor": {
          "ref": "9f2e38a8-5667-4347-b863-4b74678e7400",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "cbbbde78-f936-4da0-a142-db562998e882"
        },
        "item": {
          "id": "bde1391b-ba69-4cc8-bdde-39c4b8fa8367",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "015d5e28-7c72-41ff-bc5b-1a9bff4aa6fe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 32,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "38a2fe77-ee8f-4f71-bf7d-e7e4ff3cac6b",
        "cursor": {
          "ref": "334edc7a-9cec-4849-a7dc-d50f74e39dfc",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "e73cb9af-3341-49ff-a116-5b0be745cd31"
        },
        "item": {
          "id": "38a2fe77-ee8f-4f71-bf7d-e7e4ff3cac6b",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "64999222-7ff5-4b9d-ad82-f59255f21f4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f7f4f43-0a97-4e4d-bfd5-ad2b7532bc53",
        "cursor": {
          "ref": "bbe73ef7-2e6d-4cb0-9f76-50c2775744e5",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "0955d06a-b24f-4370-b88d-6cc8141ec6b2"
        },
        "item": {
          "id": "8f7f4f43-0a97-4e4d-bfd5-ad2b7532bc53",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "4ae9ff97-2748-4966-bb72-05c266790a7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef67d8c1-ed08-478b-a434-e28f388bda76",
        "cursor": {
          "ref": "536550d1-2932-44fe-abf5-49fb58c27db9",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "4f4ddaa4-2614-4731-924f-84c46912120e"
        },
        "item": {
          "id": "ef67d8c1-ed08-478b-a434-e28f388bda76",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "40f56ce6-be8c-4801-8ed7-032204046046",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d53593f3-e761-48db-845c-f1f966facd6a",
        "cursor": {
          "ref": "bb4b80b4-4f30-48e9-9232-93195046787c",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "ddaea04b-9ecc-40af-93b6-8dd46cc73e76"
        },
        "item": {
          "id": "d53593f3-e761-48db-845c-f1f966facd6a",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "26bc268f-b427-4d39-ac21-3d564a1084ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41622e75-1040-4038-9cea-81cb16184849",
        "cursor": {
          "ref": "6d141ba4-249e-424e-9ddb-5494ac44b88d",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "93446120-3adc-496d-9e68-412125750ad4"
        },
        "item": {
          "id": "41622e75-1040-4038-9cea-81cb16184849",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "a508965b-7078-4587-8242-c9f393fa0098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24e58d5c-7d88-4bac-934c-7251009ef201",
        "cursor": {
          "ref": "bdc5785d-be74-4bab-a238-4fec4e200094",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "a9148864-7406-46b6-ac0a-771dec9e9fb8"
        },
        "item": {
          "id": "24e58d5c-7d88-4bac-934c-7251009ef201",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "5456dba4-c9b1-488a-af32-b1e4a3091fb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31df2f34-1a27-4175-ad7c-cbcc5f56dd78",
        "cursor": {
          "ref": "134fbb19-c3b9-47ae-be68-1a5742972115",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "57f23bf6-b305-495a-b2e4-6188fd05a412"
        },
        "item": {
          "id": "31df2f34-1a27-4175-ad7c-cbcc5f56dd78",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "b90d44ff-e926-43c3-b989-daecc0efccc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a27a941-a1c8-4a94-81fb-a9060c1acf7c",
        "cursor": {
          "ref": "9c695327-5cc3-430e-ae80-f4a892f9c688",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "bfd6bccc-4a03-4361-a07d-3d7b2e76a447"
        },
        "item": {
          "id": "9a27a941-a1c8-4a94-81fb-a9060c1acf7c",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "26d9677b-2499-4057-988c-e8c26090bb9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd6cf628-3905-4f7e-90f9-1431182d7fae",
        "cursor": {
          "ref": "21f893c0-7d4d-4bcd-b2af-6df39c4a6bb6",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "2f9f6711-4d4c-4417-b477-0f2bb135f518"
        },
        "item": {
          "id": "bd6cf628-3905-4f7e-90f9-1431182d7fae",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "0e00ea3a-bba2-440c-af10-f72b174c659e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cbb3e72-489b-42a5-9fb4-2a97ff6ec6d6",
        "cursor": {
          "ref": "5f81f47b-fb59-46f1-8c6d-2fb27e94d37e",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "e8f6c2f1-5850-4814-9510-bf4be4c4fe7a"
        },
        "item": {
          "id": "7cbb3e72-489b-42a5-9fb4-2a97ff6ec6d6",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "5d0b24f6-5340-4f2e-99ab-26558a682fd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b487cdb-7266-43eb-8c93-07edf6265266",
        "cursor": {
          "ref": "2d619dd3-7a08-4f6e-a27d-486513f4f335",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "5af7fc68-b42a-4482-b745-759cc7e0e1ce"
        },
        "item": {
          "id": "6b487cdb-7266-43eb-8c93-07edf6265266",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "8a5ea263-234d-46de-9290-be61905f8189",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "399c9dbb-4b27-4334-8fd4-96e6e5dea97f",
        "cursor": {
          "ref": "04d499f8-3db5-4cfb-8467-63a3485a893e",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "62f938c1-707e-44bb-be8d-464388061278"
        },
        "item": {
          "id": "399c9dbb-4b27-4334-8fd4-96e6e5dea97f",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "522de9da-6e77-470d-9a22-d14fff0f90a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78ee684b-ba06-4150-908b-7e05ac96206e",
        "cursor": {
          "ref": "45f1730f-bfb8-42c0-adb3-9410681c8a35",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "d0ae4ad2-deeb-444b-8029-6961c4805c7b"
        },
        "item": {
          "id": "78ee684b-ba06-4150-908b-7e05ac96206e",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "25594125-20ed-48fd-9c9f-261cdb0658e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6635b4cc-aa82-4b94-b418-e53908929565",
        "cursor": {
          "ref": "ec666636-3ec6-43b4-a809-e712555b6a1c",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "4d39b02f-3528-43fd-9896-f8d6a16f7c97"
        },
        "item": {
          "id": "6635b4cc-aa82-4b94-b418-e53908929565",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "42574c0c-de5a-4fc3-a226-2ac6e6c5108b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d74c36e-efd1-4d8e-9ccb-a63301150771",
        "cursor": {
          "ref": "85536aff-8f18-49c1-97c0-5d21f4d5d798",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "508b477b-beb4-41ae-b5fb-65b2c6067c7e"
        },
        "item": {
          "id": "4d74c36e-efd1-4d8e-9ccb-a63301150771",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "d4943f34-aac8-4624-ba35-e0c72e5c6dc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cfcebfc-dd18-4bfa-abd9-3ce04b4ace4c",
        "cursor": {
          "ref": "9c8b74a8-b83d-4058-ac0d-8b9384c5a1d3",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "58e39eca-1f55-4da9-9a16-6cc017ca9d6c"
        },
        "item": {
          "id": "9cfcebfc-dd18-4bfa-abd9-3ce04b4ace4c",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "81d25337-9c28-423a-a1d5-8406057cef10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2767b418-564f-45e9-8f55-3d341dd987ff",
        "cursor": {
          "ref": "875e1adf-7d74-4279-9c14-32ff44b1de62",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "734037cb-a72c-40cd-bf79-54d95fc2082d"
        },
        "item": {
          "id": "2767b418-564f-45e9-8f55-3d341dd987ff",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "882ccf93-1a61-458d-b3e6-a0de5548de34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eecec4a3-60db-4b07-9729-fe0e31c88e69",
        "cursor": {
          "ref": "a6e6d42d-bf86-439b-8496-7b193ded92f6",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "57666fe8-5497-4b25-bb49-19affbe325ea"
        },
        "item": {
          "id": "eecec4a3-60db-4b07-9729-fe0e31c88e69",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "4f4e370e-b2dd-415e-ac5b-516bd8ca5980",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1fc6a3f-61f3-450f-9835-3a1f83822c96",
        "cursor": {
          "ref": "893ce320-9d7f-44cb-99b8-1d406e7f63db",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "06f218aa-28ff-4b11-86d7-0082b1c49401"
        },
        "item": {
          "id": "c1fc6a3f-61f3-450f-9835-3a1f83822c96",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "822c3cc4-3b23-4439-823e-fafbedf09236",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b454b84e-fc05-474d-930f-c466f3cc2af4",
        "cursor": {
          "ref": "8a7c4fcb-bac7-42af-a931-cd929cd50c5b",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "f4fc114c-8bcf-4f01-ace8-0a10acb06db1"
        },
        "item": {
          "id": "b454b84e-fc05-474d-930f-c466f3cc2af4",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "8fe0f5a9-0311-426a-a31c-60834dcd0391",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8da7f92a-dbab-40f2-a3f6-8df84222e52f",
        "cursor": {
          "ref": "f2234b97-b46b-4b98-bd20-15b91c7a88ec",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "a112d971-964e-4e1d-b5b6-55d2364df94a"
        },
        "item": {
          "id": "8da7f92a-dbab-40f2-a3f6-8df84222e52f",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "b10fc8af-cfa6-48ff-b26f-3e2f99a45eab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5deb854-4114-4336-b056-ce0ce99dc787",
        "cursor": {
          "ref": "baf8e992-cdf8-407e-9932-f1ad2ad6ce49",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "e35d5977-284c-4391-8cda-817647b91e1f"
        },
        "item": {
          "id": "c5deb854-4114-4336-b056-ce0ce99dc787",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "8c5b3382-966b-4551-8636-8368d9311397",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e105e1b0-bab2-4d16-b2b4-24ac6a249d8d",
        "cursor": {
          "ref": "44f534bc-63f9-4768-be47-33ca42b89579",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "4977394a-1e8b-4db1-834e-d507b2de57b3"
        },
        "item": {
          "id": "e105e1b0-bab2-4d16-b2b4-24ac6a249d8d",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "5cf71d71-30f0-40a0-9c15-ed249f54e7d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8a3011b-9a23-4e02-b318-8b5017f667a1",
        "cursor": {
          "ref": "6f7d6b22-db3b-4c01-815d-6b9b43b51668",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "c91840d6-e0a3-4df3-9d97-557a032a0231"
        },
        "item": {
          "id": "a8a3011b-9a23-4e02-b318-8b5017f667a1",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "93ab4a0a-c642-4fbd-aefb-1b52e226d142",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cf94cfd-b2f3-41fd-b55f-7ffe322e2c60",
        "cursor": {
          "ref": "591c3605-b7d1-4274-acd6-c8c24407eb5a",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "119348f4-c867-44ca-8a01-767d3bc0bf98"
        },
        "item": {
          "id": "6cf94cfd-b2f3-41fd-b55f-7ffe322e2c60",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "531e6d91-4bae-4fa7-83b1-b9af0640e5e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a401b00-9237-4959-819f-5042760b2537",
        "cursor": {
          "ref": "a2a3dac4-3375-4238-9517-f96374a8663b",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "11deebec-e0a3-4428-9887-49f9b649eb21"
        },
        "item": {
          "id": "0a401b00-9237-4959-819f-5042760b2537",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "6ebc8620-9a6f-4973-bbbf-d69328d56416",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d36180b2-1cc3-465c-94ba-5663a4f57eda",
        "cursor": {
          "ref": "18974ac5-34be-494e-ad91-a6e9c2dc374c",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "6edfced9-5799-4c07-b086-ce0e62708c27"
        },
        "item": {
          "id": "d36180b2-1cc3-465c-94ba-5663a4f57eda",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "7decb63c-7ae7-4c81-be5f-e83d3deccbe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3baa66df-a7cf-4af3-a935-131a91444816",
        "cursor": {
          "ref": "ad54801a-ea09-4d08-bc89-2f09d07740cb",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "817ba326-932c-4b56-a0cd-6e3c5dcc9aed"
        },
        "item": {
          "id": "3baa66df-a7cf-4af3-a935-131a91444816",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "f9be5b4f-d802-4d04-b219-2e22123d79aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd4ef8cf-fde3-46d7-928c-2bd4e70355d0",
        "cursor": {
          "ref": "671a47b5-f9af-40b2-837c-67e52628d9ed",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "8fb480f2-ecb0-4a62-8189-77b4e67cfb6c"
        },
        "item": {
          "id": "dd4ef8cf-fde3-46d7-928c-2bd4e70355d0",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "34e1aaec-9f11-475f-8135-6f52dbf96832",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a5d16f1-154b-486c-bb07-f921eab76b33",
        "cursor": {
          "ref": "8ea8edae-59c5-4b48-92ba-447aff1509d9",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "d9f4b50b-03bb-4f16-bf50-261c13557e60"
        },
        "item": {
          "id": "6a5d16f1-154b-486c-bb07-f921eab76b33",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "a0287e0f-1330-4e04-8d1f-55d90a93f95c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "88b24eec-ae17-4437-ab42-bc376cebe67a",
        "cursor": {
          "ref": "2673407c-0830-435c-acce-0bcc27af4f40",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "54f6f47d-3d7c-48e3-a556-4844bd517c11"
        },
        "item": {
          "id": "88b24eec-ae17-4437-ab42-bc376cebe67a",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "c74ad249-3bb5-4737-8f53-2f32cc838029",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "2d099cb2-52f0-43c5-8e81-b1dffbbc5260",
        "cursor": {
          "ref": "5d62d87b-4d94-46b4-84ca-0921d837290f",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "bc0b1194-58b4-4673-a106-7669a378b786"
        },
        "item": {
          "id": "2d099cb2-52f0-43c5-8e81-b1dffbbc5260",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "f63c93fc-51f6-4dc6-9bc2-5a6405325a4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "22de1f5d-6fb1-4b25-ac79-196b53e29dac",
        "cursor": {
          "ref": "30a18141-0781-48cf-93f5-0b75cb111a73",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "b74f1cf8-3e12-4a56-bdec-97de8ebd25d5"
        },
        "item": {
          "id": "22de1f5d-6fb1-4b25-ac79-196b53e29dac",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "742cfb13-1d0a-4ab1-acd3-5bdaee4c1097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b49e91e6-f3d8-4297-8f8d-d8ed0cf1280d",
        "cursor": {
          "ref": "d103105b-af72-44fa-a025-a3ae6ea750e9",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "f9ef594b-8a14-44a0-aeca-41ffde572597"
        },
        "item": {
          "id": "b49e91e6-f3d8-4297-8f8d-d8ed0cf1280d",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "3ed8c799-00c3-47d2-8b1c-cda71711e91d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "4eb564df-dc8e-4de7-95f2-bdb29ede25e4",
        "cursor": {
          "ref": "501d1c85-4100-4c61-9356-d3437c6cf99f",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "f0845d25-87c5-4f04-9873-390a0d034aad"
        },
        "item": {
          "id": "4eb564df-dc8e-4de7-95f2-bdb29ede25e4",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "6b1b2fe0-5319-49df-b60a-b5c7d471325e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1209,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "6f514d3a-9263-4e9b-b4a2-e5d8f305d676",
        "cursor": {
          "ref": "42cd4bb1-9d0b-4ae0-a026-ebf29c5f5449",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "cdd84ca6-0e62-454b-b2df-b6e08a93da88"
        },
        "item": {
          "id": "6f514d3a-9263-4e9b-b4a2-e5d8f305d676",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "34e429c6-4ccf-4655-9f51-7e32b9ee0c68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 132,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "637a445a-3c2e-44fc-bc4b-003ca08fca47",
        "cursor": {
          "ref": "8814e9cc-22e3-4d83-a0ca-7eb9af7bd80b",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "03219d83-8e24-4b4e-a8c9-0017f11dfeda"
        },
        "item": {
          "id": "637a445a-3c2e-44fc-bc4b-003ca08fca47",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "909a6c47-39f9-4970-b34d-29d4d3d658cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "b5a05508-d3bc-44d7-b3e3-e33b4dc7ea6e",
        "cursor": {
          "ref": "2f9ce7f0-9bc3-4e2e-9ac3-91d91c438f98",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "6218b73f-e3a6-4be3-bd4c-beae23b329d3"
        },
        "item": {
          "id": "b5a05508-d3bc-44d7-b3e3-e33b4dc7ea6e",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "c9f3effb-7e2f-4d28-8bdc-4130c1b1913c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "82e45e13-6c8f-4699-8fe2-9d885046e026",
        "cursor": {
          "ref": "327599b3-9b5c-42fd-9b14-394becd3988e",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "5f43c559-bb08-4fe9-afbe-c66e94fd23b7"
        },
        "item": {
          "id": "82e45e13-6c8f-4699-8fe2-9d885046e026",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "c819976e-a1fc-44eb-a4e1-625f0e3fda3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "cea9b754-30af-473e-a050-882bb2cfb7e8",
        "cursor": {
          "ref": "20b854cb-4133-4b61-ad99-ac41b545558e",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "387fb78a-d55d-4a63-bcb1-541beb282f5f"
        },
        "item": {
          "id": "cea9b754-30af-473e-a050-882bb2cfb7e8",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "d902ecd3-9ea2-454d-b207-e8f5ce49c3e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49c1e3c5-fda4-4d73-b0b1-e93f9dd86cb5",
        "cursor": {
          "ref": "96d7208c-1a0f-4955-8919-b1cfebd5b7af",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "aea9cf8f-9c3a-4991-871d-23c4edac41cc"
        },
        "item": {
          "id": "49c1e3c5-fda4-4d73-b0b1-e93f9dd86cb5",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "c2757c00-d550-45a2-bd82-79dcfd9d7812",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d225740a-0682-4e19-ae58-7c9d8859019a",
        "cursor": {
          "ref": "7af36767-7134-4930-94ae-cfb3bb838d83",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "c014c4ea-7952-4f17-9c5a-1691107cecf4"
        },
        "item": {
          "id": "d225740a-0682-4e19-ae58-7c9d8859019a",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "cea27c19-2c41-4e04-8072-bfc288d32776",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97153e17-581b-4d2c-936d-319c3bec09c9",
        "cursor": {
          "ref": "158e2262-0127-42e8-9530-96685adcac84",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "31fa6550-3982-48a4-bee9-68b7204cbe59"
        },
        "item": {
          "id": "97153e17-581b-4d2c-936d-319c3bec09c9",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "269eadfa-0bea-437b-b734-da77603b93aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6796b9e9-36f7-48cb-a770-07fe41884ae5",
        "cursor": {
          "ref": "dc1c7fa1-a835-4b0d-8dbc-92272f431b96",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "ad5a0f1f-ee4e-4dbc-8b6f-4761a95439fd"
        },
        "item": {
          "id": "6796b9e9-36f7-48cb-a770-07fe41884ae5",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "dff67650-3d59-43e3-815c-e8b0f4827b0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94647813-f0ec-46aa-8f02-93c2aaa03dab",
        "cursor": {
          "ref": "d5825ccc-79cf-46b6-bfa7-70ddc5884cc8",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "880c98b8-d1d7-4c3d-8744-16bf48bef1af"
        },
        "item": {
          "id": "94647813-f0ec-46aa-8f02-93c2aaa03dab",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "5bfef763-c608-40cf-be32-943d7deb3784",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6318659e-5ef2-46ab-8691-de506be70c64",
        "cursor": {
          "ref": "b9b3e497-a243-4e43-afb8-161c80d9d67c",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "f8b6b367-72c0-4f00-afed-b7a299930a47"
        },
        "item": {
          "id": "6318659e-5ef2-46ab-8691-de506be70c64",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "2509ad03-6722-415f-8d93-3e470767526b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80b603de-c1ed-4ffc-8a63-94b71afbcb30",
        "cursor": {
          "ref": "8f35980f-6078-496a-a3a6-c56e20f0d781",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "98cfc811-d163-4e7c-ae34-2973118eace5"
        },
        "item": {
          "id": "80b603de-c1ed-4ffc-8a63-94b71afbcb30",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "c692b449-e66e-4fc4-999c-abf9ab4fa406",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7fe75a0-0afc-4e1e-8cb0-d4c10812bf2d",
        "cursor": {
          "ref": "9b5be46f-62ab-4926-8392-d99499dbd485",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "a8798ada-fee5-43ec-bd2f-fd3197093120"
        },
        "item": {
          "id": "b7fe75a0-0afc-4e1e-8cb0-d4c10812bf2d",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "4cb00ae7-55cb-41d4-9cd9-af3b556e917a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d5f912a-a4cd-46d0-b14b-b5963479d3f5",
        "cursor": {
          "ref": "e027c3aa-c967-4feb-b69e-b0cdcbf58b6d",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "8583b7a0-fcd1-4765-a233-baedd797c363"
        },
        "item": {
          "id": "1d5f912a-a4cd-46d0-b14b-b5963479d3f5",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "0995ceb2-db36-43a7-a96e-28f03c3c250a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "351b920f-bb72-488d-8aba-9ec6bbc4534d",
        "cursor": {
          "ref": "c4072e3f-dda0-453c-9443-8b8c73cc2578",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "42a0bd50-367d-420f-b423-174f2178c3a4"
        },
        "item": {
          "id": "351b920f-bb72-488d-8aba-9ec6bbc4534d",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "852868ea-603d-4119-8865-2cd0b8e55385",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a21e59c0-819c-4163-8bfb-af555fc48d9a",
        "cursor": {
          "ref": "3d05d42f-6c69-4c5f-9a55-043221b9a7be",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "dfd11fa3-a19a-4cfb-8d7d-ccdf5e3a1d75"
        },
        "item": {
          "id": "a21e59c0-819c-4163-8bfb-af555fc48d9a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "0a3669ff-2395-4bfc-94b9-e33e788026a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e450865d-f9ef-4ab2-9c5b-504a27c669a0",
        "cursor": {
          "ref": "aeea6885-41d9-4a34-b465-7f0f3e59cb79",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "b795b8a7-f050-4845-98d6-4084a9f94004"
        },
        "item": {
          "id": "e450865d-f9ef-4ab2-9c5b-504a27c669a0",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "17b54553-5535-4f7c-bb35-ff9f400511cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "751ddb01-5071-43db-8f71-954eb7db6de7",
        "cursor": {
          "ref": "bf628de4-b30d-40ad-b7b6-3ad4348b18e3",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "cd17e7bf-1359-42d1-8e77-a5df5bdf5cdc"
        },
        "item": {
          "id": "751ddb01-5071-43db-8f71-954eb7db6de7",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "f588d25f-69de-4a74-9241-7de8c3b9b1b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 818,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "2da3c21d-6e27-4ffc-81d8-2df4eb48f54f",
        "cursor": {
          "ref": "bc85b353-b0a8-45ba-9ced-d0cc1e93dc7a",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "d6eb5bb6-df9c-4c43-81c1-06b2b69a52d0"
        },
        "item": {
          "id": "2da3c21d-6e27-4ffc-81d8-2df4eb48f54f",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "cf0dd968-2012-4476-8d9b-b07f931f32b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 754,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "6e8b9bd8-1576-4f15-a1ff-3823c8a90ae6",
        "cursor": {
          "ref": "e5056c80-eeb0-43a6-a6e7-1d9c42e1a7c2",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "de1ea1aa-74dc-4efe-a28a-14fa8e8ce799"
        },
        "item": {
          "id": "6e8b9bd8-1576-4f15-a1ff-3823c8a90ae6",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "d37fbace-687e-4ba7-8e94-516beb68cef2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "dab531d5-0408-4541-aff6-39665ad63bcf",
        "cursor": {
          "ref": "044d3c27-e268-4647-8af1-6e81dc2cf6b6",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "f23be90b-ebce-43b8-bb69-adb7dc5dc31d"
        },
        "item": {
          "id": "dab531d5-0408-4541-aff6-39665ad63bcf",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "c6a58131-b609-4691-92de-6207e3edb9e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 730,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "f4470baf-8020-417b-8e8d-3c651992fa4e",
        "cursor": {
          "ref": "5c3a28cb-6a46-47a5-aa7e-59d5cb42f0e7",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "6c409300-a994-4e35-b132-916cd370df82"
        },
        "item": {
          "id": "f4470baf-8020-417b-8e8d-3c651992fa4e",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "36fbd0a1-6be6-45da-b5ca-b19b736782ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "1fe0534b-b1d4-40a4-9e75-b59383dd8317",
        "cursor": {
          "ref": "8552b924-6d62-47ae-856d-bdc25d43a484",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "cafe94c7-ea9b-43bd-97a6-7d49f62e7f7b"
        },
        "item": {
          "id": "1fe0534b-b1d4-40a4-9e75-b59383dd8317",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "170f8b60-be21-4259-90aa-4f8b0571fc81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2c67a7f-9d4a-4e65-b917-f9617dcae74f",
        "cursor": {
          "ref": "70b105c1-f24f-4efa-b602-decb32729f66",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "e2558a4d-7c28-4656-9a3e-6ea9e901fb4b"
        },
        "item": {
          "id": "b2c67a7f-9d4a-4e65-b917-f9617dcae74f",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "07af7deb-f68d-4f54-9403-80ceda62231a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "528da6d8-3eb4-426f-83e0-fdd7e0691e05",
        "cursor": {
          "ref": "375bf6a1-f7fa-41a8-a231-cebcc2bf93fb",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "91a70802-734b-4559-8c97-d1bd499a5199"
        },
        "item": {
          "id": "528da6d8-3eb4-426f-83e0-fdd7e0691e05",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "955a6cf4-3717-41b6-aa1b-a24c988792e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0106b81e-c8fd-4109-a941-5fe14d5db9a2",
        "cursor": {
          "ref": "d9e1b67c-feb8-48ec-b7bd-74e8910efe6a",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "237054c9-be8f-413b-884d-0c9e306b9506"
        },
        "item": {
          "id": "0106b81e-c8fd-4109-a941-5fe14d5db9a2",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "0ec1440a-91bb-442c-ba23-88479b0d5410",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d53fb03-37b2-4064-b624-5f92d48d3e56",
        "cursor": {
          "ref": "ebfb6981-4cda-44c2-b97d-31958b659b44",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "1bfb6ef0-e5ec-478e-af26-e7def9144dca"
        },
        "item": {
          "id": "0d53fb03-37b2-4064-b624-5f92d48d3e56",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "8bed95ee-b723-473f-a5b5-3e55aceea36c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9609df9-e056-401a-8a23-cc474ec7fae0",
        "cursor": {
          "ref": "f1c23eb7-dcc1-4248-a0df-eca198ee2e4f",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "7b1548fa-e563-45cb-9b4d-7b148895ffcb"
        },
        "item": {
          "id": "e9609df9-e056-401a-8a23-cc474ec7fae0",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "e917f8a4-776a-47e8-91b2-2abe5bb882bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6671e7cf-bc56-4f6a-9a3b-7219d81f7d4c",
        "cursor": {
          "ref": "3456363d-8837-457a-ba1a-7a7338ec24c6",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "7a45d6ed-a124-4cfe-b495-894dbf096787"
        },
        "item": {
          "id": "6671e7cf-bc56-4f6a-9a3b-7219d81f7d4c",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "4c4964b6-b120-4853-814c-70a33a56fc8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a1be29e-8872-42c9-803d-20cb0c2a7c46",
        "cursor": {
          "ref": "cc9e7482-d70f-4239-9ea5-8929dce05a94",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "24232991-faef-44ef-83f2-7975c5888e01"
        },
        "item": {
          "id": "1a1be29e-8872-42c9-803d-20cb0c2a7c46",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "a13ff9ac-bb4b-4a7d-8fc3-685c23d09003",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ffac74a-da26-4de4-ae8e-6393a884a9ef",
        "cursor": {
          "ref": "f001da03-8707-4ea2-ad01-6bfca941a073",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "a980f1f4-8fb3-4f15-8a04-19aef012adc2"
        },
        "item": {
          "id": "0ffac74a-da26-4de4-ae8e-6393a884a9ef",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "fd2a60d5-cb44-44ee-b712-be0abd9c372c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "303e38fe-5151-4dca-a5f2-3fb3db322c82",
        "cursor": {
          "ref": "f3a800f1-22c0-4046-8694-77f079f15554",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "d467c9ca-fe14-43c5-ba6b-2c2da7799607"
        },
        "item": {
          "id": "303e38fe-5151-4dca-a5f2-3fb3db322c82",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "0f1235e6-08cd-45ca-ab86-43ba5f1fe744",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a129003f-3758-44ed-b054-01707b8171ae",
        "cursor": {
          "ref": "a579e5dc-7626-437e-98c2-9b4320a734f0",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "bfc960b0-c20b-42c3-ac0e-ecb2a1b97d51"
        },
        "item": {
          "id": "a129003f-3758-44ed-b054-01707b8171ae",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "fdfc8485-4f71-478c-bfc8-d24b1917387a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dac3de13-6731-4c06-99a5-cb1c230232cd",
        "cursor": {
          "ref": "53670a74-537e-4a09-8a9f-139264198e74",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "4674ba88-1fe0-41fd-b6c7-165a66d9500a"
        },
        "item": {
          "id": "dac3de13-6731-4c06-99a5-cb1c230232cd",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "1d8c858e-79c5-4081-afc7-80c8abc735bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8b952d4-fdc7-4f45-8970-daba3065b219",
        "cursor": {
          "ref": "c8848124-35ca-4445-9eb7-b836f474ad07",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "f382599d-64a2-4dd9-982e-de58749f46bb"
        },
        "item": {
          "id": "a8b952d4-fdc7-4f45-8970-daba3065b219",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "ae62a2db-6435-4405-9084-83ba3e16b184",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83eb4a21-07af-41b5-a2ef-f9fd109ae53b",
        "cursor": {
          "ref": "07acf037-a06b-474e-83b8-622908a206df",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "87c307cc-ef8d-4d86-9207-e8fbd5313e17"
        },
        "item": {
          "id": "83eb4a21-07af-41b5-a2ef-f9fd109ae53b",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "a88e3c4e-d185-452d-8dea-1b99d27109c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35662547-e13c-44d3-8873-c15d6571bcf4",
        "cursor": {
          "ref": "01cf0544-6275-4bc9-99ed-ce635b79148c",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "40c970c3-7e40-40c8-85c1-b364a6cb3d91"
        },
        "item": {
          "id": "35662547-e13c-44d3-8873-c15d6571bcf4",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "deb67932-bd39-47fc-a932-1596e7872ea1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2e12348-66d9-4c17-aea1-a699ff07dedd",
        "cursor": {
          "ref": "da81cfd2-d005-4fd9-aec6-445f4324249d",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "692ce807-02bc-4a86-b6e3-4b76909a8862"
        },
        "item": {
          "id": "a2e12348-66d9-4c17-aea1-a699ff07dedd",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "b0cf6c4c-2a21-4446-8af7-6156a248a8c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4609900f-4210-4ae9-8880-640a19912e48",
        "cursor": {
          "ref": "26864b4b-faf5-4486-b0ea-501e7ab9ddd0",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "1ea05125-bff3-4cf9-89e3-32b9cc360205"
        },
        "item": {
          "id": "4609900f-4210-4ae9-8880-640a19912e48",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "4dea72c6-22ec-4a7c-8faa-02f290edaaa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfc76bce-74b4-4f26-8ec4-56d99a6fa568",
        "cursor": {
          "ref": "e3d7750d-9962-4098-8eee-c4d397369622",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "00a1d8d6-6564-44ec-90fc-8cd5cbf2d62b"
        },
        "item": {
          "id": "dfc76bce-74b4-4f26-8ec4-56d99a6fa568",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "1e147dab-92fa-4dde-86d3-1ec679e0d680",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5217c7a1-6daf-4992-9739-1d1ceba0f0d3",
        "cursor": {
          "ref": "2cff387f-9083-457d-bca8-bc2af0ce5e6c",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "e19d2cd7-b985-44b6-88d3-0408018e8cfa"
        },
        "item": {
          "id": "5217c7a1-6daf-4992-9739-1d1ceba0f0d3",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "b8b58e7a-71c0-4b5d-a6de-196127dd410a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afafb8fa-d107-4e95-817b-406fa6a5db44",
        "cursor": {
          "ref": "85c36bce-6a8c-48e8-8344-bd7aa306d4db",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "78c1f322-8647-4983-9dc2-71482a3b4820"
        },
        "item": {
          "id": "afafb8fa-d107-4e95-817b-406fa6a5db44",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "6f11fc80-8c61-4256-b090-6a33c8ce4592",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "413c8d62-0879-40ab-98d2-83a7d75e5019",
        "cursor": {
          "ref": "95c2765a-9c44-4c7e-b540-8bb9343a008c",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "cbf996a9-2a5f-4450-87c2-30f5803d50c2"
        },
        "item": {
          "id": "413c8d62-0879-40ab-98d2-83a7d75e5019",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "dd711603-af7e-4cfb-89d2-26e7f533aea5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd58b02a-3b01-4f75-98aa-3e5c92ab7cc0",
        "cursor": {
          "ref": "b2f7d683-a2b1-4556-962e-5bd52d9d0069",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "51befcec-770c-42ec-88ab-c68e8bbbd684"
        },
        "item": {
          "id": "cd58b02a-3b01-4f75-98aa-3e5c92ab7cc0",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "5f6928ef-91f9-4511-badd-d250ef9c9522",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1129e0aa-0733-4faf-b27d-6c995e6bce3f",
        "cursor": {
          "ref": "a7356038-5024-4d79-a47d-2edc378e3a8b",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "eeb3ac21-ad86-4f54-ae4a-4816b4c52afc"
        },
        "item": {
          "id": "1129e0aa-0733-4faf-b27d-6c995e6bce3f",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "94e18bd3-bcd5-48ff-977c-af457ed91301",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a003b40-365d-4d92-889a-d89cf023329f",
        "cursor": {
          "ref": "a607cc4a-09cc-40e6-9117-71b6892422b5",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "22bff6e5-703e-4e8a-87b5-9a0871a1b7ac"
        },
        "item": {
          "id": "0a003b40-365d-4d92-889a-d89cf023329f",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "1d9440f1-98fc-4a8c-9e44-8b2bf114ec0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79cae4ad-5740-4fd7-8bf6-deeecbcdc4c4",
        "cursor": {
          "ref": "5a0f095b-e927-4c77-beeb-e28f82d2c04d",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "b5722c68-714e-4147-a914-fcb0f4407d16"
        },
        "item": {
          "id": "79cae4ad-5740-4fd7-8bf6-deeecbcdc4c4",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "460ea148-e326-40d3-92b4-2f46c1dfd44a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae608fac-ae06-43ec-9abc-6db250bd8865",
        "cursor": {
          "ref": "3b928f57-5558-4898-aacb-6f35675589a6",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "a7923888-6203-4440-b697-1eb95c767e8d"
        },
        "item": {
          "id": "ae608fac-ae06-43ec-9abc-6db250bd8865",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "40d8dc2b-613e-42c5-8ed7-ef67ba3a61e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd5ef8eb-db31-4b97-bdf4-3c5ebe880b12",
        "cursor": {
          "ref": "027f33e7-f4a0-47f3-a527-62bfef84ddb6",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "406a186a-8168-4cb2-a32c-6843f15165c5"
        },
        "item": {
          "id": "cd5ef8eb-db31-4b97-bdf4-3c5ebe880b12",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "ff2bcf99-b84f-4aba-a7eb-53c4ef709801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7280264-ab6c-4cc7-b780-811ae0ba3836",
        "cursor": {
          "ref": "0c6b73ce-0e0f-447e-a4b5-202f4773a7be",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "8815ef80-2f0a-48c1-b9ee-2596faab733d"
        },
        "item": {
          "id": "b7280264-ab6c-4cc7-b780-811ae0ba3836",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "f8d25330-c057-4003-8537-331d65728f55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a89727bb-d23a-412e-96d0-901e386835a9",
        "cursor": {
          "ref": "2b5b9345-961e-4a15-9bf1-01dac2d57777",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "5ed9ba9d-d4a2-4a92-9e00-11a8139105af"
        },
        "item": {
          "id": "a89727bb-d23a-412e-96d0-901e386835a9",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "98e547ed-761d-41a8-a487-bf4fb6fb313d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b6700d6-3c80-446b-b64d-4374db598559",
        "cursor": {
          "ref": "6ffcf3aa-8f4a-43b2-9012-a70119cd22f8",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "f646e9d5-5b5b-4679-9fa7-25e9fc700a83"
        },
        "item": {
          "id": "7b6700d6-3c80-446b-b64d-4374db598559",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "446d3464-6c47-4731-98b1-21c04558b74b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "314bb028-f38a-42b5-85f4-2e9625c5c951",
        "cursor": {
          "ref": "7206ca32-9f6a-42b7-a252-cc5270c2b7b0",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "bf79923a-7717-4238-a632-38b228e2d4ce"
        },
        "item": {
          "id": "314bb028-f38a-42b5-85f4-2e9625c5c951",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "664ddf2c-259c-4735-97c9-d156101b5413",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "649ac435-95a0-4202-b144-3e8acb6f59ed",
        "cursor": {
          "ref": "948012ec-5440-4031-99c5-6f24983f0deb",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "1d996ed1-3494-498f-9ba9-0847e5e063ee"
        },
        "item": {
          "id": "649ac435-95a0-4202-b144-3e8acb6f59ed",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "eac7bc1c-996f-42df-8125-e4b93ddf1cad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3e1342e-9f31-4a9b-a640-e96751304a3e",
        "cursor": {
          "ref": "b50e37a3-e921-42c7-bf0e-001fb3e25f05",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "e3b561c3-94b0-4264-8da7-fe9156e53a37"
        },
        "item": {
          "id": "c3e1342e-9f31-4a9b-a640-e96751304a3e",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "da6a770d-0a4c-4817-9a8b-0629449560a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e61311bf-d439-44d4-a291-47135fc981c1",
        "cursor": {
          "ref": "96fed757-3492-464a-81af-1917700e89ec",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "8efadd93-59d1-4b40-b0d9-24bccd4e2f1c"
        },
        "item": {
          "id": "e61311bf-d439-44d4-a291-47135fc981c1",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "a216b0fa-49c0-478d-ab00-35dc7e124e5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4afa6ff-833d-45ab-966d-83e7ca5cf332",
        "cursor": {
          "ref": "cb916469-dfb2-40d9-81d2-793cbf24a0e1",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "0adeef86-e10b-4c1c-b44e-f02d76d4d2bf"
        },
        "item": {
          "id": "b4afa6ff-833d-45ab-966d-83e7ca5cf332",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "78df6816-e13c-4f1c-a89a-d0b7b6b8fa53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5e626ec-7985-498a-b0e8-5359ee4ed013",
        "cursor": {
          "ref": "5efda982-cce7-4e74-bc7f-6674f89898c3",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "d557f178-a703-4b42-af6f-71d807c82c3d"
        },
        "item": {
          "id": "e5e626ec-7985-498a-b0e8-5359ee4ed013",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "a517379a-c401-4feb-875d-9e6d2b35e0e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "154f964d-356b-43a3-8bd6-581d81ad3038",
        "cursor": {
          "ref": "7c0c646d-6a1e-48db-a233-78dfe8d1678a",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "eca22376-6385-48b3-bb9c-ec79e4482179"
        },
        "item": {
          "id": "154f964d-356b-43a3-8bd6-581d81ad3038",
          "name": "credentials_verify"
        },
        "response": {
          "id": "fa52926d-15a3-405a-bbdd-8a7934691a4d",
          "status": "OK",
          "code": 200,
          "responseTime": 844,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "83d41833-0c34-4373-8bb6-de8a714951bb",
        "cursor": {
          "ref": "ef8a900a-3ed8-44bb-adb4-36d9d33455a7",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "fb341c2d-5b33-43bc-a688-94d9838b1267"
        },
        "item": {
          "id": "83d41833-0c34-4373-8bb6-de8a714951bb",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "04f18ce2-0f35-4164-9a8f-24aa579f81f8",
          "status": "OK",
          "code": 200,
          "responseTime": 753,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d080c792-45b3-4a36-83ae-b5b879f665e6",
        "cursor": {
          "ref": "d1a0cf04-15c0-4965-b1bf-25fb8a2d5b96",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "2977c303-f9e7-42b9-87c0-c24c18ac8805"
        },
        "item": {
          "id": "d080c792-45b3-4a36-83ae-b5b879f665e6",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "d080c792-45b3-4a36-83ae-b5b879f665e6",
        "cursor": {
          "ref": "d1a0cf04-15c0-4965-b1bf-25fb8a2d5b96",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "2977c303-f9e7-42b9-87c0-c24c18ac8805"
        },
        "item": {
          "id": "d080c792-45b3-4a36-83ae-b5b879f665e6",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "07400bcb-d558-44c0-8d30-79797f7a829a",
        "cursor": {
          "ref": "c1ca5cc7-5acc-42ae-b69c-3037010399a6",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "3c921a7b-856a-47f5-97e4-56bcf443ac74"
        },
        "item": {
          "id": "07400bcb-d558-44c0-8d30-79797f7a829a",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:281)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:281)"
            }
          }
        ]
      },
      {
        "id": "6ed74c98-6fe0-4eba-9828-f75a8e882397",
        "cursor": {
          "ref": "85bde83c-bd91-487b-8692-bd382e658551",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "9472fd53-46dc-45ff-92f4-41dfa11f99b7"
        },
        "item": {
          "id": "6ed74c98-6fe0-4eba-9828-f75a8e882397",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:282)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:282)"
            }
          }
        ]
      }
    ]
  }
}