{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "91a6278c-6f6a-4281-a74b-6cc9f9cfbbaf",
        "name": "Clear Cache",
        "item": [
          {
            "id": "eb6df99b-078a-4f8c-a65c-34694691cbce",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "14111fce-c900-4b6a-929c-086212d575ed",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a49c2c4f-84d6-46f0-953a-e79d48323459"
                }
              }
            ]
          },
          {
            "id": "87c85249-a85e-47f9-9f61-b7cfcf9215a0",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "db900128-5333-422f-b53a-08b7167e6578",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "10fdbb38-eb51-4cdd-8aa4-3eec81830634"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "4e1f48e1-9259-4f16-9c90-fdb583bfaf9b",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "ee31975c-dc6a-4105-bb02-94ef30da3013",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fc8fcad0-be60-43c7-b7c3-bb6c39761d87",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eaa28c9b-6cb8-45a0-924d-93955c06e8b0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ef877124-af49-46fc-9fde-852683408e85"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f7b93f6a-1529-463d-a13b-ecc990d50df0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7bb1e64b-0e04-4404-8c9f-12d1a8082342"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7b3c877e-906a-4247-86b6-7aacd8867d40",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9b5462f6-d0dc-4b13-a9a3-440f712ddcf2"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "55d557be-d627-4d18-966e-5494cb05d74f",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "c6d3ff2f-28dd-4626-a594-c0fc89e0f153"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3c811f70-3b1b-4572-9012-f3baa057f0ae",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "35c8cad9-33c4-4cb3-8be6-b8095c015326"
            }
          }
        ]
      },
      {
        "id": "b2822a7d-86d6-4082-8b45-36827ae7eb3a",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "83191adf-7894-44c5-9a66-c0e106881dc2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "10b24526-1fe9-4a9f-b399-c1c1a834d28e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "fda979e0-11e9-486d-98c5-f56a968ed8f0",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa5a97c4-7aff-41e4-8a6b-354aca0b4690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "826e8783-33f9-42a3-8367-aacd55a3de3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3b2787f-8a45-47ff-bafc-20ba411b643b",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69723f65-bc8f-4261-b635-b5cd3d1b7418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "21ddd5ca-9d86-4784-b8dd-f9eb185439d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "873c1b4b-948b-4fe1-b25a-c4170c7c3b49",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e6a2995-61a6-4c7d-88ed-24e5f40ee189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "469440d7-3259-46d4-908b-34a3982c4611"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5bb46d58-69c3-4691-9389-88b46b639b70",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6d8963d0-b937-49a1-8168-e156676db455",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa416ba9-d83f-4380-8be6-70f6ab20b0b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f2bba86b-cdba-4e7a-9b76-f250e8740f83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c59b7b47-f731-4ccd-954d-c76f7703b966",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c12db62-181a-4185-868e-81a99d318234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "806051dc-b894-429d-a4ae-ab59349516c6",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1665372-f00b-4b35-8ca3-0c5a6c2ab2e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d26a16f4-b5be-47ca-b330-5d0edcc0a81f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c2b7531-3e08-4666-a235-4dc6a51cc436",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "e225d8bf-25a3-4898-82f1-3fa06db4d993"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2099b2ec-1696-41ff-b55e-6cebd03882a8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d949d3ec-223d-4cad-83f1-799e696f8753",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "51867940-50e1-4508-aa9d-7a1d8488a725",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "7a7062aa-b9bf-4d53-a93c-39127fd033c1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f2613e39-d780-406a-86e1-87e635e35566",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "0930a8b7-7350-4df7-b950-3a25f3bf3192"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "95c39690-f3bb-49bf-8acc-c372ce43adf3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ae57194d-392f-4a22-9866-a2e9e1c2df1b"
            }
          }
        ]
      },
      {
        "id": "1d7c562b-5963-44fc-8fd6-f7afc9e70715",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "4b92a762-198f-4d5e-b454-bfe19a795a16",
            "name": "Negative Testing",
            "item": [
              {
                "id": "73dc1c08-30ea-4d7c-91b2-f68876c0e103",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "ed2d1766-99a8-436f-9d0e-e7f9656136f5",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6edf065-2b85-4409-986f-a9b879035420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "552b6206-6cb4-4e41-9925-04bae960ced9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50af1027-6ae7-4f06-aec2-31bdaeadb058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9ddda3f6-dc64-46eb-8afd-0a16457080ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea9f6b1e-04ad-49af-b540-af1a9e58a9d9",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11dc2ad2-e70a-4d09-8b03-f2593bd9ccbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39912229-2932-43f0-91c4-a719c69d0369"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "251f6326-3916-4efc-98e6-d7eb11b1b54a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d41f85ec-e00e-491b-98e5-6fece599930c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51273e49-e70b-47bd-9183-54dfbc3b858b",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f203a85-1dbf-4650-9be7-bb30d6378be5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c26d2d5d-fcf5-4c23-b365-198cf68da492"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64ad4e1a-6f29-4318-9265-b54dcbe51be5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "afec8675-5e66-49ea-bb82-f0d9a6463c37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58bbb336-cf22-41d5-9e63-6b5dd1dfdcba",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00343081-2529-41af-83b2-6d9a72a79c5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a0de676-74b6-41ba-8702-77fed87c4c3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "397d3e4e-6073-40fa-a71f-fe9fc9d5f8b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b901e1a1-a6f0-4223-ba7d-2e08c171f98b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aa92ebb-6554-42ae-854f-b82cfb94e980",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8710c1c6-d421-47c9-90bd-effee4cabc96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5bfda03-27e4-43d9-bc6a-05ae9bf9bf3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "401e8a5f-3fc9-4b1d-8db1-2e4582e5a313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fa415781-acda-4e31-bbef-5c237ca59b04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6985037a-d4e9-44e5-9509-c2ddf7e1bd2d",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a514119f-0a46-42b2-b7a6-a976e68fbae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a78d08b-2eb9-48d6-bc34-3931859fa66c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "709d5680-44df-4d90-b2e8-c09d2025ae12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "67bee7e5-9714-4be8-a168-e5eb1f060632"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62bb3125-3571-463d-a5ed-9cbaff8df0b0",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a996e2b-71ed-4792-933d-3470d47fb996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5798794-006f-43cb-8fd9-6371e0d5e32d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "147c1109-4e89-49de-9a48-1827a1a05357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e5b7f162-e247-4247-89c8-2a1df481c5b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65034e24-e605-4514-a52d-6de4f1f16a2e",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aabf4443-152a-4db3-8ceb-6e0c1efdc09b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e04f95d-982b-4e40-b7ef-fdfbcf63c8e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbbb477d-060f-473e-a0da-42ffec526782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "83f1d7f3-e2e3-48b5-9354-5f0ef19baf4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8d8245f-3f38-466c-a6f5-edf947edd6bf",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97beea5d-a5db-4965-80c5-c84537911890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4904745-7160-4836-9b20-0afd90fd5598"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "870364ba-21b0-4f0b-864d-1f0b38ece287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3ba54879-9943-4e1f-9b86-ef2c69d86c4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab5a172c-368e-41ec-b876-d2e22c7e2536",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0adfcc5f-f382-48dc-b085-bd74124ff7e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e90a825c-8b0f-4802-a90f-76ff79c49292"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b4b6589-355e-4c9a-85fb-4ed3961ab84c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce3472d9-04c1-4ba4-9572-94b239e14d59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05c0922e-33f4-4a44-a822-5f482b0ffafb",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6cc5f24-91c2-4653-9aec-908bd260498f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a5d1e9a-356e-4f4f-8c14-ac759e68de84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1a4048a-0c9a-4fff-907e-c510f07cd450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7ba4a2e8-0b3e-4e54-917d-e2c645630258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e9bdfd4-3420-4401-9f78-c29c5befabfd",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61570553-fca2-4971-a86a-87817ea5a464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50dac250-1fbf-4969-961f-b5da6fd2cee2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71ae5450-7712-439c-acb4-0e4e3d32865b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce47d63c-8de3-4645-a1c1-50307fb10909"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61a003f0-c881-4674-8fd8-a23148a9408a",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0389ec0e-c5ce-4992-83c2-fb5def20e53b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd24ced5-59d8-48a0-adc6-c060d3cfe7cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6570994-b6c2-4051-881d-d08f60902f6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "617cb2ac-5223-41c3-9273-8b060bf620a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62d1cfd3-c48b-4a76-871c-980360ef8956",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "982a498e-207b-46ed-982a-ea8c9a6556f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "778e2f79-3e1d-481b-bb0f-4b31953c9439"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85ad6d61-bfc7-45b0-96e8-f0eb8aee9b57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cccf5aef-1e55-4011-81f1-82b8bad5df96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36ca5c00-3d6c-452c-87d3-2a4a06b5c2b1",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f47fffd-356c-4b38-a2bc-da13645ed4b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9433b4b9-bade-413d-b601-ec152732a18b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3a5cc2f-68d3-4be2-82ed-fbbd1835cbaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3ffc9638-9ffd-47ee-a559-e23c8be86061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3897b13e-9974-4d06-9dc2-92197347f3c8",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b255e673-8720-4955-8f61-c11f5c7481ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e30c2c21-a1a2-4152-b89e-1eeb3c2431c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc019fa1-f276-487d-9448-6ed9007158a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1e6740b5-320a-43af-944c-d7f6810c7e0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "648e8e14-064f-45d2-9114-263e619611ca",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "babc5be9-cdec-4eb0-ac37-ab6c6e75f8ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddac5e22-f09d-48b4-9c4a-b8abf2006ea7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f941794-380d-4242-8ace-6076fcaa5947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d6f697e-ca8b-4159-a1c3-e6a9d120f39c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d11f7b9-700c-4020-9193-fe0e0c609efd",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df890b37-8510-46b1-9b08-19ff27044304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44d03fee-b28b-4b3e-b22b-b67def08a666"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c5b97fc-0918-408c-9850-0de125bb5353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "863793a7-9ca6-4350-9560-0f98d0707a50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab1b9ee1-d117-4a6f-9f2e-d9ccebc99066",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abacbc69-d212-4012-b7f3-4b54d0e58efc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d3e6910-db21-410a-be6c-d57dbf363b2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44e385e6-00d6-4521-ad8f-e9d325bb7b0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "01bdeaf8-65d1-4da2-88ca-1c6c983c7252"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a01c8bc-e63a-44e0-9bec-deb418f71684",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7d016ac-7775-44d4-8850-3cbcbc303c20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af80d7a2-06d3-4819-bf63-6ef83b2d9a54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15418d52-1c26-4cec-a9f0-dd966fa8d524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "af271a1e-566f-4a5f-a7cd-43d46c750b94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "192b74aa-a6bc-483c-9283-e81eb4ea4a43",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f75bbb16-1ef5-4d35-a092-213c6dc3ebc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a01a4ce-edb2-41b7-abb4-1ddbca58860d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1e99ddc-12e8-4b47-93b6-7e805c02534f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2390420e-f966-410b-b789-fc592b3224c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd812e96-17d1-4cbb-985e-6e615b3fa73b",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6a00f76-7e79-44a5-b799-fd6fc1ad61e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dedea5e-404e-4c5b-96b5-42c19a1cc39d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "150c1b1e-0b08-4b3d-b0d2-0535b4123e94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "deb40c56-f699-4999-9edf-2c30e84f686d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf10e562-6ef3-4643-8617-e89e51d8a6b4",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70f72355-77bf-4185-945c-985d2f2f6b2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fab95943-aa77-494a-a0f5-edfd5ec16dfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab7afdbb-aba4-488c-96f4-5e46e1e1d1ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "73f79a0a-1263-49a0-b32f-3ffe37bc0f15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a04b1820-b158-4a04-919d-afc538e3048c",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3115520f-17be-4247-a269-ca98dbe05d34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b5c6616-e6b8-4c07-9f21-810fd5ba2dc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80c8ffd5-ef37-458d-b24c-9b3c40fdd950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "495a69e1-dbe5-453a-b8f2-f2d0dcf00ff1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f155ad77-2715-497b-9871-a0dae1f588d2",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "110d16a8-f17e-4fcf-90df-77d7fd6b2583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ace5c79-ba2a-4bd0-aea2-648548bd3fc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ad56037-26b6-4927-92c1-0a52376e2eec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bfc56313-8e65-4f81-8cfc-5f5f380d4aa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9dbd698-0be3-4983-8114-58b488a8253b",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44c3d2a7-ecf9-4559-b2ac-980f5bbb4e91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a927dd4-b28e-4688-974d-ae8fa294d7a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0024298-e03f-4039-aa44-2b34ffed5e9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca3d0fb3-9ab5-4122-a0a2-ea9f6169d2aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "109dd1d6-3c26-4769-a052-ea3c800c4c6c",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d886b42-d5d4-4ecd-b018-d375c8b43a93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86589c36-516f-4193-b401-8f111d5b0724"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53a9617b-dc39-4ef7-90f7-c4d869a602fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2dbbc890-2ede-4227-b7b9-e3b2e95956e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "785b9da4-e7d0-44b6-82fe-8b179082e627",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "901b1a83-6bb8-4069-b68a-95846b003036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37438b81-9220-4246-9f95-90535b66f949"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "434976eb-996a-417e-877a-8c74ea64bdf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "60968f04-f78b-40ac-98d5-072dc15076d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3bde68c-2d37-4f62-b29d-52c5ebd9d7d2",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82867f70-80a6-4de9-8d69-e677c14973ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16ba5b0a-f779-44ed-9fe8-90ad59a106f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b18ea3bb-04fa-422f-ac25-1d23dba1d02f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "57fa7b39-291c-4d89-a256-f2705f55171d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7ac9b74-83f9-4444-9d00-21fe3dcd440a",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49615997-a086-4b3d-9b75-a0635ddcd2c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f0a7ea9-5341-462e-bc58-9bb16533b6b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae621455-663f-47c7-8ccf-de8fddef53e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "46b46c97-876f-4dbf-9a5f-3bebf93a811c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5fd4c98-24ec-4161-a734-d531fc714154",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f86f903-253d-4c6a-98dd-586f4dd80d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08adc09d-a68f-4ff2-bd9d-71b418df7fd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22a6623e-ab6f-4045-af9e-6357b12b19d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "81ee6ede-3740-40ce-b915-6ef2f6d00724"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89b8da0d-338f-4608-bd20-dfc5ad8bf3c0",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad7932b7-f70b-4317-8057-a409d9ce19e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3431e5c-49c1-449e-869f-ca5f5862a929"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1db24da-2502-4452-98db-30c38facb331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b93487a0-b4fd-4eee-92bc-a1a7a31c82f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecde3538-1855-47ff-abcb-4c3580d3f2ca",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21bc5cac-ad22-4810-8e47-e793e17fa471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f35a523b-b0ff-4a8c-9946-473a4ad314d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14a74328-e1dd-4ca2-95cd-7302c9b7abe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3504658a-0187-4af2-8988-fbd018ac86a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbcd42fe-bdfa-47e9-937d-04e058b5726d",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ed02d64-e991-4b47-bc25-92b15bf95911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35367093-3131-4ed3-aec8-9e5d26e85492"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9e79c3c-0dfc-46f6-9b55-a04622a156d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "991bf11b-12d4-45ab-8c6b-cf7e5e01035d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccb01b75-880f-4a89-9c85-b0bdb55f64fa",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0674a11c-6793-4271-861d-bea5e475da72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b3e9c9d-ea26-4816-99fa-91f66b69c934"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6c81f9d-ef93-42d1-89bc-ba042b731314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "d956f3b1-ea64-4bd1-9d9a-ec1175af7578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e79774c-eaaf-4e60-8330-85903a704def",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "748b6721-ce7e-44f7-a293-3d561454cbf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fc38f0d5-2e19-4a80-b3b2-e717f3e64adb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d398217-62c3-4a18-b583-2340fe95e162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6d94c461-813a-4a92-958d-4b597d601ef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ac36127-e10e-410b-92f5-4fad07a12ae8",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2692722-581a-4e73-86e1-513fd25c7ebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3632f310-8197-4070-872f-588debd06f8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b3642c5-b060-469a-8a2c-60b9b7b45f40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f5bd8cd-dba9-4bae-af57-64b58f5c6d21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f08e86d-7609-4f95-8bba-0b342b16334b",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d488f44e-592e-4b54-9ce7-def93956c94f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "424761dc-8d70-4aa8-ba53-af274e380d50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5d57a26-f9b4-4ad8-a6e5-6dbcc12838a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "81d0eebb-37df-4a1b-b139-f90f4e3aff83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8372586-b1c9-4bee-b726-db6f73b4071e",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8eeac53-4015-4339-b2fd-152baf3af024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7454773-23e3-4fb3-a663-72151e1f49f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0baba8ec-2045-433d-879b-8f4f7ce83ad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0cb0d94a-a9d2-4c6a-b722-d05d5996d9a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dc86fc5-e0a9-43dd-9349-e76cd09de9f4",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89c57aaf-5941-4f48-9c6f-0ad208c64462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51f199bc-6e54-42e9-9594-9eb0901c27b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51142b9b-50d0-4423-a714-9015e773eb29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b8a600c2-93c8-4f0a-85df-1ea031e641d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f442d887-f03e-4275-a945-5bd67d5be7fb",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf8379d8-afea-4116-be6f-c9dfff7090de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d450f64-c07f-485b-b2b0-e599a48fcedb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "554aaa69-8d56-404a-968d-e80ab56c1b27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1a35b287-c75c-444d-b5aa-cf6d7a776553"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e5c6a05-29e3-46a7-b060-c4e0b1a7756f",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3eed720-f1e6-4a40-8e65-d16df96d6bf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8410baf7-3086-4c34-adaf-577297b57ae5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f516baa4-4418-470f-98fe-8a474f2d0313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "33aeb386-9f28-4641-b4d6-8de2cbd133c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e5598fe-ec0a-4438-8847-4af23e6ad0a8",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c9679da-bb5c-42c9-ba07-a443e7269b9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf66d140-8699-456d-b387-d6f0f962604e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb6ad74d-dad0-4cdf-b95e-1cc0902a85a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca84ac3f-5d32-4237-89cd-3e9dc6093386"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fae37ca0-bde3-4553-a4f3-9acb134ce7ad",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cacd1082-826c-48b5-a10b-662cd8f841fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "485da57d-fad7-4e12-86e3-57ded3e2b508"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2826e56a-c900-4063-bc73-6b3f79ba6e4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "190a4439-0b58-4eef-9f5e-3d2d7114b1cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cda155c-4f35-4a21-9edb-5c498698dba3",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "077ba212-fb23-441f-8e3f-1fd9b5be36b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7272d118-d1ac-472d-ab0e-1651d0b40a3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6625291f-3112-44a4-9ea1-c2507838931e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a443603e-0683-40af-8b6b-046e35104256"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8b23990-fbee-48f3-8c78-0193be99bac7",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afee752f-a2c3-4781-8010-269baec86c9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd0e5708-44ca-4bec-9486-298ad51b9809"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb1212ad-da00-47af-bb2e-bb973e824c7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "83143603-32e7-4265-808d-21d9a9f23fc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a00437f2-261b-46b6-80f8-aa89fc71b890",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebf56197-5e05-49c1-be38-579b8c149590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1697e6ed-38e2-4146-8486-f0b19621258e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "080b5144-f7bc-4d10-9bc6-04b49df26570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "23baecb4-3d76-40b3-8b04-795cfd27ad8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9343a1e-a8f3-475b-af7b-35f9e4fc32f8",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f541ed2b-6c32-439e-a4d6-349801205a81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3470973b-88b7-4305-b649-a2b0a39a939f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22480c11-a7a3-4f0d-a8b6-cc2f8822e004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "94350510-f1ca-4071-8977-96afb6dfc343"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8df8ecd2-58a0-40f6-ba26-4563411ad382",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "330d290c-0d82-4f77-bdf4-6f503ce0823a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f405bc39-63d3-4edb-8e5e-91cd904024b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fb8f881-cf28-43bf-a925-95700838abbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a4450a0-f37b-49ab-a2fd-c0961aaaf01c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50c8e0ce-bf36-4308-8b23-6a92584b002c",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "737eda21-6cfb-4552-b0b5-28ef477bbcad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dcd65a5-6d6b-4041-a2b6-ea7964f888e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58bc573f-4c09-4310-88e3-dd7ccc2d569d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bf0b2011-6ea9-4323-a822-00737709b491"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5810863b-462b-4e17-af8c-98d7edd9808a",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18273c70-0879-405f-a1a3-7f35a7c398b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6cb2547-77eb-43c3-8ed8-e65af6607cac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83dd64f0-86a9-4df8-acac-0df174746f57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd1d49b7-8667-43ee-895f-575c0461d0a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb7e34c8-06ad-4e7b-b083-667bed0d5c90",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed3a45dc-7606-45c4-995a-15c9b28f6cb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33dc293c-bab2-4a2c-9e29-6ed64d1b028d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "823376a7-3916-423d-bfb8-597b1711fcd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "76ff6b37-f2f2-4958-a742-6a6bf32a1af3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff8fa2cd-445b-4b7e-8b1e-0245fbf2f3cd",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a4605cd-b7d2-4ba4-8b2c-2ebaba8b39e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b627874-1e67-44aa-aa8d-57ceb52d14eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77fb6bd9-f63d-42bb-931f-cc6905827265",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e1ef4cc-0a60-4ac4-b8f6-3b08b1d3a529"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b5a4373-4b30-45ee-a7b2-5f35a573f839",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "267c09fb-e8fb-4a10-9235-e54ac3582916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20ce1f37-d4ed-4ae2-8a6b-70f5f9f12a31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aea75501-eb57-419c-8ecf-49a5f5332fe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "df962b80-d138-44e0-998f-29584f00aa84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fdf93d0-a340-4c69-8758-aa6287e256cb",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67082bd7-226e-4f38-a33a-3187a5949c25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d6de29c-a69b-4a0a-9009-aa691911583d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf48d691-b7ea-41c5-9289-9a2974f9052a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2aa7eee-b824-4eeb-892a-873a2e52d97e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ece1d821-5d3b-4040-9cc6-45013c20f465",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "447cf6cb-56eb-4ada-8df2-88f119548f03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f94b7641-2616-4293-911c-fc4acc5e32ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5233c54-ee45-4d29-aaa4-379e0389c4b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "123043dc-9011-4b5d-985e-636700c985db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc098490-6c8b-4299-b388-a644c3fd83a5",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d518138f-d7b5-49d0-89e5-b62627a8a5fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a3dbe26-0192-4c36-bb78-63bef88e6995"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a647269-dff4-4747-9253-b74cee043422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9116d358-0982-40fa-a370-cd1c1cfd7780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e1c38ac-bd31-4ff2-80a6-606adebee4b2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63a6238b-a3d5-4742-a01d-c4e10c5a7ae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1809ac6f-16e1-4904-b021-9076ef49c69d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1155327f-91a9-45e3-9893-69dc6a0a985a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c1eccf37-669f-4ddb-97be-af9a92366de9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "846063d5-42fa-4db5-b226-30643fb35a44",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "212e9c87-5dfa-4b36-b02e-ce140f3b61a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5741801-ddec-4aa8-b6f6-2b559dd651f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f87bedab-1562-4ac4-89f2-452888256295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "bad6d5b7-5abe-46ca-b045-ce5165fa06d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9a1dfa2-823e-4783-9c63-589a07fb8788",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d73cc6aa-085a-407a-b25a-182618338863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3498f50b-3a3b-498f-90e9-6115e5963a48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a84d4ee-c1b8-4421-896c-bc70ea8541c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8478e098-1c6b-4cc7-8f3a-8723ed38d2ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27bd7259-5ce5-4e3d-9bc8-a01a91fa35db",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "659e4047-86c9-47e8-85c2-b1e8c65674c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43803ba5-11be-4feb-aa4d-9fd93381901a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5d6a0a4-13cd-40ce-81b3-bec977b2e2e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d8bd4dd0-9ee7-4371-a2b7-8d32527ff435"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef0841af-7761-4fa3-8ec5-fd78c69b9338",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e679e823-2ef6-4379-8828-aafe26561932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5679e2f-3cf7-4490-8dda-4ed6bf6fd840"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdc241e2-5b5c-480c-9c98-87acb8d5f373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "6da9504f-47e9-4526-8698-3033b18611f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2ddcba5-ad52-4c8b-b3e7-41d3956dfa72",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16426dee-f18e-4d9b-85bb-33dd2743f5a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3038df2-0fc2-4b34-95c2-f3cb897943df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79127a3e-b53c-4e76-aaa8-21740ea2d802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a178f2ed-a8fe-4066-b100-e23e604ba69b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bda8a38d-56da-408d-a28c-ccfaa336e45d",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68fde519-df78-446d-a303-229a08b38961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb212185-2d69-4448-8653-40d0c62ab329"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8be1633-d9f1-4b43-96d9-ca2b38f58207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "763d61d4-ace5-4ad2-be77-e57b34fc6713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88ea3542-ac41-4205-acb6-c9126e41f53b",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d43f654-fa13-44c7-850f-bc603784cf64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "585f1a1c-6867-40cf-800a-84767d898386"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d6aa0a6-ac0d-46a3-b983-33245b35a7bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f384f77-de27-4241-ab82-639442726527"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bd6687e-519b-4cf6-949e-2a39f448ad0f",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a81cb35-b948-4a22-aac1-9bd42033cc8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "434db1fc-9550-41b7-8bbe-16fd16e91a0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de2fa073-f560-461d-9783-61cbf198b5a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e15900ed-7918-4600-9e9f-a346212ec9e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed15ea94-f5d5-4bfc-9c3b-bb500356e9eb",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f3543c8-d13c-465e-b1fe-6d5284ee4efa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fc86490-1fb9-4071-b88a-e57104e57551"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df2f1543-5f05-4775-ad34-f52725b9d8fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f6a9a61a-ab7e-4ea3-bc6b-259ae7629bf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0724ce9-3a0d-4c9d-9663-12020f5f7b3b",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13278f35-b610-4a02-91ae-29a13528ca47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a83e6a9-e1bb-45d4-aba9-b2d560d9cc43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8af6e8fc-de18-4347-9a2e-092ba3d120cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "121453d5-cb12-48ba-9d98-731612a014b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6003c525-f003-4f5e-a3b7-314a97648d3e",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e396b59-7fe1-495a-b1bb-7d0e17c75f34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca2ebe16-9937-488c-8472-f73bbda1afbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c2efaed-9890-4df2-ac74-cd274e813008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5418fc1-42d4-4e17-bd78-32874ac55600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0922e8ca-be2c-4d17-b013-71d103a1f4cf",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2483d263-3bfc-4517-8b29-0be14a58f0b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09ff3f23-dc86-46e2-8d0a-e4d6ad191481"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e2dab08-9de1-45f2-8501-89d255175cba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1b17794-3819-40f5-8b18-f8ce4636c5da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "add17e9f-d4de-43da-9491-ddcdff81627a",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3279e7a1-94e4-42f0-93bb-7d67b3cda43c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34200e52-1bb7-47d0-a654-c3c35764252e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b041dd6c-3422-4912-8a5e-ec2ebd003d26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b1285e2-871e-452c-b9fd-1c627ced025c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef2dc4f6-0be0-4ea8-a65c-5fdf0506fc86",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e613e25-0d71-46d6-8174-e7e1d68f0aa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc799eb3-3851-4cfe-9ecf-0599678d9bfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0c4ad90-94db-4d64-95b5-259f1f80811b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d5f06b8-5b5d-4f94-8731-af9a98ea20e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "997a34a8-345d-41fc-8b42-b12911c4851c",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "573f3859-e91f-4eb7-bfc4-31e96f5c92e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d1ffc93-ca72-42ed-9ddb-becd185627ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "635523a2-9cbe-4987-8ba1-260192333b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3323c90c-a7a9-4917-bb03-40aa8983fa49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a02cf85-e22d-4f55-85bd-33f47b499866",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ec003a9-5dab-4536-b9c6-22b97b502ac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52869812-f853-4f83-a802-92d53d7d7af3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c24b39b-27bb-44d2-9378-58564b26fe4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "356d9cd9-1461-45a6-b030-a62d7d95e509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67cf54be-3596-433b-a335-dd057a07fbc8",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31021884-2d94-4d4c-b056-a779d02b75bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0bdfa9e-543d-420c-8d85-41e2cbf6eff2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28a76a02-f265-4b86-a471-14d69ab39de2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "15d550fd-b5b6-4fc0-bcd6-c571fa72d102"
                        }
                      }
                    ]
                  },
                  {
                    "id": "278a4bb7-ce54-41c7-ac4c-0406e35caa5c",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee19fcae-6e82-4557-8655-f2f7294588df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "108f6a75-a5c8-4d3f-9722-10682481ea8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32a7340b-393c-465a-aa1e-656ef3ff4191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7dd70b35-0359-4c15-8403-d4c05f49288b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2c31f53-1636-4e04-bad0-a29397b5f358",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89afa63c-8f68-4768-b133-c9afc58964f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "808cb4c0-c670-466c-be87-0781e5857418"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68d16a19-a3ca-4fca-b6e8-a6dbce18d9a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2ed7971-bdec-416d-8a8a-0eaf26bfb8c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32da7e5c-0a24-4ea1-ac79-bf55c728e766",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78a78c4d-c068-4e13-963c-7f5d2ab2ed5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66b69f33-a588-42d1-a35e-abdadefeb32a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "244ecf01-c9a2-46f5-a52a-4190be3cd7b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "88848019-31f3-427a-97ce-46bf6d92e2f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "633cbbe7-7b83-4749-863d-d265712adf8b",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a595f6cf-14ad-49fe-9097-418db33dfba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfe0a92c-1439-4051-a061-fe7928802587"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca29c96c-cfd0-4b68-93cc-3394df010364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9c499370-c372-4cb2-9eea-eb0a24d7b530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93f95618-c90f-4cd6-ae01-1192c63e03ef",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7d89354-68f1-46e1-96ce-31b45a983cc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e88d572a-e6ed-4581-ab4b-dbc953e3e68f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdfe6f48-f809-4fef-ae08-67d8835ebfd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0a9ceacb-5bd2-4969-882a-5a7cc6322f18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "941d86fb-938e-49ec-adac-217151f0a417",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e769db94-6bb7-4f61-aa8c-2810b2f9a409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "475b8311-9e9a-42d6-a98e-651a2cacbf37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd0c117e-f729-48fc-92ba-cb960da195c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "03846d2f-b644-402f-b929-da6ffddea082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0488c5c-c510-47b4-80fb-0dccd77fcf1a",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41d4d4de-c40d-4d64-b799-da1e1031f3e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5455ba13-bfe4-4e91-96b0-0bfdbacdb70e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "739c3d5f-7022-4002-9e83-5ccaecf2fd5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "59646ec4-778f-47cc-a961-18c7b19452e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5048c7d7-226d-4f46-880d-0185064a8fd0",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2540938a-f40b-4fb6-8eca-165289b98e28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7c56608-cb6e-45eb-8626-5b7598a0c861"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b29dd4bb-d778-4a1e-90e5-0f246d91e70c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c591d58-58d9-4310-a3e7-2777200f60f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b00231c8-c0cc-4eb5-bea0-a210189324ef",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54a7b26f-8274-46da-ab1e-8015f9d1def4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ccadda0-b922-4611-a08e-c841014b9bb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04f98683-89d0-4385-a045-ea0a57878c37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "63cd50e3-53c4-4465-81fa-a41e4c44499f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a551ad81-925d-44f3-ae14-b5d7ee4294c7",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8f30519-5261-4f54-81cc-3eae602a7baa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3394a88b-805e-45f8-9834-fe240645a987"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8543b7d5-a920-488b-87e3-10600cf2adc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "67acc60f-d779-4652-8808-601e4e45a3e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66dbd9e2-a2af-4957-8c34-8ece8e7a6a36",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e5e80af-2536-4ea0-8158-f1e3d40c7397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2c1ddfe-ba3c-468d-99a1-5bb4faa0491b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9e28856-6cd7-400f-8b1d-7ce88450ec5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "28818c36-ef58-41d1-819e-13c9526dcd93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f6bf715-2ae3-4739-a6c5-08677ad8f257",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17eae9ee-5001-4e9b-89e5-b391c957b04e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "376ff6f8-6ec2-49ec-84f1-0262f25303c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0abf13e8-ee9b-4f1b-9d97-f9fb747e892c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac38df6a-e3a0-43d6-84de-1afcba4be28e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c17d6f6-2441-48ac-846d-574b6690e604",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79d0ee16-d9e3-4e40-b7f6-f69a9b85e7de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6cd1bf3-54b3-4f5b-a1f0-d4efba26a9ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81977523-fa9e-426b-8137-a8bdb50671d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "217d18aa-9d88-4454-add0-b26cfafc4679"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06536177-0b93-49b3-98a1-2e8d5f79bed5",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf8def0b-f25e-43ca-ac96-58f13461f665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fa4c8ad-1184-4686-8536-7de9d7519d40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1ce5e55-92ab-4c80-b20b-11c5f8356d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "33f1ba1f-d94a-4858-8d99-74a6bc334d7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3118da54-78ab-4b5a-92a9-e9ad70b39a99",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31c0f5d9-8ff2-4980-8d08-35b993c90e38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "effd401c-7607-456c-9afe-f8e05e95236e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d45c2cb3-6027-494d-a533-a1e7bebfdb66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd9a0bdb-8325-4d34-aef5-209776f115c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0aaade5-9bf4-4796-920f-a35768b616ac",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d95f1604-0155-4eb2-bed2-669b66165dfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc73fa07-66a1-407f-957c-758eaede8cee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7b0a53d-633f-4e6e-9224-ab80e8215393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "74b4d7df-6be0-4c45-a872-857f275a1c60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abd2896b-bcf1-4186-9058-56857b9cced5",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ccf5bd5-da16-42d5-b31a-b37723138d8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "b20766ce-40d2-4bbc-abf5-eb77a87f6be7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "192f9768-a1dd-4d4b-b3d1-4ecb6d0e234a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "64d4eaf8-3875-4eb3-916e-a7eb370457b4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f0cb2f51-2389-4a29-9ce5-2457b446aa51",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b60b91df-7002-4ccc-a4e7-10e10c68f5a2",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "512c1505-153a-4694-8429-5f6bd2a21c52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e6606486-54f2-4923-b0f3-93fe67f3769f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65e4c5d3-339d-4ec9-b2db-69405a71d6e1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "8426ca26-1d17-46da-8acc-6a95b860c59a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aaf5254-3254-4bdd-a307-2ac563a473db",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33d44ffa-dcf3-4f45-93c3-e80a64e17041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "daccad6b-bd16-4076-aa79-693a8ac4a75a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bf606cc-d700-492e-97a4-a927355ea3ba",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "1a4588b3-ff4b-4cf5-93b8-0df55d6647df"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0d617910-070c-410e-9f8f-e3e65a41eb55",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "885501a1-78ba-4e74-8b1e-9a15b296ef7f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "08d6e040-3b48-4eaf-b6ad-7723ed47ee52",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0fd4642f-0701-4e01-a072-1ab0e0a07521"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "34d06c74-54c4-41de-b136-fad746b33475",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7b379972-247d-4a93-a444-5a8fc3ac8b23"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "509419d8-63dc-4ac9-8f8c-60f0a11c0b7a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2a9cb655-e31d-4d31-83bf-887256d3348d"
                }
              }
            ]
          },
          {
            "id": "fdfedc76-b3ca-4819-98e6-80a0aacdae19",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8f72105a-5b0d-4d63-8ccc-0feadfb672a7",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a83caf59-9f05-4a26-bf52-5487083f80c1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "81e723ed-17eb-45f4-9e71-9a39978fd7fb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "066f206a-5bf5-42cd-abed-40458d37ea00",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "64935432-5b67-40a5-98d2-71392e481c78"
                    }
                  }
                ]
              },
              {
                "id": "4344b3e0-0141-463a-b102-dabe70e23b5b",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "677bd731-b377-466c-b790-c39e891b7ada",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "14fa127e-a98a-48e9-91c3-1dac03af2a8e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "35212458-b876-4229-9a2c-d44f29a4cdfd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0ccc8aa9-bf17-43a7-924b-cf18d3e78d07"
                    }
                  }
                ]
              },
              {
                "id": "f5107f3c-8663-4d16-9671-694b2279f47e",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4b581452-e762-46d8-83ec-fb71c876f761",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "634a7b4d-05ff-4afa-95b0-a267c687a4a0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fa82951d-d856-4d7b-855d-660efe80c685",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "b82cd093-b54c-4f36-8fd9-4c4e2faf95db"
                    }
                  }
                ]
              },
              {
                "id": "c36ed9b0-46e6-4ed7-8beb-b27d856e2879",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2bc373b6-04a7-45e6-99d1-d0b527f934f4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "aa568db9-7317-4356-a350-104dcec9d426"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9caf91ed-6490-4d29-a360-974babefcaf8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "2e74b143-806b-47b7-bb84-531dd6d12796"
                    }
                  }
                ]
              },
              {
                "id": "7cee117b-a72b-4f9c-8b3f-93cfa7b0fc8a",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "37d005a3-e642-479f-a337-5443864a0f79",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8366c4d6-c3ac-4b0f-8b1c-77af96a97052"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "14694c52-d37a-41a5-8885-72baba037111",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2ad1edc4-15e5-4dc5-8b15-f076e598b481"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c7953df5-ac2c-4634-aa0f-9c640dab9364",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "694b3234-5198-4a65-920f-6980e598ecf8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "75591131-4273-4763-90c8-a7fdbfbbb7c2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f49e3301-4f34-448f-8ce7-f64d953776ba"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "48f5248a-ea19-4a3e-b0af-de1f7be20164",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "9e3d54bc-0d1a-4405-ae20-93e57197b72b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "007ef4ab-6f71-4e40-b917-6c088efc323b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "16e50210-134b-46cd-9b00-541a601a555d"
            }
          }
        ]
      },
      {
        "id": "d19adb67-4af5-4205-9c91-8fa19cbed75d",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "32736ba2-2f23-429f-be5b-18b9f3455c6c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bf2f8226-4149-4b52-957a-8c1e1aab01a7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f4e7024e-6699-4ab7-9f06-a3144d4407ce",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "620926ad-8d8e-46f1-ba85-5ee19181c1e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc4fc126-8744-42eb-85eb-33b686533f0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4929ed06-40b8-4d64-be42-431e68e8ff5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "840ddec9-4f0c-4855-8ca5-9206b60e129d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ac95507-f3dc-46da-bef4-8d3574b32864",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c36b45b8-9934-4f4d-9ee8-3931ee1da0e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ce30e99-feca-416b-af38-c9c1891642ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49769cb7-5862-4344-8078-dcd47f005240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dcde2f23-c58c-4cb2-b3a7-5583556058b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63220c12-85b3-4286-915f-ad8cd8efc8d2",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7b053d7-85ef-468a-87bb-33f0d232480c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5cc3d58-27c1-4ee6-9930-3cce03ab9d41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25c17bf7-87c0-4c06-b5ae-44227c6fc504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "694469c9-1fb6-4bca-91ff-71bbf97161ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a63affc4-ab95-47a7-ae75-158dd65874c1",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d51d390-6418-4bfe-b40c-ea6b445d8558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8ea60c1-3ce0-4689-969c-44b003798216"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "678bd766-e694-4ca9-8785-4ddd42bb1d5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bdbbac66-5021-451a-8ffa-479557f7809b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff5064c8-1824-499f-857d-188082d31fdd",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bf68521-c23f-43dd-8db0-3207178a8d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d822a2f-9b8b-48a4-8746-8699448b6a75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ec730d5-c354-4d21-873a-99023433dc6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b43a6724-0ab7-4a7e-8b2f-b6731b35480c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7160beab-c342-4d5a-832e-120d7f5b41bf",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d31a573-01fe-47c9-ad0a-946fd51a107f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b92eca4d-296f-4c9e-95a7-a7ad1512eccb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db94d1c2-d33e-4221-9019-4f79f82bd118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "510f0cb8-00fd-4606-9c13-61f4184fa408"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e69606f-f303-49b9-b891-7e2bf13d87f8",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "453db59f-6d79-435a-9fd1-929ca587357a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c7f3894-93bc-4e77-a557-37bca6d908f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d53fb7a9-5aad-438d-8fd9-d095c51cbc3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "40d8a976-4ff9-45ca-899c-9ecb9b3789e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af779863-a00b-4e5e-8938-1e2383460344",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1504a85c-55ac-4bda-8631-c755dc41d8f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de498bd0-02e6-4ba7-a4ca-1412fc7bb6b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edbdab08-913d-4664-8b44-4b59cf111c61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "67cc7e4f-f029-4fe3-a332-7532c95164ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "141cfd6e-5941-4f83-8ecd-ad130976fd76",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6066adcb-4241-45b4-b409-022cc6e198c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c73eba65-57ab-4c27-a9a6-67c104c9d82f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89247c19-4e2f-46cc-9580-b75d15b94d98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7829ce0-cfbd-4eb6-8098-a0adf22881bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faadb628-40b8-442e-b4f7-56d5707c14dd",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14e6cd00-91e7-48be-95a6-427d87ae17c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5e65bc5-0efb-43be-92a3-699c7b91b36e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e3385b6-dc56-4fb5-a09a-3431e3630eea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "688d454c-1624-495b-ad30-a3f06febe0d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50fcf8cd-35a4-41ab-89cd-b4ff5b472625",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f7122ae-d46d-44e6-8939-c19f332ef305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05902543-a954-416a-9499-252a4c589617"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18e45ca3-fa1b-4378-87b0-ed3fcff4334f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "01743eeb-41ac-4861-afda-0267604a6cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "917076f5-45ba-4750-8627-3eebbd77bac0",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "684244b9-74a3-4689-9010-7bfad34f8a9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c999195d-4266-472c-bd36-40ef3828ec5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bced242-1366-4179-a312-0b07918bd946",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "41583e34-e1eb-4858-babe-4933cf009570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b54ec0fe-d881-419b-9a0c-425887109925",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "259de022-acec-4949-8ce7-87738852dced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "195de006-bc3c-4e06-9c72-6ac5b1d4bbdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15bb4d2d-a2c0-45cc-9da1-d2b649256700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "913469f0-b78f-43d4-95d9-81ca89df32e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1d051e8-b0b8-424d-8937-39344a9e8a13",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14841b7b-3b42-47db-bcfa-2bed45c53f88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c592760d-ea79-44f7-a413-26cd2f910fae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efcbe299-ba23-46fa-a001-cfb58c0651ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e7bc411-671a-4267-85c9-683ab054cc49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb664234-6971-4621-9e6a-7c2bf4822b8d",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59e01543-5a07-4c59-9907-72e020cf16e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5c6d55b-d4a4-460b-9798-f3d18bfe6b03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11ec6ee5-7f49-44bb-8380-5c083a02c394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "afc563f0-3446-4afa-ae90-ea1b36e6641d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9407863c-7448-430b-a040-0bc9f7967891",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "618b34d0-dc9f-4e9d-8c6d-36150a5da4fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1613575e-57df-4fc1-b945-3240ce7fcf9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5809b7d-74f9-4d24-9ef0-8cc52ba15f57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "dce3603c-0dc8-4c0c-8185-47c145436c81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a40eb31-88ce-4cc4-a44e-f1c790801250",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "545e974b-af82-4303-b5fe-06d812dd2420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "951bcf33-2c99-4992-bf54-c9a8c282570f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d150f167-f1c3-4703-a3aa-1891cf04d446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ecdc86f5-1fbe-4511-8a32-67979228b065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52d50c94-a4d7-46a9-ae24-aeb447162a6b",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4869d946-ea37-4e65-9d65-5419384cd232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee452443-24d5-46d8-b3cc-4802f30fc809"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d055297-ba9b-4b53-8924-d6134c4fdafa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d0b1b78-b59a-4191-ab79-22eb38588791"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7e931fc-8226-4280-b0c2-2a8fc9da0d41",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff20959d-9906-4012-9f21-0192f89a3d6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ebd774d-9520-407d-be25-c4a25a22618f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df52ca43-3be7-4bbd-ad79-7641777fb518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b56c894-ee2f-4a70-b2a7-99a964739a8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8c22340-82d7-411a-a3cb-08ac2d7f03cf",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad25060c-d04e-49ee-81e2-a6aab598e0a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f9cc900-cc21-44c8-9b03-7487da832263"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e54d333-3d97-44dc-8dd6-43e5fbcb6b90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "200cab81-2444-454a-ae5f-1af7ae3b59a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35b16180-b980-4d15-8b9d-1f43d5e24648",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf438661-ceb5-4853-81a3-7195612622ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14b7b5a2-be74-4371-a337-e9b2f854f0bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45dd35d7-be51-4fa7-a005-1d76d9b5c425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "345db768-0b70-4192-b386-893f4e25e078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ac227a6-34ab-4572-8b1d-6b476e0522fb",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35951b1b-5535-4cb8-8aef-f45115c13c68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c31dabb2-ce7e-414f-9852-28fe9e8d3c80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57163afb-0c1e-4b3d-8b59-284962b468ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9db08d5b-c5f2-4774-a48a-5d71ccd8d6ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8943c38b-c3ce-45a8-bdce-3f52bcf0f71f",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "946cb1df-a80c-487c-90a1-0c26733d833f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04347eb1-a0a3-44cc-8cdf-6e6c01b8bef7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bc05a6f-7e78-4ee7-b9b6-74b9233d2217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "41eeca35-43b3-49e9-bf49-f15de161c7cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e352f565-4f00-40ed-a91e-ee35fcb4c664",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaaad88e-bf71-409f-bb6d-578225f72496",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "060ca61b-361e-467d-9e67-b5ce499b7670"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca220fc9-a7c3-4553-91b4-98686e3e7002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2821820b-1b48-4a96-ae57-0235496961e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03e2dc24-e9ff-4769-8172-1d4a834994da",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3eefe06-1185-4985-a10d-930771c79b09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00c2bcf6-7cfc-4dd1-a56b-bf65f332435e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81124c18-cdb6-4bce-93ce-bcc93f564a46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec186312-857c-4ac9-a1a8-54b83ef0793d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbd043cb-36d2-44a2-91a8-d5444eb18cf0",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec55463f-2d79-46e3-abb0-ae53a4550037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e191397-c65a-4a7a-b8cc-f2b370dc79e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2b12cd4-4d79-464c-bf6e-a5c01cc4f9b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "41c89dfb-6aa3-4964-af9e-db5a1d178830"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5450ef75-6389-42fc-9db1-0c25177e31ee",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3b4a3d5-dc11-4cf2-967b-2b301138e607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2f6a944-14a9-45b6-832e-62d5d2dff556"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0126c15c-e998-4b13-9149-5263f063b5f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5366158-a09b-4ebd-af25-9f702342bce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9a7acc3-a8fc-448f-9f46-2b448f809bf9",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a833a7fd-362c-48f8-a949-e4b7703af526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0c35e4e-cd74-4683-a324-11ba8612f224"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04f96f01-13e7-4493-a07d-344d6cf4c60d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ee3bb69-0307-46a2-b6ef-40e550569aa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62c8fb01-5e2d-4d8f-bd68-2a8376dfb0e8",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78852785-f863-4247-9bf0-bbe303db2a00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2345da8-1bd6-4611-8359-37371fb11f7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd78e3ae-35ab-4fdd-9a3a-cfbdb99a6b1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07f5f1a9-db4c-416f-9762-9f4e9e08cecd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0af7dafe-4308-4e67-bbde-ee6d58d642c8",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e75b9600-bd40-4dc8-8654-aadd5c68a0f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57818189-59ef-4df3-809d-ed07da026edf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "822d4e71-7136-4c6e-bb7b-088f25dc4983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f6101a1-5245-4df1-a46d-147aff1deef8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fb3bff1-8cdf-4cd1-91b4-03d12065860c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbd7d292-0edd-4883-aa1c-943dbdfce778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af4bf725-5855-47e2-ab96-4e109767449c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69355a22-a986-4e13-939b-6ac6b5f70770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8cc9323-91cd-40d9-9baf-8450bc82705f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d79e8f2-2c02-45f2-a5a5-e0e99c861b0a",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "058c5857-c0ea-4b2a-94a4-c1f4ae10014c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee9ccd5a-8601-4dbf-84f6-0e6d670659a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "106ac02b-fb56-4789-99c1-171cd0c8d1c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae2aa481-a9cd-400e-b24f-8152bc63cb47"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7d893c57-826b-4e69-a46c-8bc3057a4f80",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a36c8a27-da2e-4278-81ae-778628c8c94c",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23ebc2bc-fdf7-4be7-8bcd-5207b9be667a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe9c0187-b4fb-45e7-9c58-d83e8c133523"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33a7cd63-5bb5-4e0a-be14-3b4fda2f5fd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a2fa1d53-2a6d-4b1f-88c7-ae4faa39615b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f28a140-1b96-4225-b711-87a6696311d2",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd1440d4-ffd1-40f4-871d-3552370dbf3b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "4ce564ab-887f-4f5a-9c0c-3f5f23588956"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2421ab83-ebef-4bd7-9c99-b97375e29a19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6e4e2518-832a-40ae-842e-66a911e5e281"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ee92b9cc-3556-4225-9255-c959d313b6e4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f049cdd5-30c0-456c-8544-6546d1961086"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "541307e9-ae2e-4b3b-b154-4093c83cac1f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "735ad355-978e-4fa2-b236-76b88565783a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "757b2971-0a45-4ede-80c2-64a2fc77f914",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d6fb5aee-21c3-4d18-aefb-0a8b009ef82c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1dd86fa2-f425-435b-89bf-1d904d6c1004",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "88e234ee-0da1-4e69-9368-07f893eb3d65"
            }
          }
        ]
      },
      {
        "id": "77792164-1a15-44e4-b0fc-c97a55602742",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "2d81f88a-b615-4cb9-af0d-f87fe1717e3a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d90391a7-4feb-4f67-8333-7a139722934f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "98f49009-aa2e-4e39-9cd5-f9a42bd2fe5b",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "208936e7-f445-47b4-882e-243707c697e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf27e5eb-0acb-497c-8097-76bd06b34557"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96fd5626-b905-49f1-9dc3-51f7e2f2ccb8",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93d8e974-0afa-4252-bc8b-161d0c85a0fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79d0176c-13a5-4400-b4a7-5c2ead64b1c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7566c27-cee5-4ee3-a9e0-f8c1445ae4bd",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c55cfb54-317f-41c2-8879-c944a865eea1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74e95503-a2c6-4542-9ec6-27ab8cb2c774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6058948-48ac-4741-9165-d8d2c463c4ba",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37c6af3f-e1f6-4462-b863-8551a43d8f70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa16111c-909b-4193-8301-2b9efa01cb3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70368c82-fa56-4ebd-a292-bf90095258dc",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06c6c248-cb76-4fe1-8b35-d3b774871c65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f941ce19-2bf4-4903-b484-1a8c6f2c4d29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5184444b-ce1c-4592-9e58-069c6a9a7c83",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a940941a-3754-4d10-90a3-8204fef99138",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1be0708-4c28-4bd2-9a50-8fbe258f586c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f9c4f7e-f8b2-426d-8bd7-a2d1d958f946",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe7be588-c799-499b-8d8a-59deaa35a504",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b405e683-5eea-43c9-b4c0-12c1e9520392"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b94cd286-957d-4ad8-b9b1-b6fdd74a6e23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a531821e-4ea8-4577-a1fa-a96ad248bf29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6224396b-dc36-4616-919e-c348614fcbf7",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcd484f7-3aeb-416e-939f-5a45dd2c1d17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac33679d-e38b-4df1-ba66-8763fd86b868"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73a521f7-d75f-40d8-b9d8-5b88df369853",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b69b536-30db-491b-b449-afe9cca0d5a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78648bc6-a6d9-41f4-aea1-1434efa526b5",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e0932ef-5e0f-4e87-98c4-eaaf4ad32286",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e1e11bb-82b4-4f52-9681-d24008161dce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb66a861-8aa8-44f3-bc88-db86899d7394",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3988b54d-295e-4594-92c0-07d3463a0fa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65edb666-d0e3-46be-bf41-2cd925b999d3",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92494b12-da87-415b-a912-8e5f44a3fd5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3bc5b56b-a4f5-423d-8ac5-db01de7244c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9666275f-571d-47f8-98f1-9c7f69b0e883",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ab895fd-364b-45c7-8017-902b11b95671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68d11a46-2e37-46bf-a007-2d8e662e14e3",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c1dde7f-1b79-47b7-8cbe-d83fa43c8f48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8eb3bc16-0692-42c0-9418-5be96861f0e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76e23c5a-2a28-475b-9e32-084751dc76a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86165903-d469-4906-ac26-0b78265faf33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0266f0b-1cbb-4c0f-9bea-430d9185528a",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "086948a8-f33a-4b4e-bbcb-45d2a5c85eb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc6f8dc5-299f-4632-a030-4fc25a07dc21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "043e06d6-68b6-40fa-aa70-f5fdd8f63cd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "429c4967-5e66-42b1-9d71-82585a55a9aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90e9b17d-7545-4783-9569-da3ce374752d",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fd3d249-dda8-428f-87b0-802cafa91f8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbe19ca1-9df8-4804-9279-d6e27da0ad86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56c0e08c-d45b-4dd1-bcce-03004111eeac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "598cb9dc-be83-4cc1-8e08-a65e4a727543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7216d6dc-9e6a-4c73-b9a3-95ad840b8544",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3af6178-7e95-4518-af31-33f0b21104c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d93d99f6-06f9-4e1c-b0b7-ebad56c96348"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15bd056e-42db-4c48-9351-92f4977a6d76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85b668dd-d469-4dd1-bd36-6c76f3d62697"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d72f334-e743-4780-9fa1-c0b85b5a1bb9",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fee212d2-6fc0-41bd-912a-e533d4246a0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df10d0cb-3609-4329-958e-c501db135fa1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32d2b0e7-ab43-4939-8a82-91037536ba07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62256afb-8cbb-43cf-9309-792c240bd6be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "421bd735-2c93-4870-b2ba-0423bafa533e",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5bd73b8-ecf9-4c16-9dcc-e3f262f33962",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cabc0b45-8ead-4e58-83d8-18fff87464b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25bed4de-d8a6-4d8a-8ea1-a2d00579b569",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ba1e640-d09f-45d1-b289-097e025a8ead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4c736c7-fc03-483b-922a-02d0f6df05bc",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53147aa3-1f00-4431-ba61-51c1a551ef73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e02148a-5507-4621-850e-64deeab7b0f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8a85489-a279-4c30-bd0d-b763c1d2c93b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d6d9847-6aee-4c4a-9844-8696fba3902b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48e7191e-3636-479e-96f7-1536dfbf3e47",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d873e4f7-2044-46e0-bfb9-c27d7c848456",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c4cad50-f4e2-4e09-8377-5a74e66bcfc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2d26261-57d2-46ba-9c2c-59ebd2bd2fd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1d5df1b-5f0f-4f48-bad3-af4320ec7191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45bc2fbf-dfe4-40af-a635-7ecff74bcfa3",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "256aa28c-02af-440a-9c59-b3cc988de77b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5b09f39-8a9d-4a3d-a482-50b482cc71dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7459a98f-d237-48ab-93d6-e9d4ddcdac09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad2ebfeb-2f75-4c54-aacb-cd517ba62307"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0ffdf45-de3a-4214-a5e4-7258217376d8",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b41a45a-45db-4f4f-8d48-290d0968b29d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5ccbe21-97d8-4085-8fe3-84dad144edb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bf217ca-8084-44d8-8511-73c16f6c37ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a79c228c-e020-45a7-850b-5bb6edd77f9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "921110f0-0d50-4096-a3ac-53a9bf2eb2bc",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72456d72-7983-4996-bda9-21aa6f6b70ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb17ed06-d9b5-41d8-92f0-027147347e56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b600f5f-554b-4e6e-8cad-8003baf778b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e581344-d033-417a-b44a-c0fbc8bcf0c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dfa50ad-3ddf-411f-9ebf-e5962b9d9758",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1794cb24-40d7-41b5-b43b-d51c612ea38c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08326599-32f4-474d-8c92-7451cc6ecd5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a29c871f-d71e-487b-a8d4-273f6579877b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6ea3854-247c-4120-8c07-6587b57fb684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c58cf19-9aeb-4b84-86e2-2591941a235e",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f0c0199-bc9f-4953-be3a-7389ccf16e22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1640d2b5-f5a3-427c-8e26-1e727736297a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "015b6b1a-b8b3-48be-9fe1-d5f11bf9793f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b23ff61c-6012-41c0-b674-fb774ebb91db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2934b599-8246-46ac-aabe-08000e9dba94",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9bef2ae-7629-4e0c-81a6-11070d12732d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a86dd208-a1e5-49cb-b267-5cc90715f99a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3210cb7-a7ed-414d-9fc1-274cbce60024",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10a5a5b3-a2f4-4e7f-95f4-f429cd6166ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac506ceb-f333-4b17-b6fa-a631c1c27319",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26894f04-0914-4bb7-8715-aaf3f21c7d71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c7b2350-759d-42e9-adf7-d82c14d276a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa0d38a-d80c-4af2-8ecb-ec6c68e74b81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c79ce31-8f2c-46d6-b6eb-20ceac248b1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41e280b0-052f-4bc1-ad86-083a5d3f985a",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1acc0e44-5d4f-4135-83a1-00864635d037",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1c09186-cc19-44c5-a520-dd9e6c9687de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e67a6d7-a33f-4938-9745-a48de0d06aa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79b525b5-173b-4668-8de2-b4f423c1b739"
                        }
                      }
                    ]
                  },
                  {
                    "id": "661e7b4f-33c8-4ad9-bbdd-79f2a3954ff0",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2d25730-88c4-4f6f-8f1a-95b93b5f469f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8bd99197-0c0d-4f52-bbcd-f21f777ca27e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fb54b07-cb01-4cc1-b5e3-2d8efc5d4a85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a54ac7e-2c55-4a14-a6b0-29c30d199720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89ab0459-c24b-442a-a75a-1d760193a4bd",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5208cc32-7f16-40ab-8b68-0e1f4bcecd41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a75717d8-5d3f-484f-ba23-626f7304e1fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81ec6361-df31-4e4f-8f7f-bfebf44172d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82243af5-59f9-45c7-9eb4-685abdf5decf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46410370-b4ab-448d-b789-0a94e58413ad",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4677e0fc-bac1-4edb-b6e8-4a725d06dd66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6adef3e-36b3-4747-b0ad-46b98c3cc43b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bec4eaa-40f2-4105-a77e-82f882eda912",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bf9db64-9efb-4c8d-9e1d-13fdd84d0cfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a3f0c86-3116-4192-a274-d2731e7d6953",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "856ffb50-a0fe-4093-aa62-060badb4cd6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "840b39c0-1e5e-43dd-a903-d4c76ac6bbc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "884c0f26-ee32-430e-95bc-8181c1574e88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dcbd26d-50c8-4469-a6b3-ccd3d9991a42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5945b1cf-a0a6-4068-bd0e-82d9eefa70c5",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f60f1e8-b3cf-4a34-821d-5b5200f93cd6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a98bf39c-543b-4d0b-bab5-ee6a4f03c035"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "843e83da-d371-45c1-8d9f-619e19906273",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97b47d5d-5120-4473-9ac6-0c083e52a6ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "875a9884-47c9-477d-ada4-09c718b49c1e",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a723432a-d72a-46ac-9c88-8c954fa8ca53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f737db9e-13c8-4e73-9535-25687d4c8291"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1b35600-85ed-432f-a91f-8fc5115926a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49d35471-c28b-4adb-a27e-62d999a0e946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e72f2d10-cbb8-4074-966c-8dc5565db327",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6652d3e-b9fe-4c34-aa7c-8e2080ab9bd6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e7cdf84-4bbb-4f39-92ac-c673d7e23e64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c93da642-9d03-4004-aa90-f1bae29ff227",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "640cf0da-2ad4-41f0-a216-2cee8942f3f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13f1400a-be5a-47c3-ad8d-291e3089492a",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e7cfe77-125e-4b8e-800a-4271ee339999",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1fe74bc-a10d-42ee-b856-0c9a97a721ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "281721af-3383-4b67-9721-fced7f4a1d0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24b8edb4-f12b-481e-b44c-e97e509fcbd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ad73443-f596-475c-b09f-11ec1e5d1209",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84703387-e1a6-450f-903a-a98bef40562d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cea0f2bb-6cf6-413b-ac25-fe4ebb7c20d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ffc9ca1-f01e-4353-946a-c17ea934d23e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0a06977-146d-4347-b374-7b58eb78dde2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81cfb586-3559-449b-9bdc-0d2c5ac2a4e1",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ea8eaca-ce3c-49e9-881c-6c9c5703c660",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92524d1c-981f-4a7b-bea9-7da633e36059"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42f3f6c1-1e4a-4e65-96b3-be5f15a770d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a6fd521-fbe5-48a8-9d90-5d5fc7a22e2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48abcfa5-2946-44f9-bde4-30445c66e9fc",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9c149ab-3708-47a2-8b1b-d9740c811bbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65450650-5272-4068-8bb4-32c70cc7cb63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6945853f-881a-41ea-9515-f56d3089f5a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5eac8f4-a5f5-4d28-b7d0-80c4c234b2a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90c0cb3e-dccb-413e-9c25-bed5c5c72a2e",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9974a04c-ae04-4e75-885c-b428fc323bcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87044d5e-a9fe-40e2-a1de-a1291d41d7ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9260aba3-bd6b-4330-8c41-edd650f016e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc5fb796-0929-478c-87b6-a15e6a6bb5a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b45afa0-58e2-41fb-9bc9-f89cc3af29ee",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db942a85-2c32-496d-9442-8a8f92c57e31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2f08a68-5c6e-4107-91d5-44fa481bdc1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1d0e052-8fc1-46e6-97b3-4e9331ee389a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53b5fd1a-1e63-424b-9be9-4aec8240074c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "461d0e85-cbba-4d2d-a246-a4f549c38eb9",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "651c145a-0d60-440c-891b-385988ce37dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6a8b0af-f071-49a7-b091-2cfd1c46989f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55e430d7-4645-403f-85de-5a8868fe9bb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "036e4924-8b95-4cad-b71d-71ccddb6575c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "833c3637-e004-4869-bddd-4103a861a762",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98b6279c-dde1-4616-aaa1-f87aa4139799",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1add67a4-64b1-4abb-895e-ada19f729d90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe8421a3-ae07-4123-8be4-a98be58e361a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec02bfb7-f19e-404c-8fab-d02f01131c25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aafcc35c-5c2d-43c0-b42c-134a6d788563",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba5ef326-1a59-47d7-aca7-531f458ec955",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac4fa57e-f49a-42d9-8f26-d2c2a93c024c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a493746-a429-4fef-9141-b5794c29bf03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57f1a6cb-c2d3-401c-8c28-d234bed0d35f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21770b6c-5429-4249-b7b2-2d57377f4012",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38cc6541-7aaf-4651-92fa-fb543efae2ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c1c88cc-e242-4bfb-9444-42d964d36b1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05aab414-ca15-4828-a8af-6ca314b59f5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ff4e004-63fe-4f9b-b319-b990fbf8c2c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ee442e7-1b50-4d20-af39-65de930047f0",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7f6f67b-3c1f-4670-8072-f75c0f4e1b6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7b3bc25-fbb8-4a65-819d-76b47ce2591a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36f1d434-ac86-4160-b0ae-f4a3cf7cd1e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c6581d4-93ac-4b04-ae58-c74dc0a325ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2fd3f9c-9b7b-4872-beea-a81753ab7b15",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04f51aef-e363-40b7-a177-2b3dea9e149d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f987f35-a07f-4b92-8500-5e7ccf06adb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e65da77c-b151-479f-8c37-c1d0aba8c1d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b70d6eb-dc10-4845-9019-c9590a186c3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab23ac13-0167-44c7-ab5e-989b7895d1a5",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a123aeb5-7249-4f6e-bad4-801997fd7b1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6953b25d-834c-458c-b05d-a12a4acac3cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f72d9f0-35a3-49ac-8ed9-8107e89608e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc024a03-ed09-41b9-b7a5-e6a3e7bbd6ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0aa39bc-737d-438e-b298-e02feb09a5a6",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ae9630d-09dc-446d-910a-de2774865918",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "991d1c1e-dde8-42b9-9b06-d876213a471c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b30f9ae9-e6e1-42d8-a74a-220d1b1eb4ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78370c4e-6961-42a6-9e9e-9b4c36aca8e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f88527b-71d7-4ff2-b657-ec9c03229453",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec61f87f-02dd-4290-9247-dfd5ff899c91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7870f48-8e4f-4424-afae-ecef366739b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b17f4c6-2a8d-4f79-96ff-e9ddb4c62a6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee4f1624-f90e-434d-bada-b1cbace12652"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a64c0d61-9c78-4f9b-9d0b-32afaf5b8ac3",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36e52992-5583-4d28-93df-133b96f84990",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "806a42bb-04e3-4ef5-98fb-bbc842536bfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a91e1c00-afc9-4913-ba9e-9acdb73e597b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84e346af-2c8b-47c1-a9ca-563178222ec4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a149cae0-0fa1-41c3-9424-285290f8e01a",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f48f8762-ff31-4437-bf28-97cbdd5d2ed2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90998e26-ed89-4f46-bff4-805e7cd53253"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a499a59-ff28-4293-9ff5-3e9b017e8a23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae94d273-d724-41d3-b1dc-523dd0ccd288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20af3782-e557-4be6-90bf-9e7cecce957a",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "747227d3-b8ff-4d7f-a1bb-a36be8ee4c0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44ba9c89-5ca2-42a7-9b00-ce2c06c998a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7244964-663f-4536-9635-2bdeb3ed66ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b996e705-a1b5-46e5-9f0a-dc5aaf8a62f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dacf0ed-48c9-4ca8-af44-5029a51f4cb4",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2590a5a-eb38-407d-8d11-6b5b756d0bd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd9aeda7-66a2-4738-806a-f39926716a11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44f80c5e-a4d8-4b64-9bed-9dede02cf3ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c78c16a-b0fa-4e8f-917c-37a2982eea18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00d87d0e-7845-4b4a-9a41-d35fc27e1372",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c14b372a-5815-4b62-bbce-15406650c94e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a65c7865-ef75-4191-8709-7f34312dd7f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bfdd280-c37a-4680-9217-6290286b099a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b033b45-3fec-4caa-8e18-af4a82018906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e30f6cc4-dd83-472c-ac90-9f7a16b3a422",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99bc2624-7ea9-4ecb-a0cd-28ba20326293",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c1dd91b-c1cd-422e-bf11-57f189fcf11c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30d4aa5b-eb8a-499e-af5c-5fa2ff1ad7fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "311fb3bd-20bb-4bed-aa72-6077b38bf983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23cab3f3-8729-4473-8130-5ec8b122ae3f",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09b26e3a-c464-4bb9-a5ef-6511c9afad8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b4f2cd1-8255-4232-a649-7f7e9f7ff318"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cb8369d-31d0-41b4-9611-98e1109db089",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dde0af7-b7e4-4f80-970e-a99e94064214"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c22f27fd-8984-4669-a659-cc570e73a33c",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b22af756-8e83-4833-bf35-a75366734f65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e4a660c-2c27-4fd7-92ed-32393e2062c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fd7f71c-d9ab-492e-bbea-89560efd173e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5fef6ea-c9f6-41d4-9995-26dda173b5bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "971e5480-7ce9-42b4-81d6-0c9a09149d6f",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "247261c5-bf6e-481e-add7-c5a941ffe5e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "168783fc-ad49-43fe-9a6c-ea794660cb69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d49ceb4-79ef-49a6-9952-f9898d7d8f13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fce965bf-1a1a-415f-acfb-58625ebf76d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82e6c8ce-261d-463d-809d-9b7e9f7d39b9",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ed70578-2640-48b0-a7f8-61c33017f26b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0eabe14-3b3f-499c-9586-846b85f46126"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37f4c962-8c9e-4e00-8e6b-ed51e81d6502",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e80f51c3-0d1d-4472-bab3-e48b42fc3cac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07bc4df5-f931-4dd1-8ed9-f87549d9a17a",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b28553c5-208b-42a2-be3a-916212181f64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98c67616-b38b-4651-9b0f-3d6609570c50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5baa00e-c7b1-4a20-995a-98e086421b38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "004a4d72-18d7-4526-8738-6d976204da2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "187fd55a-9222-44ea-9236-668bed6e7932",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5147e691-6e17-4630-bead-71258fe565bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fa92ece-5670-48b0-b351-1541545ed37e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58308617-7d33-48d6-b493-3a7f2d8d06f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfaf2b95-e8a9-4a29-9359-ac45739f7130"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf562675-d5e9-4415-bac0-f3b4ece10fae",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2dee289-6477-42ba-8e09-d2caff5c1c71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0736c927-eb41-4c95-af25-7977a38f7e35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8995ce0-0a29-4e5e-9858-07102dd88635",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f96239e1-2034-4de5-9bb2-7aa4f165fcbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71ba5821-3778-4f8c-9a79-88abb0235a24",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f31b39ff-084e-4f03-a7d8-1b5b911d7712",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d26408f4-ffad-4fc1-8db8-83301c3950b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d8ed6e5-3f6f-4b30-bc20-b1ccb1569939",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb1a6410-3c6a-4efa-8b76-bd36842676f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "629220ab-e1a3-458e-be56-9e47ced03e51",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec93bc30-0338-4593-8dce-0ff839f61861",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0315a88e-ec06-4553-b89d-a365242a3623"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9656305f-f437-4b1b-bd0e-90bedbdacef9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faaa4a13-5383-47a6-8c49-8195d35f330d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad62b216-ee96-4fac-97f4-4aa84b14c1a9",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc87017d-0846-4ce3-8141-ca37ae25f419",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "efbe3b94-6c61-4f2c-8bab-20e114ea2304"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74034c28-3317-49b1-b4da-4c4fa2b09f6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f94bf7a-6233-4818-88db-94fbc0a65d1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "797366c3-977f-4f10-a129-49986763834f",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22965935-71d1-47e0-8a6a-1a398a60c052",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f40c24b-2a7a-4746-b2c6-267fb6c20ccc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "889c5539-2836-4750-942c-4671f5ab7306",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af0c597f-8f24-4426-abef-6e12b7b3588d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0883da00-815c-4e46-adc9-7d79d9051ee9",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af890606-e88b-458a-981b-279f2589fe40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c10cf48c-a368-4c71-aac2-c4a79dc4030f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fbe7ec1-eb02-4fba-a0bf-859191dbee4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6200aae5-699f-4f41-bcf9-c951b5f860af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07ae57bc-7e24-40fd-9c64-cc6a8b12efa4",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60b3541d-9f9e-41a9-9817-b66dff579f7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3c2c5df-7fe7-47f9-afac-e8c2ffc54f51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d92568b0-0337-4965-8893-15c6da3652bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07c2f92b-db57-48f2-af7e-26417cee8b72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "670c1aac-f3de-4392-978a-ee306fec3717",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76ec0f79-219a-4106-a92a-2e7fe054930b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4555321-0ffb-44f8-8e32-631c5b742c7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad0988f0-0872-4280-adc0-4f4b42c8bb89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc406c51-6ee3-44a7-9f06-abe717f59370"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9071792-8801-4774-94d5-9f0ca2ef9906",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccdb58f8-d516-4d08-b454-3b8278105cdf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5521099-ceaa-4eca-8d7f-d1d33e62262a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4fc2278-4f05-4296-9687-c2215a17f4e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d2b0eb7-09bf-48a3-a976-037974199438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58a91df8-9daa-48ea-95af-b1f704ef55f9",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4daa5ed8-63a9-40e5-ad27-0a4d0a04b4e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c80c6d60-aa10-4f01-a464-f51fc8b70bac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2581c520-f184-4211-8d3c-dabeb79e6d3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70a741a4-3c1f-4362-92de-b2124bc6fb2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8c687b9-7b51-4ad9-995b-db4c61090dd4",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00879cd3-c6e8-4d9a-886c-595d19a58299",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1285a788-f36a-4ba2-a0a7-26e68b4a3631"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b4489f1-9ddf-417d-bdff-d85918caed08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b33f54b2-dcba-4000-8d09-1e8a281ada5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad3ee0f2-0a34-4ffc-99f6-4cc52df47136",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c4a1f57-2c96-47f9-886f-8c8853e89ee7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c581da84-99b7-43e8-b214-1c99d4c048ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b66746f-ce41-4ee7-92d0-fef0a06270eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d8b6350-32c2-4b84-b792-534c79096224"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33663c83-9f0f-4154-b286-bd24bcc8700d",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e1f3f24-1b1b-4ed2-954c-7e3391fdc012",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78a6610f-3a8d-4bb1-898d-ad0f3b1312ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d4c75dc-3593-4a54-8da8-a91c356f9674",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37f3c517-da90-4bf0-b283-f4723e384862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "229b68c3-de27-49de-ab54-7e39dc99d0cd",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99ca51de-e818-4e19-9575-4bee12a2e99e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "920fbe1f-90a0-4109-81ab-05494f0332db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51aaf921-ec03-4767-84ca-491f68c92d97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba302830-8bb1-4278-bbc8-abd0cfbea44b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4663812b-3506-4d38-9eae-ba2c4a176c5e",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8db1160a-4233-4a18-85da-6e82d9b1c342",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c499a41b-6146-4832-8a87-e49d284d8a55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33346571-fd9d-46fa-a02a-f781abcbbcd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03c93612-0034-439b-9b08-255dd349b7bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "550c9edd-4970-4fc2-bdd9-844cf3988906",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3d96a18-3caf-4226-9972-d28bee1e3768",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c071754a-5906-489d-a219-06b75d00e51a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ce99319-7588-416a-b42c-231c2ab3fdb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4736dda-7c7a-4ac1-820f-ee3970e2db8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da1fa05e-31cd-43fa-bf36-9bdf40ff6a13",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bab0ade-4d9d-432a-b0bf-b865600a5173",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19441207-67f4-4534-b6d1-e81791eeb187"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f90fc825-1ea1-4c30-9561-4f62e2938905",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5e9edf0-c193-4cc5-bb79-48b8e3318e75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b41f9807-7753-4d48-a63c-19e810e37e06",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "201334ae-6a83-46ac-84d5-dbe452c35aad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26b85575-f8e0-407d-9fb7-cb5c0d61a590"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7285afe6-34f5-4471-b6d3-4b58b8f2a23f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "063f8056-52cd-4239-8feb-4b9aee96fccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb9cc43e-9ef0-43ed-912c-d443d0ce25d2",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4df3ac8-1c4c-44ff-9906-32cf9e856dff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de9810ac-98ad-4b0c-9fa1-034a246ddcc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d7571e8-428b-4d14-a729-3b24007a870d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b3d2d40-cdd1-446d-ba8a-4ea3a381edb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "406d19dc-2514-4155-8f7a-19f39f0da777",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea1746fe-3fc6-4768-a0f2-88c036f947db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80df196c-c6d3-4206-a173-671659c5ce30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f82769da-848b-4ac2-83d6-d80fe73b5948",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c93674d-a08b-4e24-8111-588f5c0c0787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0048e1bc-162c-43eb-b5c8-c37c5b6a06cf",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "628175b9-e718-4802-a0d7-4786fd67c625",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04dcd9d9-71a2-4c10-805a-d9c675f60dee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e45f14d3-13ed-4873-b33b-7c233b3bb39b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1cf2084-e618-4111-9a5a-19a4dd701ba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "202e51e5-550f-4952-b820-da25fb571e65",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5caa52c-8b56-4fb3-acbe-b06acdab7f25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54b67fdb-26ea-451f-92c6-e02ef7efef22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f372016a-8dd6-4e37-b13b-cde6b54c8482",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1de241f-456b-4bfa-bc74-164f2301fcb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebd0d16e-8bc1-499b-9266-9ee3bbbe0c80",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06d382e9-33d0-4fba-b9a1-704127ec0ce9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4bd4f0cf-b425-4bee-bd0a-79522df30bbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60880ce8-47fe-465b-90dd-63b02f43c463",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ff52dd5-9db2-4690-9542-715ec8f09e52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "104b1419-c5de-4300-b5f5-9e73b6c2b067",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3248b054-db87-4886-a012-c9d39ad5c886",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93e70e83-5bc1-4982-b8df-563c86bd54e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e8a3b3d-498b-48c8-987a-e578c8782e65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62fe5384-3a56-40e5-a3bf-2150ebf29a71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7700397f-a2f5-4db8-a336-f4761b77f20e",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1f0d78c-f64b-42b9-854b-1eb585bffa79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8eb3d0a1-7c2c-48d5-b1a2-29329ce2ad98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bc068fd-2348-487c-b32b-710a90ff494d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce8b52ec-a4bf-4907-96bb-478d685797c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78581024-0871-4371-9f1a-dfcc53970c9c",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef98d6c1-45f2-46a1-9fed-c958b2bb02b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b9be535-1d03-491e-b2dc-f7b38b6d750c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eef36ba-43c6-4bc8-bba9-5fbdf6642862",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55c2ea78-b601-4b34-92c1-a32f38b155aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "906b031f-9887-438b-8662-9c70ef655d19",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8110ba32-9a71-47ef-8f19-e1dda6bb3410",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1cde125-413f-4a75-8033-57913c198091"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e9af6e6-85a5-40a0-a747-3e62f42639df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "535a2aab-0faf-4d39-bc11-7f031346dde1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40addd0f-05b1-4314-9aff-7d98dac3b2d1",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c178546-c993-4349-926e-8881d2e366f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "044660bf-2e49-4f38-8acd-e4225b83f55c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16c56bc2-6c05-41a0-9644-b8188340b575",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "832a3448-7206-47ec-b9f5-5aae24828af7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ef8c95c-ed47-44e2-b3a8-f602967f72a6",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ef666fc-8b06-4f20-baae-7e182a78de79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7433280b-864f-477f-90f8-23b71bbc50f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64c67699-8fdf-4a5d-ad7c-1e92f5303893",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc29fc48-2860-4d9b-ad10-192753f4ed3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0aee40d-9456-40f4-a26c-5aa7fc589ae9",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f7e240d-fdc8-412e-b69f-5d8ef46a1bd9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96d2a482-2631-461d-9498-07ddddc7421d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e5b5c4b-dabb-49c2-b5dd-f5f8991b908b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78de0999-f85f-4a66-8215-c6066d392526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bb55194-65d5-4574-a0fe-0b89b608d33e",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "798d8d10-300d-4729-970a-212ab6222f84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3dfe781e-e4dc-41a9-89bd-50060a230925"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee6f88a2-f8fa-4a02-aa21-5a1513a000a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d198ced0-d218-4aa2-a5c1-bbbc70f17ff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71d06398-2878-487a-93e5-6f38aed742b4",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c435c6a7-3d08-4119-8609-a478f15f38d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae4a65cb-1705-42ff-b323-5a98256309d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10f8dfc4-5a8a-4ee6-b7ac-52a3e49cdd8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cd05dd3-c382-4281-a352-a5081a0f79f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "086b00f6-5ad3-4a50-a23f-944eba332b05",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98f4a1d3-d79e-47d9-b621-a7ea3f2737c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee00fe71-1c18-45e4-bd64-d90f95352e86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1502cf9e-7f7f-42c5-9643-31581b97a24d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a314f5c-7efa-485a-adab-4fbb84debeb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d1cd481-8b88-46a2-b8d3-1048634362dc",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0cc1eb6-2807-4805-8a9e-a79700d3c364",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d37552c-e75b-43b0-bff5-27a6f966b1d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cea1f92d-2217-4319-809b-2bd6b9d2c3f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "533a6c10-71c6-4dae-afca-292e49a5c8f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09b82e88-3791-4756-8e8a-f66420d1fb34",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d228e848-e9be-4c74-9913-a68453f99d4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04ddf139-dc9d-4f7a-849c-5e992d5f993a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55681bb5-4289-40f5-bbca-7c75afbab3b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d30b671-ab8e-4596-94c9-add8fe50a1e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc1fea22-fb2d-40a0-8c2f-cbe253dae323",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1009dfb-efc7-4d40-a7d0-fd89370d30c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0eb2ea3-5c6d-4696-8272-8f7a7736e036"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37aab8b8-2bee-446f-ba31-ef65375440f7",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccadd8e5-f464-4a84-b04d-9fd06af5e008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ea6a528-8aef-405f-b4c2-77a10c5f97b9",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01402ec5-b90b-4e7b-a014-cae0ea01d42c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db408d2d-ad16-4a29-a982-0c199d0a7860"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9062e9ed-b96c-44cf-8c5f-96d1bb47d36e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "890219d6-4313-4aa1-95a8-7b0ab70a1940"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8666943f-6923-4012-8081-fa4d20d8317f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "95447b82-745c-4dcb-99d7-4a78e45784bc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5f678e1b-5bc4-44b1-8a8f-62897c5ef9b1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "63926a67-f378-46a3-a3b9-9b6d8f2ab34a"
                    }
                  }
                ]
              },
              {
                "id": "20bf701d-f303-47dc-9d0e-274765432570",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "089ecfee-2cdb-45d5-bda8-1bb40f236132",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "967dcfa6-9f05-4723-a87e-93fd4ffdc9a2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "1e8a9e4b-26be-4d37-a5a3-d99c8f618d7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1350b431-4669-4fe9-aedd-8aaf5bcf235a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2ae6eb08-c5a2-4f95-81f9-6a5e9d6b8e46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d03b5bc9-912d-4032-a1d6-6699716a31ca",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4e9f0b0-1d60-4883-993d-9c08f029bb31",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "86aaf1ba-6c27-40f6-b855-fe3eb0625203"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49173112-d030-4338-b07f-bec90e5cd283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1e851874-7455-4552-9281-019ab0aad02d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7e01a657-3e3f-46da-8a76-fe6bede9e4e7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e0c6f2e7-1849-4ac4-bfd5-c0e0e7721e28"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d9659a0d-1eda-4dd7-a289-dd7eff98bd77",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "22940eea-2713-40f0-99a5-3afda871cfd5"
                    }
                  }
                ]
              },
              {
                "id": "296b9290-1ecf-4dfa-b340-472350c7fcd9",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "2107391e-27a7-4fd9-9332-1bbd6f4b65b0",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c9caf59-9e14-4ead-83ec-4b0ba55c457c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "f26386bb-01f9-4c02-bbfd-096240e8c2c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cc54ed5-c642-48b6-ab56-28b33d9d533f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5db8b9a4-e157-4bb1-bf63-fbdc01302e05"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "8672b32e-6c2b-4339-81f3-7b9c60f01c3b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bc5d0421-0970-48a6-ab15-b1bcfb101e88",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e7ec3d31-832d-45f0-8822-bb1186e924cf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "af7dc19f-7149-4d0e-9e3c-6074769d78c0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3d77eb8f-e7c5-40b4-8596-fd28e1205222",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0225dd77-8fa3-44a2-b460-fb4e8dddaf2c"
                    }
                  }
                ]
              },
              {
                "id": "e995c056-7767-4651-965c-b1a08f946f17",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cf626692-4817-4f93-8593-f5f8723cc951",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0d2ab55f-eca5-44d7-92f0-a20064ae6bee"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b4be1cc9-9431-4a1f-a8e9-a88567b4f204",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2a4fe539-e098-4559-b2f2-acfd5e9597e4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "054dec3a-8454-4916-9fb1-ec9f8efaa393",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "291e4a85-3246-4cf3-97a3-4a7bf5e34d77"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d0f9ea51-7cb3-4d92-b5d7-55ec61126733",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ab1f72b9-5720-49ac-9cd7-72e9efb4200a"
            }
          }
        ]
      },
      {
        "id": "a4567c01-c35d-430c-8eb3-ed19c568a1e5",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "17dbc5f4-1d2f-4142-97c8-63a867382666",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fb2bca60-f3c9-4f11-ba94-3b89f7b7bc85",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b4124011-49e6-4f05-b09e-6c36cfa3df44",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1f39ed8-6a66-4082-814d-8ae65f68139c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c7a1c32e-5040-444c-9cdf-9fb9ed0b6eec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0a49bd1-15b4-446c-866e-47d9a94cb77f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3b4993d8-de59-4c23-a1d2-fd1a91293077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22f4d6e6-469c-454a-bccc-139302ccaa2a",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d67306ab-1be9-45fa-87d6-da6ee4ddd254",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "635af1a9-2810-4dfb-9a01-579820f4c558"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03193495-e551-465b-a9d5-526517a9009a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e098471b-f4a4-49f1-850a-66d02aac1075"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "596779b8-e2fa-46f9-a377-bf5598a3d145",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "40ce5692-7820-4db0-a7fa-aac947142032"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "28c505dc-92c6-44cd-8db0-59875d984163",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "54c9f8ab-6ab8-4e86-ac8b-8dc66e041b82"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9caa3b4e-5e6b-4962-8ecf-7e4ba024824c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "744f359e-751b-4fdf-aecc-c4b9c23f29ef"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a13710e5-5574-4825-a7a4-3953733cffe4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "356506dd-c2bf-42aa-bee6-f515e06e6ba9"
            }
          }
        ]
      },
      {
        "id": "1401a110-e69c-44d1-ad2f-c48fd4a87f2b",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "650319e7-4ea2-42c1-a79f-d6ba74c52fa4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b90d7893-800a-47f1-8a4f-50caa1c43356",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "14802a9e-ae8d-4b09-862b-af64aef813ae",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d04cf61b-f9e6-4ed8-9831-06c9ba555672",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "97b51e2e-4db6-40bc-a312-db8b59c06725"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03486f90-41c3-471c-9c13-6238699bbd6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8abcb3d9-2eac-4b25-845a-cfc51c86bac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "326b1af6-93fb-4a22-a799-dfeb91b174f0",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bf5f4dc-96c7-493d-948d-76867c2a637e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "03c6d530-2260-4f8f-8e4f-cc15493474d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "275161d7-342e-438d-b206-52c700f74473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a1dbb912-1b32-429f-abe2-ea8034ec0437"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e4698378-91bf-4a5c-b9dd-b287ace1122e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a83d0136-1d6c-413f-b68d-d16979974b10"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9c77c078-c56c-42a3-af03-f83ae9e769cd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e4332c1c-67ef-4929-bd9b-794010cd4bbc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "420fec26-c04e-4b2d-8485-b4083b381bbf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "26b87547-b3e5-49a7-bee3-219c81261625"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eb253427-4042-4d54-b3a8-8d56ebbeca89",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9c603dba-7404-43d1-8f57-91e0c4bad996"
            }
          }
        ]
      },
      {
        "id": "5367ede8-fd4f-4332-94a9-c4bb8ecb8834",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "d06465fb-cf43-4db3-95d9-a5b125295bdc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "da285a2a-d66b-4094-a186-61714aae91ba",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "574f5be4-412e-4dcc-bbf8-50cead488497",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bed5db1f-0d86-4a69-979b-04a1c797625e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c534b80d-0c46-4b09-867b-0d0d5b34eac9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89032678-1408-4239-b3c7-308949954613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "74c4bf5f-d1a9-4fea-b57d-4e546f2306ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "571e1ed1-33c3-4a9e-ad02-b42c988a4687",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8422f275-da7f-4d80-8716-7f3860da469f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "25c2e96a-22af-4063-8ab9-33fabc46efcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "908b409a-d350-4860-a44c-1b0ede889676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9c262d33-cc6b-4d02-aa8c-6e4d4aacec23"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a4a4b74d-8d36-4b1a-9353-faa14bd71fec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "76dbddde-94ca-4da3-9b82-f3d1b70163c2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3bb632a4-8584-4d81-ae81-876e609abe63",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "749110d4-3005-491f-a22a-5031e99f7376"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "05e6dd2f-0313-42da-9492-30c5f8e57e58",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d1a96eed-3d40-4f46-9423-d26a9821fd46"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cd6a8fb9-1174-4913-b983-ef347283c46f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fea153e1-1858-4446-96cd-033ebbbfef5a"
            }
          }
        ]
      },
      {
        "id": "03a1eb30-8626-4046-b882-10f657f9edf3",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "66734927-1c33-492a-ad8c-19daea371cd4",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "88ed2299-6778-4314-bab4-c41c91e4a5ae",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "fe242ce4-9a2d-4f13-906c-b8633a2454d5",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b7853da4-92a5-4fde-9b3f-d06b8e7b394b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1da34948-1d0c-4443-99ba-c4e82e17004e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1901,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 259,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 955,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 946,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 269.6061776061774,
      "responseMin": 10,
      "responseMax": 9357,
      "responseSd": 896.7767761358801,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1677631549138,
      "completed": 1677631629552
    },
    "executions": [
      {
        "id": "eb6df99b-078a-4f8c-a65c-34694691cbce",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "41db896c-82a4-42b7-829f-f03d64a4416e",
          "httpRequestId": "7c1495d7-15e8-4a7a-8070-6ac322b7d905"
        },
        "item": {
          "id": "eb6df99b-078a-4f8c-a65c-34694691cbce",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "d9466d42-fa4c-45e8-8981-423e088e9745",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 0
        }
      },
      {
        "id": "87c85249-a85e-47f9-9f61-b7cfcf9215a0",
        "cursor": {
          "ref": "a82fc9ff-666d-453a-a547-e67e19feb522",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ea35e08f-91ec-4c27-9ef6-6d40ec6774ba"
        },
        "item": {
          "id": "87c85249-a85e-47f9-9f61-b7cfcf9215a0",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "63ccbbd9-17d9-4d2c-b9a6-7a38e0b1d5b2",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "fc8fcad0-be60-43c7-b7c3-bb6c39761d87",
        "cursor": {
          "ref": "60219289-fbda-48e5-a972-f937bf074f41",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "bbbbdc3a-85ca-4678-9b0e-ade5402ded25"
        },
        "item": {
          "id": "fc8fcad0-be60-43c7-b7c3-bb6c39761d87",
          "name": "did_json"
        },
        "response": {
          "id": "22482e15-4b74-48ae-b442-2e69606d3369",
          "status": "OK",
          "code": 200,
          "responseTime": 398,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fda979e0-11e9-486d-98c5-f56a968ed8f0",
        "cursor": {
          "ref": "c42579d6-a843-4bce-b433-9a7b4e74ac81",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7dc3bb4f-1ac1-4170-8599-b0230224ce58"
        },
        "item": {
          "id": "fda979e0-11e9-486d-98c5-f56a968ed8f0",
          "name": "did:invalid"
        },
        "response": {
          "id": "6c465351-4eaf-4fee-aa2b-4b1356d7344d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 2235,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "fda979e0-11e9-486d-98c5-f56a968ed8f0",
        "cursor": {
          "ref": "c42579d6-a843-4bce-b433-9a7b4e74ac81",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7dc3bb4f-1ac1-4170-8599-b0230224ce58"
        },
        "item": {
          "id": "fda979e0-11e9-486d-98c5-f56a968ed8f0",
          "name": "did:invalid"
        },
        "response": {
          "id": "6c465351-4eaf-4fee-aa2b-4b1356d7344d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 2235,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "e3b2787f-8a45-47ff-bafc-20ba411b643b",
        "cursor": {
          "ref": "68df68c0-75e0-4a9e-a6d4-084a4e396a71",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "5738f34e-1a5e-4ab9-b495-0a61efc8611f"
        },
        "item": {
          "id": "e3b2787f-8a45-47ff-bafc-20ba411b643b",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "ba665d77-d2c9-4e8e-950a-e176b2c8889f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 80,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "873c1b4b-948b-4fe1-b25a-c4170c7c3b49",
        "cursor": {
          "ref": "c62437cf-d654-452d-945e-fc70768847af",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "911a421c-285e-4990-9bbd-c6a3e6b9c93c"
        },
        "item": {
          "id": "873c1b4b-948b-4fe1-b25a-c4170c7c3b49",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "5b82b061-9732-4c28-9a57-ffa80b9cebc9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 89,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d8963d0-b937-49a1-8168-e156676db455",
        "cursor": {
          "ref": "d76ad92c-74c3-4b61-bd7e-289a918ce587",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c1eeff0f-7270-40ed-8c3e-d3ac0ec6bb58"
        },
        "item": {
          "id": "6d8963d0-b937-49a1-8168-e156676db455",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "051463e4-b72e-45a9-925c-a89add1c5c60",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 173,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "806051dc-b894-429d-a4ae-ab59349516c6",
        "cursor": {
          "ref": "02e29e73-ec93-4544-a03c-0ee8eff9d328",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b8cc91de-6447-4bde-af7e-daf7ca2c8584"
        },
        "item": {
          "id": "806051dc-b894-429d-a4ae-ab59349516c6",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "17c5e176-1944-4ed6-84a6-388d2e4e7018",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "806051dc-b894-429d-a4ae-ab59349516c6",
        "cursor": {
          "ref": "02e29e73-ec93-4544-a03c-0ee8eff9d328",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b8cc91de-6447-4bde-af7e-daf7ca2c8584"
        },
        "item": {
          "id": "806051dc-b894-429d-a4ae-ab59349516c6",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "17c5e176-1944-4ed6-84a6-388d2e4e7018",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "d949d3ec-223d-4cad-83f1-799e696f8753",
        "cursor": {
          "ref": "75105360-f53d-4470-b0bc-060290c4484f",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "348dcff9-5f5c-4b75-8c0e-8d2c745b92af"
        },
        "item": {
          "id": "d949d3ec-223d-4cad-83f1-799e696f8753",
          "name": "identifiers"
        },
        "response": {
          "id": "e699d1d3-604e-4ebc-a22f-aa2815a9164e",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed2d1766-99a8-436f-9d0e-e7f9656136f5",
        "cursor": {
          "ref": "f8ef6ee8-a249-4938-8f73-b09e8bc8d13f",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ae22f9a2-b21b-46ca-b843-66526ae8e783"
        },
        "item": {
          "id": "ed2d1766-99a8-436f-9d0e-e7f9656136f5",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "73d2ffae-39b8-4952-ba83-14d1abbfe9dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed2d1766-99a8-436f-9d0e-e7f9656136f5",
        "cursor": {
          "ref": "f8ef6ee8-a249-4938-8f73-b09e8bc8d13f",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ae22f9a2-b21b-46ca-b843-66526ae8e783"
        },
        "item": {
          "id": "ed2d1766-99a8-436f-9d0e-e7f9656136f5",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "73d2ffae-39b8-4952-ba83-14d1abbfe9dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea9f6b1e-04ad-49af-b540-af1a9e58a9d9",
        "cursor": {
          "ref": "8683b97c-f7a0-4334-af11-77cf4866c6f7",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "3dd24887-10b1-4547-a499-84b0956f9307"
        },
        "item": {
          "id": "ea9f6b1e-04ad-49af-b540-af1a9e58a9d9",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "a27a10da-405e-49bf-988e-e14c567e855a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51273e49-e70b-47bd-9183-54dfbc3b858b",
        "cursor": {
          "ref": "46dbe1fb-db0d-4b0f-a000-50b17f8724c7",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "6bcfa2f2-d88b-471c-a3ac-91ae33f35957"
        },
        "item": {
          "id": "51273e49-e70b-47bd-9183-54dfbc3b858b",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "927f1df6-0b2e-4b21-9b75-ffd04370b383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58bbb336-cf22-41d5-9e63-6b5dd1dfdcba",
        "cursor": {
          "ref": "e0493bab-75c0-42ca-b3cb-8c81cbcb80a4",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "3c8c012f-d544-475c-b599-a37991dedae3"
        },
        "item": {
          "id": "58bbb336-cf22-41d5-9e63-6b5dd1dfdcba",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "b0e27e24-1037-41f4-93c6-9f7d4f0d71aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aa92ebb-6554-42ae-854f-b82cfb94e980",
        "cursor": {
          "ref": "e5c0039f-0cf9-434c-acee-efe6323326f3",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a87f1250-5f24-4e1e-8ccd-3cfbea5ce47f"
        },
        "item": {
          "id": "1aa92ebb-6554-42ae-854f-b82cfb94e980",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "bbc5ac6e-7cc2-410a-b5d6-d2f804115e22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6985037a-d4e9-44e5-9509-c2ddf7e1bd2d",
        "cursor": {
          "ref": "e5d56758-1e98-4451-9985-44c770a78c84",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "54586632-253b-4f16-aee5-9c94ed708f6d"
        },
        "item": {
          "id": "6985037a-d4e9-44e5-9509-c2ddf7e1bd2d",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "fee952af-e3ca-4256-a373-ee0f020949f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62bb3125-3571-463d-a5ed-9cbaff8df0b0",
        "cursor": {
          "ref": "c7be3b51-2a0d-4384-b171-e7d6bd4bbd77",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "7dc48b9e-66ef-4cc4-82bd-562c4415707f"
        },
        "item": {
          "id": "62bb3125-3571-463d-a5ed-9cbaff8df0b0",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "ce9fcbe7-7070-4fcb-be59-812258297d61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65034e24-e605-4514-a52d-6de4f1f16a2e",
        "cursor": {
          "ref": "c365d0c2-2aeb-412d-ac66-4d1c781e8987",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "df2734d5-d937-4cee-b6cc-9f9f16a6caa5"
        },
        "item": {
          "id": "65034e24-e605-4514-a52d-6de4f1f16a2e",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "69b6126e-64a5-412d-9f2b-b0806898e02b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8d8245f-3f38-466c-a6f5-edf947edd6bf",
        "cursor": {
          "ref": "b3343141-01e4-42c7-a349-69599646ae3f",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "775ea71a-2c56-47b7-8c36-d93f808241ab"
        },
        "item": {
          "id": "c8d8245f-3f38-466c-a6f5-edf947edd6bf",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "bd2bf02e-750d-4a5c-a4dd-c4948ce5a4eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab5a172c-368e-41ec-b876-d2e22c7e2536",
        "cursor": {
          "ref": "76439c63-6eb1-40cc-b8f1-9c25b4486a2a",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "649306a9-69db-4e69-a432-8c8f40fba051"
        },
        "item": {
          "id": "ab5a172c-368e-41ec-b876-d2e22c7e2536",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "877eec52-4383-476e-9425-08cb57e244dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05c0922e-33f4-4a44-a822-5f482b0ffafb",
        "cursor": {
          "ref": "e1162158-61eb-4ca0-96cd-a92d74dcf15e",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "85343ff3-8e45-4241-ad23-d78483f34fbf"
        },
        "item": {
          "id": "05c0922e-33f4-4a44-a822-5f482b0ffafb",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "51dbc832-c574-4cd0-9886-fc00d2cbdc9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e9bdfd4-3420-4401-9f78-c29c5befabfd",
        "cursor": {
          "ref": "c7333658-3ae7-4694-958d-bf2542da15fb",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "5a876b02-5a9e-484f-a819-fadc60df2f08"
        },
        "item": {
          "id": "6e9bdfd4-3420-4401-9f78-c29c5befabfd",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "5ea8997a-693c-4b7f-a4d8-5e67a3d62af3",
          "status": "Created",
          "code": 201,
          "responseTime": 722,
          "responseSize": 996
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "61a003f0-c881-4674-8fd8-a23148a9408a",
        "cursor": {
          "ref": "42176012-c076-44ed-9de3-2fb38047498f",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "b968f2d5-8e9f-4459-b100-dd7e8ea9d88d"
        },
        "item": {
          "id": "61a003f0-c881-4674-8fd8-a23148a9408a",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "9e2c71f4-0141-4275-af73-29ba63275a19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 690,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62d1cfd3-c48b-4a76-871c-980360ef8956",
        "cursor": {
          "ref": "70fc0953-1a61-4960-811a-7e9d442083cc",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "08d21b09-31a1-4246-a3d2-0eed615e3ce1"
        },
        "item": {
          "id": "62d1cfd3-c48b-4a76-871c-980360ef8956",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "1d685707-d15f-4afc-a096-dc9280393c8b",
          "status": "Created",
          "code": 201,
          "responseTime": 6291,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "36ca5c00-3d6c-452c-87d3-2a4a06b5c2b1",
        "cursor": {
          "ref": "66562b8a-113d-480e-adab-57c071306623",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "0c32dc5d-af3d-469e-9634-6aae44d7ecc2"
        },
        "item": {
          "id": "36ca5c00-3d6c-452c-87d3-2a4a06b5c2b1",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "7141d6a1-6c34-4d9e-a4e6-329cc2b4202e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3897b13e-9974-4d06-9dc2-92197347f3c8",
        "cursor": {
          "ref": "e596dfee-0244-44dd-94de-53b463f8d11b",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "cdee86a8-b358-42cb-aa03-eabd14dcebb6"
        },
        "item": {
          "id": "3897b13e-9974-4d06-9dc2-92197347f3c8",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "284f8637-3b0d-4d21-8800-1ad1ff3a2acb",
          "status": "Created",
          "code": 201,
          "responseTime": 9357,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "648e8e14-064f-45d2-9114-263e619611ca",
        "cursor": {
          "ref": "4d2383be-d4f2-4619-897e-b5b649b30cb2",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "b08e37a8-5f38-4f6d-af9e-1382bc188902"
        },
        "item": {
          "id": "648e8e14-064f-45d2-9114-263e619611ca",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "f8c53ce3-99a3-4c0e-be6b-7986aeab1cdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d11f7b9-700c-4020-9193-fe0e0c609efd",
        "cursor": {
          "ref": "e80787dd-a382-4473-b2e2-af3d5b1ed39d",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "d2c9df55-47ab-4f64-a530-d93fca66ea70"
        },
        "item": {
          "id": "1d11f7b9-700c-4020-9193-fe0e0c609efd",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "95bcc673-187e-4040-bf1e-75f9f340f164",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 827,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab1b9ee1-d117-4a6f-9f2e-d9ccebc99066",
        "cursor": {
          "ref": "d87fdbc4-0686-4bc3-9ba1-4ec1549a3de0",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "63b7e43e-4dcd-4f65-b619-ee129ef4c435"
        },
        "item": {
          "id": "ab1b9ee1-d117-4a6f-9f2e-d9ccebc99066",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "cdb0d925-510d-4a28-9a45-fbf47e593d1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a01c8bc-e63a-44e0-9bec-deb418f71684",
        "cursor": {
          "ref": "8ee50271-7e7e-4652-8098-48df57da875a",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "e4faa976-4b36-4d13-bd00-4f7efcae2936"
        },
        "item": {
          "id": "6a01c8bc-e63a-44e0-9bec-deb418f71684",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "914e5dad-b969-42cc-851c-91bb130bb2aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "192b74aa-a6bc-483c-9283-e81eb4ea4a43",
        "cursor": {
          "ref": "4675fab9-042e-4cfa-ac4d-36e390fd3a0a",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "387a85c4-ae6c-45a1-b29b-f7f162ef2bad"
        },
        "item": {
          "id": "192b74aa-a6bc-483c-9283-e81eb4ea4a43",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "63ad98a7-c19d-4150-b1fd-509d77228503",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd812e96-17d1-4cbb-985e-6e615b3fa73b",
        "cursor": {
          "ref": "da3a87d5-75ac-4837-a2dc-2c68e7c44514",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "91aa2ab8-19c9-4050-8caa-713afb0407cc"
        },
        "item": {
          "id": "cd812e96-17d1-4cbb-985e-6e615b3fa73b",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ea88edfa-6124-449a-bd6a-6f9145afa510",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf10e562-6ef3-4643-8617-e89e51d8a6b4",
        "cursor": {
          "ref": "2d5b9828-f517-4419-8e42-2c2278614379",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "840a87fd-9dff-4ef2-b88b-b0e6c66a9cbd"
        },
        "item": {
          "id": "cf10e562-6ef3-4643-8617-e89e51d8a6b4",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "ff1c28ef-1e7a-4255-9762-83c051192e69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a04b1820-b158-4a04-919d-afc538e3048c",
        "cursor": {
          "ref": "260b2ac7-9060-468f-a8dc-fda9dd25d7e2",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "7360bfd7-556d-4de8-a748-f6c707aed209"
        },
        "item": {
          "id": "a04b1820-b158-4a04-919d-afc538e3048c",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "adc91229-a51a-437c-b0a3-46222b1a4ca1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f155ad77-2715-497b-9871-a0dae1f588d2",
        "cursor": {
          "ref": "35535e60-4c2c-4d6c-ae41-76f82bca04fb",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "d04e9819-fa59-48ae-95f7-73996cb1bbb4"
        },
        "item": {
          "id": "f155ad77-2715-497b-9871-a0dae1f588d2",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "30a3bcc2-d86b-42bc-8ce9-7e49be5d83eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9dbd698-0be3-4983-8114-58b488a8253b",
        "cursor": {
          "ref": "e1d94454-58a5-4325-b7fd-f29d97f0f206",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "87c52012-d922-43f3-b6ba-f6df4ae0d5e7"
        },
        "item": {
          "id": "a9dbd698-0be3-4983-8114-58b488a8253b",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "20d35bf6-a298-4115-9324-0e5ec4f38c00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "109dd1d6-3c26-4769-a052-ea3c800c4c6c",
        "cursor": {
          "ref": "5d7d215b-60ac-43e2-b74c-ceb4760db61c",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "f32adb01-0754-4c32-a76f-3afe99eb4452"
        },
        "item": {
          "id": "109dd1d6-3c26-4769-a052-ea3c800c4c6c",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "64b71555-ea61-4f6e-8213-f9a7f6dca889",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "785b9da4-e7d0-44b6-82fe-8b179082e627",
        "cursor": {
          "ref": "a7e8a48b-8c7a-412a-be0b-8776b38e5c08",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "b0d81038-fc5a-44a8-b4a2-6e9b77a5f300"
        },
        "item": {
          "id": "785b9da4-e7d0-44b6-82fe-8b179082e627",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "8e3fa776-cbba-4d15-9b67-4f91b846fb9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3bde68c-2d37-4f62-b29d-52c5ebd9d7d2",
        "cursor": {
          "ref": "3583b657-8b5d-4fbb-b2fe-e214e32d6dab",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "6f6cec6d-26d7-47ec-a98c-5129ebfd4f65"
        },
        "item": {
          "id": "a3bde68c-2d37-4f62-b29d-52c5ebd9d7d2",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "77a496fe-4b8d-4aed-bef8-2d8e958ec41b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7ac9b74-83f9-4444-9d00-21fe3dcd440a",
        "cursor": {
          "ref": "05529140-58aa-4ae3-8f8d-abcf9ea3453c",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "3ab6dd0e-f65f-4538-b368-3ab4395acc1b"
        },
        "item": {
          "id": "d7ac9b74-83f9-4444-9d00-21fe3dcd440a",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "66204494-595b-45f6-9af8-b8b82cd7b641",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5fd4c98-24ec-4161-a734-d531fc714154",
        "cursor": {
          "ref": "f0bf3ba6-fd84-4053-97d2-379c7b9b2999",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "06411e40-925f-490d-beb4-fda48beadaff"
        },
        "item": {
          "id": "c5fd4c98-24ec-4161-a734-d531fc714154",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "70f9d822-b428-48c7-866a-7e8817f40331",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89b8da0d-338f-4608-bd20-dfc5ad8bf3c0",
        "cursor": {
          "ref": "9b7d0aa6-54b0-4c54-9840-545c66e6c72c",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "a83fd21c-ed9c-4301-8231-8fdbbeebcfe9"
        },
        "item": {
          "id": "89b8da0d-338f-4608-bd20-dfc5ad8bf3c0",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "d04a7d2a-78df-49f5-b783-590de37c4051",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecde3538-1855-47ff-abcb-4c3580d3f2ca",
        "cursor": {
          "ref": "504a8305-88ed-4171-a61d-c1a0ed341183",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "26b8c3d2-b080-4835-b789-2d9575484f68"
        },
        "item": {
          "id": "ecde3538-1855-47ff-abcb-4c3580d3f2ca",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "9d1976a4-04a6-4ce6-806d-09c1cc76712c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbcd42fe-bdfa-47e9-937d-04e058b5726d",
        "cursor": {
          "ref": "2c7cde5d-2791-4825-89f2-450f7e59fde2",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b9a27a50-0d56-4772-9fa7-5126013da7fa"
        },
        "item": {
          "id": "cbcd42fe-bdfa-47e9-937d-04e058b5726d",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "e41bdef5-45de-4c17-bbb5-b9affc2d29f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccb01b75-880f-4a89-9c85-b0bdb55f64fa",
        "cursor": {
          "ref": "dd218438-78ba-4fd6-99d4-77be50ff03fe",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "f31bf6fb-3c13-43a0-aaf7-e0005d4e6cf8"
        },
        "item": {
          "id": "ccb01b75-880f-4a89-9c85-b0bdb55f64fa",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "1541878e-63c2-4253-8518-8973ed6bd2ff",
          "status": "Created",
          "code": 201,
          "responseTime": 2444,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "0e79774c-eaaf-4e60-8330-85903a704def",
        "cursor": {
          "ref": "06a766e8-fcc5-4de2-8bda-506474bd9062",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f68ab982-7ab9-4105-8499-966ba5210abb"
        },
        "item": {
          "id": "0e79774c-eaaf-4e60-8330-85903a704def",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "fcd70b22-21f8-4f27-b978-f540caab6335",
          "status": "Created",
          "code": 201,
          "responseTime": 3029,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "9ac36127-e10e-410b-92f5-4fad07a12ae8",
        "cursor": {
          "ref": "8c1c40c2-8a4e-4958-b0b0-462a30392943",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "c24fb4df-2688-4009-b385-83c254dcd67f"
        },
        "item": {
          "id": "9ac36127-e10e-410b-92f5-4fad07a12ae8",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "1654bb6f-7a8d-4a78-a730-fa719ed1b0cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f08e86d-7609-4f95-8bba-0b342b16334b",
        "cursor": {
          "ref": "e06d4415-a3bc-4b6e-bfff-ee2311770e48",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "d55c192d-c8ed-4357-be85-378db8658e67"
        },
        "item": {
          "id": "8f08e86d-7609-4f95-8bba-0b342b16334b",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "d309119c-7a85-4ea2-aac2-f5899e677b15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 186,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8372586-b1c9-4bee-b726-db6f73b4071e",
        "cursor": {
          "ref": "94f5f949-ef50-4117-bef9-34d7b8d2e53f",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "f08f7fde-e04b-49c5-a8dd-8c784fa09696"
        },
        "item": {
          "id": "a8372586-b1c9-4bee-b726-db6f73b4071e",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "112ec0fc-8748-4c16-8075-d71d5ce0aa3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dc86fc5-e0a9-43dd-9349-e76cd09de9f4",
        "cursor": {
          "ref": "3bd8059f-44f3-4be3-8fdd-73dc6d7e9430",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "382fa01f-57c8-4e5c-864f-83100128c3e4"
        },
        "item": {
          "id": "6dc86fc5-e0a9-43dd-9349-e76cd09de9f4",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "61c7c230-b1ba-41ce-9499-1ed992de6622",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f442d887-f03e-4275-a945-5bd67d5be7fb",
        "cursor": {
          "ref": "fb2514d2-9908-4b5d-82d8-5080d0357cf0",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "55832b1a-a17e-4c83-8b41-67fc89837ad2"
        },
        "item": {
          "id": "f442d887-f03e-4275-a945-5bd67d5be7fb",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "9742d500-922f-4fbf-85c9-1a793c76bc0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e5c6a05-29e3-46a7-b060-c4e0b1a7756f",
        "cursor": {
          "ref": "719e68d1-14b3-455c-9c00-26b66763e527",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "eb32f173-0895-445c-b9c1-7b8b2b1457c0"
        },
        "item": {
          "id": "8e5c6a05-29e3-46a7-b060-c4e0b1a7756f",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "d1d4e194-04ab-4c31-b18b-0a985ff9815a",
          "status": "Created",
          "code": 201,
          "responseTime": 2843,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "3e5598fe-ec0a-4438-8847-4af23e6ad0a8",
        "cursor": {
          "ref": "cebde69b-335d-4cee-aa4b-4b2e5ac65152",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "95e13c7e-bf90-4ed4-981f-17574e3a3391"
        },
        "item": {
          "id": "3e5598fe-ec0a-4438-8847-4af23e6ad0a8",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "2cc7a703-8842-4c59-a11c-74c4fee9a5f2",
          "status": "Created",
          "code": 201,
          "responseTime": 2374,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "fae37ca0-bde3-4553-a4f3-9acb134ce7ad",
        "cursor": {
          "ref": "607d2a0d-480c-4766-8ea0-3c200b26a712",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "2c73fd11-21cf-4f24-89db-238d9cbb5fb7"
        },
        "item": {
          "id": "fae37ca0-bde3-4553-a4f3-9acb134ce7ad",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "f55e4833-8b78-4c96-ab26-eeef2fc23d3c",
          "status": "Created",
          "code": 201,
          "responseTime": 2212,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "6cda155c-4f35-4a21-9edb-5c498698dba3",
        "cursor": {
          "ref": "92909b7e-db8e-4641-a0dd-b6dce602c37a",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "7896ed82-b01d-4c3e-b141-b7b82e2a082f"
        },
        "item": {
          "id": "6cda155c-4f35-4a21-9edb-5c498698dba3",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "8ee53e4b-d8fa-46fb-850f-dfe735845279",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8b23990-fbee-48f3-8c78-0193be99bac7",
        "cursor": {
          "ref": "a504bb57-543b-4789-addd-aa8c06711507",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "b07f34e2-505d-4f09-889d-7f615836a166"
        },
        "item": {
          "id": "e8b23990-fbee-48f3-8c78-0193be99bac7",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "789b9c05-1e0e-4bdc-8a77-a367c41d8ba7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 668,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a00437f2-261b-46b6-80f8-aa89fc71b890",
        "cursor": {
          "ref": "feae56d5-bc00-4b77-aea7-32e37993c6d3",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "c1acab92-eaca-4ba1-8e0d-c36c3d1006c0"
        },
        "item": {
          "id": "a00437f2-261b-46b6-80f8-aa89fc71b890",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "8222f9b3-c22b-4c44-9110-953940f017d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9343a1e-a8f3-475b-af7b-35f9e4fc32f8",
        "cursor": {
          "ref": "d86bad7d-8343-4224-a61a-90878b8b1065",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "f6980378-2e85-481a-9fb6-8e7275bb8f64"
        },
        "item": {
          "id": "a9343a1e-a8f3-475b-af7b-35f9e4fc32f8",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "5910afef-0e3c-4967-b9e3-d10eaefebcda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8df8ecd2-58a0-40f6-ba26-4563411ad382",
        "cursor": {
          "ref": "bdae6b6c-73a5-4d6f-a261-b2f3391942c5",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "3e44fa0c-5499-468f-a5c1-c90ed15bd9b2"
        },
        "item": {
          "id": "8df8ecd2-58a0-40f6-ba26-4563411ad382",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "ea30b381-af30-4d09-8d89-609f34bd2a61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50c8e0ce-bf36-4308-8b23-6a92584b002c",
        "cursor": {
          "ref": "726bbede-1419-4f70-ae71-26deefd6a8b2",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "85bee7f8-54f6-4f92-b49d-1c589bba39d7"
        },
        "item": {
          "id": "50c8e0ce-bf36-4308-8b23-6a92584b002c",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "24caf2ee-c3ff-403b-a47c-e84a68fe9571",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5810863b-462b-4e17-af8c-98d7edd9808a",
        "cursor": {
          "ref": "9acc86ed-4292-4280-ba6a-13fa8278895d",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "50b11b4f-3f6c-4246-9595-004eb1554857"
        },
        "item": {
          "id": "5810863b-462b-4e17-af8c-98d7edd9808a",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "6ed6e663-856b-48a8-b48f-3fa0efdb7dbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb7e34c8-06ad-4e7b-b083-667bed0d5c90",
        "cursor": {
          "ref": "78f58cee-963f-4f3d-8c2c-f63bd54fbf18",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "1575d24a-c138-4800-a870-895112477663"
        },
        "item": {
          "id": "bb7e34c8-06ad-4e7b-b083-667bed0d5c90",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "c46725b9-6e61-44a9-b456-38f5a6c07a4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff8fa2cd-445b-4b7e-8b1e-0245fbf2f3cd",
        "cursor": {
          "ref": "8823400c-5caf-4b64-9b8e-c3ad09de998c",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "cc554a1d-40d3-4d40-9fde-ea433f3d8c57"
        },
        "item": {
          "id": "ff8fa2cd-445b-4b7e-8b1e-0245fbf2f3cd",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "c3f6d3a3-73e2-402b-8896-ca3db43b8ef1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b5a4373-4b30-45ee-a7b2-5f35a573f839",
        "cursor": {
          "ref": "8a6d8f9a-fd3e-4a7a-8f4a-dd7b92b747b0",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "aaabbd31-0114-45e5-ad6d-039ed4b8c977"
        },
        "item": {
          "id": "2b5a4373-4b30-45ee-a7b2-5f35a573f839",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "8ebc1ff9-9555-4de0-9c54-fe70c1423288",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fdf93d0-a340-4c69-8758-aa6287e256cb",
        "cursor": {
          "ref": "bf331235-f4c0-4bf2-a2d0-3101f24d7108",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "37865129-bb7d-4c92-b6ec-709cd2b7eea8"
        },
        "item": {
          "id": "2fdf93d0-a340-4c69-8758-aa6287e256cb",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "93469b6b-318f-4ff2-9684-fcc688f7688b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ece1d821-5d3b-4040-9cc6-45013c20f465",
        "cursor": {
          "ref": "4e0fd780-5c5b-4709-876a-174d13b795e8",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "0d69e1ac-7e03-469b-a883-32babc25126b"
        },
        "item": {
          "id": "ece1d821-5d3b-4040-9cc6-45013c20f465",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "f42fc62d-5f18-4616-b991-6a756d39f3f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc098490-6c8b-4299-b388-a644c3fd83a5",
        "cursor": {
          "ref": "10905fcf-a9eb-4da3-b3a1-4b894ee2c7a9",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "56b4d5d0-bec8-4050-9a14-c2ca332f77ab"
        },
        "item": {
          "id": "fc098490-6c8b-4299-b388-a644c3fd83a5",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "53ed6fcb-0b2f-4df4-a299-f1f49724b9de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e1c38ac-bd31-4ff2-80a6-606adebee4b2",
        "cursor": {
          "ref": "550dd8d9-35d7-4d1b-95d3-8166ec2f1d35",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "c6db9308-9994-4fea-8512-c4ec40ca1a83"
        },
        "item": {
          "id": "0e1c38ac-bd31-4ff2-80a6-606adebee4b2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "b4c3ba67-1722-41c3-9fb6-f32a5957ccc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "846063d5-42fa-4db5-b226-30643fb35a44",
        "cursor": {
          "ref": "c975ce89-ed8d-466f-ad4c-61f590c556d7",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "aa3b553f-e12f-461d-9d37-eebf7987c42f"
        },
        "item": {
          "id": "846063d5-42fa-4db5-b226-30643fb35a44",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "7402a851-900e-452e-b5dd-dde3fe6f2832",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9a1dfa2-823e-4783-9c63-589a07fb8788",
        "cursor": {
          "ref": "1ac8fdb0-0639-4162-bbce-6c7df8e73412",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "7979dcae-d358-4fc9-9beb-1c3155bb9855"
        },
        "item": {
          "id": "e9a1dfa2-823e-4783-9c63-589a07fb8788",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "7a4e28c2-2591-4881-a6eb-9bf6bb135759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27bd7259-5ce5-4e3d-9bc8-a01a91fa35db",
        "cursor": {
          "ref": "eb94629a-d668-4f6c-bffe-5c85d1d09d12",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "2099c8c7-fe95-41ad-bdc1-eaf20ae05987"
        },
        "item": {
          "id": "27bd7259-5ce5-4e3d-9bc8-a01a91fa35db",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "c46356f4-abb8-4dbd-9bf3-35cdd964af6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef0841af-7761-4fa3-8ec5-fd78c69b9338",
        "cursor": {
          "ref": "36150269-d1a5-4329-90d6-d585cd9ee830",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "a85329e9-d446-455a-8df3-d4e2191acca2"
        },
        "item": {
          "id": "ef0841af-7761-4fa3-8ec5-fd78c69b9338",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "0f80dcbb-fd7c-49af-8fc0-16d9ffcb3937",
          "status": "Created",
          "code": 201,
          "responseTime": 1941,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "a2ddcba5-ad52-4c8b-b3e7-41d3956dfa72",
        "cursor": {
          "ref": "9b304316-7e4f-4d04-9df3-6d4243aab25f",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "a5ce9c88-cb35-4c3a-aedc-e4aa7711b6f7"
        },
        "item": {
          "id": "a2ddcba5-ad52-4c8b-b3e7-41d3956dfa72",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "5f5e458b-e249-47a1-ae55-faab387d128a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bda8a38d-56da-408d-a28c-ccfaa336e45d",
        "cursor": {
          "ref": "8cea6719-4e09-4d2e-97b5-6cac376e3042",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "3814e056-1d55-4c99-932f-5f457c16df02"
        },
        "item": {
          "id": "bda8a38d-56da-408d-a28c-ccfaa336e45d",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "c3bb41eb-129d-47db-9154-9436f84e97ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88ea3542-ac41-4205-acb6-c9126e41f53b",
        "cursor": {
          "ref": "d4af83f5-f92f-4465-a382-52675ebe2b95",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "31b0430a-de00-41e8-bb33-63c34cd20db9"
        },
        "item": {
          "id": "88ea3542-ac41-4205-acb6-c9126e41f53b",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "160e8307-e6a0-48a1-bbee-cffc0e4d3022",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bd6687e-519b-4cf6-949e-2a39f448ad0f",
        "cursor": {
          "ref": "4a0d2adc-5406-4210-8e8d-161edb8dbe08",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "92b9cfee-f141-4ae5-871c-03c03ac10ee0"
        },
        "item": {
          "id": "7bd6687e-519b-4cf6-949e-2a39f448ad0f",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "d3256f8e-d702-49f0-bbc5-cac8732b73d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 918,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed15ea94-f5d5-4bfc-9c3b-bb500356e9eb",
        "cursor": {
          "ref": "3f06ad65-d726-4142-b495-db3dd6442455",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "c7053d7e-72c6-4342-9914-572da7cf8fbc"
        },
        "item": {
          "id": "ed15ea94-f5d5-4bfc-9c3b-bb500356e9eb",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "a6282bc1-6e4f-49ae-8736-f10f15d49756",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0724ce9-3a0d-4c9d-9663-12020f5f7b3b",
        "cursor": {
          "ref": "d11bba43-4017-4790-a335-f18b455276d2",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "8509e944-dbff-46ec-841a-16f1968dc6c5"
        },
        "item": {
          "id": "c0724ce9-3a0d-4c9d-9663-12020f5f7b3b",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "cbf60674-60fb-4842-a3ca-6784cf437152",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6003c525-f003-4f5e-a3b7-314a97648d3e",
        "cursor": {
          "ref": "5bd516f1-864e-4fa7-8494-aeaa7b135ca5",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "db2ec797-f0a3-40e6-aaaf-803329cc513b"
        },
        "item": {
          "id": "6003c525-f003-4f5e-a3b7-314a97648d3e",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "6a819dc5-eb6a-4d61-a96c-6c8822293eb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0922e8ca-be2c-4d17-b013-71d103a1f4cf",
        "cursor": {
          "ref": "1833a361-bf05-46a6-88e4-36ee86099b00",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "f50309dd-6ae9-4bc8-baa4-22fff3ee1855"
        },
        "item": {
          "id": "0922e8ca-be2c-4d17-b013-71d103a1f4cf",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "7094ecbe-5104-4a81-b89e-e436dc240586",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "add17e9f-d4de-43da-9491-ddcdff81627a",
        "cursor": {
          "ref": "e5c49b9b-af9f-4afb-ab5e-788c60e541eb",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "094cd8d7-f060-4e0e-9776-668a19addb7b"
        },
        "item": {
          "id": "add17e9f-d4de-43da-9491-ddcdff81627a",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "3c60d48b-8be0-46ea-9b43-af6ece94803f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef2dc4f6-0be0-4ea8-a65c-5fdf0506fc86",
        "cursor": {
          "ref": "ebdc9cac-63b4-4e6c-a7eb-564eeb4bce11",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "85e2141f-0c95-4886-8de9-4e5992013479"
        },
        "item": {
          "id": "ef2dc4f6-0be0-4ea8-a65c-5fdf0506fc86",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "6c892e2c-fa92-4e03-aa07-0b4565a61dcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "997a34a8-345d-41fc-8b42-b12911c4851c",
        "cursor": {
          "ref": "b5f92192-2778-4719-91d0-81cf9ead5cb1",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "ab344142-a733-4c90-bb45-6711202d0329"
        },
        "item": {
          "id": "997a34a8-345d-41fc-8b42-b12911c4851c",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "65aa4869-0361-4c50-8ec2-0277754b3f64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a02cf85-e22d-4f55-85bd-33f47b499866",
        "cursor": {
          "ref": "1a469210-f781-4564-9bef-bf58b1c0af95",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "616f79fb-b3cd-4c12-8d81-316f89f08751"
        },
        "item": {
          "id": "4a02cf85-e22d-4f55-85bd-33f47b499866",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "92e7b746-188d-4542-936f-a7c8d684c1a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67cf54be-3596-433b-a335-dd057a07fbc8",
        "cursor": {
          "ref": "af389940-d75b-436f-88f4-2e7fad091bd3",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "686f0ee7-f826-4957-9bfb-a6391d1f7952"
        },
        "item": {
          "id": "67cf54be-3596-433b-a335-dd057a07fbc8",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "342ee7d3-787d-49c6-a9e4-fa3f78557091",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "278a4bb7-ce54-41c7-ac4c-0406e35caa5c",
        "cursor": {
          "ref": "2f2dc323-899a-4987-8145-ad473977277c",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "f6933fbd-57fe-4372-bf03-427a2ea417f2"
        },
        "item": {
          "id": "278a4bb7-ce54-41c7-ac4c-0406e35caa5c",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "048a3f3c-ef97-4b47-b005-e308c84ec259",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2c31f53-1636-4e04-bad0-a29397b5f358",
        "cursor": {
          "ref": "87040a22-c5d0-4664-a184-4248c266c1ee",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "28ab068b-3e7d-4f12-ad44-16a8cc68d2e5"
        },
        "item": {
          "id": "b2c31f53-1636-4e04-bad0-a29397b5f358",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "98765d05-0c2f-4f51-88f8-fd6cd16d9d6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32da7e5c-0a24-4ea1-ac79-bf55c728e766",
        "cursor": {
          "ref": "658fad94-b870-438e-8921-7cf795f89e1e",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "8a764bfe-2537-4ffd-8ef3-930593748092"
        },
        "item": {
          "id": "32da7e5c-0a24-4ea1-ac79-bf55c728e766",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "32d33a93-e796-47c6-a710-d0906646a0bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "633cbbe7-7b83-4749-863d-d265712adf8b",
        "cursor": {
          "ref": "0deec589-79c9-444c-9f52-a0dfa22b16aa",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "e0951a70-dc4f-4880-ab37-8adc530711b6"
        },
        "item": {
          "id": "633cbbe7-7b83-4749-863d-d265712adf8b",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "9cdd6428-1009-4319-ad16-3b4c0a04a7c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93f95618-c90f-4cd6-ae01-1192c63e03ef",
        "cursor": {
          "ref": "d6cf6885-e3e1-4b82-8ad6-cf56f233a052",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "44b8eefc-d8c8-4e9f-a29e-d55124410f08"
        },
        "item": {
          "id": "93f95618-c90f-4cd6-ae01-1192c63e03ef",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "9da47a86-8dad-4e7c-9958-4f9381ba5b93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "941d86fb-938e-49ec-adac-217151f0a417",
        "cursor": {
          "ref": "a8d976a2-84b3-4ed5-ae5e-7db6afd110b0",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "a9d9e416-08c0-4e57-aa1b-a392dbad9d36"
        },
        "item": {
          "id": "941d86fb-938e-49ec-adac-217151f0a417",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "9640efd0-e74f-44ea-a7b0-9cbb67ee12e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0488c5c-c510-47b4-80fb-0dccd77fcf1a",
        "cursor": {
          "ref": "97c4f66c-2eb4-4a62-86db-493a3df7434a",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ee76d98a-fa46-44d6-ba48-0782e6daab50"
        },
        "item": {
          "id": "b0488c5c-c510-47b4-80fb-0dccd77fcf1a",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "ed7a6038-f645-486b-93f0-80d13578e32e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5048c7d7-226d-4f46-880d-0185064a8fd0",
        "cursor": {
          "ref": "7a41cae5-da13-466f-83f3-a2708a9c8478",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "7886da47-a5eb-4eb9-822d-c0b3438659b6"
        },
        "item": {
          "id": "5048c7d7-226d-4f46-880d-0185064a8fd0",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "32d6f056-c11f-45ac-ac75-d444081b9423",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b00231c8-c0cc-4eb5-bea0-a210189324ef",
        "cursor": {
          "ref": "1aa2cd11-80b6-4234-a96f-b5d2050e1b56",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "c3a64e5a-a038-4a13-925b-0cd39b153a12"
        },
        "item": {
          "id": "b00231c8-c0cc-4eb5-bea0-a210189324ef",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "630f45bd-587a-4059-9265-e1cfff50d9bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a551ad81-925d-44f3-ae14-b5d7ee4294c7",
        "cursor": {
          "ref": "0782557c-5043-4d6b-9149-ab639351002c",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "5e38b217-5ba2-4016-ad0b-6fc54f266f15"
        },
        "item": {
          "id": "a551ad81-925d-44f3-ae14-b5d7ee4294c7",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "16828bf7-988f-433e-9389-ce1af0848dec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66dbd9e2-a2af-4957-8c34-8ece8e7a6a36",
        "cursor": {
          "ref": "6eb796d3-0214-4340-979a-4459bfd0911d",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "4ba12c6f-a2ba-441a-9126-94d2ba84c343"
        },
        "item": {
          "id": "66dbd9e2-a2af-4957-8c34-8ece8e7a6a36",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "a9c54cae-d5ac-4478-84a9-b09e81532194",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f6bf715-2ae3-4739-a6c5-08677ad8f257",
        "cursor": {
          "ref": "7336fd88-f24a-492b-952f-c9f5f6e4d793",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "2fa59fe0-354d-4e38-bf2a-3aab84e94799"
        },
        "item": {
          "id": "5f6bf715-2ae3-4739-a6c5-08677ad8f257",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "fc22cc8b-7d59-445e-91a0-2b779d2f35c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c17d6f6-2441-48ac-846d-574b6690e604",
        "cursor": {
          "ref": "2adfb36c-b0d7-4b0e-a610-6542b7b21ae3",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "22635c50-d03b-4dbc-bc56-e945f560de40"
        },
        "item": {
          "id": "5c17d6f6-2441-48ac-846d-574b6690e604",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "e99ba26a-f616-4899-852b-0b8471eee070",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06536177-0b93-49b3-98a1-2e8d5f79bed5",
        "cursor": {
          "ref": "6832b3e6-8a24-4a7e-a538-e1d20ebf4041",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "29afc785-9742-425d-85dc-e8344a94c556"
        },
        "item": {
          "id": "06536177-0b93-49b3-98a1-2e8d5f79bed5",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "f13f9d4f-02d8-4399-a686-7cd45505c645",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3118da54-78ab-4b5a-92a9-e9ad70b39a99",
        "cursor": {
          "ref": "40907854-65b8-4a99-b306-88ed33d60b8f",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "04180b39-8526-4815-bf73-5d47e11418d3"
        },
        "item": {
          "id": "3118da54-78ab-4b5a-92a9-e9ad70b39a99",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "178c61dc-adb2-432c-ae71-92ce972c39c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0aaade5-9bf4-4796-920f-a35768b616ac",
        "cursor": {
          "ref": "ba77ed23-e832-4a14-a390-dbed1be079f8",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "89f3c312-3b22-451b-8ae5-6f1956bf6cc6"
        },
        "item": {
          "id": "e0aaade5-9bf4-4796-920f-a35768b616ac",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "5440d7b4-8716-4cc3-a501-eca45303bc89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abd2896b-bcf1-4186-9058-56857b9cced5",
        "cursor": {
          "ref": "869c0006-f814-4c12-b3ae-15fd402db3bd",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "a4647f2c-1014-4888-8287-2dc343ae1db2"
        },
        "item": {
          "id": "abd2896b-bcf1-4186-9058-56857b9cced5",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "f5e9b777-e0e9-4153-9765-e4cf8de202e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b60b91df-7002-4ccc-a4e7-10e10c68f5a2",
        "cursor": {
          "ref": "483065b2-d8ae-46d3-b7c6-0e24d97bc227",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "becefc9e-9992-41c1-b3e2-18de119ac1b2"
        },
        "item": {
          "id": "b60b91df-7002-4ccc-a4e7-10e10c68f5a2",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "5a5e333e-b546-4c68-85b8-42d14feb71bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "5aaf5254-3254-4bdd-a307-2ac563a473db",
        "cursor": {
          "ref": "5caacc43-bb81-4199-b8ef-bc4567963e93",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "851b7c21-839c-4ad3-adcb-828fcd69a6a2"
        },
        "item": {
          "id": "5aaf5254-3254-4bdd-a307-2ac563a473db",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "daf1caa4-57aa-450c-8463-b3f7ee9888be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "8f72105a-5b0d-4d63-8ccc-0feadfb672a7",
        "cursor": {
          "ref": "931c3d9a-9df2-49f4-a156-973c40e6195d",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "93268ca4-c89e-472f-bcd2-a0ed2dba8e01"
        },
        "item": {
          "id": "8f72105a-5b0d-4d63-8ccc-0feadfb672a7",
          "name": "credentials_issue"
        },
        "response": {
          "id": "75625261-7bf0-47d9-9ee3-3cb7e3c0d32b",
          "status": "Created",
          "code": 201,
          "responseTime": 3183,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "4344b3e0-0141-463a-b102-dabe70e23b5b",
        "cursor": {
          "ref": "256d5d4f-231b-40b2-8b35-b2040c8d4167",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "e36a7167-984b-4836-b39a-f5a44ea210b4"
        },
        "item": {
          "id": "4344b3e0-0141-463a-b102-dabe70e23b5b",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "719257c4-22bc-4d64-82e4-b78e9c6d2086",
          "status": "Created",
          "code": 201,
          "responseTime": 2293,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5107f3c-8663-4d16-9671-694b2279f47e",
        "cursor": {
          "ref": "6654352c-84e2-4846-8cce-811b3b459817",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "b92095e9-c131-4625-8975-7c8982abf9af"
        },
        "item": {
          "id": "f5107f3c-8663-4d16-9671-694b2279f47e",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "476feb45-089c-49fc-a909-4f1e2555e825",
          "status": "Created",
          "code": 201,
          "responseTime": 2287,
          "responseSize": 1007
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c36ed9b0-46e6-4ed7-8beb-b27d856e2879",
        "cursor": {
          "ref": "d4c01298-a03b-4b7a-b635-43f4c7e0d71d",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "34052552-e759-4edc-b013-a80ddeab01af"
        },
        "item": {
          "id": "c36ed9b0-46e6-4ed7-8beb-b27d856e2879",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "db7b2d74-289f-4d8e-b4b3-c5d8c1bc62b3",
          "status": "Created",
          "code": 201,
          "responseTime": 2465,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-03-01T00:46:46Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-03-01T00:46:46Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "7cee117b-a72b-4f9c-8b3f-93cfa7b0fc8a",
        "cursor": {
          "ref": "2c735baf-2940-4e22-b86e-8314c012935e",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "025d381b-7a5c-4e66-b16b-e63c18fc57a0"
        },
        "item": {
          "id": "7cee117b-a72b-4f9c-8b3f-93cfa7b0fc8a",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "fd594c90-f3a4-4b14-95bc-01d6ac0a3aff",
          "status": "Created",
          "code": 201,
          "responseTime": 2299,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4e7024e-6699-4ab7-9f06-a3144d4407ce",
        "cursor": {
          "ref": "025c5681-f2ce-44f6-9590-64facfec5b46",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "8c90d820-244b-4d33-bf05-8f840741faa9"
        },
        "item": {
          "id": "f4e7024e-6699-4ab7-9f06-a3144d4407ce",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "84e91fb4-c36c-4425-85c5-f5a9b7dca1db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4e7024e-6699-4ab7-9f06-a3144d4407ce",
        "cursor": {
          "ref": "025c5681-f2ce-44f6-9590-64facfec5b46",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "8c90d820-244b-4d33-bf05-8f840741faa9"
        },
        "item": {
          "id": "f4e7024e-6699-4ab7-9f06-a3144d4407ce",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "84e91fb4-c36c-4425-85c5-f5a9b7dca1db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ac95507-f3dc-46da-bef4-8d3574b32864",
        "cursor": {
          "ref": "9486ebce-486a-41f3-a025-9117add7982a",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "ec7f5837-79bc-42c2-89a0-0d4464ab7bb4"
        },
        "item": {
          "id": "4ac95507-f3dc-46da-bef4-8d3574b32864",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e4a0176d-e735-4d57-b308-a4672fdce318",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63220c12-85b3-4286-915f-ad8cd8efc8d2",
        "cursor": {
          "ref": "53a0c1f7-d6e7-4596-9340-3d31ab80a56a",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "6f93a1a2-dbd0-4567-a15d-a46044f6c886"
        },
        "item": {
          "id": "63220c12-85b3-4286-915f-ad8cd8efc8d2",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "e610cac3-cad3-477b-93e3-aa943618df78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a63affc4-ab95-47a7-ae75-158dd65874c1",
        "cursor": {
          "ref": "cec0a321-a97c-4f30-8c8d-fe7d86570af3",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "6d2bdaa0-0fa8-4192-bb6e-0df360f3a302"
        },
        "item": {
          "id": "a63affc4-ab95-47a7-ae75-158dd65874c1",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "568e7e9d-646c-4d45-bf24-599633feac7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff5064c8-1824-499f-857d-188082d31fdd",
        "cursor": {
          "ref": "61fbf0c7-b987-43d0-b56e-40f717ee1cb1",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "dab47cfb-b03b-4d51-959c-a845b94d43f7"
        },
        "item": {
          "id": "ff5064c8-1824-499f-857d-188082d31fdd",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "c32d94d6-32ad-46f2-906b-27f191043f22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7160beab-c342-4d5a-832e-120d7f5b41bf",
        "cursor": {
          "ref": "d1c34b70-d931-497e-b9a7-e3360471db64",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "cf582506-70ee-4260-abaf-a744fff894c7"
        },
        "item": {
          "id": "7160beab-c342-4d5a-832e-120d7f5b41bf",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f6c54e59-9c79-44ba-b4fc-7341b06ea827",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e69606f-f303-49b9-b891-7e2bf13d87f8",
        "cursor": {
          "ref": "53e64097-b777-4d0f-94d5-40082bf143a3",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "2f4e22fa-440e-4372-a7df-99ebc4f0437b"
        },
        "item": {
          "id": "5e69606f-f303-49b9-b891-7e2bf13d87f8",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "886d8c71-5efb-44d9-bb5c-96251d05b483",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af779863-a00b-4e5e-8938-1e2383460344",
        "cursor": {
          "ref": "60bf0ecf-aa13-4b69-b7b5-a4637c563dab",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "e5625c33-a69f-4064-bdec-8b54152938dd"
        },
        "item": {
          "id": "af779863-a00b-4e5e-8938-1e2383460344",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "8441793d-94c3-4f53-9be2-730dea741e70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "141cfd6e-5941-4f83-8ecd-ad130976fd76",
        "cursor": {
          "ref": "f76c2a92-7d65-48a0-9720-bb12c44f19d4",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "5f92ff40-120c-4812-b5ec-5b95ff584300"
        },
        "item": {
          "id": "141cfd6e-5941-4f83-8ecd-ad130976fd76",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b2af1a29-eea6-45c0-ae56-c3d03c02ff3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faadb628-40b8-442e-b4f7-56d5707c14dd",
        "cursor": {
          "ref": "025ceaab-7d57-4c48-a5e0-83dfe88e2afb",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "7362a7a6-38a3-4643-9789-80afcfa0d90c"
        },
        "item": {
          "id": "faadb628-40b8-442e-b4f7-56d5707c14dd",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "0e430b9b-9e84-40b1-98c2-12a201a4555b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50fcf8cd-35a4-41ab-89cd-b4ff5b472625",
        "cursor": {
          "ref": "7c1c54b2-cd5c-43c4-8be1-77b17c27b661",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "4148f8b6-a60c-4152-be21-699102e88e9d"
        },
        "item": {
          "id": "50fcf8cd-35a4-41ab-89cd-b4ff5b472625",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "e59487a4-408f-493d-b1b7-20edec3bd620",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "917076f5-45ba-4750-8627-3eebbd77bac0",
        "cursor": {
          "ref": "724b4a4d-dd26-416c-aaa7-3605d4950748",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "4eb7f372-06ea-4a1c-ada4-adc92f0f7179"
        },
        "item": {
          "id": "917076f5-45ba-4750-8627-3eebbd77bac0",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "4b782e75-4787-4cfa-ad45-4e4bbc6037ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b54ec0fe-d881-419b-9a0c-425887109925",
        "cursor": {
          "ref": "c8e827eb-3f55-4fbf-a9a7-12d97ea12845",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "78a09fff-5475-478c-80df-b33eeee88185"
        },
        "item": {
          "id": "b54ec0fe-d881-419b-9a0c-425887109925",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "583ab915-a019-4fa2-b652-570fae195ec2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1d051e8-b0b8-424d-8937-39344a9e8a13",
        "cursor": {
          "ref": "943c985c-dcf9-4812-80b2-f6cc142753b1",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "da0abfd6-d497-4a84-b20c-d6f8efa3883b"
        },
        "item": {
          "id": "d1d051e8-b0b8-424d-8937-39344a9e8a13",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ee2ab8d9-d22b-415b-90b3-fd0cf7590d9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb664234-6971-4621-9e6a-7c2bf4822b8d",
        "cursor": {
          "ref": "f8f7d149-eb02-4ef6-844f-b4cae96e3637",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "cce0bc0a-dad8-406c-b798-b8cd16e78e46"
        },
        "item": {
          "id": "bb664234-6971-4621-9e6a-7c2bf4822b8d",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f877ff7d-066b-4298-9e11-1135228251a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9407863c-7448-430b-a040-0bc9f7967891",
        "cursor": {
          "ref": "92b7b7df-c16e-4bda-834a-ba2d14ed4124",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "ed4ac4ae-2b51-498f-a352-a80783fa8339"
        },
        "item": {
          "id": "9407863c-7448-430b-a040-0bc9f7967891",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "1c5b2af3-0ee3-4196-a6ac-16e2999a8e0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a40eb31-88ce-4cc4-a44e-f1c790801250",
        "cursor": {
          "ref": "2a6d5859-2532-4835-8e9d-88d8de4ee36f",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "e16de180-f0a5-4965-a45b-c7600d97ced6"
        },
        "item": {
          "id": "7a40eb31-88ce-4cc4-a44e-f1c790801250",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "89c29be0-4e03-496a-b7c9-1229f1d0d76a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52d50c94-a4d7-46a9-ae24-aeb447162a6b",
        "cursor": {
          "ref": "04646e10-e2f4-4908-8a9b-9fff20d5b217",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "3f919c33-2523-4326-b1c2-db67fe199ed8"
        },
        "item": {
          "id": "52d50c94-a4d7-46a9-ae24-aeb447162a6b",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "cb98ae9c-d990-4f6b-b639-16fe03b29ac0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7e931fc-8226-4280-b0c2-2a8fc9da0d41",
        "cursor": {
          "ref": "e4e1131b-9dfc-48eb-9f7f-46696b68c390",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "552927a8-e374-45ca-b297-c35186208fc7"
        },
        "item": {
          "id": "f7e931fc-8226-4280-b0c2-2a8fc9da0d41",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "5b552635-6054-4ec3-8d73-04ad11e7f33c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8c22340-82d7-411a-a3cb-08ac2d7f03cf",
        "cursor": {
          "ref": "dbe54aab-7d39-4c06-8b4e-ef5a5861dead",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "222eff4b-1381-4a4b-9cdc-8317eee44a3b"
        },
        "item": {
          "id": "e8c22340-82d7-411a-a3cb-08ac2d7f03cf",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "92e0db6f-581d-411c-96d0-31ad1723b8a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35b16180-b980-4d15-8b9d-1f43d5e24648",
        "cursor": {
          "ref": "48d2ef27-0a0a-43d3-ab69-5890c7cf1a79",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "1317d669-cd0d-4ea2-b0b6-807524fbe3ee"
        },
        "item": {
          "id": "35b16180-b980-4d15-8b9d-1f43d5e24648",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "18ca24eb-9080-48a3-82d6-b842cec42266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ac227a6-34ab-4572-8b1d-6b476e0522fb",
        "cursor": {
          "ref": "12fbb4b8-0e1e-4bcf-a376-ed1a2771402b",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "eac831dc-c0dc-4caa-bb23-25f6266f9dc9"
        },
        "item": {
          "id": "6ac227a6-34ab-4572-8b1d-6b476e0522fb",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ee3c5e35-78f5-444e-9896-675fd3687b30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8943c38b-c3ce-45a8-bdce-3f52bcf0f71f",
        "cursor": {
          "ref": "739efc93-141b-4507-a7b6-39dab4eedc3c",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "5c7a54aa-86d3-46fa-b5a1-24fecb936aa0"
        },
        "item": {
          "id": "8943c38b-c3ce-45a8-bdce-3f52bcf0f71f",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "7fd9b81a-4b26-4f05-8438-09ce5a95f647",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e352f565-4f00-40ed-a91e-ee35fcb4c664",
        "cursor": {
          "ref": "07e32f7a-3701-4f12-a8d9-85975b794e16",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "7b063e7d-3d06-499f-9ae5-dceec9e1bde1"
        },
        "item": {
          "id": "e352f565-4f00-40ed-a91e-ee35fcb4c664",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b9534677-0519-406a-8ded-f8efd8bad915",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03e2dc24-e9ff-4769-8172-1d4a834994da",
        "cursor": {
          "ref": "1d3dee73-53e1-44b7-902a-bd9f4dc1ec13",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "a2d1d70f-ce68-40ea-8ce6-8579ad954806"
        },
        "item": {
          "id": "03e2dc24-e9ff-4769-8172-1d4a834994da",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "dcf485f9-648b-4df5-b092-a867c1e071f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbd043cb-36d2-44a2-91a8-d5444eb18cf0",
        "cursor": {
          "ref": "a7be124c-7b3a-4909-a33a-0a1b5c2ae844",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "1dc95368-9dd5-4fb6-941e-548122d6a27a"
        },
        "item": {
          "id": "fbd043cb-36d2-44a2-91a8-d5444eb18cf0",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "61e04216-71c5-4ea3-a545-b3c87249bb11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5450ef75-6389-42fc-9db1-0c25177e31ee",
        "cursor": {
          "ref": "5148f3f5-08ea-467c-bddd-cde29a70d20e",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "b3f73602-7eb7-4737-8509-71a33355343d"
        },
        "item": {
          "id": "5450ef75-6389-42fc-9db1-0c25177e31ee",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "2ce8dbd7-287a-4abc-bc21-7faf232ee3e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9a7acc3-a8fc-448f-9f46-2b448f809bf9",
        "cursor": {
          "ref": "270fec02-8e67-4cf1-b6dd-c19cc0cc5dbd",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "d01100f3-c200-482b-a408-3bf24d971086"
        },
        "item": {
          "id": "e9a7acc3-a8fc-448f-9f46-2b448f809bf9",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "5d2a81e3-55af-43b3-8b2c-8179b93aee2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62c8fb01-5e2d-4d8f-bd68-2a8376dfb0e8",
        "cursor": {
          "ref": "90168e6b-c680-45ed-a575-a17344c62b4e",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "ae1e2716-1740-48d7-9c26-4a2d7cdc7918"
        },
        "item": {
          "id": "62c8fb01-5e2d-4d8f-bd68-2a8376dfb0e8",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "d846918e-dd8f-4273-a28b-53811e693b8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0af7dafe-4308-4e67-bbde-ee6d58d642c8",
        "cursor": {
          "ref": "61fcc290-e41e-45e6-bb24-b9dc3cd26d30",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "ff6eecda-9fdd-4ee6-b4fd-a40d90cb96f1"
        },
        "item": {
          "id": "0af7dafe-4308-4e67-bbde-ee6d58d642c8",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "b3d38e0f-f029-40a0-85ad-06f0b9939ced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fb3bff1-8cdf-4cd1-91b4-03d12065860c",
        "cursor": {
          "ref": "a5af59dc-4b94-49ae-9032-93c97576849b",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "4a6f7c49-317c-45cf-88c7-336e5f05e8c5"
        },
        "item": {
          "id": "1fb3bff1-8cdf-4cd1-91b4-03d12065860c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "5bcb6560-4fbf-42c1-8ea9-176b0ea35ba7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d79e8f2-2c02-45f2-a5a5-e0e99c861b0a",
        "cursor": {
          "ref": "5165606e-441a-4768-b202-0e0afd2abd79",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "d4c35a18-1e6a-4d94-a2bc-a22b2ffd22f9"
        },
        "item": {
          "id": "6d79e8f2-2c02-45f2-a5a5-e0e99c861b0a",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "92b4ff1f-18e3-450a-93bf-5d2816e2f43a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a36c8a27-da2e-4278-81ae-778628c8c94c",
        "cursor": {
          "ref": "8fa5e940-0c3c-468b-aa1b-0bb3c81a066a",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "b68c5b63-11a8-4284-8796-dfd22e10cdba"
        },
        "item": {
          "id": "a36c8a27-da2e-4278-81ae-778628c8c94c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "6aa874e7-3e0c-4e89-9068-01050e4e0236",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "5f28a140-1b96-4225-b711-87a6696311d2",
        "cursor": {
          "ref": "04da3117-4b24-47ab-b109-beab4e19c6f0",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "130c4e2b-dcc3-4303-a0be-47cdd356b891"
        },
        "item": {
          "id": "5f28a140-1b96-4225-b711-87a6696311d2",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "f07e2d3b-020b-4900-8edb-e1e48629a592",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "98f49009-aa2e-4e39-9cd5-f9a42bd2fe5b",
        "cursor": {
          "ref": "428695ab-ddda-4ef6-922f-e67da032474e",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "f63f84d4-db53-4d4c-8e10-a40a28f6a865"
        },
        "item": {
          "id": "98f49009-aa2e-4e39-9cd5-f9a42bd2fe5b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "68f51909-2444-49d4-ad83-ebfda194b364",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98f49009-aa2e-4e39-9cd5-f9a42bd2fe5b",
        "cursor": {
          "ref": "428695ab-ddda-4ef6-922f-e67da032474e",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "f63f84d4-db53-4d4c-8e10-a40a28f6a865"
        },
        "item": {
          "id": "98f49009-aa2e-4e39-9cd5-f9a42bd2fe5b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "68f51909-2444-49d4-ad83-ebfda194b364",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96fd5626-b905-49f1-9dc3-51f7e2f2ccb8",
        "cursor": {
          "ref": "a0dfde8c-c6e8-4f61-8b4a-9cf20304fe25",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "8da2b4bb-4b4d-449f-aed8-eeedabc7fc73"
        },
        "item": {
          "id": "96fd5626-b905-49f1-9dc3-51f7e2f2ccb8",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "6c8da187-3dbb-4688-afdf-c0ec266659c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7566c27-cee5-4ee3-a9e0-f8c1445ae4bd",
        "cursor": {
          "ref": "ea86fea7-1967-4d4e-9724-599b1e587d9f",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "e0af3f61-703b-4325-bbc8-79dd74956a6e"
        },
        "item": {
          "id": "f7566c27-cee5-4ee3-a9e0-f8c1445ae4bd",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "2ffb8857-e85e-4f0a-8264-a855c10bde4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6058948-48ac-4741-9165-d8d2c463c4ba",
        "cursor": {
          "ref": "85a2c10d-dbf6-46fa-a3da-46a389c9a9fa",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "7ce644fc-2f30-4a1a-8138-7d70c7e0a286"
        },
        "item": {
          "id": "d6058948-48ac-4741-9165-d8d2c463c4ba",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "f2ac3f50-6dc5-4fd3-8dfc-6dff90ef2d78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70368c82-fa56-4ebd-a292-bf90095258dc",
        "cursor": {
          "ref": "0c9e66c5-7849-4131-8c84-9e9e662d41eb",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "ed0ab6c8-2ccd-4ac1-b6b7-18511e4eeeea"
        },
        "item": {
          "id": "70368c82-fa56-4ebd-a292-bf90095258dc",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "fe535c8b-1ea9-402d-b53a-0cff5ddff68d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5184444b-ce1c-4592-9e58-069c6a9a7c83",
        "cursor": {
          "ref": "3e3f0ae3-20ec-4d16-8fd4-1364609cb609",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "8df7a6c6-b581-4abd-9868-ade4eeaa67e6"
        },
        "item": {
          "id": "5184444b-ce1c-4592-9e58-069c6a9a7c83",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "87eb4eae-3916-47f6-86e8-45ec546a34dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f9c4f7e-f8b2-426d-8bd7-a2d1d958f946",
        "cursor": {
          "ref": "05ef8a3b-216f-4741-adf5-41c7138dd329",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "b41e5bb9-9339-4ba4-b21e-bd1f26abbf64"
        },
        "item": {
          "id": "2f9c4f7e-f8b2-426d-8bd7-a2d1d958f946",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "5c7bd23d-073c-4847-93a0-5ba7a4051851",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6224396b-dc36-4616-919e-c348614fcbf7",
        "cursor": {
          "ref": "6d94dd2c-59d7-468d-a1c1-30e9bf156e5f",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "cc37895f-b92f-47bd-9046-c5cfe57385cb"
        },
        "item": {
          "id": "6224396b-dc36-4616-919e-c348614fcbf7",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "ba06fa82-e931-4715-9410-a83ad36c7808",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78648bc6-a6d9-41f4-aea1-1434efa526b5",
        "cursor": {
          "ref": "6617f822-01da-4ce1-9694-fcdc8a123f60",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "6de5132b-b4b6-4a3c-99a1-a19d9b34f3ed"
        },
        "item": {
          "id": "78648bc6-a6d9-41f4-aea1-1434efa526b5",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "ee553960-5301-445d-a051-539ce43108c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65edb666-d0e3-46be-bf41-2cd925b999d3",
        "cursor": {
          "ref": "0d06f2ac-37dd-49a0-851c-90478e1bcfda",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "2a384dea-eccf-48a9-9736-c35d5b0a598a"
        },
        "item": {
          "id": "65edb666-d0e3-46be-bf41-2cd925b999d3",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "8191e801-a086-4083-b2d4-46361680d2b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68d11a46-2e37-46bf-a007-2d8e662e14e3",
        "cursor": {
          "ref": "541b7cb7-6138-45d1-8618-ae184f430b06",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "8ef86f55-6d3b-4d43-a1bd-e5d0d785bc5d"
        },
        "item": {
          "id": "68d11a46-2e37-46bf-a007-2d8e662e14e3",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "2c36d527-f094-4081-b58f-7943f892adc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0266f0b-1cbb-4c0f-9bea-430d9185528a",
        "cursor": {
          "ref": "c0f3474e-f204-4af6-83ea-62a0eeed0146",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "59275099-bd36-4a8c-95e6-4208a528e888"
        },
        "item": {
          "id": "f0266f0b-1cbb-4c0f-9bea-430d9185528a",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "08799576-fad0-41cc-9f17-c87df22c6738",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90e9b17d-7545-4783-9569-da3ce374752d",
        "cursor": {
          "ref": "b7c87838-dee0-4e8c-b83c-a7642948357c",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "515ea783-181a-4683-9cc5-8a68f65c3078"
        },
        "item": {
          "id": "90e9b17d-7545-4783-9569-da3ce374752d",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "ab4e26d6-f8f8-4a1d-9b39-8901d3b31e48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7216d6dc-9e6a-4c73-b9a3-95ad840b8544",
        "cursor": {
          "ref": "f82f991b-5be4-4767-ba86-570357691505",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "620fda99-c7c1-4b3f-b717-cc0b9a41419c"
        },
        "item": {
          "id": "7216d6dc-9e6a-4c73-b9a3-95ad840b8544",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "55542970-974e-425c-be53-c8740f412799",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d72f334-e743-4780-9fa1-c0b85b5a1bb9",
        "cursor": {
          "ref": "50ec1752-5693-4921-9573-bb2907b7870b",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "cc8d1229-e1dc-4599-ad8d-9d17bcb71255"
        },
        "item": {
          "id": "9d72f334-e743-4780-9fa1-c0b85b5a1bb9",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "18c015dc-1ca3-4278-9132-240e7ca14468",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "421bd735-2c93-4870-b2ba-0423bafa533e",
        "cursor": {
          "ref": "1e5835ee-481e-4e86-94d5-f53c679b157f",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "de7927f1-dba8-4fe3-b062-5cfd9d733fae"
        },
        "item": {
          "id": "421bd735-2c93-4870-b2ba-0423bafa533e",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "ebce78c5-a886-41b6-9583-230f5de554e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4c736c7-fc03-483b-922a-02d0f6df05bc",
        "cursor": {
          "ref": "6699a0af-40c6-4276-b5cd-dd9f0bd50126",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "6dd7945b-c5d9-4fcd-b72a-57505ebe6890"
        },
        "item": {
          "id": "c4c736c7-fc03-483b-922a-02d0f6df05bc",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "c57d277b-5c48-43cf-8f38-2ea236b8a8ab",
          "status": "OK",
          "code": 200,
          "responseTime": 288,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "48e7191e-3636-479e-96f7-1536dfbf3e47",
        "cursor": {
          "ref": "b06b4278-3497-484d-a978-dcf15fa351ea",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "89f73575-fb16-4c5d-9249-d7f7abc044a8"
        },
        "item": {
          "id": "48e7191e-3636-479e-96f7-1536dfbf3e47",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "5cfd7d25-d43b-49da-8c19-f514003655a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45bc2fbf-dfe4-40af-a635-7ecff74bcfa3",
        "cursor": {
          "ref": "12f52ed4-9e1c-4fa9-ad5d-b60ef48a414f",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "c20b2250-a330-41dd-a991-6e7612ac6fd0"
        },
        "item": {
          "id": "45bc2fbf-dfe4-40af-a635-7ecff74bcfa3",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "4bba8d7c-e90d-4792-9abc-b423a3f0dac1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0ffdf45-de3a-4214-a5e4-7258217376d8",
        "cursor": {
          "ref": "c886a9b1-058b-41d4-bac3-ab868794205b",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "53e870be-7a44-4150-8e05-7b436f6e31fe"
        },
        "item": {
          "id": "c0ffdf45-de3a-4214-a5e4-7258217376d8",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "3ed67a5a-e5ea-45b2-bb68-e9244d6d97ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "921110f0-0d50-4096-a3ac-53a9bf2eb2bc",
        "cursor": {
          "ref": "498dce29-5615-4755-98db-ac02eec6b44d",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "f0c4143c-6a75-4bc5-91fb-408c47f036b2"
        },
        "item": {
          "id": "921110f0-0d50-4096-a3ac-53a9bf2eb2bc",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "65b555f1-cf56-4e70-a40f-ce25a4f5efbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dfa50ad-3ddf-411f-9ebf-e5962b9d9758",
        "cursor": {
          "ref": "428c91a5-22af-4bed-b0b5-7c3335fcbfa7",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "1d28550c-c852-485c-b31a-33e85866f484"
        },
        "item": {
          "id": "7dfa50ad-3ddf-411f-9ebf-e5962b9d9758",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "d5d466f8-3c6f-44b1-becc-59d2d6b5a090",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c58cf19-9aeb-4b84-86e2-2591941a235e",
        "cursor": {
          "ref": "d4c0d21c-97ed-47bb-97bf-2030a99c6e69",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "81c82cd1-6fc4-4c2b-aea5-ee646a84e1a2"
        },
        "item": {
          "id": "1c58cf19-9aeb-4b84-86e2-2591941a235e",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "8a8bda97-bc70-4c98-81dc-dd889d4e21e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2934b599-8246-46ac-aabe-08000e9dba94",
        "cursor": {
          "ref": "cb4c1aef-d783-409d-934d-396c77f9b62e",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "fcc12439-1f90-47a2-92f2-6f60330397b4"
        },
        "item": {
          "id": "2934b599-8246-46ac-aabe-08000e9dba94",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "501f8b24-f1a6-4071-8b0c-d92aa272c865",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac506ceb-f333-4b17-b6fa-a631c1c27319",
        "cursor": {
          "ref": "29b636a9-cb4c-46ed-bb5e-f5096a7b8d46",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "47254dfc-eadf-41ac-8044-5176b3d0b4e7"
        },
        "item": {
          "id": "ac506ceb-f333-4b17-b6fa-a631c1c27319",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "bdd188d3-6802-4332-ad96-d8205afcb96c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41e280b0-052f-4bc1-ad86-083a5d3f985a",
        "cursor": {
          "ref": "6abbab7b-25c9-4678-9105-218ee358604d",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "bb4a95d8-55d8-4656-b8e4-eb8f201180b9"
        },
        "item": {
          "id": "41e280b0-052f-4bc1-ad86-083a5d3f985a",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "e2e15565-73f1-4b6f-b6e8-fc4b908d1003",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "661e7b4f-33c8-4ad9-bbdd-79f2a3954ff0",
        "cursor": {
          "ref": "eee32b3b-c03f-49e4-83d8-d1d7daaf6ae9",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "b7bed459-5c82-4f1a-b7ed-eb968e4f598e"
        },
        "item": {
          "id": "661e7b4f-33c8-4ad9-bbdd-79f2a3954ff0",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "7fb20480-2897-4e47-9f8b-42df6a65cb62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89ab0459-c24b-442a-a75a-1d760193a4bd",
        "cursor": {
          "ref": "78a9be43-8723-4153-8aea-d7bab7494ec8",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "8ad980aa-84cc-418e-88ba-3cd1b67b78dd"
        },
        "item": {
          "id": "89ab0459-c24b-442a-a75a-1d760193a4bd",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "e472538f-5fdd-4746-904e-c003f98b95f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46410370-b4ab-448d-b789-0a94e58413ad",
        "cursor": {
          "ref": "1ae8931d-490e-46a4-bad5-5c58890d7a20",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "afe1d79f-6a2b-4939-88a6-8a4e718ec707"
        },
        "item": {
          "id": "46410370-b4ab-448d-b789-0a94e58413ad",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "205fe3be-ea06-49bf-abf9-ad0ca28f2a46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a3f0c86-3116-4192-a274-d2731e7d6953",
        "cursor": {
          "ref": "7f2a93a7-f479-4180-bb5a-238fc2576e52",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "039be4e1-4f32-4370-83e8-7f8470d8b061"
        },
        "item": {
          "id": "9a3f0c86-3116-4192-a274-d2731e7d6953",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "24f78b3e-def4-46ad-ab73-781426234ba5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5945b1cf-a0a6-4068-bd0e-82d9eefa70c5",
        "cursor": {
          "ref": "e856ddd9-14bf-49b7-933c-7f673db39768",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "d2be0ec9-551c-44ef-b870-993e9a0d01d2"
        },
        "item": {
          "id": "5945b1cf-a0a6-4068-bd0e-82d9eefa70c5",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "3e333df5-e192-400a-9b58-d3c227173444",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "875a9884-47c9-477d-ada4-09c718b49c1e",
        "cursor": {
          "ref": "25238914-3cf7-4826-bd4a-ccf403df15db",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "87b942a9-46dd-420b-b34d-e4b28aa30526"
        },
        "item": {
          "id": "875a9884-47c9-477d-ada4-09c718b49c1e",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "838fc611-716a-4bfb-b993-c8a9bec69f89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e72f2d10-cbb8-4074-966c-8dc5565db327",
        "cursor": {
          "ref": "7c4c3bfa-117e-477f-bfb0-d9ba2ca5c971",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "84e57e97-ceaa-4fcc-b550-84ebc1e008ee"
        },
        "item": {
          "id": "e72f2d10-cbb8-4074-966c-8dc5565db327",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "b6aa2762-590d-4199-a757-9d7e642b3359",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13f1400a-be5a-47c3-ad8d-291e3089492a",
        "cursor": {
          "ref": "63f7222f-367d-4902-9410-549baf15d244",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "a7f3335a-0361-4046-8023-bfe5372752ef"
        },
        "item": {
          "id": "13f1400a-be5a-47c3-ad8d-291e3089492a",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "b85bcdd8-42f0-4788-86b3-9c4998d51b9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ad73443-f596-475c-b09f-11ec1e5d1209",
        "cursor": {
          "ref": "ae3e8529-7076-4cad-8e05-f559ab7479ea",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "8800d6de-17cd-45e0-95c7-80fb3ddfe78f"
        },
        "item": {
          "id": "0ad73443-f596-475c-b09f-11ec1e5d1209",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "d5a08882-a53e-4556-9616-2f03da836c41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81cfb586-3559-449b-9bdc-0d2c5ac2a4e1",
        "cursor": {
          "ref": "b1309c5a-bbeb-47bd-9f6b-7e4e16213929",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "4ce9d7e5-eed3-48d8-8698-d82feb7cc075"
        },
        "item": {
          "id": "81cfb586-3559-449b-9bdc-0d2c5ac2a4e1",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "17a44f09-cb90-4734-b5ad-9136f0022efa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48abcfa5-2946-44f9-bde4-30445c66e9fc",
        "cursor": {
          "ref": "2de75c20-d35c-44f4-b426-1c3044ddb9f6",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "0d2df0be-b5e8-412a-9845-9c8ba99358bc"
        },
        "item": {
          "id": "48abcfa5-2946-44f9-bde4-30445c66e9fc",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "d7d69c89-d4f7-4cb6-9839-615cad29533a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90c0cb3e-dccb-413e-9c25-bed5c5c72a2e",
        "cursor": {
          "ref": "3119d800-2cc0-49d9-89e1-ad09e12d9d6a",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "45f34ba2-a23f-474f-93be-e16816f54894"
        },
        "item": {
          "id": "90c0cb3e-dccb-413e-9c25-bed5c5c72a2e",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "13e9df20-e4ba-408c-a9a4-fe4e8de667a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b45afa0-58e2-41fb-9bc9-f89cc3af29ee",
        "cursor": {
          "ref": "79f39d4d-4953-4085-8e61-5fdde7712c58",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "ec89d577-68a2-46ff-ae86-ead7c8985c8e"
        },
        "item": {
          "id": "8b45afa0-58e2-41fb-9bc9-f89cc3af29ee",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "cc382fe7-4a87-4243-8697-6839e8664e50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "461d0e85-cbba-4d2d-a246-a4f549c38eb9",
        "cursor": {
          "ref": "b9a35bd7-15b2-4888-a063-025229f4d7c2",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "834cabac-ba84-4f79-a325-2b59440aedfd"
        },
        "item": {
          "id": "461d0e85-cbba-4d2d-a246-a4f549c38eb9",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "7dea9b72-3e38-4768-a2fa-114c29b1997a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "833c3637-e004-4869-bddd-4103a861a762",
        "cursor": {
          "ref": "12177c3c-17dd-4112-b875-d3c0265e1518",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "98e87fb5-b5d6-4eb5-a74a-aefd631c7de7"
        },
        "item": {
          "id": "833c3637-e004-4869-bddd-4103a861a762",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "540e0a7a-ed40-4d6e-b718-1365420cbc54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aafcc35c-5c2d-43c0-b42c-134a6d788563",
        "cursor": {
          "ref": "bae415ea-f175-4b1c-a34b-6c43cab3978b",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "7b66ff74-9994-4015-9871-496e70316405"
        },
        "item": {
          "id": "aafcc35c-5c2d-43c0-b42c-134a6d788563",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "2bfc2b92-1738-495c-9889-b0b45143eb16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21770b6c-5429-4249-b7b2-2d57377f4012",
        "cursor": {
          "ref": "50b39876-8e4c-4958-a807-9904bf0cbf40",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "c42b2f42-80a3-4351-a42a-5ed72f8b8407"
        },
        "item": {
          "id": "21770b6c-5429-4249-b7b2-2d57377f4012",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "282d0d9d-1b21-4647-aa82-a854229297fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ee442e7-1b50-4d20-af39-65de930047f0",
        "cursor": {
          "ref": "e998f160-7db1-4d41-be9d-976090e8dae2",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "80ca84cb-7723-4fe1-a9e6-bed2942efb00"
        },
        "item": {
          "id": "5ee442e7-1b50-4d20-af39-65de930047f0",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "32035c31-2acf-4a40-86b3-0fee6615a31f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2fd3f9c-9b7b-4872-beea-a81753ab7b15",
        "cursor": {
          "ref": "0dd1a895-2a24-4ecd-9042-542a1036f685",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "5ee06cb6-cf7c-4489-9966-c09678c2c724"
        },
        "item": {
          "id": "e2fd3f9c-9b7b-4872-beea-a81753ab7b15",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "1d410e18-0236-4ae6-8ddf-c91dabaa509a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 214,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab23ac13-0167-44c7-ab5e-989b7895d1a5",
        "cursor": {
          "ref": "9d303c58-9e24-4525-a760-9585f818a1eb",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "b7c53c03-09f8-4dd6-8c42-6bcae4234643"
        },
        "item": {
          "id": "ab23ac13-0167-44c7-ab5e-989b7895d1a5",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "89e6cc0f-2733-44c7-a192-f34031502e7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0aa39bc-737d-438e-b298-e02feb09a5a6",
        "cursor": {
          "ref": "8d02c88b-6f35-4d2f-940b-d63905594fbb",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "6cdc6eec-fa34-4da5-afa4-e9c668bc00b3"
        },
        "item": {
          "id": "d0aa39bc-737d-438e-b298-e02feb09a5a6",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "8bb16661-e1ba-440e-8ef4-a04fbbbc5d16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f88527b-71d7-4ff2-b657-ec9c03229453",
        "cursor": {
          "ref": "254b5b42-c290-45a1-a481-d1bad2a0c39c",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "3144d47f-778b-43a5-9483-51238522c8ee"
        },
        "item": {
          "id": "2f88527b-71d7-4ff2-b657-ec9c03229453",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "9a067253-3f48-42fd-ae48-791405dab44b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a64c0d61-9c78-4f9b-9d0b-32afaf5b8ac3",
        "cursor": {
          "ref": "7be69507-0575-47c9-b758-82e10ce8a900",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "19159a9a-47d1-43a6-a81b-e4800a4fc6cc"
        },
        "item": {
          "id": "a64c0d61-9c78-4f9b-9d0b-32afaf5b8ac3",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "51f26119-df06-4693-aa21-164997183ec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a149cae0-0fa1-41c3-9424-285290f8e01a",
        "cursor": {
          "ref": "e7f66f3a-e4e9-400e-b654-c672722f189b",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "5989c9e9-5a0e-4061-8745-3e41581a562f"
        },
        "item": {
          "id": "a149cae0-0fa1-41c3-9424-285290f8e01a",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "816c8d32-db9c-47cb-8889-f4fbd77bbeda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20af3782-e557-4be6-90bf-9e7cecce957a",
        "cursor": {
          "ref": "1b3d9a65-7275-4c6e-8217-9b2df7caf2bf",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "20ee6fd0-e4c7-476c-a605-dfd774372df1"
        },
        "item": {
          "id": "20af3782-e557-4be6-90bf-9e7cecce957a",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "f1fdf40c-7c79-4c78-947b-a1150764fedb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dacf0ed-48c9-4ca8-af44-5029a51f4cb4",
        "cursor": {
          "ref": "30108eb4-d134-4213-b694-9c351f453916",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "2a299ca5-1c42-4b96-9bd1-8293470fdcab"
        },
        "item": {
          "id": "7dacf0ed-48c9-4ca8-af44-5029a51f4cb4",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "02fa337a-3642-4aaf-adf9-8721d6ad1e0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00d87d0e-7845-4b4a-9a41-d35fc27e1372",
        "cursor": {
          "ref": "f830dc11-2663-4d50-9a6f-de2a6a658723",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "837bb78b-66eb-4c55-80e9-2c2bb2d92583"
        },
        "item": {
          "id": "00d87d0e-7845-4b4a-9a41-d35fc27e1372",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "26f0cf62-8f8e-45f3-a02b-010dd70e1943",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e30f6cc4-dd83-472c-ac90-9f7a16b3a422",
        "cursor": {
          "ref": "11929998-c883-456b-9fd1-bf418b503b2f",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "44842a7c-5da1-48c9-a1b9-7a99af539cfc"
        },
        "item": {
          "id": "e30f6cc4-dd83-472c-ac90-9f7a16b3a422",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "fb9e2dec-0ce1-4786-84bb-70f745c2d61c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23cab3f3-8729-4473-8130-5ec8b122ae3f",
        "cursor": {
          "ref": "d021af38-10a7-4426-968c-d6466df8aca4",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "ebbbdfbc-707b-4a64-9c77-a38319925cb4"
        },
        "item": {
          "id": "23cab3f3-8729-4473-8130-5ec8b122ae3f",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "415ce376-c0ea-4d2c-a5a9-c3a4513681ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c22f27fd-8984-4669-a659-cc570e73a33c",
        "cursor": {
          "ref": "3396e7c7-3f37-4f42-9315-e562c4ef9a92",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "df7a7556-8b4a-4d8c-96fa-fdddf17a1f0e"
        },
        "item": {
          "id": "c22f27fd-8984-4669-a659-cc570e73a33c",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "9b103941-d503-410f-87cf-36baff4122e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "971e5480-7ce9-42b4-81d6-0c9a09149d6f",
        "cursor": {
          "ref": "40593cc9-d1bb-4671-8dba-c0e8bb260bd7",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "2ee2b053-f62d-4bf8-b797-665293b8eb13"
        },
        "item": {
          "id": "971e5480-7ce9-42b4-81d6-0c9a09149d6f",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "a1a54251-f0ed-4645-a0c9-aa8cb1cfa4b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82e6c8ce-261d-463d-809d-9b7e9f7d39b9",
        "cursor": {
          "ref": "3ae0bcdc-c9b9-44f2-8eaa-84f0e0f430d6",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "8d3ab6c3-1b1c-4c93-a38d-9eca27e3b754"
        },
        "item": {
          "id": "82e6c8ce-261d-463d-809d-9b7e9f7d39b9",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "78b13256-6bb1-46d1-8af6-f83a3785b044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07bc4df5-f931-4dd1-8ed9-f87549d9a17a",
        "cursor": {
          "ref": "02cdc5fe-6688-43b0-b66b-4debe1c5f044",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "faf91a55-c0a4-4cfb-a6f5-b5199adb36a5"
        },
        "item": {
          "id": "07bc4df5-f931-4dd1-8ed9-f87549d9a17a",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "fc23b992-8bd3-4622-85ab-4e163dba4d82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "187fd55a-9222-44ea-9236-668bed6e7932",
        "cursor": {
          "ref": "54cab734-c615-452c-9a69-cfafd8bf62d9",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "c6e33499-bc57-42a5-bb2d-de7f475bb65f"
        },
        "item": {
          "id": "187fd55a-9222-44ea-9236-668bed6e7932",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "83087b57-9499-495d-938d-b26a9e2f5d0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf562675-d5e9-4415-bac0-f3b4ece10fae",
        "cursor": {
          "ref": "94c17a57-013e-4c41-95fc-9e081544f088",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "38a0f2fe-d601-4678-a3f8-fbc5c4b46f0d"
        },
        "item": {
          "id": "bf562675-d5e9-4415-bac0-f3b4ece10fae",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "f5fb874b-9a89-453a-ad15-4ab97d3d20b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71ba5821-3778-4f8c-9a79-88abb0235a24",
        "cursor": {
          "ref": "4aee2c12-d2cb-41c7-be80-67041c2876c3",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "6ab36f6d-4b57-4300-a2ce-ab5a0c5cc79c"
        },
        "item": {
          "id": "71ba5821-3778-4f8c-9a79-88abb0235a24",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "e68d8494-4ab5-42b3-b5e5-f2450223efc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "629220ab-e1a3-458e-be56-9e47ced03e51",
        "cursor": {
          "ref": "cdc31af8-aa9b-4a52-953d-39b6a1f966a9",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "72b0af7a-41e7-4016-8ce9-0daeb0b10bf4"
        },
        "item": {
          "id": "629220ab-e1a3-458e-be56-9e47ced03e51",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "a83d4203-50e0-4a0d-bd65-0ac249987c1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad62b216-ee96-4fac-97f4-4aa84b14c1a9",
        "cursor": {
          "ref": "219de145-4e4c-449a-a135-8ff9dc338c4b",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "8ec1ba7e-f2e7-4004-ba9d-68c70cc5e93a"
        },
        "item": {
          "id": "ad62b216-ee96-4fac-97f4-4aa84b14c1a9",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "e37b1969-34b3-4c53-9756-74b60e23ef17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "797366c3-977f-4f10-a129-49986763834f",
        "cursor": {
          "ref": "76668951-6723-4346-98cb-3eda3f9e7db1",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "accfda7a-7dee-437e-8b20-bbb6d40c3731"
        },
        "item": {
          "id": "797366c3-977f-4f10-a129-49986763834f",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "bf916a94-154c-4b89-8571-222e02a1ad70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0883da00-815c-4e46-adc9-7d79d9051ee9",
        "cursor": {
          "ref": "3e3d89bf-067b-4e6a-986e-40b7f27412b6",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "9526f7d9-1252-44c7-9b7a-5b1e32922362"
        },
        "item": {
          "id": "0883da00-815c-4e46-adc9-7d79d9051ee9",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "6af85e82-a701-41d5-bb37-7a3456ddf96f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07ae57bc-7e24-40fd-9c64-cc6a8b12efa4",
        "cursor": {
          "ref": "56a91d08-0024-4136-9030-79abd2bfa39f",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "04b02383-0c74-443d-b0e4-1829e829aebb"
        },
        "item": {
          "id": "07ae57bc-7e24-40fd-9c64-cc6a8b12efa4",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "95be23af-4d1e-4c78-8c08-807082845550",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "670c1aac-f3de-4392-978a-ee306fec3717",
        "cursor": {
          "ref": "e464e538-6109-4c64-8ffd-dd54e66553da",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "40c5eef4-1fb7-481e-9388-0157d0eb3ebb"
        },
        "item": {
          "id": "670c1aac-f3de-4392-978a-ee306fec3717",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "1361a153-aef1-459a-b9d6-3ad2190f55d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9071792-8801-4774-94d5-9f0ca2ef9906",
        "cursor": {
          "ref": "6c1d687c-910e-4091-b197-e92821e05fd4",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "f27001fd-ca9a-413a-9356-109b4eddeb2d"
        },
        "item": {
          "id": "c9071792-8801-4774-94d5-9f0ca2ef9906",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "c46dbb94-bd10-407e-88a9-5d1de2626006",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58a91df8-9daa-48ea-95af-b1f704ef55f9",
        "cursor": {
          "ref": "58fe1b0a-5fb5-4941-a62d-4876f20ea25e",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "a7dd1e85-3ea0-4797-9fb3-90b4b9ccfaea"
        },
        "item": {
          "id": "58a91df8-9daa-48ea-95af-b1f704ef55f9",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "89bbc85f-f06f-413e-8266-6da7f8ef4e21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8c687b9-7b51-4ad9-995b-db4c61090dd4",
        "cursor": {
          "ref": "0998b5aa-902e-46ed-9de8-58b950cce7de",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "8661bd7b-a91a-4e7f-900e-a7037e0c4b0b"
        },
        "item": {
          "id": "a8c687b9-7b51-4ad9-995b-db4c61090dd4",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "0967f5cb-4a53-4794-b064-0906035ac1dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad3ee0f2-0a34-4ffc-99f6-4cc52df47136",
        "cursor": {
          "ref": "8e028a34-0c0e-4c16-b044-3b8928c51c97",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "d3f1e2a4-3538-4977-b9cf-be85053368d5"
        },
        "item": {
          "id": "ad3ee0f2-0a34-4ffc-99f6-4cc52df47136",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "4a96b342-24ba-439d-94c7-1e7c73e7e68e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33663c83-9f0f-4154-b286-bd24bcc8700d",
        "cursor": {
          "ref": "e0c4a32c-407e-48fb-858b-7965e7c442c9",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "c8359d17-fe72-4469-af01-5c3946250f6f"
        },
        "item": {
          "id": "33663c83-9f0f-4154-b286-bd24bcc8700d",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "30c4b06a-acb7-4d87-8af4-6da6de2f69a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "229b68c3-de27-49de-ab54-7e39dc99d0cd",
        "cursor": {
          "ref": "9f80a11a-28d7-407e-8f9f-0eefcc64ecfb",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "d0623ec4-a1d0-4b77-a851-e061667875d0"
        },
        "item": {
          "id": "229b68c3-de27-49de-ab54-7e39dc99d0cd",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "737d61c3-0de5-4982-aed7-a1593d3c9d47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4663812b-3506-4d38-9eae-ba2c4a176c5e",
        "cursor": {
          "ref": "e12e5fa8-af19-43b8-ab4f-d0a5c77e7d51",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "2c29152c-7dc9-4eee-bc61-298a9072b6f6"
        },
        "item": {
          "id": "4663812b-3506-4d38-9eae-ba2c4a176c5e",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "272f1075-d1d2-460a-a63d-ba05e4a6a80d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "550c9edd-4970-4fc2-bdd9-844cf3988906",
        "cursor": {
          "ref": "6f401a45-04c4-4648-8ded-1ca2a18d09c2",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "40294996-cf25-4bc1-aec1-eb1751e28e5d"
        },
        "item": {
          "id": "550c9edd-4970-4fc2-bdd9-844cf3988906",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "8f44202b-37c9-4cd5-9419-2ac756e2fa12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da1fa05e-31cd-43fa-bf36-9bdf40ff6a13",
        "cursor": {
          "ref": "b923d429-268a-4698-be67-5e3fa1556826",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "a11fa44f-fbcc-4813-8ce3-79c10888e37d"
        },
        "item": {
          "id": "da1fa05e-31cd-43fa-bf36-9bdf40ff6a13",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "a7bc8eee-dfb1-4805-afb1-59e8ba65c11d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b41f9807-7753-4d48-a63c-19e810e37e06",
        "cursor": {
          "ref": "ea2ac734-3535-416b-bbfe-2963a7a7ed90",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "f448a865-3a04-4a86-8933-deba7da1e4fa"
        },
        "item": {
          "id": "b41f9807-7753-4d48-a63c-19e810e37e06",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "f409efec-74d8-4e96-8a7d-b09809b9f448",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb9cc43e-9ef0-43ed-912c-d443d0ce25d2",
        "cursor": {
          "ref": "d931c78f-9052-4be3-a627-cf41c012c6f0",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "9e9a517e-ae22-4196-9d1e-826b8b741ae7"
        },
        "item": {
          "id": "fb9cc43e-9ef0-43ed-912c-d443d0ce25d2",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "7db7385d-57c8-4d98-9e1d-56ae24b40cf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "406d19dc-2514-4155-8f7a-19f39f0da777",
        "cursor": {
          "ref": "164c58f4-0494-4ba4-a9b4-bc835cefcf3c",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "38c9221e-c933-4838-a16b-fafa81e928c9"
        },
        "item": {
          "id": "406d19dc-2514-4155-8f7a-19f39f0da777",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "37c27a6d-45cb-4728-bfc0-1abc036a18a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0048e1bc-162c-43eb-b5c8-c37c5b6a06cf",
        "cursor": {
          "ref": "23fd0fee-026b-463e-90e8-3beb4fcb92c1",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "475e1d6a-d6fe-4b2b-848e-88645caa5f75"
        },
        "item": {
          "id": "0048e1bc-162c-43eb-b5c8-c37c5b6a06cf",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "272519c5-10f7-4daf-a286-8028d194b375",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "202e51e5-550f-4952-b820-da25fb571e65",
        "cursor": {
          "ref": "b22da328-109c-48ed-8013-2c549299fdd2",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "69a0fefb-8123-4105-9e09-52e573c2315a"
        },
        "item": {
          "id": "202e51e5-550f-4952-b820-da25fb571e65",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "5d71318b-00ba-4d20-8590-d34e86d3b697",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebd0d16e-8bc1-499b-9266-9ee3bbbe0c80",
        "cursor": {
          "ref": "d24c49e1-e1ed-4793-b0c0-8ec090f9d32a",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "307e78f6-490f-46df-88ff-f2787f41014f"
        },
        "item": {
          "id": "ebd0d16e-8bc1-499b-9266-9ee3bbbe0c80",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "e21449c6-3948-4ecb-8042-09dcba0a6362",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "104b1419-c5de-4300-b5f5-9e73b6c2b067",
        "cursor": {
          "ref": "662da8c5-2f42-4160-b238-eeddedba9708",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "9fad06a5-90fe-44d7-b40d-9ba483150756"
        },
        "item": {
          "id": "104b1419-c5de-4300-b5f5-9e73b6c2b067",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "9dba9602-c5ee-4d2f-8ff7-b19e5ec29e43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7700397f-a2f5-4db8-a336-f4761b77f20e",
        "cursor": {
          "ref": "bc226982-0f7c-4ada-964a-93f940ced4db",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "1fbd8d11-f7be-4e99-a920-a5217bc20fe8"
        },
        "item": {
          "id": "7700397f-a2f5-4db8-a336-f4761b77f20e",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "cbc05e34-8286-4004-9bad-a66d0959edd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78581024-0871-4371-9f1a-dfcc53970c9c",
        "cursor": {
          "ref": "1f68b6dc-9a88-452b-a49f-9733c23c0ece",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "0a14fe3c-6a54-4dc4-9c69-b79b639d7430"
        },
        "item": {
          "id": "78581024-0871-4371-9f1a-dfcc53970c9c",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "b7f3a9df-00da-4543-b943-49dab5d54f69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "906b031f-9887-438b-8662-9c70ef655d19",
        "cursor": {
          "ref": "f09e4bdb-d927-4755-bde8-a515cf2fb40d",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "3b3ea571-c8e1-47d1-b69a-9b8c6c1842f8"
        },
        "item": {
          "id": "906b031f-9887-438b-8662-9c70ef655d19",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "862899f3-1d60-417b-9f94-56422d25e63c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40addd0f-05b1-4314-9aff-7d98dac3b2d1",
        "cursor": {
          "ref": "265a441d-2719-4ac1-9841-9158c6049080",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "96fffd95-34de-401f-b0ee-28f52c121985"
        },
        "item": {
          "id": "40addd0f-05b1-4314-9aff-7d98dac3b2d1",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "90003d32-1ace-47c1-810d-cffbd3c1d400",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ef8c95c-ed47-44e2-b3a8-f602967f72a6",
        "cursor": {
          "ref": "3936123e-32d6-4bb2-aac9-a4022ccfe3f7",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "e9b0a808-79b6-40fb-9db1-87aa5966a216"
        },
        "item": {
          "id": "9ef8c95c-ed47-44e2-b3a8-f602967f72a6",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "bcc5f16f-ad52-4068-99cc-c0256e0a24b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0aee40d-9456-40f4-a26c-5aa7fc589ae9",
        "cursor": {
          "ref": "85fb1878-8141-491e-9a5a-0b6479ed717e",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "2f9f649c-452a-4c47-b829-ed13ca82eaa5"
        },
        "item": {
          "id": "c0aee40d-9456-40f4-a26c-5aa7fc589ae9",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "19c7bc51-4288-43b7-bc86-9ee84e3d4693",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bb55194-65d5-4574-a0fe-0b89b608d33e",
        "cursor": {
          "ref": "d9cea566-78be-4215-8476-da893742e8e2",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "aef00f94-aee5-4c13-807c-a5f2646a65e9"
        },
        "item": {
          "id": "9bb55194-65d5-4574-a0fe-0b89b608d33e",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "0bc29168-b6f1-4e1c-8aeb-d076f62246d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71d06398-2878-487a-93e5-6f38aed742b4",
        "cursor": {
          "ref": "0824b808-a691-4e56-b759-13a4ced4955b",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "412aecd3-62bf-43f3-b446-d5a2cfe7def5"
        },
        "item": {
          "id": "71d06398-2878-487a-93e5-6f38aed742b4",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "3a10fd14-8f1e-42c8-a3e4-18604a24630a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "086b00f6-5ad3-4a50-a23f-944eba332b05",
        "cursor": {
          "ref": "9ea781be-e636-4ad0-85c3-1ef8f79b6b29",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "48a72563-de57-4835-a45a-eae6cbd1b44a"
        },
        "item": {
          "id": "086b00f6-5ad3-4a50-a23f-944eba332b05",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "670afc61-2d8d-4c9e-82cf-275b11b2cda0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d1cd481-8b88-46a2-b8d3-1048634362dc",
        "cursor": {
          "ref": "b20bafed-d225-4616-bb2e-79663d345bb1",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "aa13abd7-b583-4665-a203-fb7b1de400da"
        },
        "item": {
          "id": "2d1cd481-8b88-46a2-b8d3-1048634362dc",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "d16bfa7a-a394-44a3-a3f2-8a2b69d6bc89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09b82e88-3791-4756-8e8a-f66420d1fb34",
        "cursor": {
          "ref": "54bc8b7c-8ec2-433c-9a70-4bc2800af34a",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "ced3087c-25d8-4f47-b176-e387dfd38b81"
        },
        "item": {
          "id": "09b82e88-3791-4756-8e8a-f66420d1fb34",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "16d4200f-85b6-4392-b284-7cb95faa9fc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc1fea22-fb2d-40a0-8c2f-cbe253dae323",
        "cursor": {
          "ref": "bd24f471-8973-4d89-a9f2-cf1278685e3e",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "329b99d2-bd4d-4951-a434-46f893697106"
        },
        "item": {
          "id": "bc1fea22-fb2d-40a0-8c2f-cbe253dae323",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "f9397095-08c2-493f-b7a6-38eadafe590d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ea6a528-8aef-405f-b4c2-77a10c5f97b9",
        "cursor": {
          "ref": "41817f7d-5a16-403d-bb2f-3f2c768d7389",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "1f05cb98-c2be-4c1e-8c83-d0738dec3036"
        },
        "item": {
          "id": "2ea6a528-8aef-405f-b4c2-77a10c5f97b9",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "2465ed93-d1f5-407f-9308-f709cd656aaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "089ecfee-2cdb-45d5-bda8-1bb40f236132",
        "cursor": {
          "ref": "f3387fea-444b-48f1-b420-77fc0e983bc6",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "f07f62d6-e6cf-415c-b5cd-8e365fd0f943"
        },
        "item": {
          "id": "089ecfee-2cdb-45d5-bda8-1bb40f236132",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "6d8f6ca4-91f8-4880-bb74-dca94a7bb345",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "d03b5bc9-912d-4032-a1d6-6699716a31ca",
        "cursor": {
          "ref": "a39fb0a6-bb7c-41d4-b0a4-b416ccb92a5e",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "91dcaf60-e002-4ea3-9700-6dfbb1d6f481"
        },
        "item": {
          "id": "d03b5bc9-912d-4032-a1d6-6699716a31ca",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "5fcfafcc-db21-4ead-8618-378a791859ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "2107391e-27a7-4fd9-9332-1bbd6f4b65b0",
        "cursor": {
          "ref": "f0b28346-a408-43b0-92a9-4c7226a7f348",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "a05187ba-8422-4472-af0a-55397ce09bbe"
        },
        "item": {
          "id": "2107391e-27a7-4fd9-9332-1bbd6f4b65b0",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "44948562-58cb-4181-8b17-0b82e9b94462",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc5d0421-0970-48a6-ab15-b1bcfb101e88",
        "cursor": {
          "ref": "fd829d72-f7c8-4a22-8a1e-feb8efc77d77",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "b7b754a1-72ad-44b7-8d5d-0c48d3f446a1"
        },
        "item": {
          "id": "bc5d0421-0970-48a6-ab15-b1bcfb101e88",
          "name": "credentials_verify"
        },
        "response": {
          "id": "40022dcb-cfd2-44f9-8a24-82bf82a731d7",
          "status": "OK",
          "code": 200,
          "responseTime": 2463,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e995c056-7767-4651-965c-b1a08f946f17",
        "cursor": {
          "ref": "35e54548-1db8-4c74-8780-71e9e8b627c9",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "a346d2aa-81b1-444a-876d-814c7e2f0b57"
        },
        "item": {
          "id": "e995c056-7767-4651-965c-b1a08f946f17",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "faa759ad-21e2-4952-8b1f-e24ec12a0617",
          "status": "OK",
          "code": 200,
          "responseTime": 3447,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4124011-49e6-4f05-b09e-6c36cfa3df44",
        "cursor": {
          "ref": "ce50d528-a34e-4595-85fb-639f00ee4ab6",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "6686b416-f27a-4578-b9a4-177ae4381b0d"
        },
        "item": {
          "id": "b4124011-49e6-4f05-b09e-6c36cfa3df44",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "deecc640-207d-42d2-a0d9-d41b9596a409",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "b4124011-49e6-4f05-b09e-6c36cfa3df44",
        "cursor": {
          "ref": "ce50d528-a34e-4595-85fb-639f00ee4ab6",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "6686b416-f27a-4578-b9a4-177ae4381b0d"
        },
        "item": {
          "id": "b4124011-49e6-4f05-b09e-6c36cfa3df44",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "deecc640-207d-42d2-a0d9-d41b9596a409",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "b4124011-49e6-4f05-b09e-6c36cfa3df44",
        "cursor": {
          "ref": "ce50d528-a34e-4595-85fb-639f00ee4ab6",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "6686b416-f27a-4578-b9a4-177ae4381b0d"
        },
        "item": {
          "id": "b4124011-49e6-4f05-b09e-6c36cfa3df44",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "deecc640-207d-42d2-a0d9-d41b9596a409",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "22f4d6e6-469c-454a-bccc-139302ccaa2a",
        "cursor": {
          "ref": "c4677530-317b-4f87-ba30-e7ff073af401",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "271f871d-4675-4bdb-ba57-12b9f52d21f7"
        },
        "item": {
          "id": "22f4d6e6-469c-454a-bccc-139302ccaa2a",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "428ab41f-828d-4f64-9f87-45180bb13592",
          "status": "OK",
          "code": 200,
          "responseTime": 47,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "14802a9e-ae8d-4b09-862b-af64aef813ae",
        "cursor": {
          "ref": "0c4442c8-4ea2-4e8c-a7fe-00729af89bc4",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "ccba0ab5-4530-43d8-ba23-f0246ae52667"
        },
        "item": {
          "id": "14802a9e-ae8d-4b09-862b-af64aef813ae",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ef051fe5-aa20-45ec-9c35-40806e6466c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "14802a9e-ae8d-4b09-862b-af64aef813ae",
        "cursor": {
          "ref": "0c4442c8-4ea2-4e8c-a7fe-00729af89bc4",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "ccba0ab5-4530-43d8-ba23-f0246ae52667"
        },
        "item": {
          "id": "14802a9e-ae8d-4b09-862b-af64aef813ae",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ef051fe5-aa20-45ec-9c35-40806e6466c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "326b1af6-93fb-4a22-a799-dfeb91b174f0",
        "cursor": {
          "ref": "00f390e6-0d13-49f8-80a7-9a88dbe15ef9",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e3745826-477a-4c03-be2a-0f8f80931a52"
        },
        "item": {
          "id": "326b1af6-93fb-4a22-a799-dfeb91b174f0",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "e8d79af4-7e98-42b3-a3ea-dc853202fa30",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 97,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "574f5be4-412e-4dcc-bbf8-50cead488497",
        "cursor": {
          "ref": "219a1650-ee43-4e33-ada8-87c3a27ccbf9",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "16326686-0651-4b38-b1ae-d905e625be0b"
        },
        "item": {
          "id": "574f5be4-412e-4dcc-bbf8-50cead488497",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "a0438ead-5e48-4d34-a835-90263b541eee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "574f5be4-412e-4dcc-bbf8-50cead488497",
        "cursor": {
          "ref": "219a1650-ee43-4e33-ada8-87c3a27ccbf9",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "16326686-0651-4b38-b1ae-d905e625be0b"
        },
        "item": {
          "id": "574f5be4-412e-4dcc-bbf8-50cead488497",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "a0438ead-5e48-4d34-a835-90263b541eee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "571e1ed1-33c3-4a9e-ad02-b42c988a4687",
        "cursor": {
          "ref": "b09bfcd7-46e9-49b6-a9a2-8e5747c1152e",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "ae9d6a6e-e0ea-4a8e-9d4f-526affb3cdf8"
        },
        "item": {
          "id": "571e1ed1-33c3-4a9e-ad02-b42c988a4687",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "86279238-0ed8-4e2a-9f2b-599d15c598e0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 81,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      }
    ]
  }
}